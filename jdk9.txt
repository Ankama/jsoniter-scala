[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Jan 26, 2018, 7:54:11 PM
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}core...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}macros...
[info] Done updating.
[info] Updating {file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/}benchmark...
[info] Done updating.
[info] Compiling 4 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:809:63: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:346:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:354:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] three warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.6.0-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.6.0-SNAPSHOT.jar ...
[info] Compiling 32 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:12:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "bd");
[info]       private def d1(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bd");
[info]             out.writeVal(x.bd)
[info]           };
[info]           {
[info]             val v = x.os;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("os");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val anyRefsCodec: JsonCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:13:52: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private val v2: Array[Int] = new Array[Int](0);
[info]       private def d2(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d2(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = d3(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e2(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: Array[Array[Int]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               e2(x(i), out);
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.aa;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("aa");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.a;
[info]             if (v.ne(null).&&(v.length.>(0)))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("a");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val arraysCodec: JsonCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:71: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decode(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encode(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[BigInt], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bigIntArrayCodec: JsonCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:55: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.bs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("bs");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mbs;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mbs");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val bitSetsCodec: JsonCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:74: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decode(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encode(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Boolean], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val booleanArrayCodec: JsonCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:65: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decode(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encode(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Byte] = new Array[Byte](0);
[info]       private def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Byte], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val byteArrayCodec: JsonCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:71: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decode(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encode(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Double] = new Array[Double](0);
[info]       private def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val doubleArrayCodec: JsonCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:68: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decode(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encode(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Float] = new Array[Float](0);
[info]       private def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Float], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val floatArrayCodec: JsonCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:62: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decode(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encode(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Int] = new Array[Int](0);
[info]       private def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intArrayCodec: JsonCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:68: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decode(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encode(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Short] = new Array[Short](0);
[info]       private def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Short], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val shortArrayCodec: JsonCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:65: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decode(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encode(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[Long] = new Array[Long](0);
[info]       private def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val longArrayCodec: JsonCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:65: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decode(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encode(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           val l = x.length;
[info]           var i = 0;
[info]           while (i.<(l)) 
[info]             {
[info]               out.writeComma();
[info]               out.writeVal(x(i));
[info]               i.+=(1)
[info]             }
[info]           ;
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val uuidArrayCodec: JsonCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:61: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val iterablesCodec: JsonCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:46: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mapsCodec: JsonCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "i");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val missingReqFieldCodec: JsonCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:82: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e4(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.l;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("l");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.s;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("s");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.ls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("ls");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableIterablesCodec: JsonCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:67: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val mutableMapsCodec: JsonCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:76: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.ne(null).&&(default.isEmpty))
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             out.writeVal(kv._2)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           x.foreach(((kv) => {
[info]             out.writeKey(kv._1);
[info]             e3(kv._2, out)
[info]           }));
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.m;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("m");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.mm;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("mm");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intAndLongMapsCodec: JsonCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:64: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = in.readInt();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("i");
[info]             out.writeVal(x.i)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("bl");
[info]             out.writeVal(x.bl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("ch");
[info]             out.writeVal(x.ch)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("dbl");
[info]             out.writeVal(x.dbl)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("f");
[info]             out.writeVal(x.f)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val primitivesCodec: JsonCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:73: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("s", "l");
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readString(_s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("s");
[info]             out.writeVal(x.s)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             out.writeVal(x.l)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val extractFieldsCodec: JsonCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:51: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("a");
[info]       private val r1: Array[String] = Array("b");
[info]       private val r2: Array[String] = Array("l", "r");
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = in.readInt();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readString(_b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = d0(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = d0(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           {
[info]             in.scanToKey("type");
[info]             val l = in.readStringAsCharBuf();
[info]             (in.charBufToHashCode(l): @switch) match {
[info]               case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d1(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d2(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                 {
[info]                   in.rollbackToMark();
[info]                   d3(in, null)
[info]                 }
[info]               else
[info]                 in.discriminatorValueError("type")
[info]               case _ => in.discriminatorValueError("type")
[info]             }
[info]           }
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("A")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("a");
[info]             out.writeVal(x.a)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("B")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("b");
[info]             out.writeVal(x.b)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("type");
[info]             out.writeNonEscapedAsciiVal("C")
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("l");
[info]             e0(x.l, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("r");
[info]             e0(x.r, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]         case null => out.writeNull()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val adtCodec: JsonCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:52: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[String] {
[info]       def nullValue: String = null;
[info]       def decode(in: JsonReader, default: String): String = in.readString(default);
[info]       def encode(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonCodec[String] = make[String](CodecMakerConfig())
[info]                                                    ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decode(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encode(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("status");
[info]       private val r1: Array[String] = Array("distance", "duration", "status");
[info]       private val r2: Array[String] = Array("text", "value");
[info]       private def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = in.readInt();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = in.readString(_status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def e1(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("value");
[info]             out.writeVal(x.value)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("distance");
[info]             e6(x.distance, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("duration");
[info]             e6(x.duration, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.elements;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("elements");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e3(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.destination_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("destination_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.origin_addresses;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("origin_addresses");
[info]                 e1(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.rows;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("rows");
[info]                 e2(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("status");
[info]             out.writeVal(x.status)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val googleMapsAPICodec: JsonCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:64: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decode(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encode(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private val r4: Array[String] = Array("url", "description");
[info]       private val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = in.readString(_expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = in.readString(_display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredKeyError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d9(in: JsonReader, default: Option[String]): Option[String] = {
[info]         val x = in.readString(null);
[info]         if (x.eq(null))
[info]           None
[info]         else
[info]           Some(x)
[info]       };
[info]       private def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredKeyError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = in.readString(_name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = in.readString(_screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = in.readString(_location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = in.readString(_description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = in.readString(_url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = in.readInt();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = in.readInt();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = in.readString(_time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = in.readInt();
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = in.readString(_profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = in.readString(_profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = in.readString(_profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = in.readString(_profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = in.readString(_profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = in.readString(_translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredKeyError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = in.readString(_created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = in.readString(_id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = in.readString(_text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = in.readString(_source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = in.readInt();
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = in.readInt();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = in.readString(_lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredKeyError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private def e3(x: Seq[String], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e6(x: Seq[Int], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             out.writeVal(x)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e5(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("expanded_url");
[info]             out.writeVal(x.expanded_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("display_url");
[info]             out.writeVal(x.display_url)
[info]           };
[info]           {
[info]             val v = x.indices;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("indices");
[info]                 e6(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e8(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.hashtags;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("hashtags");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.symbols;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("symbols");
[info]                 e3(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.user_mentions;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("user_mentions");
[info]                 e4(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e9(x: Option[String], out: JsonWriter): Unit = if (x.eq(null).||(x.isEmpty))
[info]         out.writeNull()
[info]       else
[info]         out.writeVal(x.get);
[info]       private def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             val v = x.urls;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("urls");
[info]                 e7(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             e12(x.url, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             e12(x.description, out)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("name");
[info]             out.writeVal(x.name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("screen_name");
[info]             out.writeVal(x.screen_name)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("location");
[info]             out.writeVal(x.location)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("description");
[info]             out.writeVal(x.description)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("url");
[info]             out.writeVal(x.url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e11(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("protected");
[info]             out.writeVal(x.`protected`)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("followers_count");
[info]             out.writeVal(x.followers_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("friends_count");
[info]             out.writeVal(x.friends_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("listed_count");
[info]             out.writeVal(x.listed_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favourites_count");
[info]             out.writeVal(x.favourites_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("utc_offset");
[info]             out.writeVal(x.utc_offset)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("time_zone");
[info]             out.writeVal(x.time_zone)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("geo_enabled");
[info]             out.writeVal(x.geo_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("verified");
[info]             out.writeVal(x.verified)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("statuses_count");
[info]             out.writeVal(x.statuses_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("contributors_enabled");
[info]             out.writeVal(x.contributors_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translator");
[info]             out.writeVal(x.is_translator)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]             out.writeVal(x.is_translation_enabled)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_color");
[info]             out.writeVal(x.profile_background_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]             out.writeVal(x.profile_background_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]             out.writeVal(x.profile_background_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_background_tile");
[info]             out.writeVal(x.profile_background_tile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url");
[info]             out.writeVal(x.profile_image_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]             out.writeVal(x.profile_image_url_https)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_banner_url");
[info]             out.writeVal(x.profile_banner_url)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_link_color");
[info]             out.writeVal(x.profile_link_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]             out.writeVal(x.profile_sidebar_border_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]             out.writeVal(x.profile_sidebar_fill_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_text_color");
[info]             out.writeVal(x.profile_text_color)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]             out.writeVal(x.profile_use_background_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("has_extended_profile");
[info]             out.writeVal(x.has_extended_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile");
[info]             out.writeVal(x.default_profile)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("default_profile_image");
[info]             out.writeVal(x.default_profile_image)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("following");
[info]             out.writeVal(x.following)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("follow_request_sent");
[info]             out.writeVal(x.follow_request_sent)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("notifications");
[info]             out.writeVal(x.notifications)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("translator_type");
[info]             out.writeVal(x.translator_type)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e13(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeObjectStart();
[info]           {
[info]             out.writeNonEscapedAsciiKey("created_at");
[info]             out.writeVal(x.created_at)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id");
[info]             out.writeVal(x.id)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("id_str");
[info]             out.writeVal(x.id_str)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("text");
[info]             out.writeVal(x.text)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("truncated");
[info]             out.writeVal(x.truncated)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("entities");
[info]             e2(x.entities, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("source");
[info]             out.writeVal(x.source)
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_status_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_user_id_str;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.in_reply_to_screen_name;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("user");
[info]             e10(x.user, out)
[info]           };
[info]           {
[info]             val v = x.geo;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("geo");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.coordinates;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("coordinates");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.place;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("place");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             val v = x.contributors;
[info]             if (v.ne(null).&&(v.isEmpty.`unary_!`))
[info]               {
[info]                 out.writeNonEscapedAsciiKey("contributors");
[info]                 e9(v, out)
[info]               }
[info]             else
[info]               ()
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted_status");
[info]             e13(x.retweeted_status, out)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("is_quote_status");
[info]             out.writeVal(x.is_quote_status)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweet_count");
[info]             out.writeVal(x.retweet_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorite_count");
[info]             out.writeVal(x.favorite_count)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("favorited");
[info]             out.writeVal(x.favorited)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("retweeted");
[info]             out.writeVal(x.retweeted)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]             out.writeVal(x.possibly_sensitive)
[info]           };
[info]           {
[info]             out.writeNonEscapedAsciiKey("lang");
[info]             out.writeVal(x.lang)
[info]           };
[info]           out.writeObjectEnd()
[info]         }
[info]       else
[info]         out.writeNull();
[info]       private def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = if (x.ne(null))
[info]         {
[info]           out.writeArrayStart();
[info]           x.foreach(((x) => {
[info]             out.writeComma();
[info]             e1(x, out)
[info]           }));
[info]           out.writeArrayEnd()
[info]         }
[info]       else
[info]         out.writeNull()
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val twitterAPICodec: JsonCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:14:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:20:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:28:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:31:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:46:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:63:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:68:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:80:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:87:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:94:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:100:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT.jar ...
Processing 299 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 26 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 286 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.6.0-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_c541fbd0/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:24:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 412246.263 ops/s
[info] # Warmup Iteration   2: 755548.037 ops/s
[info] # Warmup Iteration   3: 746462.341 ops/s
[info] Iteration   1: 769452.547 ops/s
[info]                  ·gc.alloc.rate:                   2033.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.213 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1975.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4041.417 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 772181.833 ops/s
[info]                  ·gc.alloc.rate:                   2040.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.382 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4066.506 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 766989.859 ops/s
[info]                  ·gc.alloc.rate:                   2027.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4127.536 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 768305.352 ops/s
[info]                  ·gc.alloc.rate:                   2030.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4144.208 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 768541.518 ops/s
[info]                  ·gc.alloc.rate:                   2031.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.335 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4159.413 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   769094.222 ±(99.9%) 7461.182 ops/s [Average]
[info]   (min, avg, max) = (766989.859, 769094.222, 772181.833), stdev = 1937.645
[info]   CI (99.9%): [761633.040, 776555.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   2032.777 ±(99.9%) 19.028 MB/sec [Average]
[info]   (min, avg, max) = (2027.514, 2032.777, 2040.728), stdev = 4.941
[info]   CI (99.9%): [2013.749, 2051.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.129, 0.187), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.264 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.264, 0.382), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2007.247 ±(99.9%) 86.197 MB/sec [Average]
[info]   (min, avg, max) = (1975.502, 2007.247, 2031.335), stdev = 22.385
[info]   CI (99.9%): [1921.050, 2093.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4107.816 ±(99.9%) 197.202 B/op [Average]
[info]   (min, avg, max) = (4041.417, 4107.816, 4159.413), stdev = 51.213
[info]   CI (99.9%): [3910.614, 4305.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.54% complete, ETA 00:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513933.711 ops/s
[info] # Warmup Iteration   2: 1641553.485 ops/s
[info] # Warmup Iteration   3: 1657744.374 ops/s
[info] Iteration   1: 1637060.232 ops/s
[info]                  ·gc.alloc.rate:                   1314.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1261.954 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1630436.438 ops/s
[info]                  ·gc.alloc.rate:                   1309.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1277.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1634398.550 ops/s
[info]                  ·gc.alloc.rate:                   1312.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1283.922 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1630491.138 ops/s
[info]                  ·gc.alloc.rate:                   1309.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1294.114 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1645218.150 ops/s
[info]                  ·gc.alloc.rate:                   1321.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.577 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1288.193 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1635520.902 ±(99.9%) 23487.045 ops/s [Average]
[info]   (min, avg, max) = (1630436.438, 1635520.902, 1645218.150), stdev = 6099.511
[info]   CI (99.9%): [1612033.857, 1659007.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1313.446 ±(99.9%) 18.724 MB/sec [Average]
[info]   (min, avg, max) = (1309.287, 1313.446, 1321.288), stdev = 4.863
[info]   CI (99.9%): [1294.722, 1332.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.146), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.180 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.100, 0.141), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1331.234 ±(99.9%) 52.943 MB/sec [Average]
[info]   (min, avg, max) = (1312.309, 1331.234, 1346.577), stdev = 13.749
[info]   CI (99.9%): [1278.291, 1384.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1281.118 ±(99.9%) 47.468 B/op [Average]
[info]   (min, avg, max) = (1261.954, 1281.118, 1294.114), stdev = 12.327
[info]   CI (99.9%): [1233.650, 1328.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 1.08% complete, ETA 00:38:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3113810.876 ops/s
[info] # Warmup Iteration   2: 3750969.698 ops/s
[info] # Warmup Iteration   3: 4017426.495 ops/s
[info] Iteration   1: 4010395.312 ops/s
[info]                  ·gc.alloc.rate:                   264.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.035 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4020400.770 ops/s
[info]                  ·gc.alloc.rate:                   265.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.142 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 4020055.264 ops/s
[info]                  ·gc.alloc.rate:                   265.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100.148 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 4022760.614 ops/s
[info]                  ·gc.alloc.rate:      265.839 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 4002918.131 ops/s
[info]                  ·gc.alloc.rate:                   264.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   4015306.018 ±(99.9%) 32312.021 ops/s [Average]
[info]   (min, avg, max) = (4002918.131, 4015306.018, 4022760.614), stdev = 8391.329
[info]   CI (99.9%): [3982993.998, 4047618.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   265.320 ±(99.9%) 2.223 MB/sec [Average]
[info]   (min, avg, max) = (264.478, 265.320, 265.839), stdev = 0.577
[info]   CI (99.9%): [263.097, 267.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.635 ±(99.9%) 5.324 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.635, 3.108), stdev = 1.383
[info]   CI (99.9%): [≈ 0, 5.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.250 ±(99.9%) 2.093 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.250, 1.222), stdev = 0.544
[info]   CI (99.9%): [≈ 0, 2.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   271.105 ±(99.9%) 708.792 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 271.105, 511.543), stdev = 184.071
[info]   CI (99.9%): [≈ 0, 979.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   106.353 ±(99.9%) 278.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.353, 200.779), stdev = 72.279
[info]   CI (99.9%): [≈ 0, 384.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 1.817
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 1.61% complete, ETA 00:38:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25967.501 ops/s
[info] # Warmup Iteration   2: 155716.848 ops/s
[info] # Warmup Iteration   3: 159375.437 ops/s
[info] Iteration   1: 159269.935 ops/s
[info]                  ·gc.alloc.rate:                   1325.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              13104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12967.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 157361.420 ops/s
[info]                  ·gc.alloc.rate:                   1310.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              13104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.249 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13232.210 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 157780.152 ops/s
[info]                  ·gc.alloc.rate:                   1313.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              13104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.831 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9957.359 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 161114.680 ops/s
[info]                  ·gc.alloc.rate:                   1341.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              13104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.407 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13066.854 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 161067.254 ops/s
[info]                  ·gc.alloc.rate:                   1340.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              13104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.814 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13135.760 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   159318.688 ±(99.9%) 6802.531 ops/s [Average]
[info]   (min, avg, max) = (157361.420, 159318.688, 161114.680), stdev = 1766.596
[info]   CI (99.9%): [152516.157, 166121.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1326.228 ±(99.9%) 55.914 MB/sec [Average]
[info]   (min, avg, max) = (1310.309, 1326.228, 1341.264), stdev = 14.521
[info]   CI (99.9%): [1270.314, 1382.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13104.003, 13104.003, 13104.003), stdev = 0.001
[info]   CI (99.9%): [13104.002, 13104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.907 ±(99.9%) 1.346 B/op [Average]
[info]   (min, avg, max) = (0.407, 0.907, 1.249), stdev = 0.350
[info]   CI (99.9%): [≈ 0, 2.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1262.846 ±(99.9%) 571.869 MB/sec [Average]
[info]   (min, avg, max) = (998.108, 1262.846, 1343.692), stdev = 148.513
[info]   CI (99.9%): [690.977, 1834.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   12472.032 ±(99.9%) 5425.774 B/op [Average]
[info]   (min, avg, max) = (9957.359, 12472.032, 13232.210), stdev = 1409.056
[info]   CI (99.9%): [7046.257, 17897.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 2.15% complete, ETA 00:38:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 621513.781 ops/s
[info] # Warmup Iteration   2: 2043317.969 ops/s
[info] # Warmup Iteration   3: 2093210.308 ops/s
[info] Iteration   1: 2090042.776 ops/s
[info]                  ·gc.alloc.rate:                   679.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731.364 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2085457.886 ops/s
[info]                  ·gc.alloc.rate:                   678.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.918 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2084431.867 ops/s
[info]                  ·gc.alloc.rate:                   678.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2087682.858 ops/s
[info]                  ·gc.alloc.rate:                   679.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 495.664 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2087118.056 ops/s
[info]                  ·gc.alloc.rate:                   678.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.820 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2086946.689 ±(99.9%) 8325.304 ops/s [Average]
[info]   (min, avg, max) = (2084431.867, 2086946.689, 2090042.776), stdev = 2162.055
[info]   CI (99.9%): [2078621.384, 2095271.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   678.824 ±(99.9%) 2.687 MB/sec [Average]
[info]   (min, avg, max) = (678.001, 678.824, 679.809), stdev = 0.698
[info]   CI (99.9%): [676.136, 681.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 0.665 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.154, 0.458), stdev = 0.173
[info]   CI (99.9%): [≈ 0, 0.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.501 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.116, 0.345), stdev = 0.130
[info]   CI (99.9%): [≈ 0, 0.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.001 ±(99.9%) 542.727 MB/sec [Average]
[info]   (min, avg, max) = (651.749, 719.001, 971.069), stdev = 140.945
[info]   CI (99.9%): [176.274, 1261.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   542.234 ±(99.9%) 407.198 B/op [Average]
[info]   (min, avg, max) = (491.918, 542.234, 731.364), stdev = 105.748
[info]   CI (99.9%): [135.036, 949.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 2.69% complete, ETA 00:38:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11286491.777 ops/s
[info] # Warmup Iteration   2: 13162878.114 ops/s
[info] # Warmup Iteration   3: 13703679.229 ops/s
[info] Iteration   1: 13447863.325 ops/s
[info]                  ·gc.alloc.rate:                   683.578 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.832 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 13432286.784 ops/s
[info]                  ·gc.alloc.rate:                   682.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76.961 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 13739803.966 ops/s
[info]                  ·gc.alloc.rate:                   698.441 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.239 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13733053.637 ops/s
[info]                  ·gc.alloc.rate:                   697.993 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.107 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 13736138.489 ops/s
[info]                  ·gc.alloc.rate:                   698.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75.409 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   13617829.240 ±(99.9%) 625258.465 ops/s [Average]
[info]   (min, avg, max) = (13432286.784, 13617829.240, 13739803.966), stdev = 162377.638
[info]   CI (99.9%): [12992570.775, 14243087.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   692.182 ±(99.9%) 32.055 MB/sec [Average]
[info]   (min, avg, max) = (682.567, 692.182, 698.441), stdev = 8.325
[info]   CI (99.9%): [660.127, 724.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.007 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.017), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.542 ±(99.9%) 3.668 MB/sec [Average]
[info]   (min, avg, max) = (656.639, 657.542, 658.832), stdev = 0.953
[info]   CI (99.9%): [653.873, 661.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   76.005 ±(99.9%) 3.623 B/op [Average]
[info]   (min, avg, max) = (75.239, 76.005, 77.104), stdev = 0.941
[info]   CI (99.9%): [72.382, 79.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 3.23% complete, ETA 00:38:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64945.270 ops/s
[info] # Warmup Iteration   2: 314689.306 ops/s
[info] # Warmup Iteration   3: 319241.708 ops/s
[info] Iteration   1: 319189.140 ops/s
[info]                  ·gc.alloc.rate:                   1041.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.513 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4836.545 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 317897.206 ops/s
[info]                  ·gc.alloc.rate:                   1037.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4886.064 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 318784.885 ops/s
[info]                  ·gc.alloc.rate:                   1040.150 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4892.204 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 317910.826 ops/s
[info]                  ·gc.alloc.rate:                   1037.278 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4936.982 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 318455.678 ops/s
[info]                  ·gc.alloc.rate:                   1039.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4948.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   318447.547 ±(99.9%) 2156.677 ops/s [Average]
[info]   (min, avg, max) = (317897.206, 318447.547, 319189.140), stdev = 560.082
[info]   CI (99.9%): [316290.870, 320604.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1039.154 ±(99.9%) 6.647 MB/sec [Average]
[info]   (min, avg, max) = (1037.278, 1039.154, 1041.369), stdev = 1.726
[info]   CI (99.9%): [1032.507, 1045.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.453 ±(99.9%) 0.601 B/op [Average]
[info]   (min, avg, max) = (0.206, 0.453, 0.618), stdev = 0.156
[info]   CI (99.9%): [≈ 0, 1.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   991.395 ±(99.9%) 31.408 MB/sec [Average]
[info]   (min, avg, max) = (980.651, 991.395, 1001.369), stdev = 8.157
[info]   CI (99.9%): [959.987, 1022.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4899.988 ±(99.9%) 171.855 B/op [Average]
[info]   (min, avg, max) = (4836.545, 4899.988, 4948.148), stdev = 44.630
[info]   CI (99.9%): [4728.133, 5071.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 3.76% complete, ETA 00:37:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 980610.260 ops/s
[info] # Warmup Iteration   2: 1561337.490 ops/s
[info] # Warmup Iteration   3: 1628481.182 ops/s
[info] Iteration   1: 1629842.136 ops/s
[info]                  ·gc.alloc.rate:                   2542.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2658.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2567.521 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1626284.366 ops/s
[info]                  ·gc.alloc.rate:                   2536.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2349.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2274.394 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1626869.383 ops/s
[info]                  ·gc.alloc.rate:                   2538.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2614.470 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1619364.853 ops/s
[info]                  ·gc.alloc.rate:                   2527.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2373.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2306.822 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1615010.435 ops/s
[info]                  ·gc.alloc.rate:                   2519.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              2456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.106 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2648.209 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1623474.235 ±(99.9%) 23461.844 ops/s [Average]
[info]   (min, avg, max) = (1615010.435, 1623474.235, 1629842.136), stdev = 6092.966
[info]   CI (99.9%): [1600012.390, 1646936.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2533.093 ±(99.9%) 35.861 MB/sec [Average]
[info]   (min, avg, max) = (2519.896, 2533.093, 2542.990), stdev = 9.313
[info]   CI (99.9%): [2497.232, 2568.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2456.000, 2456.000, 2456.000), stdev = 0.001
[info]   CI (99.9%): [2456.000, 2456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.089 ±(99.9%) 0.117 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.089, 0.121), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2560.166 ±(99.9%) 703.806 MB/sec [Average]
[info]   (min, avg, max) = (2349.292, 2560.166, 2717.106), stdev = 182.776
[info]   CI (99.9%): [1856.360, 3263.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2482.283 ±(99.9%) 684.167 B/op [Average]
[info]   (min, avg, max) = (2274.394, 2482.283, 2648.209), stdev = 177.676
[info]   CI (99.9%): [1798.116, 3166.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 8.000), stdev = 0.837
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 4.30% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 894961.954 ops/s
[info] # Warmup Iteration   2: 2532257.300 ops/s
[info] # Warmup Iteration   3: 2559977.566 ops/s
[info] Iteration   1: 2574680.624 ops/s
[info]                  ·gc.alloc.rate:                   1806.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1013.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2573972.739 ops/s
[info]                  ·gc.alloc.rate:                   1806.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1022.185 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2572065.754 ops/s
[info]                  ·gc.alloc.rate:                   1803.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 2574228.385 ops/s
[info]                  ·gc.alloc.rate:                   1805.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1033.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2575352.376 ops/s
[info]                  ·gc.alloc.rate:                   1806.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1035.242 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2574059.975 ±(99.9%) 4742.860 ops/s [Average]
[info]   (min, avg, max) = (2572065.754, 2574059.975, 2575352.376), stdev = 1231.706
[info]   CI (99.9%): [2569317.116, 2578802.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1805.641 ±(99.9%) 4.227 MB/sec [Average]
[info]   (min, avg, max) = (1803.886, 1805.641, 1806.558), stdev = 1.098
[info]   CI (99.9%): [1801.414, 1809.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.146), stdev = 0.028
[info]   CI (99.9%): [0.009, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.071, 0.089), stdev = 0.017
[info]   CI (99.9%): [0.005, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1746.451 ±(99.9%) 586.969 MB/sec [Average]
[info]   (min, avg, max) = (1658.715, 1746.451, 2017.972), stdev = 152.434
[info]   CI (99.9%): [1159.482, 2333.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1067.851 ±(99.9%) 361.395 B/op [Average]
[info]   (min, avg, max) = (1013.730, 1067.851, 1235.023), stdev = 93.853
[info]   CI (99.9%): [706.456, 1429.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 4.84% complete, ETA 00:37:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9739470.079 ops/s
[info] # Warmup Iteration   2: 11094099.030 ops/s
[info] # Warmup Iteration   3: 11446804.035 ops/s
[info] Iteration   1: 11276491.564 ops/s
[info]                  ·gc.alloc.rate:                   1432.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230.475 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11310233.963 ops/s
[info]                  ·gc.alloc.rate:                   1436.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.743 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11291145.445 ops/s
[info]                  ·gc.alloc.rate:                   1434.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.059 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11287672.014 ops/s
[info]                  ·gc.alloc.rate:                   1434.214 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.742 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11310254.924 ops/s
[info]                  ·gc.alloc.rate:                   1437.616 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187.395 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   11295159.582 ±(99.9%) 56977.110 ops/s [Average]
[info]   (min, avg, max) = (11276491.564, 11295159.582, 11310254.924), stdev = 14796.775
[info]   CI (99.9%): [11238182.472, 11352136.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1435.241 ±(99.9%) 7.657 MB/sec [Average]
[info]   (min, avg, max) = (1432.817, 1435.241, 1437.616), stdev = 1.989
[info]   CI (99.9%): [1427.584, 1442.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.012 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.012, 0.020), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1467.142 ±(99.9%) 692.168 MB/sec [Average]
[info]   (min, avg, max) = (1327.317, 1467.142, 1676.179), stdev = 179.754
[info]   CI (99.9%): [774.974, 2159.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   204.467 ±(99.9%) 97.332 B/op [Average]
[info]   (min, avg, max) = (184.743, 204.467, 233.742), stdev = 25.277
[info]   CI (99.9%): [107.135, 301.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 5.38% complete, ETA 00:37:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132157.274 ops/s
[info] # Warmup Iteration   2: 656108.145 ops/s
[info] # Warmup Iteration   3: 647812.342 ops/s
[info] Iteration   1: 660237.677 ops/s
[info]                  ·gc.alloc.rate:                   1744.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1980.236 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4720.955 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 656274.598 ops/s
[info]                  ·gc.alloc.rate:                   1735.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3997.863 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 661544.670 ops/s
[info]                  ·gc.alloc.rate:                   1748.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3992.133 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 659757.734 ops/s
[info]                  ·gc.alloc.rate:                   1743.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4022.093 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 660937.791 ops/s
[info]                  ·gc.alloc.rate:                   1746.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4028.281 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   659750.494 ±(99.9%) 7926.154 ops/s [Average]
[info]   (min, avg, max) = (656274.598, 659750.494, 661544.670), stdev = 2058.397
[info]   CI (99.9%): [651824.340, 667676.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1743.740 ±(99.9%) 19.709 MB/sec [Average]
[info]   (min, avg, max) = (1735.168, 1743.740, 1748.355), stdev = 5.118
[info]   CI (99.9%): [1724.031, 1763.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.278 ±(99.9%) 0.396 B/op [Average]
[info]   (min, avg, max) = (0.149, 0.278, 0.397), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.542 ±(99.9%) 517.111 MB/sec [Average]
[info]   (min, avg, max) = (1667.540, 1740.542, 1980.236), stdev = 134.292
[info]   CI (99.9%): [1223.431, 2257.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4152.265 ±(99.9%) 1225.581 B/op [Average]
[info]   (min, avg, max) = (3992.133, 4152.265, 4720.955), stdev = 318.279
[info]   CI (99.9%): [2926.684, 5377.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 5.91% complete, ETA 00:36:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029628.521 ops/s
[info] # Warmup Iteration   2: 1891028.947 ops/s
[info] # Warmup Iteration   3: 1935936.791 ops/s
[info] Iteration   1: 1942026.461 ops/s
[info]                  ·gc.alloc.rate:                   1796.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1330.190 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1940314.282 ops/s
[info]                  ·gc.alloc.rate:                   1794.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1612.359 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1927501.668 ops/s
[info]                  ·gc.alloc.rate:                   1782.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1363.596 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1906814.162 ops/s
[info]                  ·gc.alloc.rate:                   1763.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.130 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1386.125 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1938534.957 ops/s
[info]                  ·gc.alloc.rate:                   1793.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1644.709 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1931038.306 ±(99.9%) 56536.975 ops/s [Average]
[info]   (min, avg, max) = (1906814.162, 1931038.306, 1942026.461), stdev = 14682.473
[info]   CI (99.9%): [1874501.331, 1987575.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1786.265 ±(99.9%) 52.492 MB/sec [Average]
[info]   (min, avg, max) = (1763.777, 1786.265, 1796.243), stdev = 13.632
[info]   CI (99.9%): [1733.774, 1838.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1456.000, 1456.000, 1456.000), stdev = 0.001
[info]   CI (99.9%): [1456.000, 1456.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.068 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.068, 0.084), stdev = 0.012
[info]   CI (99.9%): [0.022, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1800.706 ±(99.9%) 728.394 MB/sec [Average]
[info]   (min, avg, max) = (1641.032, 1800.706, 2026.112), stdev = 189.162
[info]   CI (99.9%): [1072.312, 2529.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1467.396 ±(99.9%) 573.279 B/op [Average]
[info]   (min, avg, max) = (1330.190, 1467.396, 1644.709), stdev = 148.879
[info]   CI (99.9%): [894.117, 2040.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 7.000), stdev = 1.304
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 6.45% complete, ETA 00:36:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2059999.250 ops/s
[info] # Warmup Iteration   2: 6318851.218 ops/s
[info] # Warmup Iteration   3: 6321785.373 ops/s
[info] Iteration   1: 6317444.960 ops/s
[info]                  ·gc.alloc.rate:                   1733.529 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 410.821 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 6378307.957 ops/s
[info]                  ·gc.alloc.rate:                   1750.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1999.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493.296 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 6332464.809 ops/s
[info]                  ·gc.alloc.rate:                   1737.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.955 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 6383465.852 ops/s
[info]                  ·gc.alloc.rate:                   1751.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 415.702 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 6384142.551 ops/s
[info]                  ·gc.alloc.rate:                   1752.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.125 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6359165.226 ±(99.9%) 122289.386 ops/s [Average]
[info]   (min, avg, max) = (6317444.960, 6359165.226, 6384142.551), stdev = 31758.165
[info]   CI (99.9%): [6236875.839, 6481454.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1745.208 ±(99.9%) 34.115 MB/sec [Average]
[info]   (min, avg, max) = (1733.529, 1745.208, 1752.151), stdev = 8.860
[info]   CI (99.9%): [1711.093, 1779.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.030 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.028, 0.036), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1740.505 ±(99.9%) 560.495 MB/sec [Average]
[info]   (min, avg, max) = (1648.540, 1740.505, 1999.193), stdev = 145.559
[info]   CI (99.9%): [1180.009, 2301.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   430.780 ±(99.9%) 134.932 B/op [Average]
[info]   (min, avg, max) = (410.821, 430.780, 493.296), stdev = 35.041
[info]   CI (99.9%): [295.847, 565.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 6.99% complete, ETA 00:36:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17902248.263 ops/s
[info] # Warmup Iteration   2: 22310340.099 ops/s
[info] # Warmup Iteration   3: 23385005.089 ops/s
[info] Iteration   1: 23356327.973 ops/s
[info]                  ·gc.alloc.rate:                   712.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 23240449.523 ops/s
[info]                  ·gc.alloc.rate:                   708.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.481 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23448623.971 ops/s
[info]                  ·gc.alloc.rate:                   715.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.086 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23372147.359 ops/s
[info]                  ·gc.alloc.rate:                   712.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.966 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23332825.148 ops/s
[info]                  ·gc.alloc.rate:                   711.503 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   23350074.795 ±(99.9%) 289141.381 ops/s [Average]
[info]   (min, avg, max) = (23240449.523, 23350074.795, 23448623.971), stdev = 75089.099
[info]   CI (99.9%): [23060933.414, 23639216.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   712.053 ±(99.9%) 8.893 MB/sec [Average]
[info]   (min, avg, max) = (708.638, 712.053, 715.005), stdev = 2.309
[info]   CI (99.9%): [703.160, 720.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   723.375 ±(99.9%) 565.262 MB/sec [Average]
[info]   (min, avg, max) = (656.691, 723.375, 985.966), stdev = 146.797
[info]   CI (99.9%): [158.113, 1288.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48.759 ±(99.9%) 37.963 B/op [Average]
[info]   (min, avg, max) = (44.086, 48.759, 66.393), stdev = 9.859
[info]   CI (99.9%): [10.796, 86.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.53% complete, ETA 00:36:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18644173.201 ops/s
[info] # Warmup Iteration   2: 23036608.208 ops/s
[info] # Warmup Iteration   3: 23844414.168 ops/s
[info] Iteration   1: 23642822.794 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 23881309.258 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 23893253.133 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 23849345.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 23892875.182 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   23831921.175 ±(99.9%) 412836.744 ops/s [Average]
[info]   (min, avg, max) = (23642822.794, 23831921.175, 23893253.133), stdev = 107212.391
[info]   CI (99.9%): [23419084.430, 24244757.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 8.06% complete, ETA 00:36:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 318837.591 ops/s
[info] # Warmup Iteration   2: 1187950.119 ops/s
[info] # Warmup Iteration   3: 1192498.321 ops/s
[info] Iteration   1: 1181551.797 ops/s
[info]                  ·gc.alloc.rate:                   1783.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1985.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2645.103 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1149209.404 ops/s
[info]                  ·gc.alloc.rate:                   1735.417 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.143 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2286.250 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1185470.790 ops/s
[info]                  ·gc.alloc.rate:                   1789.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2229.598 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1186283.010 ops/s
[info]                  ·gc.alloc.rate:                   1790.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2237.692 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1191965.486 ops/s
[info]                  ·gc.alloc.rate:                   1799.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              2376.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2681.767 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1178896.097 ±(99.9%) 65487.967 ops/s [Average]
[info]   (min, avg, max) = (1149209.404, 1178896.097, 1191965.486), stdev = 17007.017
[info]   CI (99.9%): [1113408.130, 1244384.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1779.692 ±(99.9%) 97.958 MB/sec [Average]
[info]   (min, avg, max) = (1735.417, 1779.692, 1799.767), stdev = 25.439
[info]   CI (99.9%): [1681.734, 1877.650] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2376.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2376.000, 2376.000, 2376.000), stdev = 0.001
[info]   CI (99.9%): [2376.000, 2376.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.128 ±(99.9%) 0.162 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.128, 0.166), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.401 ±(99.9%) 698.931 MB/sec [Average]
[info]   (min, avg, max) = (1669.864, 1810.401, 2031.378), stdev = 181.510
[info]   CI (99.9%): [1111.470, 2509.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2416.082 ±(99.9%) 874.898 B/op [Average]
[info]   (min, avg, max) = (2229.598, 2416.082, 2681.767), stdev = 227.208
[info]   CI (99.9%): [1541.183, 3290.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 8.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.60% complete, ETA 00:35:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6489.720 ops/s
[info] # Warmup Iteration   2: 8363.475 ops/s
[info] # Warmup Iteration   3: 8565.608 ops/s
[info] Iteration   1: 8551.868 ops/s
[info]                  ·gc.alloc.rate:                   1252.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241366.161 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8555.945 ops/s
[info]                  ·gc.alloc.rate:                   1252.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242294.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8540.981 ops/s
[info]                  ·gc.alloc.rate:                   1250.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244160.345 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8539.874 ops/s
[info]                  ·gc.alloc.rate:                   1250.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              230472.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.158 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245510.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8422.590 ops/s
[info]                  ·gc.alloc.rate:                   1233.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              230480.848 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187521.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   8522.251 ±(99.9%) 216.170 ops/s [Average]
[info]   (min, avg, max) = (8422.590, 8522.251, 8555.945), stdev = 56.139
[info]   CI (99.9%): [8306.081, 8738.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1248.013 ±(99.9%) 30.741 MB/sec [Average]
[info]   (min, avg, max) = (1233.854, 1248.013, 1252.922), stdev = 7.983
[info]   CI (99.9%): [1217.271, 1278.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230473.809 ±(99.9%) 15.151 B/op [Average]
[info]   (min, avg, max) = (230472.048, 230473.809, 230480.848), stdev = 3.935
[info]   CI (99.9%): [230458.658, 230488.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.611 ±(99.9%) 12.422 B/op [Average]
[info]   (min, avg, max) = (11.492, 14.611, 19.181), stdev = 3.226
[info]   CI (99.9%): [2.189, 27.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1257.884 ±(99.9%) 547.604 MB/sec [Average]
[info]   (min, avg, max) = (1003.875, 1257.884, 1332.158), stdev = 142.211
[info]   CI (99.9%): [710.280, 1805.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   232170.663 ±(99.9%) 96310.867 B/op [Average]
[info]   (min, avg, max) = (187521.337, 232170.663, 245510.653), stdev = 25011.626
[info]   CI (99.9%): [135859.796, 328481.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 9.14% complete, ETA 00:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16824.704 ops/s
[info] # Warmup Iteration   2: 24703.612 ops/s
[info] # Warmup Iteration   3: 24779.397 ops/s
[info] Iteration   1: 25129.154 ops/s
[info]                  ·gc.alloc.rate:                   929.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              58248.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40634.719 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 24747.700 ops/s
[info]                  ·gc.alloc.rate:                   915.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              58239.509 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61935.121 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 23726.891 ops/s
[info]                  ·gc.alloc.rate:                                  877.433 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58216.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.242 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.075 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    11.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     983.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                65276.260 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        34.000 ms
[info] Iteration   4: 25094.901 ops/s
[info]                  ·gc.alloc.rate:                   928.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.420 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61809.960 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25045.945 ops/s
[info]                  ·gc.alloc.rate:                   926.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              58216.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.685 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62265.741 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   24748.918 ±(99.9%) 2275.670 ops/s [Average]
[info]   (min, avg, max) = (23726.891, 24748.918, 25129.154), stdev = 590.984
[info]   CI (99.9%): [22473.248, 27024.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   915.529 ±(99.9%) 84.641 MB/sec [Average]
[info]   (min, avg, max) = (877.433, 915.529, 929.940), stdev = 21.981
[info]   CI (99.9%): [830.888, 1000.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   58227.116 ±(99.9%) 59.652 B/op [Average]
[info]   (min, avg, max) = (58216.016, 58227.116, 58248.016), stdev = 15.492
[info]   CI (99.9%): [58167.463, 58286.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.048 ±(99.9%) 0.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.242), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.215 ±(99.9%) 27.682 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.215, 16.075), stdev = 7.189
[info]   CI (99.9%): [≈ 0, 30.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.083, 0.166), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.359 ±(99.9%) 16.286 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.359, 11.046), stdev = 4.229
[info]   CI (99.9%): [≈ 0, 21.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   916.541 ±(99.9%) 576.928 MB/sec [Average]
[info]   (min, avg, max) = (648.741, 916.541, 990.685), stdev = 149.826
[info]   CI (99.9%): [339.613, 1493.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   58384.360 ±(99.9%) 38600.463 B/op [Average]
[info]   (min, avg, max) = (40634.719, 58384.360, 65276.260), stdev = 10024.418
[info]   CI (99.9%): [19783.897, 96984.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 9.000, 34.000), stdev = 14.018
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 9.68% complete, ETA 00:35:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27178.014 ops/s
[info] # Warmup Iteration   2: 28351.157 ops/s
[info] # Warmup Iteration   3: 29042.913 ops/s
[info] Iteration   1: 29339.610 ops/s
[info]                  ·gc.alloc.rate:                   532.611 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.609 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     139.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17794.883 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 29335.501 ops/s
[info]                  ·gc.alloc.rate:                   532.380 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35525.565 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28883.204 ops/s
[info]                  ·gc.alloc.rate:                   524.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18003.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29077.017 ops/s
[info]                  ·gc.alloc.rate:                   527.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35767.395 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 29122.696 ops/s
[info]                  ·gc.alloc.rate:                   528.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              28568.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35710.910 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   29151.606 ±(99.9%) 739.688 ops/s [Average]
[info]   (min, avg, max) = (28883.204, 29151.606, 29339.610), stdev = 192.095
[info]   CI (99.9%): [28411.917, 29891.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   529.105 ±(99.9%) 13.533 MB/sec [Average]
[info]   (min, avg, max) = (524.171, 529.105, 532.611), stdev = 3.515
[info]   CI (99.9%): [515.572, 542.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28568.015 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (28568.014, 28568.015, 28568.019), stdev = 0.002
[info]   CI (99.9%): [28568.008, 28568.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.559 ±(99.9%) 4.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.559, 2.609), stdev = 1.146
[info]   CI (99.9%): [≈ 0, 4.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   30.019 ±(99.9%) 236.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.019, 139.967), stdev = 61.480
[info]   CI (99.9%): [≈ 0, 266.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   529.134 ±(99.9%) 696.301 MB/sec [Average]
[info]   (min, avg, max) = (330.337, 529.134, 662.038), stdev = 180.827
[info]   CI (99.9%): [≈ 0, 1225.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28560.510 ±(99.9%) 37478.177 B/op [Average]
[info]   (min, avg, max) = (17794.883, 28560.510, 35767.395), stdev = 9732.963
[info]   CI (99.9%): [≈ 0, 66038.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 10.22% complete, ETA 00:35:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8649.783 ops/s
[info] # Warmup Iteration   2: 16122.229 ops/s
[info] # Warmup Iteration   3: 16054.773 ops/s
[info] Iteration   1: 16199.466 ops/s
[info]                  ·gc.alloc.rate:                   1553.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128790.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16178.073 ops/s
[info]                  ·gc.alloc.rate:                   1551.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              150943.921 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162460.913 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 15892.184 ops/s
[info]                  ·gc.alloc.rate:                   1524.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.123 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166318.114 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 16247.766 ops/s
[info]                  ·gc.alloc.rate:                   1558.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.154 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 130733.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 16154.421 ops/s
[info]                  ·gc.alloc.rate:                   1549.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.562 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164811.460 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   16134.382 ±(99.9%) 537.928 ops/s [Average]
[info]   (min, avg, max) = (15892.184, 16134.382, 16247.766), stdev = 139.698
[info]   CI (99.9%): [15596.454, 16672.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1547.214 ±(99.9%) 51.447 MB/sec [Average]
[info]   (min, avg, max) = (1524.050, 1547.214, 1558.159), stdev = 13.361
[info]   CI (99.9%): [1495.768, 1598.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   150944.024 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (150943.921, 150944.024, 150944.154), stdev = 0.083
[info]   CI (99.9%): [150943.702, 150944.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.167), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.113 ±(99.9%) 19.848 B/op [Average]
[info]   (min, avg, max) = (4.033, 8.113, 16.201), stdev = 5.154
[info]   CI (99.9%): [≈ 0, 27.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1543.084 ±(99.9%) 724.428 MB/sec [Average]
[info]   (min, avg, max) = (1325.240, 1543.084, 1691.562), stdev = 188.132
[info]   CI (99.9%): [818.655, 2267.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150622.875 ±(99.9%) 73567.439 B/op [Average]
[info]   (min, avg, max) = (128790.658, 150622.875, 166318.114), stdev = 19105.230
[info]   CI (99.9%): [77055.436, 224190.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 10.75% complete, ETA 00:35:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15382.964 ops/s
[info] # Warmup Iteration   2: 17435.446 ops/s
[info] # Warmup Iteration   3: 17525.115 ops/s
[info] Iteration   1: 17162.858 ops/s
[info]                  ·gc.alloc.rate:                   1555.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 152017.558 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17335.437 ops/s
[info]                  ·gc.alloc.rate:                   1570.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.559 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121010.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17524.997 ops/s
[info]                  ·gc.alloc.rate:                   1588.162 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150386.221 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 17484.484 ops/s
[info]                  ·gc.alloc.rate:                   1584.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.747 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151458.313 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17525.388 ops/s
[info]                  ·gc.alloc.rate:                   1588.744 MB/sec
[info]                  ·gc.alloc.rate.norm:              142648.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121380.688 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   17406.633 ±(99.9%) 604.773 ops/s [Average]
[info]   (min, avg, max) = (17162.858, 17406.633, 17525.388), stdev = 157.058
[info]   CI (99.9%): [16801.859, 18011.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1577.525 ±(99.9%) 55.468 MB/sec [Average]
[info]   (min, avg, max) = (1555.282, 1577.525, 1588.744), stdev = 14.405
[info]   CI (99.9%): [1522.058, 1632.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   142648.025 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (142648.023, 142648.025, 142648.029), stdev = 0.003
[info]   CI (99.9%): [142648.015, 142648.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.032 ±(99.9%) 6.234 B/op [Average]
[info]   (min, avg, max) = (3.747, 6.032, 7.636), stdev = 1.619
[info]   CI (99.9%): [≈ 0, 12.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1539.736 ±(99.9%) 695.737 MB/sec [Average]
[info]   (min, avg, max) = (1332.522, 1539.736, 1682.525), stdev = 180.681
[info]   CI (99.9%): [843.999, 2235.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   139250.650 ±(99.9%) 63508.242 B/op [Average]
[info]   (min, avg, max) = (121010.472, 139250.650, 152017.558), stdev = 16492.889
[info]   CI (99.9%): [75742.408, 202758.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 11.29% complete, ETA 00:34:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15958.653 ops/s
[info] # Warmup Iteration   2: 17860.202 ops/s
[info] # Warmup Iteration   3: 18136.615 ops/s
[info] Iteration   1: 18177.423 ops/s
[info]                  ·gc.alloc.rate:                   1528.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1656.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143407.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 18176.493 ops/s
[info]                  ·gc.alloc.rate:                   1527.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115274.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 17901.325 ops/s
[info]                  ·gc.alloc.rate:                   1505.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1672.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147052.462 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 18093.178 ops/s
[info]                  ·gc.alloc.rate:                   1522.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.235 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146092.174 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 18189.761 ops/s
[info]                  ·gc.alloc.rate:                   1529.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              132320.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.602 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116863.887 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   18107.636 ±(99.9%) 468.172 ops/s [Average]
[info]   (min, avg, max) = (17901.325, 18107.636, 18189.761), stdev = 121.583
[info]   CI (99.9%): [17639.464, 18575.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1522.433 ±(99.9%) 38.705 MB/sec [Average]
[info]   (min, avg, max) = (1505.132, 1522.433, 1529.092), stdev = 10.052
[info]   CI (99.9%): [1483.728, 1561.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   132320.024 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (132320.022, 132320.024, 132320.029), stdev = 0.003
[info]   CI (99.9%): [132320.013, 132320.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   7.957 ±(99.9%) 12.584 B/op [Average]
[info]   (min, avg, max) = (3.602, 7.957, 12.618), stdev = 3.268
[info]   CI (99.9%): [≈ 0, 20.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1538.159 ±(99.9%) 695.379 MB/sec [Average]
[info]   (min, avg, max) = (1330.949, 1538.159, 1680.516), stdev = 180.588
[info]   CI (99.9%): [842.779, 2233.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   133738.066 ±(99.9%) 62358.445 B/op [Average]
[info]   (min, avg, max) = (115274.720, 133738.066, 147052.462), stdev = 16194.290
[info]   CI (99.9%): [71379.621, 196096.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 11.83% complete, ETA 00:34:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36909.554 ops/s
[info] # Warmup Iteration   2: 44323.965 ops/s
[info] # Warmup Iteration   3: 44614.533 ops/s
[info] Iteration   1: 44763.681 ops/s
[info]                  ·gc.alloc.rate:                   1553.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57696.037 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 44715.068 ops/s
[info]                  ·gc.alloc.rate:                   1551.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58207.328 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 44865.388 ops/s
[info]                  ·gc.alloc.rate:                   1556.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 46734.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 44737.474 ops/s
[info]                  ·gc.alloc.rate:                   1551.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58926.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 44735.194 ops/s
[info]                  ·gc.alloc.rate:                   1551.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              54600.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59209.871 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   44763.361 ±(99.9%) 229.472 ops/s [Average]
[info]   (min, avg, max) = (44715.068, 44763.361, 44865.388), stdev = 59.593
[info]   CI (99.9%): [44533.889, 44992.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1552.778 ±(99.9%) 7.920 MB/sec [Average]
[info]   (min, avg, max) = (1551.096, 1552.778, 1556.238), stdev = 2.057
[info]   CI (99.9%): [1544.859, 1560.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   54600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54600.009, 54600.009, 54600.010), stdev = 0.001
[info]   CI (99.9%): [54600.008, 54600.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.489 ±(99.9%) 4.282 B/op [Average]
[info]   (min, avg, max) = (1.465, 2.489, 4.396), stdev = 1.112
[info]   CI (99.9%): [≈ 0, 6.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1596.840 ±(99.9%) 573.551 MB/sec [Average]
[info]   (min, avg, max) = (1332.044, 1596.840, 1682.780), stdev = 148.949
[info]   CI (99.9%): [1023.289, 2170.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   56154.696 ±(99.9%) 20407.361 B/op [Average]
[info]   (min, avg, max) = (46734.234, 56154.696, 59209.871), stdev = 5299.727
[info]   CI (99.9%): [35747.335, 76562.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 12.37% complete, ETA 00:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74182.957 ops/s
[info] # Warmup Iteration   2: 98616.900 ops/s
[info] # Warmup Iteration   3: 101799.726 ops/s
[info] Iteration   1: 104089.936 ops/s
[info]                  ·gc.alloc.rate:                   237.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.054 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3867.723 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 103861.470 ops/s
[info]                  ·gc.alloc.rate:                   237.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3876.324 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 104768.651 ops/s
[info]                  ·gc.alloc.rate:                   239.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3842.734 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 105089.924 ops/s
[info]                  ·gc.alloc.rate:                   239.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3830.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 105063.664 ops/s
[info]                  ·gc.alloc.rate:                   239.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              3592.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.938 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4844.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   104574.729 ±(99.9%) 2183.227 ops/s [Average]
[info]   (min, avg, max) = (103861.470, 104574.729, 105089.924), stdev = 566.977
[info]   CI (99.9%): [102391.502, 106757.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   238.662 ±(99.9%) 4.983 MB/sec [Average]
[info]   (min, avg, max) = (237.059, 238.662, 239.902), stdev = 1.294
[info]   CI (99.9%): [233.679, 243.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3592.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3592.004, 3592.004, 3592.004), stdev = 0.001
[info]   CI (99.9%): [3592.003, 3592.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.801 ±(99.9%) 6.755 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.801, 3.938), stdev = 1.754
[info]   CI (99.9%): [≈ 0, 7.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.996 ±(99.9%) 101.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.996, 59.005), stdev = 26.281
[info]   CI (99.9%): [≈ 0, 113.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   269.316 ±(99.9%) 116.342 MB/sec [Average]
[info]   (min, avg, max) = (255.755, 269.316, 323.363), stdev = 30.214
[info]   CI (99.9%): [152.974, 385.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4052.528 ±(99.9%) 1707.017 B/op [Average]
[info]   (min, avg, max) = (3830.998, 4052.528, 4844.863), stdev = 443.307
[info]   CI (99.9%): [2345.511, 5759.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 12.90% complete, ETA 00:34:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 204358.403 ops/s
[info] # Warmup Iteration   2: 216883.867 ops/s
[info] # Warmup Iteration   3: 215241.475 ops/s
[info] Iteration   1: 216274.171 ops/s
[info]                  ·gc.alloc.rate:                   294.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1861.472 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 214889.930 ops/s
[info]                  ·gc.alloc.rate:                   292.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1873.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 216702.804 ops/s
[info]                  ·gc.alloc.rate:                   295.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1857.831 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 209427.662 ops/s
[info]                  ·gc.alloc.rate:                   285.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.240 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.345 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2480.578 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 217578.503 ops/s
[info]                  ·gc.alloc.rate:                   296.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2387.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   214974.614 ±(99.9%) 12511.863 ops/s [Average]
[info]   (min, avg, max) = (209427.662, 214974.614, 217578.503), stdev = 3249.291
[info]   CI (99.9%): [202462.751, 227486.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   292.853 ±(99.9%) 16.947 MB/sec [Average]
[info]   (min, avg, max) = (285.353, 292.853, 296.367), stdev = 4.401
[info]   CI (99.9%): [275.905, 309.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.002, 2144.002, 2144.002), stdev = 0.001
[info]   CI (99.9%): [2144.002, 2144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.658 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.658, 3.240), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.939 ±(99.9%) 41.774 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.939, 24.345), stdev = 10.849
[info]   CI (99.9%): [≈ 0, 46.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   285.516 ±(99.9%) 156.701 MB/sec [Average]
[info]   (min, avg, max) = (255.748, 285.516, 330.149), stdev = 40.695
[info]   CI (99.9%): [128.815, 442.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2092.201 ±(99.9%) 1208.632 B/op [Average]
[info]   (min, avg, max) = (1857.831, 2092.201, 2480.578), stdev = 313.878
[info]   CI (99.9%): [883.569, 3300.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 3.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 13.44% complete, ETA 00:34:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7535.887 ops/s
[info] # Warmup Iteration   2: 12925.260 ops/s
[info] # Warmup Iteration   3: 13080.450 ops/s
[info] Iteration   1: 13129.187 ops/s
[info]                  ·gc.alloc.rate:                   4002.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.458 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4059.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 486759.008 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 12971.364 ops/s
[info]                  ·gc.alloc.rate:                   3955.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3736.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 453326.868 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 12990.604 ops/s
[info]                  ·gc.alloc.rate:                   3962.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              479961.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4085.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494871.703 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 13099.047 ops/s
[info]                  ·gc.alloc.rate:                   3993.653 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490754.696 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 13127.766 ops/s
[info]                  ·gc.alloc.rate:                   4003.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              479960.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3743.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448864.953 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   13063.593 ±(99.9%) 295.217 ops/s [Average]
[info]   (min, avg, max) = (12971.364, 13063.593, 13129.187), stdev = 76.667
[info]   CI (99.9%): [12768.377, 13358.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3983.438 ±(99.9%) 88.245 MB/sec [Average]
[info]   (min, avg, max) = (3955.589, 3983.438, 4003.047), stdev = 22.917
[info]   CI (99.9%): [3895.193, 4071.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   479960.385 ±(99.9%) 3.039 B/op [Average]
[info]   (min, avg, max) = (479960.031, 479960.385, 479961.797), stdev = 0.789
[info]   CI (99.9%): [479957.346, 479963.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.154 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.154, 0.208), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18.560 ±(99.9%) 20.125 B/op [Average]
[info]   (min, avg, max) = (12.610, 18.560, 25.257), stdev = 5.226
[info]   CI (99.9%): [≈ 0, 38.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3941.590 ±(99.9%) 710.122 MB/sec [Average]
[info]   (min, avg, max) = (3736.092, 3941.590, 4085.105), stdev = 184.416
[info]   CI (99.9%): [3231.469, 4651.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   474915.446 ±(99.9%) 84672.563 B/op [Average]
[info]   (min, avg, max) = (448864.953, 474915.446, 494871.703), stdev = 21989.196
[info]   CI (99.9%): [390242.883, 559588.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   58.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.600, 12.000), stdev = 0.548
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   63.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 12.600, 13.000), stdev = 0.548
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 13.98% complete, ETA 00:33:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36541.806 ops/s
[info] # Warmup Iteration   2: 44499.707 ops/s
[info] # Warmup Iteration   3: 45197.421 ops/s
[info] Iteration   1: 45849.504 ops/s
[info]                  ·gc.alloc.rate:                   804.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.287 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22408.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 45675.322 ops/s
[info]                  ·gc.alloc.rate:                   802.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.134 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33695.457 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45550.234 ops/s
[info]                  ·gc.alloc.rate:                   799.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.438 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.360 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22578.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45352.608 ops/s
[info]                  ·gc.alloc.rate:                   796.182 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34121.082 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 45589.384 ops/s
[info]                  ·gc.alloc.rate:                   800.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              27632.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.875 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.200 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22720.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   45603.410 ±(99.9%) 698.602 ops/s [Average]
[info]   (min, avg, max) = (45352.608, 45603.410, 45849.504), stdev = 181.425
[info]   CI (99.9%): [44904.808, 46302.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   800.635 ±(99.9%) 12.247 MB/sec [Average]
[info]   (min, avg, max) = (796.182, 800.635, 804.797), stdev = 3.181
[info]   CI (99.9%): [788.388, 812.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   27632.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27632.009, 27632.009, 27632.010), stdev = 0.001
[info]   CI (99.9%): [27632.008, 27632.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.872 ±(99.9%) 3.879 B/op [Average]
[info]   (min, avg, max) = (1.438, 2.872, 4.287), stdev = 1.007
[info]   CI (99.9%): [≈ 0, 6.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   785.105 ±(99.9%) 687.438 MB/sec [Average]
[info]   (min, avg, max) = (652.671, 785.105, 983.157), stdev = 178.525
[info]   CI (99.9%): [97.667, 1472.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27104.911 ±(99.9%) 23925.559 B/op [Average]
[info]   (min, avg, max) = (22408.890, 27104.911, 34121.082), stdev = 6213.392
[info]   CI (99.9%): [3179.351, 51030.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.140
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 14.52% complete, ETA 00:33:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 96952.084 ops/s
[info] # Warmup Iteration   2: 132081.886 ops/s
[info] # Warmup Iteration   3: 133847.740 ops/s
[info] Iteration   1: 134242.114 ops/s
[info]                  ·gc.alloc.rate:                   959.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11340.009 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 132776.602 ops/s
[info]                  ·gc.alloc.rate:                   948.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.371 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11492.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 132068.754 ops/s
[info]                  ·gc.alloc.rate:                   943.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11602.155 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 134638.866 ops/s
[info]                  ·gc.alloc.rate:                   962.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              11247.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.103 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11458.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 134131.242 ops/s
[info]                  ·gc.alloc.rate:                   958.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              11248.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11579.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   133571.516 ±(99.9%) 4214.834 ops/s [Average]
[info]   (min, avg, max) = (132068.754, 133571.516, 134638.866), stdev = 1094.579
[info]   CI (99.9%): [129356.682, 137786.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   954.492 ±(99.9%) 29.861 MB/sec [Average]
[info]   (min, avg, max) = (943.950, 954.492, 962.089), stdev = 7.755
[info]   CI (99.9%): [924.631, 984.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   11248.003 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (11247.990, 11248.003, 11248.016), stdev = 0.009
[info]   CI (99.9%): [11247.969, 11248.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.104), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.835 ±(99.9%) 0.860 B/op [Average]
[info]   (min, avg, max) = (0.730, 0.835, 1.234), stdev = 0.223
[info]   CI (99.9%): [≈ 0, 1.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   975.395 ±(99.9%) 31.060 MB/sec [Average]
[info]   (min, avg, max) = (967.063, 975.395, 986.770), stdev = 8.066
[info]   CI (99.9%): [944.336, 1006.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11494.713 ±(99.9%) 404.042 B/op [Average]
[info]   (min, avg, max) = (11340.009, 11494.713, 11602.155), stdev = 104.928
[info]   CI (99.9%): [11090.671, 11898.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 15.05% complete, ETA 00:33:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282573.987 ops/s
[info] # Warmup Iteration   2: 294987.547 ops/s
[info] # Warmup Iteration   3: 297822.089 ops/s
[info] Iteration   1: 298048.581 ops/s
[info]                  ·gc.alloc.rate:                   1071.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5202.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 297788.376 ops/s
[info]                  ·gc.alloc.rate:                   1070.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.770 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5215.859 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 297941.330 ops/s
[info]                  ·gc.alloc.rate:                   1070.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5230.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 297312.669 ops/s
[info]                  ·gc.alloc.rate:                   1068.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7024.146 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 295025.407 ops/s
[info]                  ·gc.alloc.rate:                   1060.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              5656.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5339.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   297223.272 ±(99.9%) 4853.450 ops/s [Average]
[info]   (min, avg, max) = (295025.407, 297223.272, 298048.581), stdev = 1260.425
[info]   CI (99.9%): [292369.823, 302076.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1068.233 ±(99.9%) 17.152 MB/sec [Average]
[info]   (min, avg, max) = (1060.465, 1068.233, 1071.053), stdev = 4.454
[info]   CI (99.9%): [1051.080, 1085.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5656.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5656.001, 5656.001, 5656.001), stdev = 0.001
[info]   CI (99.9%): [5656.001, 5656.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.463 ±(99.9%) 0.695 B/op [Average]
[info]   (min, avg, max) = (0.330, 0.463, 0.770), stdev = 0.181
[info]   CI (99.9%): [≈ 0, 1.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1058.131 ±(99.9%) 579.377 MB/sec [Average]
[info]   (min, avg, max) = (985.179, 1058.131, 1327.057), stdev = 150.462
[info]   CI (99.9%): [478.754, 1637.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5602.578 ±(99.9%) 3067.156 B/op [Average]
[info]   (min, avg, max) = (5202.516, 5602.578, 7024.146), stdev = 796.531
[info]   CI (99.9%): [2535.423, 8669.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.59% complete, ETA 00:33:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314678.086 ops/s
[info] # Warmup Iteration   2: 319033.292 ops/s
[info] # Warmup Iteration   3: 301367.729 ops/s
[info] Iteration   1: 316645.075 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 317887.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 318180.866 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 309358.057 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 318167.277 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   316047.660 ±(99.9%) 14603.832 ops/s [Average]
[info]   (min, avg, max) = (309358.057, 316047.660, 318180.866), stdev = 3792.569
[info]   CI (99.9%): [301443.829, 330651.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 16.13% complete, ETA 00:33:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39489.721 ops/s
[info] # Warmup Iteration   2: 52818.806 ops/s
[info] # Warmup Iteration   3: 53715.894 ops/s
[info] Iteration   1: 54251.971 ops/s
[info]                  ·gc.alloc.rate:                   536.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.933 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     114.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      580.457 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16841.451 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 54117.047 ops/s
[info]                  ·gc.alloc.rate:                   535.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              15575.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18859.838 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 54647.968 ops/s
[info]                  ·gc.alloc.rate:                   540.831 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9323.575 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 54529.023 ops/s
[info]                  ·gc.alloc.rate:                   539.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              15576.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18650.067 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 54293.076 ops/s
[info]                  ·gc.alloc.rate:                   537.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              15575.976 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18769.398 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   54367.817 ±(99.9%) 831.160 ops/s [Average]
[info]   (min, avg, max) = (54117.047, 54367.817, 54647.968), stdev = 215.850
[info]   CI (99.9%): [53536.657, 55198.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   537.999 ±(99.9%) 8.362 MB/sec [Average]
[info]   (min, avg, max) = (535.479, 537.999, 540.831), stdev = 2.172
[info]   CI (99.9%): [529.636, 546.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   15576.001 ±(99.9%) 0.099 B/op [Average]
[info]   (min, avg, max) = (15575.976, 15576.001, 15576.038), stdev = 0.026
[info]   CI (99.9%): [15575.902, 15576.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.807 ±(99.9%) 6.728 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.807, 3.933), stdev = 1.747
[info]   CI (99.9%): [≈ 0, 7.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23.426 ±(99.9%) 195.218 B/op [Average]
[info]   (min, avg, max) = (0.600, 23.426, 114.115), stdev = 50.697
[info]   CI (99.9%): [≈ 0, 218.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   569.209 ±(99.9%) 540.035 MB/sec [Average]
[info]   (min, avg, max) = (323.733, 569.209, 648.373), stdev = 140.245
[info]   CI (99.9%): [29.174, 1109.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   16488.866 ±(99.9%) 15754.599 B/op [Average]
[info]   (min, avg, max) = (9323.575, 16488.866, 18859.838), stdev = 4091.419
[info]   CI (99.9%): [734.267, 32243.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.800, 7.000), stdev = 2.387
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 16.67% complete, ETA 00:32:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16744.466 ops/s
[info] # Warmup Iteration   2: 21206.569 ops/s
[info] # Warmup Iteration   3: 21520.799 ops/s
[info] Iteration   1: 21538.699 ops/s
[info]                  ·gc.alloc.rate:                   1953.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              142814.579 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120686.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 21464.363 ops/s
[info]                  ·gc.alloc.rate:                   1947.352 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146506.601 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 21409.693 ops/s
[info]                  ·gc.alloc.rate:                   1942.693 MB/sec
[info]                  ·gc.alloc.rate.norm:              142815.269 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2012.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147935.744 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 21401.583 ops/s
[info]                  ·gc.alloc.rate:                   1941.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.593 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148848.315 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21399.500 ops/s
[info]                  ·gc.alloc.rate:                   1941.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              142816.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.655 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 149394.156 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   21442.768 ±(99.9%) 230.488 ops/s [Average]
[info]   (min, avg, max) = (21399.500, 21442.768, 21538.699), stdev = 59.857
[info]   CI (99.9%): [21212.280, 21673.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   1945.532 ±(99.9%) 20.205 MB/sec [Average]
[info]   (min, avg, max) = (1941.793, 1945.532, 1953.971), stdev = 5.247
[info]   CI (99.9%): [1925.327, 1965.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   142815.583 ±(99.9%) 2.499 B/op [Average]
[info]   (min, avg, max) = (142814.579, 142815.583, 142816.025), stdev = 0.649
[info]   CI (99.9%): [142813.084, 142818.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.121, 0.208), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.861 ±(99.9%) 16.315 B/op [Average]
[info]   (min, avg, max) = (4.593, 8.861, 15.264), stdev = 4.237
[info]   CI (99.9%): [≈ 0, 25.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1943.267 ±(99.9%) 630.559 MB/sec [Average]
[info]   (min, avg, max) = (1651.214, 1943.267, 2031.232), stdev = 163.754
[info]   CI (99.9%): [1312.709, 2573.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142674.216 ±(99.9%) 47517.553 B/op [Average]
[info]   (min, avg, max) = (120686.264, 142674.216, 149394.156), stdev = 12340.158
[info]   CI (99.9%): [95156.663, 190191.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 17.20% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38018.243 ops/s
[info] # Warmup Iteration   2: 53050.593 ops/s
[info] # Warmup Iteration   3: 54731.908 ops/s
[info] Iteration   1: 54226.356 ops/s
[info]                  ·gc.alloc.rate:                   126.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.871 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     141.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7424.505 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 54386.277 ops/s
[info]                  ·gc.alloc.rate:      126.585 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 54401.490 ops/s
[info]                  ·gc.alloc.rate:                   126.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.005 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7400.081 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 54286.761 ops/s
[info]                  ·gc.alloc.rate:      126.378 MB/sec
[info]                  ·gc.alloc.rate.norm: 3664.008 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 54356.085 ops/s
[info]                  ·gc.alloc.rate:                   126.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              3664.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7406.206 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   54331.394 ±(99.9%) 282.704 ops/s [Average]
[info]   (min, avg, max) = (54226.356, 54331.394, 54401.490), stdev = 73.417
[info]   CI (99.9%): [54048.690, 54614.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   126.494 ±(99.9%) 0.630 MB/sec [Average]
[info]   (min, avg, max) = (126.270, 126.494, 126.663), stdev = 0.164
[info]   CI (99.9%): [125.864, 127.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3664.008 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (3664.007, 3664.008, 3664.009), stdev = 0.001
[info]   CI (99.9%): [3664.005, 3664.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.975 ±(99.9%) 8.386 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.975, 4.871), stdev = 2.178
[info]   CI (99.9%): [≈ 0, 9.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.301 ±(99.9%) 243.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.301, 141.353), stdev = 63.198
[info]   CI (99.9%): [≈ 0, 271.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   153.506 ±(99.9%) 539.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.506, 255.865), stdev = 140.131
[info]   CI (99.9%): [≈ 0, 693.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4446.158 ±(99.9%) 15628.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4446.158, 7424.505), stdev = 4058.779
[info]   CI (99.9%): [≈ 0, 20075.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 17.74% complete, ETA 00:32:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128320.348 ops/s
[info] # Warmup Iteration   2: 132718.580 ops/s
[info] # Warmup Iteration   3: 134156.132 ops/s
[info] Iteration   1: 134286.628 ops/s
[info]                  ·gc.alloc.rate:                   182.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.032 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2997.894 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 134618.230 ops/s
[info]                  ·gc.alloc.rate:      183.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 131514.099 ops/s
[info]                  ·gc.alloc.rate:                   179.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3061.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 133871.104 ops/s
[info]                  ·gc.alloc.rate:                   182.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3007.298 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 134943.604 ops/s
[info]                  ·gc.alloc.rate:      183.829 MB/sec
[info]                  ·gc.alloc.rate.norm: 2144.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   133846.733 ±(99.9%) 5249.325 ops/s [Average]
[info]   (min, avg, max) = (131514.099, 133846.733, 134943.604), stdev = 1363.233
[info]   CI (99.9%): [128597.408, 139096.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   182.339 ±(99.9%) 7.162 MB/sec [Average]
[info]   (min, avg, max) = (179.146, 182.339, 183.829), stdev = 1.860
[info]   CI (99.9%): [175.177, 189.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   2144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.003, 2144.003, 2144.003), stdev = 0.001
[info]   CI (99.9%): [2144.003, 2144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.006 ±(99.9%) 0.055 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.032), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.373), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   153.490 ±(99.9%) 539.539 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.490, 255.854), stdev = 140.117
[info]   CI (99.9%): [≈ 0, 693.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1813.276 ±(99.9%) 6374.598 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1813.276, 3061.187), stdev = 1655.463
[info]   CI (99.9%): [≈ 0, 8187.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 18.28% complete, ETA 00:32:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5722.268 ops/s
[info] # Warmup Iteration   2: 9683.029 ops/s
[info] # Warmup Iteration   3: 9917.834 ops/s
[info] Iteration   1: 9972.679 ops/s
[info]                  ·gc.alloc.rate:                   3340.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3369.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 531909.229 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 9950.055 ops/s
[info]                  ·gc.alloc.rate:                   3333.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3048.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482357.602 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 9837.106 ops/s
[info]                  ·gc.alloc.rate:                   3295.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3396.465 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 543471.218 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 9984.585 ops/s
[info]                  ·gc.alloc.rate:                   3345.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.102 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 536414.818 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 9951.277 ops/s
[info]                  ·gc.alloc.rate:                   3333.557 MB/sec
[info]                  ·gc.alloc.rate.norm:              527320.041 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538352.593 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   9939.140 ±(99.9%) 226.727 ops/s [Average]
[info]   (min, avg, max) = (9837.106, 9939.140, 9984.585), stdev = 58.880
[info]   CI (99.9%): [9712.413, 10165.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3329.591 ±(99.9%) 75.801 MB/sec [Average]
[info]   (min, avg, max) = (3295.527, 3329.591, 3345.054), stdev = 19.685
[info]   CI (99.9%): [3253.791, 3405.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   527320.054 ±(99.9%) 0.103 B/op [Average]
[info]   (min, avg, max) = (527320.041, 527320.054, 527320.102), stdev = 0.027
[info]   CI (99.9%): [527319.951, 527320.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.042, 0.062), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.593 ±(99.9%) 8.951 B/op [Average]
[info]   (min, avg, max) = (3.281, 6.593, 9.855), stdev = 2.325
[info]   CI (99.9%): [≈ 0, 15.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3324.239 ±(99.9%) 594.873 MB/sec [Average]
[info]   (min, avg, max) = (3048.981, 3324.239, 3403.301), stdev = 154.487
[info]   CI (99.9%): [2729.366, 3919.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   526501.092 ±(99.9%) 96355.023 B/op [Average]
[info]   (min, avg, max) = (482357.602, 526501.092, 543471.218), stdev = 25023.094
[info]   CI (99.9%): [430146.069, 622856.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 12.000), stdev = 1.304
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 18.82% complete, ETA 00:32:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26573.760 ops/s
[info] # Warmup Iteration   2: 31008.847 ops/s
[info] # Warmup Iteration   3: 38493.854 ops/s
[info] Iteration   1: 35428.396 ops/s
[info]                  ·gc.alloc.rate:                   1373.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              61015.998 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72632.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 34155.535 ops/s
[info]                  ·gc.alloc.rate:                   1323.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60622.862 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 34211.917 ops/s
[info]                  ·gc.alloc.rate:                   1326.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.618 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60949.112 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34091.413 ops/s
[info]                  ·gc.alloc.rate:                   1321.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.922 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61538.027 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 34216.793 ops/s
[info]                  ·gc.alloc.rate:                   1326.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              61008.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.879 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61633.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   34420.811 ±(99.9%) 2177.709 ops/s [Average]
[info]   (min, avg, max) = (34091.413, 34420.811, 35428.396), stdev = 565.544
[info]   CI (99.9%): [32243.101, 36598.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1334.219 ±(99.9%) 84.142 MB/sec [Average]
[info]   (min, avg, max) = (1321.688, 1334.219, 1373.168), stdev = 21.851
[info]   CI (99.9%): [1250.077, 1418.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   61009.609 ±(99.9%) 13.753 B/op [Average]
[info]   (min, avg, max) = (61008.012, 61009.609, 61015.998), stdev = 3.572
[info]   CI (99.9%): [60995.857, 61023.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.121, 0.187), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.518 ±(99.9%) 9.532 B/op [Average]
[info]   (min, avg, max) = (1.922, 5.518, 8.618), stdev = 2.475
[info]   CI (99.9%): [≈ 0, 15.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1389.591 ±(99.9%) 528.557 MB/sec [Average]
[info]   (min, avg, max) = (1315.592, 1389.591, 1634.596), stdev = 137.264
[info]   CI (99.9%): [861.035, 1918.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   63475.120 ±(99.9%) 19777.219 B/op [Average]
[info]   (min, avg, max) = (60622.862, 63475.120, 72632.420), stdev = 5136.081
[info]   CI (99.9%): [43697.901, 83252.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 19.35% complete, ETA 00:31:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224918.107 ops/s
[info] # Warmup Iteration   2: 229141.960 ops/s
[info] # Warmup Iteration   3: 238150.540 ops/s
[info] Iteration   1: 236343.944 ops/s
[info]                  ·gc.alloc.rate:                   564.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.231 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.034 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4395.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 239031.569 ops/s
[info]                  ·gc.alloc.rate:                   571.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2162.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 231933.761 ops/s
[info]                  ·gc.alloc.rate:                   554.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4457.082 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 238253.587 ops/s
[info]                  ·gc.alloc.rate:                   569.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.550 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4338.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 238586.748 ops/s
[info]                  ·gc.alloc.rate:                   570.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              3760.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4334.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   236829.922 ±(99.9%) 11254.339 ops/s [Average]
[info]   (min, avg, max) = (231933.761, 236829.922, 239031.569), stdev = 2922.716
[info]   CI (99.9%): [225575.583, 248084.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   565.798 ±(99.9%) 26.788 MB/sec [Average]
[info]   (min, avg, max) = (554.180, 565.798, 571.088), stdev = 6.957
[info]   CI (99.9%): [539.010, 592.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3760.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3760.002, 3760.002, 3760.002), stdev = 0.001
[info]   CI (99.9%): [3760.002, 3760.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.709 ±(99.9%) 5.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.709, 3.231), stdev = 1.411
[info]   CI (99.9%): [≈ 0, 6.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.721 ±(99.9%) 36.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.721, 21.518), stdev = 9.396
[info]   CI (99.9%): [≈ 0, 40.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.865 ±(99.9%) 567.076 MB/sec [Average]
[info]   (min, avg, max) = (328.435, 591.865, 660.034), stdev = 147.268
[info]   CI (99.9%): [24.789, 1158.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3937.815 ±(99.9%) 3826.539 B/op [Average]
[info]   (min, avg, max) = (2162.392, 3937.815, 4457.082), stdev = 993.740
[info]   CI (99.9%): [111.276, 7764.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 19.89% complete, ETA 00:31:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237667.796 ops/s
[info] # Warmup Iteration   2: 249976.764 ops/s
[info] # Warmup Iteration   3: 251262.594 ops/s
[info] Iteration   1: 251027.280 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 250192.780 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 250478.239 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 250937.206 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 251900.741 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   250907.249 ±(99.9%) 2507.984 ops/s [Average]
[info]   (min, avg, max) = (250192.780, 250907.249, 251900.741), stdev = 651.315
[info]   CI (99.9%): [248399.266, 253415.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 20.43% complete, ETA 00:31:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3101.490 ops/s
[info] # Warmup Iteration   2: 4355.294 ops/s
[info] # Warmup Iteration   3: 4485.358 ops/s
[info] Iteration   1: 4528.636 ops/s
[info]                  ·gc.alloc.rate:                   2097.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1968.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 684004.874 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4487.044 ops/s
[info]                  ·gc.alloc.rate:                   2077.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 815753.811 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4519.161 ops/s
[info]                  ·gc.alloc.rate:                   2092.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.129 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700481.246 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4517.899 ops/s
[info]                  ·gc.alloc.rate:                   2091.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704696.905 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4511.577 ops/s
[info]                  ·gc.alloc.rate:                   2088.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              728752.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     43.565 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 708189.596 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   4512.863 ±(99.9%) 60.336 ops/s [Average]
[info]   (min, avg, max) = (4487.044, 4512.863, 4528.636), stdev = 15.669
[info]   CI (99.9%): [4452.528, 4573.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2089.521 ±(99.9%) 28.960 MB/sec [Average]
[info]   (min, avg, max) = (2077.227, 2089.521, 2097.397), stdev = 7.521
[info]   CI (99.9%): [2060.561, 2118.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   728752.093 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (728752.090, 728752.093, 728752.097), stdev = 0.004
[info]   CI (99.9%): [728752.079, 728752.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   27.597 ±(99.9%) 50.068 B/op [Average]
[info]   (min, avg, max) = (14.467, 27.597, 43.565), stdev = 13.002
[info]   CI (99.9%): [≈ 0, 77.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2071.530 ±(99.9%) 553.696 MB/sec [Average]
[info]   (min, avg, max) = (1968.612, 2071.530, 2325.215), stdev = 143.793
[info]   CI (99.9%): [1517.834, 2625.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   722625.286 ±(99.9%) 203617.093 B/op [Average]
[info]   (min, avg, max) = (684004.874, 722625.286, 815753.811), stdev = 52878.712
[info]   CI (99.9%): [519008.194, 926242.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 20.97% complete, ETA 00:31:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2277.629 ops/s
[info] # Warmup Iteration   2: 2930.996 ops/s
[info] # Warmup Iteration   3: 2925.029 ops/s
[info] Iteration   1: 2904.137 ops/s
[info]                  ·gc.alloc.rate:                   1366.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.140 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     112.799 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 709097.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2942.721 ops/s
[info]                  ·gc.alloc.rate:                   1384.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.149 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     66.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.766 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 703799.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2937.781 ops/s
[info]                  ·gc.alloc.rate:                   1382.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     44.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.754 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 709635.136 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2929.573 ops/s
[info]                  ·gc.alloc.rate:                   1378.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.139 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716109.412 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2884.252 ops/s
[info]                  ·gc.alloc.rate:                   1357.306 MB/sec
[info]                  ·gc.alloc.rate.norm:              740720.153 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     102.223 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 731095.537 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   2919.693 ±(99.9%) 95.358 ops/s [Average]
[info]   (min, avg, max) = (2884.252, 2919.693, 2942.721), stdev = 24.764
[info]   CI (99.9%): [2824.335, 3015.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1374.008 ±(99.9%) 45.096 MB/sec [Average]
[info]   (min, avg, max) = (1357.306, 1374.008, 1384.789), stdev = 11.711
[info]   CI (99.9%): [1328.911, 1419.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   740720.144 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (740720.139, 740720.144, 740720.153), stdev = 0.006
[info]   CI (99.9%): [740720.119, 740720.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.146, 0.208), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   78.701 ±(99.9%) 108.154 B/op [Average]
[info]   (min, avg, max) = (44.597, 78.701, 112.799), stdev = 28.087
[info]   CI (99.9%): [≈ 0, 186.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1324.241 ±(99.9%) 48.698 MB/sec [Average]
[info]   (min, avg, max) = (1308.224, 1324.241, 1339.670), stdev = 12.647
[info]   CI (99.9%): [1275.543, 1372.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   713947.400 ±(99.9%) 40561.244 B/op [Average]
[info]   (min, avg, max) = (703799.652, 713947.400, 731095.537), stdev = 10533.626
[info]   CI (99.9%): [673386.156, 754508.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 21.51% complete, ETA 00:31:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4244.075 ops/s
[info] # Warmup Iteration   2: 6173.249 ops/s
[info] # Warmup Iteration   3: 6330.373 ops/s
[info] Iteration   1: 6373.832 ops/s
[info]                  ·gc.alloc.rate:                   904.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159358.555 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6338.060 ops/s
[info]                  ·gc.alloc.rate:                   899.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.571 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 241552.878 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6363.690 ops/s
[info]                  ·gc.alloc.rate:                   903.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 242378.194 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6339.123 ops/s
[info]                  ·gc.alloc.rate:                   900.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.337 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245026.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6391.356 ops/s
[info]                  ·gc.alloc.rate:                   907.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              223512.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162871.260 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   6361.212 ±(99.9%) 88.187 ops/s [Average]
[info]   (min, avg, max) = (6338.060, 6361.212, 6391.356), stdev = 22.902
[info]   CI (99.9%): [6273.026, 6449.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   903.268 ±(99.9%) 12.672 MB/sec [Average]
[info]   (min, avg, max) = (899.933, 903.268, 907.642), stdev = 3.291
[info]   CI (99.9%): [890.595, 915.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   223512.065 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (223512.064, 223512.065, 223512.069), stdev = 0.002
[info]   CI (99.9%): [223512.056, 223512.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.376 ±(99.9%) 33.238 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.376, 20.674), stdev = 8.632
[info]   CI (99.9%): [≈ 0, 45.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   849.177 ±(99.9%) 689.099 MB/sec [Average]
[info]   (min, avg, max) = (645.242, 849.177, 986.757), stdev = 178.957
[info]   CI (99.9%): [160.078, 1538.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   210237.393 ±(99.9%) 172809.312 B/op [Average]
[info]   (min, avg, max) = (159358.555, 210237.393, 245026.079), stdev = 44878.030
[info]   CI (99.9%): [37428.081, 383046.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 22.04% complete, ETA 00:30:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7678.075 ops/s
[info] # Warmup Iteration   2: 8311.173 ops/s
[info] # Warmup Iteration   3: 8311.391 ops/s
[info] Iteration   1: 8215.751 ops/s
[info]                  ·gc.alloc.rate:                   583.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.278 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     628.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126462.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8356.690 ops/s
[info]                  ·gc.alloc.rate:                   593.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123701.356 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8358.526 ops/s
[info]                  ·gc.alloc.rate:                   593.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.759 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.375 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123420.907 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 8251.578 ops/s
[info]                  ·gc.alloc.rate:                   586.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.373 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62637.582 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8191.138 ops/s
[info]                  ·gc.alloc.rate:                   582.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              111808.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126272.000 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   8274.737 ±(99.9%) 302.842 ops/s [Average]
[info]   (min, avg, max) = (8191.138, 8274.737, 8358.526), stdev = 78.647
[info]   CI (99.9%): [7971.894, 8577.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   587.813 ±(99.9%) 21.340 MB/sec [Average]
[info]   (min, avg, max) = (582.057, 587.813, 593.710), stdev = 5.542
[info]   CI (99.9%): [566.473, 609.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   111808.050 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (111808.049, 111808.050, 111808.053), stdev = 0.001
[info]   CI (99.9%): [111808.044, 111808.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.701 ±(99.9%) 5.548 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.278), stdev = 1.441
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   134.312 ±(99.9%) 1063.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 134.312, 628.118), stdev = 276.122
[info]   CI (99.9%): [≈ 0, 1197.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.576 ±(99.9%) 566.600 MB/sec [Average]
[info]   (min, avg, max) = (328.373, 591.576, 660.006), stdev = 147.144
[info]   CI (99.9%): [24.976, 1158.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   112498.783 ±(99.9%) 107466.854 B/op [Average]
[info]   (min, avg, max) = (62637.582, 112498.783, 126462.068), stdev = 27908.801
[info]   CI (99.9%): [5031.929, 219965.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 22.58% complete, ETA 00:30:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1988.741 ops/s
[info] # Warmup Iteration   2: 3684.837 ops/s
[info] # Warmup Iteration   3: 3717.779 ops/s
[info] Iteration   1: 3755.038 ops/s
[info]                  ·gc.alloc.rate:                   1628.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.109 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.444 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 689514.775 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 3739.779 ops/s
[info]                  ·gc.alloc.rate:                   1622.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.118 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 699190.813 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3761.379 ops/s
[info]                  ·gc.alloc.rate:                   1638.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              685673.458 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 700258.168 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3756.865 ops/s
[info]                  ·gc.alloc.rate:                   1636.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              685700.754 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704816.200 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3776.134 ops/s
[info]                  ·gc.alloc.rate:                   1638.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              682880.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 704325.473 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   3757.839 ±(99.9%) 50.288 ops/s [Average]
[info]   (min, avg, max) = (3739.779, 3757.839, 3776.134), stdev = 13.060
[info]   CI (99.9%): [3707.551, 3808.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1633.115 ±(99.9%) 27.527 MB/sec [Average]
[info]   (min, avg, max) = (1622.504, 1633.115, 1638.958), stdev = 7.149
[info]   CI (99.9%): [1605.588, 1660.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   684002.909 ±(99.9%) 5920.306 B/op [Average]
[info]   (min, avg, max) = (682880.108, 684002.909, 685700.754), stdev = 1537.485
[info]   CI (99.9%): [678082.604, 689923.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.033, 0.042), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.948 ±(99.9%) 18.401 B/op [Average]
[info]   (min, avg, max) = (8.708, 13.948, 17.518), stdev = 4.779
[info]   CI (99.9%): [≈ 0, 32.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1670.419 ±(99.9%) 68.602 MB/sec [Average]
[info]   (min, avg, max) = (1644.806, 1670.419, 1689.705), stdev = 17.816
[info]   CI (99.9%): [1601.818, 1739.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   699621.086 ±(99.9%) 23725.171 B/op [Average]
[info]   (min, avg, max) = (689514.775, 699621.086, 704816.200), stdev = 6161.351
[info]   CI (99.9%): [675895.915, 723346.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 23.12% complete, ETA 00:30:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4477.426 ops/s
[info] # Warmup Iteration   2: 5924.679 ops/s
[info] # Warmup Iteration   3: 5957.199 ops/s
[info] Iteration   1: 5927.145 ops/s
[info]                  ·gc.alloc.rate:                   515.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.069 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     911.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154863.072 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5963.985 ops/s
[info]                  ·gc.alloc.rate:                   518.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86399.850 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5971.369 ops/s
[info]                  ·gc.alloc.rate:                   519.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.972 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172041.601 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5986.053 ops/s
[info]                  ·gc.alloc.rate:                   520.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85644.507 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 5972.189 ops/s
[info]                  ·gc.alloc.rate:                   519.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              136824.068 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171749.517 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   5964.148 ±(99.9%) 85.366 ops/s [Average]
[info]   (min, avg, max) = (5927.145, 5964.148, 5986.053), stdev = 22.169
[info]   CI (99.9%): [5878.782, 6049.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   518.463 ±(99.9%) 7.601 MB/sec [Average]
[info]   (min, avg, max) = (515.171, 518.463, 520.374), stdev = 1.974
[info]   CI (99.9%): [510.862, 526.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   136824.069 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (136824.068, 136824.069, 136824.074), stdev = 0.002
[info]   CI (99.9%): [136824.060, 136824.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.707 ±(99.9%) 5.866 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.707, 3.432), stdev = 1.523
[info]   CI (99.9%): [≈ 0, 6.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   187.790 ±(99.9%) 1558.039 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 187.790, 911.547), stdev = 404.618
[info]   CI (99.9%): [≈ 0, 1745.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   508.143 ±(99.9%) 647.593 MB/sec [Average]
[info]   (min, avg, max) = (325.726, 508.143, 652.737), stdev = 168.178
[info]   CI (99.9%): [≈ 0, 1155.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   134139.709 ±(99.9%) 171249.651 B/op [Average]
[info]   (min, avg, max) = (85644.507, 134139.709, 172041.601), stdev = 44472.991
[info]   CI (99.9%): [≈ 0, 305389.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 23.66% complete, ETA 00:30:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4678.578 ops/s
[info] # Warmup Iteration   2: 6694.746 ops/s
[info] # Warmup Iteration   3: 6766.523 ops/s
[info] Iteration   1: 6793.599 ops/s
[info]                  ·gc.alloc.rate:                   295.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              68444.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59248.556 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 6904.875 ops/s
[info]                  ·gc.alloc.rate:                   300.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.014 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.735 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58296.393 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6932.248 ops/s
[info]                  ·gc.alloc.rate:                   301.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              68442.798 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58069.395 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6785.622 ops/s
[info]                  ·gc.alloc.rate:                   295.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.962 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     918.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75008.641 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6934.439 ops/s
[info]                  ·gc.alloc.rate:                   301.534 MB/sec
[info]                  ·gc.alloc.rate.norm:              68443.677 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.724 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.357 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73397.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   6870.157 ±(99.9%) 286.867 ops/s [Average]
[info]   (min, avg, max) = (6785.622, 6870.157, 6934.439), stdev = 74.499
[info]   CI (99.9%): [6583.289, 7157.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   298.745 ±(99.9%) 12.472 MB/sec [Average]
[info]   (min, avg, max) = (295.089, 298.745, 301.534), stdev = 3.239
[info]   CI (99.9%): [286.273, 311.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   68443.641 ±(99.9%) 1.883 B/op [Average]
[info]   (min, avg, max) = (68442.798, 68443.641, 68444.035), stdev = 0.489
[info]   CI (99.9%): [68441.758, 68445.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.802 ±(99.9%) 6.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.802, 3.962), stdev = 1.767
[info]   CI (99.9%): [≈ 0, 7.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   185.958 ±(99.9%) 1577.819 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 185.958, 918.943), stdev = 409.754
[info]   CI (99.9%): [≈ 0, 1763.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   282.792 ±(99.9%) 142.652 MB/sec [Average]
[info]   (min, avg, max) = (255.711, 282.792, 323.392), stdev = 37.046
[info]   CI (99.9%): [140.140, 425.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   64804.056 ±(99.9%) 33155.043 B/op [Average]
[info]   (min, avg, max) = (58069.395, 64804.056, 75008.641), stdev = 8610.259
[info]   CI (99.9%): [31649.013, 97959.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 24.19% complete, ETA 00:30:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6699.460 ops/s
[info] # Warmup Iteration   2: 7232.286 ops/s
[info] # Warmup Iteration   3: 7577.907 ops/s
[info] Iteration   1: 7670.942 ops/s
[info]                  ·gc.alloc.rate:                   272.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52476.630 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7627.255 ops/s
[info]                  ·gc.alloc.rate:                   271.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52779.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7596.877 ops/s
[info]                  ·gc.alloc.rate:                   270.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.015 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52987.654 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7621.803 ops/s
[info]                  ·gc.alloc.rate:                   270.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              55936.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.287 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     678.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68158.128 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7657.606 ops/s
[info]                  ·gc.alloc.rate:      272.125 MB/sec
[info]                  ·gc.alloc.rate.norm: 55936.053 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   7634.897 ±(99.9%) 113.745 ops/s [Average]
[info]   (min, avg, max) = (7596.877, 7634.897, 7670.942), stdev = 29.539
[info]   CI (99.9%): [7521.151, 7748.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   271.327 ±(99.9%) 4.025 MB/sec [Average]
[info]   (min, avg, max) = (270.018, 271.327, 272.629), stdev = 1.045
[info]   CI (99.9%): [267.301, 275.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   55936.054 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (55936.053, 55936.054, 55936.058), stdev = 0.002
[info]   CI (99.9%): [55936.047, 55936.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.660 ±(99.9%) 5.653 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.287), stdev = 1.468
[info]   CI (99.9%): [≈ 0, 6.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   136.393 ±(99.9%) 1167.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 136.393, 678.756), stdev = 303.193
[info]   CI (99.9%): [≈ 0, 1303.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.461 ±(99.9%) 488.373 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.461, 330.039), stdev = 126.829
[info]   CI (99.9%): [≈ 0, 707.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   45280.340 ±(99.9%) 100801.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45280.340, 68158.128), stdev = 26177.881
[info]   CI (99.9%): [≈ 0, 146082.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 24.73% complete, ETA 00:29:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6804.048 ops/s
[info] # Warmup Iteration   2: 7708.695 ops/s
[info] # Warmup Iteration   3: 7806.740 ops/s
[info] Iteration   1: 7817.292 ops/s
[info]                  ·gc.alloc.rate:                   205.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51496.762 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7836.120 ops/s
[info]                  ·gc.alloc.rate:                   205.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51371.930 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7819.937 ops/s
[info]                  ·gc.alloc.rate:      205.350 MB/sec
[info]                  ·gc.alloc.rate.norm: 41328.052 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7815.936 ops/s
[info]                  ·gc.alloc.rate:                   205.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.034 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51503.349 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7771.684 ops/s
[info]                  ·gc.alloc.rate:                   204.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              41328.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51801.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   7812.194 ±(99.9%) 92.604 ops/s [Average]
[info]   (min, avg, max) = (7771.684, 7812.194, 7836.120), stdev = 24.049
[info]   CI (99.9%): [7719.590, 7904.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   205.118 ±(99.9%) 2.434 MB/sec [Average]
[info]   (min, avg, max) = (204.048, 205.118, 205.730), stdev = 0.632
[info]   CI (99.9%): [202.684, 207.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   41328.053 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (41328.052, 41328.053, 41328.056), stdev = 0.002
[info]   CI (99.9%): [41328.046, 41328.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.009 ±(99.9%) 0.058 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   1.794 ±(99.9%) 11.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.794, 6.946), stdev = 3.010
[info]   CI (99.9%): [≈ 0, 13.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   204.595 ±(99.9%) 440.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.595, 255.759), stdev = 114.372
[info]   CI (99.9%): [≈ 0, 645.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   41234.711 ±(99.9%) 88762.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41234.711, 51801.516), stdev = 23051.446
[info]   CI (99.9%): [≈ 0, 129997.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 25.27% complete, ETA 00:29:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3480.660 ops/s
[info] # Warmup Iteration   2: 4200.563 ops/s
[info] # Warmup Iteration   3: 4231.339 ops/s
[info] Iteration   1: 4227.055 ops/s
[info]                  ·gc.alloc.rate:                   1484.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.104 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487715.534 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4227.308 ops/s
[info]                  ·gc.alloc.rate:                   1483.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.112 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.752 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614190.744 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 4240.966 ops/s
[info]                  ·gc.alloc.rate:                   1488.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 493142.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4208.241 ops/s
[info]                  ·gc.alloc.rate:                   1477.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     77.852 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 625184.479 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4216.482 ops/s
[info]                  ·gc.alloc.rate:                   1480.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              552600.097 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 501665.806 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   4224.011 ±(99.9%) 47.668 ops/s [Average]
[info]   (min, avg, max) = (4208.241, 4224.011, 4240.966), stdev = 12.379
[info]   CI (99.9%): [4176.343, 4271.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1483.024 ±(99.9%) 16.583 MB/sec [Average]
[info]   (min, avg, max) = (1477.459, 1483.024, 1488.910), stdev = 4.307
[info]   CI (99.9%): [1466.441, 1499.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   552600.101 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (552600.096, 552600.101, 552600.112), stdev = 0.007
[info]   CI (99.9%): [552600.075, 552600.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.137, 0.208), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   51.210 ±(99.9%) 113.175 B/op [Average]
[info]   (min, avg, max) = (15.537, 51.210, 77.852), stdev = 29.391
[info]   CI (99.9%): [≈ 0, 164.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1460.728 ±(99.9%) 704.216 MB/sec [Average]
[info]   (min, avg, max) = (1309.971, 1460.728, 1671.524), stdev = 182.883
[info]   CI (99.9%): [756.512, 2164.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   544379.748 ±(99.9%) 265830.998 B/op [Average]
[info]   (min, avg, max) = (487715.534, 544379.748, 625184.479), stdev = 69035.466
[info]   CI (99.9%): [278548.750, 810210.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 25.81% complete, ETA 00:29:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7782.522 ops/s
[info] # Warmup Iteration   2: 11476.460 ops/s
[info] # Warmup Iteration   3: 11466.065 ops/s
[info] Iteration   1: 11539.525 ops/s
[info]                  ·gc.alloc.rate:                   970.877 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 132094.048 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 11419.974 ops/s
[info]                  ·gc.alloc.rate:                   961.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              132456.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 134445.767 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 11399.395 ops/s
[info]                  ·gc.alloc.rate:                   959.297 MB/sec
[info]                  ·gc.alloc.rate.norm:              132467.980 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135613.131 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 11506.177 ops/s
[info]                  ·gc.alloc.rate:                   968.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135354.505 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11542.619 ops/s
[info]                  ·gc.alloc.rate:                   971.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              132488.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135635.567 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   11481.538 ±(99.9%) 260.011 ops/s [Average]
[info]   (min, avg, max) = (11399.395, 11481.538, 11542.619), stdev = 67.524
[info]   CI (99.9%): [11221.527, 11741.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   966.325 ±(99.9%) 22.286 MB/sec [Average]
[info]   (min, avg, max) = (959.297, 966.325, 971.866), stdev = 5.788
[info]   CI (99.9%): [944.039, 988.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   132471.225 ±(99.9%) 62.002 B/op [Average]
[info]   (min, avg, max) = (132456.035, 132471.225, 132488.035), stdev = 16.102
[info]   CI (99.9%): [132409.223, 132533.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   7.980 ±(99.9%) 25.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.980, 14.344), stdev = 6.508
[info]   CI (99.9%): [≈ 0, 33.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   982.046 ±(99.9%) 41.159 MB/sec [Average]
[info]   (min, avg, max) = (968.224, 982.046, 994.955), stdev = 10.689
[info]   CI (99.9%): [940.887, 1023.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   134628.604 ±(99.9%) 5765.561 B/op [Average]
[info]   (min, avg, max) = (132094.048, 134628.604, 135635.567), stdev = 1497.298
[info]   CI (99.9%): [128863.043, 140394.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 26.34% complete, ETA 00:29:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17936.350 ops/s
[info] # Warmup Iteration   2: 18490.561 ops/s
[info] # Warmup Iteration   3: 17898.614 ops/s
[info] Iteration   1: 18408.109 ops/s
[info]                  ·gc.alloc.rate:      96.362 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.024 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 18344.179 ops/s
[info]                  ·gc.alloc.rate:                   96.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.058 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     176.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21945.345 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18378.700 ops/s
[info]                  ·gc.alloc.rate:      96.245 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.031 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 18481.060 ops/s
[info]                  ·gc.alloc.rate:      96.752 MB/sec
[info]                  ·gc.alloc.rate.norm: 8240.022 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 18510.761 ops/s
[info]                  ·gc.alloc.rate:                   96.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.029 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.479 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21748.579 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   18424.562 ±(99.9%) 268.565 ops/s [Average]
[info]   (min, avg, max) = (18344.179, 18424.562, 18510.761), stdev = 69.746
[info]   CI (99.9%): [18155.996, 18693.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   96.465 ±(99.9%) 1.370 MB/sec [Average]
[info]   (min, avg, max) = (96.055, 96.465, 96.909), stdev = 0.356
[info]   CI (99.9%): [95.094, 97.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.024 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (8240.022, 8240.024, 8240.031), stdev = 0.004
[info]   CI (99.9%): [8240.009, 8240.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.417 ±(99.9%) 3.532 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.417, 2.058), stdev = 0.917
[info]   CI (99.9%): [≈ 0, 3.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   35.802 ±(99.9%) 302.957 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.802, 176.530), stdev = 78.677
[info]   CI (99.9%): [≈ 0, 338.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.320 ±(99.9%) 539.505 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.320, 255.820), stdev = 140.108
[info]   CI (99.9%): [≈ 0, 641.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8738.785 ±(99.9%) 46077.868 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8738.785, 21945.345), stdev = 11966.276
[info]   CI (99.9%): [≈ 0, 54816.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   5.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 3.000), stdev = 1.414
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 26.88% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2355.188 ops/s
[info] # Warmup Iteration   2: 4288.228 ops/s
[info] # Warmup Iteration   3: 4323.443 ops/s
[info] Iteration   1: 4399.672 ops/s
[info]                  ·gc.alloc.rate:                   1883.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 709772.303 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4404.283 ops/s
[info]                  ·gc.alloc.rate:                   1885.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     22.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 716344.476 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4404.221 ops/s
[info]                  ·gc.alloc.rate:                   1885.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.100 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 600682.212 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4378.171 ops/s
[info]                  ·gc.alloc.rate:                   1874.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 728663.340 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4382.324 ops/s
[info]                  ·gc.alloc.rate:                   1876.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              673872.093 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 608241.051 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   4393.734 ±(99.9%) 48.284 ops/s [Average]
[info]   (min, avg, max) = (4378.171, 4393.734, 4404.283), stdev = 12.539
[info]   CI (99.9%): [4345.450, 4442.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1881.150 ±(99.9%) 19.871 MB/sec [Average]
[info]   (min, avg, max) = (1874.634, 1881.150, 1885.637), stdev = 5.160
[info]   CI (99.9%): [1861.279, 1901.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   673872.096 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (673872.093, 673872.096, 673872.100), stdev = 0.004
[info]   CI (99.9%): [673872.081, 673872.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   19.405 ±(99.9%) 43.719 B/op [Average]
[info]   (min, avg, max) = (7.437, 19.405, 29.932), stdev = 11.354
[info]   CI (99.9%): [≈ 0, 63.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1877.954 ±(99.9%) 672.833 MB/sec [Average]
[info]   (min, avg, max) = (1680.836, 1877.954, 2027.057), stdev = 174.733
[info]   CI (99.9%): [1205.121, 2550.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   672740.676 ±(99.9%) 241645.940 B/op [Average]
[info]   (min, avg, max) = (600682.212, 672740.676, 728663.340), stdev = 62754.683
[info]   CI (99.9%): [431094.737, 914386.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 27.42% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7712.205 ops/s
[info] # Warmup Iteration   2: 8964.588 ops/s
[info] # Warmup Iteration   3: 8952.349 ops/s
[info] Iteration   1: 8911.734 ops/s
[info]                  ·gc.alloc.rate:                   526.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.395 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     599.768 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 102987.243 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 8888.325 ops/s
[info]                  ·gc.alloc.rate:                   525.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 115767.980 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 8932.354 ops/s
[info]                  ·gc.alloc.rate:                   528.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.046 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57510.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8822.978 ops/s
[info]                  ·gc.alloc.rate:                   521.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              93072.050 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116204.796 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 9713.165 ops/s
[info]                  ·gc.alloc.rate:                   476.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              77165.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52887.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   9053.711 ±(99.9%) 1428.317 ops/s [Average]
[info]   (min, avg, max) = (8822.978, 9053.711, 9713.165), stdev = 370.929
[info]   CI (99.9%): [7625.394, 10482.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   515.791 ±(99.9%) 85.755 MB/sec [Average]
[info]   (min, avg, max) = (476.177, 515.791, 528.237), stdev = 22.270
[info]   CI (99.9%): [430.036, 601.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   89890.697 ±(99.9%) 27392.395 B/op [Average]
[info]   (min, avg, max) = (77165.292, 89890.697, 93072.053), stdev = 7113.718
[info]   CI (99.9%): [62498.302, 117283.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.696 ±(99.9%) 5.811 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.696, 3.395), stdev = 1.509
[info]   CI (99.9%): [≈ 0, 6.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   122.904 ±(99.9%) 1026.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 122.904, 599.768), stdev = 266.588
[info]   CI (99.9%): [≈ 0, 1149.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   508.273 ±(99.9%) 648.709 MB/sec [Average]
[info]   (min, avg, max) = (326.362, 508.273, 653.945), stdev = 168.468
[info]   CI (99.9%): [≈ 0, 1156.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   89071.685 ±(99.9%) 120972.726 B/op [Average]
[info]   (min, avg, max) = (52887.518, 89071.685, 116204.796), stdev = 31416.233
[info]   CI (99.9%): [≈ 0, 210044.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.789
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 27.96% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7849.020 ops/s
[info] # Warmup Iteration   2: 11294.679 ops/s
[info] # Warmup Iteration   3: 10911.051 ops/s
[info] Iteration   1: 11329.567 ops/s
[info]                  ·gc.alloc.rate:                   337.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71064.805 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10865.106 ops/s
[info]                  ·gc.alloc.rate:                   324.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.858 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37052.837 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 11272.275 ops/s
[info]                  ·gc.alloc.rate:                   336.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.544 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.900 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     544.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 45151.543 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 11329.899 ops/s
[info]                  ·gc.alloc.rate:                   337.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.953 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.783 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44924.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 11363.286 ops/s
[info]                  ·gc.alloc.rate:                   338.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              46941.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 44651.661 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   11232.027 ±(99.9%) 799.815 ops/s [Average]
[info]   (min, avg, max) = (10865.106, 11232.027, 11363.286), stdev = 207.709
[info]   CI (99.9%): [10432.211, 12031.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   335.032 ±(99.9%) 23.788 MB/sec [Average]
[info]   (min, avg, max) = (324.123, 335.032, 338.964), stdev = 6.178
[info]   CI (99.9%): [311.244, 358.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   46941.792 ±(99.9%) 0.590 B/op [Average]
[info]   (min, avg, max) = (46941.544, 46941.792, 46941.953), stdev = 0.153
[info]   CI (99.9%): [46941.202, 46942.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.793 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.900), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   110.683 ±(99.9%) 933.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 110.683, 544.446), stdev = 242.492
[info]   CI (99.9%): [≈ 0, 1044.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   347.327 ±(99.9%) 370.817 MB/sec [Average]
[info]   (min, avg, max) = (255.842, 347.327, 511.528), stdev = 96.300
[info]   CI (99.9%): [≈ 0, 718.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   48569.055 ±(99.9%) 50168.980 B/op [Average]
[info]   (min, avg, max) = (37052.837, 48569.055, 71064.805), stdev = 13028.725
[info]   CI (99.9%): [≈ 0, 98738.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 3.000, 6.000), stdev = 2.121
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 28.49% complete, ETA 00:28:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12388.102 ops/s
[info] # Warmup Iteration   2: 13142.360 ops/s
[info] # Warmup Iteration   3: 13247.127 ops/s
[info] Iteration   1: 13226.818 ops/s
[info]                  ·gc.alloc.rate:                   323.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60869.718 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13267.679 ops/s
[info]                  ·gc.alloc.rate:                   324.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30343.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 13123.520 ops/s
[info]                  ·gc.alloc.rate:                   320.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.034 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.280 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     393.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39583.225 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 13305.653 ops/s
[info]                  ·gc.alloc.rate:                   325.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39041.885 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 13321.561 ops/s
[info]                  ·gc.alloc.rate:                   325.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              38448.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.374 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38801.169 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   13249.046 ±(99.9%) 304.790 ops/s [Average]
[info]   (min, avg, max) = (13123.520, 13249.046, 13321.561), stdev = 79.153
[info]   CI (99.9%): [12944.256, 13553.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   323.665 ±(99.9%) 7.535 MB/sec [Average]
[info]   (min, avg, max) = (320.563, 323.665, 325.386), stdev = 1.957
[info]   CI (99.9%): [316.130, 331.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   38448.034 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (38448.031, 38448.034, 38448.038), stdev = 0.003
[info]   CI (99.9%): [38448.021, 38448.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.668 ±(99.9%) 5.622 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.668, 3.280), stdev = 1.460
[info]   CI (99.9%): [≈ 0, 6.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   80.147 ±(99.9%) 674.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.147, 393.346), stdev = 175.113
[info]   CI (99.9%): [≈ 0, 754.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   351.181 ±(99.9%) 366.417 MB/sec [Average]
[info]   (min, avg, max) = (255.794, 351.181, 511.531), stdev = 95.157
[info]   CI (99.9%): [≈ 0, 717.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   41727.823 ±(99.9%) 43751.962 B/op [Average]
[info]   (min, avg, max) = (30343.119, 41727.823, 60869.718), stdev = 11362.246
[info]   CI (99.9%): [≈ 0, 85479.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 4.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 29.03% complete, ETA 00:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12623.665 ops/s
[info] # Warmup Iteration   2: 13418.783 ops/s
[info] # Warmup Iteration   3: 13312.413 ops/s
[info] Iteration   1: 13440.586 ops/s
[info]                  ·gc.alloc.rate:                   245.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.030 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29950.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 13381.179 ops/s
[info]                  ·gc.alloc.rate:                   244.104 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30084.667 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 13402.804 ops/s
[info]                  ·gc.alloc.rate:                   244.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.076 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.878 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30035.296 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 13423.406 ops/s
[info]                  ·gc.alloc.rate:                   244.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29990.554 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13413.824 ops/s
[info]                  ·gc.alloc.rate:                   244.670 MB/sec
[info]                  ·gc.alloc.rate.norm:              28712.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     386.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38727.595 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   13412.360 ±(99.9%) 85.767 ops/s [Average]
[info]   (min, avg, max) = (13381.179, 13412.360, 13440.586), stdev = 22.273
[info]   CI (99.9%): [13326.593, 13498.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   244.667 ±(99.9%) 1.567 MB/sec [Average]
[info]   (min, avg, max) = (244.104, 244.667, 245.173), stdev = 0.407
[info]   CI (99.9%): [243.100, 246.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   28712.032 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (28712.030, 28712.032, 28712.038), stdev = 0.003
[info]   CI (99.9%): [28712.020, 28712.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.681 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.297), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   79.860 ±(99.9%) 660.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 79.860, 386.849), stdev = 171.651
[info]   CI (99.9%): [≈ 0, 740.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   270.620 ±(99.9%) 127.857 MB/sec [Average]
[info]   (min, avg, max) = (255.748, 270.620, 330.017), stdev = 33.204
[info]   CI (99.9%): [142.763, 398.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   31757.703 ±(99.9%) 15004.458 B/op [Average]
[info]   (min, avg, max) = (29950.400, 31757.703, 38727.595), stdev = 3896.610
[info]   CI (99.9%): [16753.245, 46762.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 29.57% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13526.174 ops/s
[info] # Warmup Iteration   2: 16588.425 ops/s
[info] # Warmup Iteration   3: 16445.835 ops/s
[info] Iteration   1: 16782.973 ops/s
[info]                  ·gc.alloc.rate:                   2086.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              195737.892 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1985.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 186203.911 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 16679.195 ops/s
[info]                  ·gc.alloc.rate:                   2074.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.857 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2003.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 189041.621 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 16523.325 ops/s
[info]                  ·gc.alloc.rate:                   2054.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192051.767 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 16702.005 ops/s
[info]                  ·gc.alloc.rate:                   2077.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              195751.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191009.684 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 16687.828 ops/s
[info]                  ·gc.alloc.rate:                   2075.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              195752.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223712.128 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   16675.065 ±(99.9%) 363.141 ops/s [Average]
[info]   (min, avg, max) = (16523.325, 16675.065, 16782.973), stdev = 94.307
[info]   CI (99.9%): [16311.924, 17038.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2073.628 ±(99.9%) 44.831 MB/sec [Average]
[info]   (min, avg, max) = (2054.796, 2073.628, 2086.758), stdev = 11.643
[info]   CI (99.9%): [2028.797, 2118.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   195749.007 ±(99.9%) 23.980 B/op [Average]
[info]   (min, avg, max) = (195737.892, 195749.007, 195752.026), stdev = 6.227
[info]   CI (99.9%): [195725.028, 195772.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.166), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.606 ±(99.9%) 12.557 B/op [Average]
[info]   (min, avg, max) = (7.853, 10.606, 15.616), stdev = 3.261
[info]   CI (99.9%): [≈ 0, 23.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2080.537 ±(99.9%) 629.877 MB/sec [Average]
[info]   (min, avg, max) = (1985.117, 2080.537, 2371.833), stdev = 163.577
[info]   CI (99.9%): [1450.659, 2710.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   196403.822 ±(99.9%) 59405.493 B/op [Average]
[info]   (min, avg, max) = (186203.911, 196403.822, 223712.128), stdev = 15427.418
[info]   CI (99.9%): [136998.329, 255809.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 30.11% complete, ETA 00:27:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27907.970 ops/s
[info] # Warmup Iteration   2: 37131.583 ops/s
[info] # Warmup Iteration   3: 38235.856 ops/s
[info] Iteration   1: 38346.789 ops/s
[info]                  ·gc.alloc.rate:                   275.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              11309.956 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10498.610 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38139.882 ops/s
[info]                  ·gc.alloc.rate:                   273.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10555.304 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 38541.665 ops/s
[info]                  ·gc.alloc.rate:                   276.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.039 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.600 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10445.501 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38214.241 ops/s
[info]                  ·gc.alloc.rate:                   274.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              11304.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.916 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     161.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13319.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 37084.250 ops/s
[info]                  ·gc.alloc.rate:                                  266.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11304.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.129 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.465 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         0.207 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    8.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     329.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                13955.396 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        33.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   38065.365 ±(99.9%) 2192.133 ops/s [Average]
[info]   (min, avg, max) = (37084.250, 38065.365, 38541.665), stdev = 569.290
[info]   CI (99.9%): [35873.232, 40257.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   273.519 ±(99.9%) 14.903 MB/sec [Average]
[info]   (min, avg, max) = (266.906, 273.519, 276.881), stdev = 3.870
[info]   CI (99.9%): [258.616, 288.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   11305.200 ±(99.9%) 10.238 B/op [Average]
[info]   (min, avg, max) = (11304.011, 11305.200, 11309.956), stdev = 2.659
[info]   CI (99.9%): [11294.962, 11315.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.093 ±(99.9%) 9.411 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.093, 5.465), stdev = 2.444
[info]   CI (99.9%): [≈ 0, 10.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.833 ±(99.9%) 6.647 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.833, 3.916), stdev = 1.726
[info]   CI (99.9%): [≈ 0, 7.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   34.340 ±(99.9%) 273.697 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 34.340, 161.323), stdev = 71.078
[info]   CI (99.9%): [≈ 0, 308.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   284.041 ±(99.9%) 149.270 MB/sec [Average]
[info]   (min, avg, max) = (255.736, 284.041, 329.509), stdev = 38.765
[info]   CI (99.9%): [134.772, 433.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11754.927 ±(99.9%) 6675.896 B/op [Average]
[info]   (min, avg, max) = (10445.501, 11754.927, 13955.396), stdev = 1733.709
[info]   CI (99.9%): [5079.031, 18430.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 33.000), stdev = 13.416
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 30.65% complete, ETA 00:27:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86047.094 ops/s
[info] # Warmup Iteration   2: 89794.172 ops/s
[info] # Warmup Iteration   3: 90008.869 ops/s
[info] Iteration   1: 89726.201 ops/s
[info]                  ·gc.alloc.rate:                   469.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.228 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     56.613 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10276.491 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 90676.935 ops/s
[info]                  ·gc.alloc.rate:                   474.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5728.881 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 90297.906 ops/s
[info]                  ·gc.alloc.rate:                   472.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.088 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11447.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 90148.645 ops/s
[info]                  ·gc.alloc.rate:                   471.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.363 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5733.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 90567.444 ops/s
[info]                  ·gc.alloc.rate:                   474.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              8240.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5706.835 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   90283.426 ±(99.9%) 1446.417 ops/s [Average]
[info]   (min, avg, max) = (89726.201, 90283.426, 90676.935), stdev = 375.630
[info]   CI (99.9%): [88837.009, 91729.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   472.700 ±(99.9%) 7.459 MB/sec [Average]
[info]   (min, avg, max) = (469.847, 472.700, 474.769), stdev = 1.937
[info]   CI (99.9%): [465.240, 480.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   8240.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8240.004, 8240.005, 8240.005), stdev = 0.001
[info]   CI (99.9%): [8240.004, 8240.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.515 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.228), stdev = 1.432
[info]   CI (99.9%): [≈ 0, 6.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.685 ±(99.9%) 96.722 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.685, 56.613), stdev = 25.118
[info]   CI (99.9%): [≈ 0, 108.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.941 ±(99.9%) 624.447 MB/sec [Average]
[info]   (min, avg, max) = (328.356, 445.941, 656.923), stdev = 162.167
[info]   CI (99.9%): [≈ 0, 1070.388] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7778.709 ±(99.9%) 10955.689 B/op [Average]
[info]   (min, avg, max) = (5706.835, 7778.709, 11447.919), stdev = 2845.158
[info]   CI (99.9%): [≈ 0, 18734.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 4.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 31.18% complete, ETA 00:27:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4829.388 ops/s
[info] # Warmup Iteration   2: 8349.125 ops/s
[info] # Warmup Iteration   3: 8592.120 ops/s
[info] Iteration   1: 8639.849 ops/s
[info]                  ·gc.alloc.rate:                   3054.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550493.301 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8622.928 ops/s
[info]                  ·gc.alloc.rate:                   3048.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3044.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555714.886 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8607.902 ops/s
[info]                  ·gc.alloc.rate:                   3042.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558509.818 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8617.333 ops/s
[info]                  ·gc.alloc.rate:                   3046.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              556456.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 558778.230 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 8441.676 ops/s
[info]                  ·gc.alloc.rate:                   2984.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              556461.541 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 571171.506 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   8585.938 ±(99.9%) 313.740 ops/s [Average]
[info]   (min, avg, max) = (8441.676, 8585.938, 8639.849), stdev = 81.477
[info]   CI (99.9%): [8272.198, 8899.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3035.266 ±(99.9%) 110.735 MB/sec [Average]
[info]   (min, avg, max) = (2984.376, 3035.266, 3054.407), stdev = 28.758
[info]   CI (99.9%): [2924.530, 3146.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   556457.147 ±(99.9%) 9.459 B/op [Average]
[info]   (min, avg, max) = (556456.047, 556457.147, 556461.541), stdev = 2.457
[info]   CI (99.9%): [556447.688, 556466.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.247 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.125, 0.208), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   22.879 ±(99.9%) 45.005 B/op [Average]
[info]   (min, avg, max) = (7.604, 22.879, 38.058), stdev = 11.688
[info]   CI (99.9%): [≈ 0, 67.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3048.475 ±(99.9%) 63.800 MB/sec [Average]
[info]   (min, avg, max) = (3021.677, 3048.475, 3063.267), stdev = 16.569
[info]   CI (99.9%): [2984.675, 3112.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   558933.548 ±(99.9%) 29298.367 B/op [Average]
[info]   (min, avg, max) = (550493.301, 558933.548, 571171.506), stdev = 7608.693
[info]   CI (99.9%): [529635.181, 588231.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 31.72% complete, ETA 00:27:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19627.792 ops/s
[info] # Warmup Iteration   2: 22785.461 ops/s
[info] # Warmup Iteration   3: 23871.110 ops/s
[info] Iteration   1: 28274.931 ops/s
[info]                  ·gc.alloc.rate:                   1524.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              84880.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.635 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91008.833 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26958.533 ops/s
[info]                  ·gc.alloc.rate:                   1453.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              84867.842 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76845.536 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24453.277 ops/s
[info]                  ·gc.alloc.rate:                   1318.231 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.699 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85294.871 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24673.164 ops/s
[info]                  ·gc.alloc.rate:                   1330.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85044.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24475.961 ops/s
[info]                  ·gc.alloc.rate:                   1319.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              84856.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86160.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   25767.173 ±(99.9%) 6751.980 ops/s [Average]
[info]   (min, avg, max) = (24453.277, 25767.173, 28274.931), stdev = 1753.468
[info]   CI (99.9%): [19015.193, 32519.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1389.291 ±(99.9%) 364.297 MB/sec [Average]
[info]   (min, avg, max) = (1318.231, 1389.291, 1524.560), stdev = 94.607
[info]   CI (99.9%): [1024.994, 1753.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   84863.182 ±(99.9%) 41.254 B/op [Average]
[info]   (min, avg, max) = (84856.017, 84863.182, 84880.016), stdev = 10.713
[info]   CI (99.9%): [84821.928, 84904.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.680 ±(99.9%) 6.496 B/op [Average]
[info]   (min, avg, max) = (4.635, 6.680, 9.295), stdev = 1.687
[info]   CI (99.9%): [0.183, 13.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1389.838 ±(99.9%) 528.082 MB/sec [Average]
[info]   (min, avg, max) = (1316.223, 1389.838, 1634.641), stdev = 137.141
[info]   CI (99.9%): [861.756, 1917.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   84870.834 ±(99.9%) 19630.144 B/op [Average]
[info]   (min, avg, max) = (76845.536, 84870.834, 91008.833), stdev = 5097.886
[info]   CI (99.9%): [65240.690, 104500.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 32.26% complete, ETA 00:26:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 71095.280 ops/s
[info] # Warmup Iteration   2: 98788.226 ops/s
[info] # Warmup Iteration   3: 99498.256 ops/s
[info] Iteration   1: 99808.283 ops/s
[info]                  ·gc.alloc.rate:                   804.743 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.324 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10168.621 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100427.207 ops/s
[info]                  ·gc.alloc.rate:                   809.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.315 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.527 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15163.544 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 101277.540 ops/s
[info]                  ·gc.alloc.rate:                   816.590 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.344 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10046.628 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 100972.368 ops/s
[info]                  ·gc.alloc.rate:                   814.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.310 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.973 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15169.818 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 101234.623 ops/s
[info]                  ·gc.alloc.rate:                   816.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              12692.329 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.295 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10138.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   100744.004 ±(99.9%) 2399.674 ops/s [Average]
[info]   (min, avg, max) = (99808.283, 100744.004, 101277.540), stdev = 623.188
[info]   CI (99.9%): [98344.330, 103143.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   812.355 ±(99.9%) 19.400 MB/sec [Average]
[info]   (min, avg, max) = (804.743, 812.355, 816.590), stdev = 5.038
[info]   CI (99.9%): [792.955, 831.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12692.324 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (12692.310, 12692.324, 12692.344), stdev = 0.013
[info]   CI (99.9%): [12692.273, 12692.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.107 ±(99.9%) 1.910 B/op [Average]
[info]   (min, avg, max) = (0.324, 1.107, 1.631), stdev = 0.496
[info]   CI (99.9%): [≈ 0, 3.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   776.789 ±(99.9%) 680.619 MB/sec [Average]
[info]   (min, avg, max) = (644.730, 776.789, 973.230), stdev = 176.755
[info]   CI (99.9%): [96.170, 1457.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12137.507 ±(99.9%) 10649.385 B/op [Average]
[info]   (min, avg, max) = (10046.628, 12137.507, 15169.818), stdev = 2765.612
[info]   CI (99.9%): [1488.122, 22786.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 32.80% complete, ETA 00:26:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 111356.881 ops/s
[info] # Warmup Iteration   2: 117817.002 ops/s
[info] # Warmup Iteration   3: 118960.095 ops/s
[info] Iteration   1: 119292.416 ops/s
[info]                  ·gc.alloc.rate:                   508.013 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.199 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.986 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4354.676 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117905.239 ops/s
[info]                  ·gc.alloc.rate:                   502.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8789.781 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 119482.409 ops/s
[info]                  ·gc.alloc.rate:                   508.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4325.852 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 119340.422 ops/s
[info]                  ·gc.alloc.rate:                   508.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8662.142 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 118086.416 ops/s
[info]                  ·gc.alloc.rate:                   502.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              6704.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4377.057 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   118821.380 ±(99.9%) 2924.795 ops/s [Average]
[info]   (min, avg, max) = (117905.239, 118821.380, 119482.409), stdev = 759.560
[info]   CI (99.9%): [115896.585, 121746.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   506.077 ±(99.9%) 12.242 MB/sec [Average]
[info]   (min, avg, max) = (502.305, 506.077, 508.842), stdev = 3.179
[info]   CI (99.9%): [493.835, 518.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6704.003, 6704.004, 6704.004), stdev = 0.001
[info]   CI (99.9%): [6704.003, 6704.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.686 ±(99.9%) 5.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 3.199), stdev = 1.405
[info]   CI (99.9%): [≈ 0, 6.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.049 ±(99.9%) 71.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.049, 42.214), stdev = 18.545
[info]   CI (99.9%): [≈ 0, 80.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   460.406 ±(99.9%) 693.422 MB/sec [Average]
[info]   (min, avg, max) = (328.338, 460.406, 658.584), stdev = 180.079
[info]   CI (99.9%): [≈ 0, 1153.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6101.902 ±(99.9%) 9225.842 B/op [Average]
[info]   (min, avg, max) = (4325.852, 6101.902, 8789.781), stdev = 2395.922
[info]   CI (99.9%): [≈ 0, 15327.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:26:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146083.832 ops/s
[info] # Warmup Iteration   2: 153916.623 ops/s
[info] # Warmup Iteration   3: 154344.061 ops/s
[info] Iteration   1: 154439.996 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 154521.283 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 153823.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 154592.326 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 154451.140 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   154365.693 ±(99.9%) 1190.171 ops/s [Average]
[info]   (min, avg, max) = (153823.717, 154365.693, 154592.326), stdev = 309.084
[info]   CI (99.9%): [153175.521, 155555.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.003, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 33.87% complete, ETA 00:26:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2819.235 ops/s
[info] # Warmup Iteration   2: 4096.427 ops/s
[info] # Warmup Iteration   3: 4233.312 ops/s
[info] Iteration   1: 4196.118 ops/s
[info]                  ·gc.alloc.rate:                   1805.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.418 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.807 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.935 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 612231.472 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 4159.418 ops/s
[info]                  ·gc.alloc.rate:                   1789.420 MB/sec
[info]                  ·gc.alloc.rate.norm:              677211.700 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     31.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1980.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 749378.954 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 4242.946 ops/s
[info]                  ·gc.alloc.rate:                   1825.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.721 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618052.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 4217.361 ops/s
[info]                  ·gc.alloc.rate:                   1814.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              677212.286 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.843 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.408 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 751504.326 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4217.801 ops/s
[info]                  ·gc.alloc.rate:                   1814.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              677213.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     69.901 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629294.722 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   4206.729 ±(99.9%) 120.210 ops/s [Average]
[info]   (min, avg, max) = (4159.418, 4206.729, 4242.946), stdev = 31.218
[info]   CI (99.9%): [4086.519, 4326.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1809.804 ±(99.9%) 51.881 MB/sec [Average]
[info]   (min, avg, max) = (1789.420, 1809.804, 1825.445), stdev = 13.473
[info]   CI (99.9%): [1757.923, 1861.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   677212.442 ±(99.9%) 1.976 B/op [Average]
[info]   (min, avg, max) = (677211.700, 677212.442, 677213.065), stdev = 0.513
[info]   CI (99.9%): [677210.466, 677214.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.187), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   31.156 ±(99.9%) 99.201 B/op [Average]
[info]   (min, avg, max) = (7.721, 31.156, 69.901), stdev = 25.762
[info]   CI (99.9%): [≈ 0, 130.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1795.535 ±(99.9%) 712.711 MB/sec [Average]
[info]   (min, avg, max) = (1631.935, 1795.535, 2013.408), stdev = 185.089
[info]   CI (99.9%): [1082.823, 2508.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   672092.303 ±(99.9%) 276434.921 B/op [Average]
[info]   (min, avg, max) = (612231.472, 672092.303, 751504.326), stdev = 71789.271
[info]   CI (99.9%): [395657.383, 948527.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 34.41% complete, ETA 00:26:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13126.863 ops/s
[info] # Warmup Iteration   2: 15800.907 ops/s
[info] # Warmup Iteration   3: 15816.051 ops/s
[info] Iteration   1: 15739.196 ops/s
[info]                  ·gc.alloc.rate:                   2116.482 MB/sec
[info]                  ·gc.alloc.rate.norm:              211672.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2317.437 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231769.800 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 15806.704 ops/s
[info]                  ·gc.alloc.rate:                   2126.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              211687.108 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.145 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199712.970 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 15875.289 ops/s
[info]                  ·gc.alloc.rate:                   2134.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200099.841 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 15579.696 ops/s
[info]                  ·gc.alloc.rate:                   2095.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              211688.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.514 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 239114.087 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 15820.310 ops/s
[info]                  ·gc.alloc.rate:                   2128.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              211687.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202373.048 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   15764.239 ±(99.9%) 438.883 ops/s [Average]
[info]   (min, avg, max) = (15579.696, 15764.239, 15875.289), stdev = 113.977
[info]   CI (99.9%): [15325.355, 16203.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2120.257 ±(99.9%) 59.440 MB/sec [Average]
[info]   (min, avg, max) = (2095.313, 2120.257, 2134.961), stdev = 15.436
[info]   CI (99.9%): [2060.816, 2179.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   211684.442 ±(99.9%) 26.788 B/op [Average]
[info]   (min, avg, max) = (211672.028, 211684.442, 211688.033), stdev = 6.957
[info]   CI (99.9%): [211657.654, 211711.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.378 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.108, 0.271), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.822 ±(99.9%) 37.787 B/op [Average]
[info]   (min, avg, max) = (2.071, 10.822, 27.060), stdev = 9.813
[info]   CI (99.9%): [≈ 0, 48.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2148.584 ±(99.9%) 684.705 MB/sec [Average]
[info]   (min, avg, max) = (2005.919, 2148.584, 2366.780), stdev = 177.816
[info]   CI (99.9%): [1463.879, 2833.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   214613.949 ±(99.9%) 73996.467 B/op [Average]
[info]   (min, avg, max) = (199712.970, 214613.949, 239114.087), stdev = 19216.647
[info]   CI (99.9%): [140617.482, 288610.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 34.95% complete, ETA 00:25:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21276.065 ops/s
[info] # Warmup Iteration   2: 30545.480 ops/s
[info] # Warmup Iteration   3: 31293.068 ops/s
[info] Iteration   1: 30933.330 ops/s
[info]                  ·gc.alloc.rate:                   421.522 MB/sec
[info]                  ·gc.alloc.rate.norm:              21452.433 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.041 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26028.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30379.610 ops/s
[info]                  ·gc.alloc.rate:                                  413.465 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21424.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.569 B/op
[info]                  ·gc.churn.PS_Eden_Space:                         4.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:                    210.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:                     421.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm:                21852.829 B/op
[info]                  ·gc.count:                                       1.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   3: 31453.959 ops/s
[info]                  ·gc.alloc.rate:                   428.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16132.451 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 31444.701 ops/s
[info]                  ·gc.alloc.rate:                   427.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16137.581 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 31502.824 ops/s
[info]                  ·gc.alloc.rate:                   428.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              21424.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32214.725 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   31142.885 ±(99.9%) 1870.555 ops/s [Average]
[info]   (min, avg, max) = (30379.610, 31142.885, 31502.824), stdev = 485.777
[info]   CI (99.9%): [29272.330, 33013.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   423.987 ±(99.9%) 25.354 MB/sec [Average]
[info]   (min, avg, max) = (413.465, 423.987, 428.839), stdev = 6.584
[info]   CI (99.9%): [398.633, 449.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21429.697 ±(99.9%) 48.941 B/op [Average]
[info]   (min, avg, max) = (21424.013, 21429.697, 21452.433), stdev = 12.710
[info]   CI (99.9%): [21380.756, 21478.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.052 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.314 ±(99.9%) 2.702 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.314, 1.569), stdev = 0.702
[info]   CI (99.9%): [≈ 0, 3.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.846 ±(99.9%) 6.925 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.846, 4.062), stdev = 1.799
[info]   CI (99.9%): [≈ 0, 7.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   43.769 ±(99.9%) 358.960 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.769, 210.491), stdev = 93.221
[info]   CI (99.9%): [≈ 0, 402.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   444.555 ±(99.9%) 527.133 MB/sec [Average]
[info]   (min, avg, max) = (322.367, 444.555, 644.834), stdev = 136.895
[info]   CI (99.9%): [≈ 0, 971.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22473.286 ±(99.9%) 26417.630 B/op [Average]
[info]   (min, avg, max) = (16132.451, 22473.286, 32214.725), stdev = 6860.575
[info]   CI (99.9%): [≈ 0, 48890.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 35.48% complete, ETA 00:25:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55949.936 ops/s
[info] # Warmup Iteration   2: 59030.872 ops/s
[info] # Warmup Iteration   3: 58969.805 ops/s
[info] Iteration   1: 59767.547 ops/s
[info]                  ·gc.alloc.rate:                   621.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8691.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 59489.619 ops/s
[info]                  ·gc.alloc.rate:                   618.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17376.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 59332.030 ops/s
[info]                  ·gc.alloc.rate:                   616.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.345 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17387.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 59279.980 ops/s
[info]                  ·gc.alloc.rate:                   616.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17438.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 59192.147 ops/s
[info]                  ·gc.alloc.rate:                   615.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              16368.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17481.580 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   59412.265 ±(99.9%) 870.872 ops/s [Average]
[info]   (min, avg, max) = (59192.147, 59412.265, 59767.547), stdev = 226.163
[info]   CI (99.9%): [58541.393, 60283.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   617.835 ±(99.9%) 9.043 MB/sec [Average]
[info]   (min, avg, max) = (615.502, 617.835, 621.512), stdev = 2.348
[info]   CI (99.9%): [608.793, 626.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16368.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16368.007, 16368.007, 16368.007), stdev = 0.001
[info]   CI (99.9%): [16368.006, 16368.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.214 ±(99.9%) 2.339 B/op [Average]
[info]   (min, avg, max) = (0.553, 1.214, 2.214), stdev = 0.607
[info]   CI (99.9%): [≈ 0, 3.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.297 ±(99.9%) 562.377 MB/sec [Average]
[info]   (min, avg, max) = (330.043, 591.297, 657.377), stdev = 146.047
[info]   CI (99.9%): [28.921, 1153.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15675.391 ±(99.9%) 15033.269 B/op [Average]
[info]   (min, avg, max) = (8691.940, 15675.391, 17481.580), stdev = 3904.092
[info]   CI (99.9%): [642.122, 30708.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 36.02% complete, ETA 00:25:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4573.408 ops/s
[info] # Warmup Iteration   2: 8072.567 ops/s
[info] # Warmup Iteration   3: 8294.360 ops/s
[info] Iteration   1: 8249.834 ops/s
[info]                  ·gc.alloc.rate:                   2992.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.956 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 576646.903 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 8262.522 ops/s
[info]                  ·gc.alloc.rate:                   2997.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     19.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3044.579 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 579990.428 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8293.308 ops/s
[info]                  ·gc.alloc.rate:                   3008.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 579719.052 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 8300.908 ops/s
[info]                  ·gc.alloc.rate:                   3011.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              571088.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 515510.928 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 8226.959 ops/s
[info]                  ·gc.alloc.rate:                   2981.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              571089.792 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.946 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3059.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586025.158 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   8266.706 ±(99.9%) 118.049 ops/s [Average]
[info]   (min, avg, max) = (8226.959, 8266.706, 8300.908), stdev = 30.657
[info]   CI (99.9%): [8148.658, 8384.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2998.598 ±(99.9%) 46.758 MB/sec [Average]
[info]   (min, avg, max) = (2981.854, 2998.598, 3011.787), stdev = 12.143
[info]   CI (99.9%): [2951.840, 3045.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   571088.399 ±(99.9%) 2.997 B/op [Average]
[info]   (min, avg, max) = (571088.049, 571088.399, 571089.792), stdev = 0.778
[info]   CI (99.9%): [571085.402, 571091.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.470 ±(99.9%) 17.355 B/op [Average]
[info]   (min, avg, max) = (7.943, 13.470, 19.826), stdev = 4.507
[info]   CI (99.9%): [≈ 0, 30.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2979.841 ±(99.9%) 564.901 MB/sec [Average]
[info]   (min, avg, max) = (2718.686, 2979.841, 3059.836), stdev = 146.703
[info]   CI (99.9%): [2414.940, 3544.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   567578.494 ±(99.9%) 112840.888 B/op [Average]
[info]   (min, avg, max) = (515510.928, 567578.494, 586025.158), stdev = 29304.420
[info]   CI (99.9%): [454737.606, 680419.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 36.56% complete, ETA 00:25:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17626.098 ops/s
[info] # Warmup Iteration   2: 20173.305 ops/s
[info] # Warmup Iteration   3: 20447.041 ops/s
[info] Iteration   1: 24490.342 ops/s
[info]                  ·gc.alloc.rate:                   1701.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              109327.719 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1965.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 126309.443 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 25075.473 ops/s
[info]                  ·gc.alloc.rate:                   1741.634 MB/sec
[info]                  ·gc.alloc.rate.norm:              109336.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103670.170 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 22034.078 ops/s
[info]                  ·gc.alloc.rate:                   1530.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.067 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.132 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.457 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95069.876 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 21717.811 ops/s
[info]                  ·gc.alloc.rate:                   1508.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.112 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 121314.465 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21778.700 ops/s
[info]                  ·gc.alloc.rate:                   1512.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              109312.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97237.457 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   23019.281 ±(99.9%) 6267.045 ops/s [Average]
[info]   (min, avg, max) = (21717.811, 23019.281, 25075.473), stdev = 1627.532
[info]   CI (99.9%): [16752.236, 29286.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1598.841 ±(99.9%) 435.773 MB/sec [Average]
[info]   (min, avg, max) = (1508.294, 1598.841, 1741.634), stdev = 113.169
[info]   CI (99.9%): [1163.069, 2034.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   109319.969 ±(99.9%) 43.332 B/op [Average]
[info]   (min, avg, max) = (109312.019, 109319.969, 109336.020), stdev = 11.253
[info]   CI (99.9%): [109276.637, 109363.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.134 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (0.112, 0.134, 0.167), stdev = 0.023
[info]   CI (99.9%): [0.043, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   9.156 ±(99.9%) 6.133 B/op [Average]
[info]   (min, avg, max) = (7.003, 9.156, 10.702), stdev = 1.593
[info]   CI (99.9%): [3.023, 15.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1593.471 ±(99.9%) 1016.383 MB/sec [Average]
[info]   (min, avg, max) = (1331.183, 1593.471, 1965.590), stdev = 263.951
[info]   CI (99.9%): [577.088, 2609.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   108720.282 ±(99.9%) 54852.572 B/op [Average]
[info]   (min, avg, max) = (95069.876, 108720.282, 126309.443), stdev = 14245.039
[info]   CI (99.9%): [53867.710, 163572.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 37.10% complete, ETA 00:24:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39874.693 ops/s
[info] # Warmup Iteration   2: 57186.254 ops/s
[info] # Warmup Iteration   3: 57155.008 ops/s
[info] Iteration   1: 57754.063 ops/s
[info]                  ·gc.alloc.rate:                   719.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.702 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17598.186 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 57280.458 ops/s
[info]                  ·gc.alloc.rate:                   714.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.267 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17717.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 57012.937 ops/s
[info]                  ·gc.alloc.rate:                   710.493 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.246 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.149 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26718.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 57511.100 ops/s
[info]                  ·gc.alloc.rate:                   716.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.229 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.709 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17718.406 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 56623.150 ops/s
[info]                  ·gc.alloc.rate:                   705.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              19616.300 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18052.401 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   57236.342 ±(99.9%) 1690.985 ops/s [Average]
[info]   (min, avg, max) = (56623.150, 57236.342, 57754.063), stdev = 439.143
[info]   CI (99.9%): [55545.356, 58927.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   713.326 ±(99.9%) 21.019 MB/sec [Average]
[info]   (min, avg, max) = (705.678, 713.326, 719.677), stdev = 5.459
[info]   CI (99.9%): [692.307, 734.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19616.257 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (19616.229, 19616.257, 19616.300), stdev = 0.028
[info]   CI (99.9%): [19616.150, 19616.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.061 ±(99.9%) 3.350 B/op [Average]
[info]   (min, avg, max) = (1.149, 2.061, 3.432), stdev = 0.870
[info]   CI (99.9%): [≈ 0, 5.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   711.022 ±(99.9%) 552.649 MB/sec [Average]
[info]   (min, avg, max) = (644.888, 711.022, 967.742), stdev = 143.521
[info]   CI (99.9%): [158.373, 1263.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19560.991 ±(99.9%) 15421.318 B/op [Average]
[info]   (min, avg, max) = (17598.186, 19560.991, 26718.709), stdev = 4004.867
[info]   CI (99.9%): [4139.673, 34982.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 37.63% complete, ETA 00:24:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63985.407 ops/s
[info] # Warmup Iteration   2: 68933.622 ops/s
[info] # Warmup Iteration   3: 62429.629 ops/s
[info] Iteration   1: 63524.645 ops/s
[info]                  ·gc.alloc.rate:                   423.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6337.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 62860.629 ops/s
[info]                  ·gc.alloc.rate:                   419.145 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.298 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     82.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16528.110 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 63294.425 ops/s
[info]                  ·gc.alloc.rate:                   422.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8166.248 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 61626.104 ops/s
[info]                  ·gc.alloc.rate:                   411.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8387.519 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 63404.514 ops/s
[info]                  ·gc.alloc.rate:                   422.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              10496.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8135.675 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   62942.064 ±(99.9%) 2992.499 ops/s [Average]
[info]   (min, avg, max) = (61626.104, 62942.064, 63524.645), stdev = 777.142
[info]   CI (99.9%): [59949.565, 65934.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   419.756 ±(99.9%) 19.858 MB/sec [Average]
[info]   (min, avg, max) = (411.039, 419.756, 423.552), stdev = 5.157
[info]   CI (99.9%): [399.898, 439.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10496.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10496.006, 10496.007, 10496.007), stdev = 0.001
[info]   CI (99.9%): [10496.006, 10496.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.670 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.298), stdev = 1.472
[info]   CI (99.9%): [≈ 0, 6.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   16.619 ±(99.9%) 141.985 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.619, 82.579), stdev = 36.873
[info]   CI (99.9%): [≈ 0, 158.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   380.096 ±(99.9%) 614.583 MB/sec [Average]
[info]   (min, avg, max) = (255.741, 380.096, 660.030), stdev = 159.605
[info]   CI (99.9%): [≈ 0, 994.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9511.011 ±(99.9%) 15435.393 B/op [Average]
[info]   (min, avg, max) = (6337.502, 9511.011, 16528.110), stdev = 4008.523
[info]   CI (99.9%): [≈ 0, 24946.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.17% complete, ETA 00:24:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77852.939 ops/s
[info] # Warmup Iteration   2: 78237.361 ops/s
[info] # Warmup Iteration   3: 77518.110 ops/s
[info] Iteration   1: 77701.728 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 77683.670 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 77655.648 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 77696.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 77688.081 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   77685.027 ±(99.9%) 68.714 ops/s [Average]
[info]   (min, avg, max) = (77655.648, 77685.027, 77701.728), stdev = 17.845
[info]   CI (99.9%): [77616.313, 77753.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.005, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.005, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 38.71% complete, ETA 00:24:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2439.524 ops/s
[info] # Warmup Iteration   2: 3449.731 ops/s
[info] # Warmup Iteration   3: 3584.086 ops/s
[info] Iteration   1: 3599.372 ops/s
[info]                  ·gc.alloc.rate:                   1563.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              683384.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1299.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568112.129 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3628.807 ops/s
[info]                  ·gc.alloc.rate:                   1575.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              683383.707 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 569061.906 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3612.541 ops/s
[info]                  ·gc.alloc.rate:                   1568.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              683385.755 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 720859.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3595.203 ops/s
[info]                  ·gc.alloc.rate:                   1561.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              683383.713 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730299.942 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 3580.093 ops/s
[info]                  ·gc.alloc.rate:                   1554.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              683384.996 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 590171.720 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   3603.203 ±(99.9%) 70.885 ops/s [Average]
[info]   (min, avg, max) = (3580.093, 3603.203, 3628.807), stdev = 18.409
[info]   CI (99.9%): [3532.319, 3674.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1564.542 ±(99.9%) 30.316 MB/sec [Average]
[info]   (min, avg, max) = (1554.478, 1564.542, 1575.378), stdev = 7.873
[info]   CI (99.9%): [1534.225, 1594.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   683384.446 ±(99.9%) 3.472 B/op [Average]
[info]   (min, avg, max) = (683383.707, 683384.446, 683385.755), stdev = 0.902
[info]   CI (99.9%): [683380.974, 683387.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.037, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.343 ±(99.9%) 29.090 B/op [Average]
[info]   (min, avg, max) = (9.112, 16.343, 27.201), stdev = 7.554
[info]   CI (99.9%): [≈ 0, 45.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1455.327 ±(99.9%) 727.073 MB/sec [Average]
[info]   (min, avg, max) = (1299.569, 1455.327, 1668.267), stdev = 188.819
[info]   CI (99.9%): [728.253, 2182.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   635701.086 ±(99.9%) 318015.805 B/op [Average]
[info]   (min, avg, max) = (568112.129, 635701.086, 730299.942), stdev = 82587.695
[info]   CI (99.9%): [317685.281, 953716.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 39.25% complete, ETA 00:24:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14275.470 ops/s
[info] # Warmup Iteration   2: 17917.486 ops/s
[info] # Warmup Iteration   3: 18009.426 ops/s
[info] Iteration   1: 18049.973 ops/s
[info]                  ·gc.alloc.rate:                   2345.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              204526.106 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.780 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2325.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202757.218 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 18126.041 ops/s
[info]                  ·gc.alloc.rate:                   2355.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2346.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203758.039 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 17975.352 ops/s
[info]                  ·gc.alloc.rate:                   2336.478 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.935 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206810.751 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 17894.475 ops/s
[info]                  ·gc.alloc.rate:                   2325.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              204535.127 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208578.564 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18134.547 ops/s
[info]                  ·gc.alloc.rate:                   2356.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              204536.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206281.037 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   18036.078 ±(99.9%) 393.264 ops/s [Average]
[info]   (min, avg, max) = (17894.475, 18036.078, 18134.547), stdev = 102.129
[info]   CI (99.9%): [17642.814, 18429.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2343.835 ±(99.9%) 50.957 MB/sec [Average]
[info]   (min, avg, max) = (2325.210, 2343.835, 2356.834), stdev = 13.233
[info]   CI (99.9%): [2292.878, 2394.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   204533.862 ±(99.9%) 16.762 B/op [Average]
[info]   (min, avg, max) = (204526.106, 204533.862, 204536.030), stdev = 4.353
[info]   CI (99.9%): [204517.100, 204550.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.281 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.133, 0.250), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.622 ±(99.9%) 24.477 B/op [Average]
[info]   (min, avg, max) = (5.422, 11.622, 21.780), stdev = 6.356
[info]   CI (99.9%): [≈ 0, 36.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2356.398 ±(99.9%) 80.613 MB/sec [Average]
[info]   (min, avg, max) = (2325.231, 2356.398, 2376.941), stdev = 20.935
[info]   CI (99.9%): [2275.785, 2437.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   205637.122 ±(99.9%) 9085.584 B/op [Average]
[info]   (min, avg, max) = (202757.218, 205637.122, 208578.564), stdev = 2359.497
[info]   CI (99.9%): [196551.537, 214722.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 39.78% complete, ETA 00:23:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30978.526 ops/s
[info] # Warmup Iteration   2: 42095.104 ops/s
[info] # Warmup Iteration   3: 42568.349 ops/s
[info] Iteration   1: 45080.569 ops/s
[info]                  ·gc.alloc.rate:      177.791 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 44847.177 ops/s
[info]                  ·gc.alloc.rate:                   176.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8976.574 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 44499.982 ops/s
[info]                  ·gc.alloc.rate:                   175.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.100 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9046.963 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 45108.090 ops/s
[info]                  ·gc.alloc.rate:      177.975 MB/sec
[info]                  ·gc.alloc.rate.norm: 6208.009 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 45001.287 ops/s
[info]                  ·gc.alloc.rate:                   177.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              6208.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8946.258 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   44907.421 ±(99.9%) 960.146 ops/s [Average]
[info]   (min, avg, max) = (44499.982, 44907.421, 45108.090), stdev = 249.347
[info]   CI (99.9%): [43947.275, 45867.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   177.131 ±(99.9%) 3.852 MB/sec [Average]
[info]   (min, avg, max) = (175.509, 177.131, 177.975), stdev = 1.000
[info]   CI (99.9%): [173.279, 180.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6208.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6208.009, 6208.009, 6208.010), stdev = 0.001
[info]   CI (99.9%): [6208.008, 6208.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.020 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.100), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.704 ±(99.9%) 6.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.704, 3.521), stdev = 1.575
[info]   CI (99.9%): [≈ 0, 6.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   153.465 ±(99.9%) 539.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 153.465, 255.817), stdev = 140.093
[info]   CI (99.9%): [≈ 0, 692.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5393.959 ±(99.9%) 18961.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5393.959, 9046.963), stdev = 4924.124
[info]   CI (99.9%): [≈ 0, 24355.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 3.000), stdev = 1.517
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 40.32% complete, ETA 00:23:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93122.543 ops/s
[info] # Warmup Iteration   2: 100490.428 ops/s
[info] # Warmup Iteration   3: 100348.796 ops/s
[info] Iteration   1: 99175.590 ops/s
[info]                  ·gc.alloc.rate:                   263.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4059.495 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 100737.846 ops/s
[info]                  ·gc.alloc.rate:                   267.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3996.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 101316.982 ops/s
[info]                  ·gc.alloc.rate:                   268.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.052 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3973.643 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 101286.309 ops/s
[info]                  ·gc.alloc.rate:                   268.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              4176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.217 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.992 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5128.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 101352.175 ops/s
[info]                  ·gc.alloc.rate:      268.875 MB/sec
[info]                  ·gc.alloc.rate.norm: 4176.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   100773.780 ±(99.9%) 3574.985 ops/s [Average]
[info]   (min, avg, max) = (99175.590, 100773.780, 101352.175), stdev = 928.412
[info]   CI (99.9%): [97198.796, 104348.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   267.353 ±(99.9%) 9.380 MB/sec [Average]
[info]   (min, avg, max) = (263.168, 267.353, 268.875), stdev = 2.436
[info]   CI (99.9%): [257.973, 276.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4176.004, 4176.004, 4176.004), stdev = 0.001
[info]   CI (99.9%): [4176.003, 4176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.654 ±(99.9%) 5.517 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.654, 3.217), stdev = 1.433
[info]   CI (99.9%): [≈ 0, 6.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.161 ±(99.9%) 85.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.161, 49.992), stdev = 22.269
[info]   CI (99.9%): [≈ 0, 95.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   219.471 ±(99.9%) 488.370 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.471, 330.008), stdev = 126.828
[info]   CI (99.9%): [≈ 0, 707.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3431.730 ±(99.9%) 7620.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3431.730, 5128.916), stdev = 1978.891
[info]   CI (99.9%): [≈ 0, 11051.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 40.86% complete, ETA 00:23:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4905.293 ops/s
[info] # Warmup Iteration   2: 9115.732 ops/s
[info] # Warmup Iteration   3: 9250.274 ops/s
[info] Iteration   1: 9243.852 ops/s
[info]                  ·gc.alloc.rate:                   3304.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3366.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 573275.221 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 9247.216 ops/s
[info]                  ·gc.alloc.rate:                   3306.111 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3387.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 576609.097 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 9291.225 ops/s
[info]                  ·gc.alloc.rate:                   3322.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.044 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.020 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 517856.403 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 9276.010 ops/s
[info]                  ·gc.alloc.rate:                   3317.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3403.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 577293.189 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   5: 9384.127 ops/s
[info]                  ·gc.alloc.rate:                   3356.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              562784.043 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3404.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 570874.000 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   9288.486 ±(99.9%) 219.569 ops/s [Average]
[info]   (min, avg, max) = (9243.852, 9288.486, 9384.127), stdev = 57.021
[info]   CI (99.9%): [9068.917, 9508.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3321.457 ±(99.9%) 80.156 MB/sec [Average]
[info]   (min, avg, max) = (3304.920, 3321.457, 3356.244), stdev = 20.816
[info]   CI (99.9%): [3241.300, 3401.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   562784.045 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (562784.043, 562784.045, 562784.048), stdev = 0.002
[info]   CI (99.9%): [562784.037, 562784.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.419 ±(99.9%) 26.348 B/op [Average]
[info]   (min, avg, max) = (7.052, 13.419, 24.800), stdev = 6.843
[info]   CI (99.9%): [≈ 0, 39.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3323.734 ±(99.9%) 577.165 MB/sec [Average]
[info]   (min, avg, max) = (3057.020, 3323.734, 3404.490), stdev = 149.888
[info]   CI (99.9%): [2746.570, 3900.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   563181.582 ±(99.9%) 98075.498 B/op [Average]
[info]   (min, avg, max) = (517856.403, 563181.582, 577293.189), stdev = 25469.895
[info]   CI (99.9%): [465106.083, 661257.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.200, 13.000), stdev = 1.095
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 41.40% complete, ETA 00:23:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20936.849 ops/s
[info] # Warmup Iteration   2: 24313.661 ops/s
[info] # Warmup Iteration   3: 26255.688 ops/s
[info] Iteration   1: 29637.732 ops/s
[info]                  ·gc.alloc.rate:                   1649.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              87632.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86912.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 27064.454 ops/s
[info]                  ·gc.alloc.rate:                   1506.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              87613.958 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.842 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95893.823 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 26069.002 ops/s
[info]                  ·gc.alloc.rate:                   1450.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80272.991 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 25806.536 ops/s
[info]                  ·gc.alloc.rate:                   1436.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81514.228 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25658.327 ops/s
[info]                  ·gc.alloc.rate:                   1428.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              87608.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103006.667 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   26847.210 ±(99.9%) 6367.043 ops/s [Average]
[info]   (min, avg, max) = (25658.327, 26847.210, 29637.732), stdev = 1653.501
[info]   CI (99.9%): [20480.167, 33214.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1494.357 ±(99.9%) 354.901 MB/sec [Average]
[info]   (min, avg, max) = (1428.218, 1494.357, 1649.964), stdev = 92.167
[info]   CI (99.9%): [1139.455, 1849.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   87614.004 ±(99.9%) 40.013 B/op [Average]
[info]   (min, avg, max) = (87608.016, 87614.004, 87632.014), stdev = 10.391
[info]   CI (99.9%): [87573.991, 87654.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.397 ±(99.9%) 7.325 B/op [Average]
[info]   (min, avg, max) = (1.257, 4.397, 6.384), stdev = 1.902
[info]   CI (99.9%): [≈ 0, 11.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1526.047 ±(99.9%) 681.494 MB/sec [Average]
[info]   (min, avg, max) = (1329.378, 1526.047, 1679.252), stdev = 176.982
[info]   CI (99.9%): [844.554, 2207.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   89520.069 ±(99.9%) 37477.752 B/op [Average]
[info]   (min, avg, max) = (80272.991, 89520.069, 103006.667), stdev = 9732.853
[info]   CI (99.9%): [52042.317, 126997.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 41.94% complete, ETA 00:23:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82993.593 ops/s
[info] # Warmup Iteration   2: 112807.861 ops/s
[info] # Warmup Iteration   3: 114031.132 ops/s
[info] Iteration   1: 114325.292 ops/s
[info]                  ·gc.alloc.rate:                   872.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.377 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.055 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13314.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 111550.644 ops/s
[info]                  ·gc.alloc.rate:                   851.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.360 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13655.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 114581.322 ops/s
[info]                  ·gc.alloc.rate:                   874.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.354 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.572 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.101 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8903.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 114553.875 ops/s
[info]                  ·gc.alloc.rate:                   874.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.384 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13408.315 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 114493.599 ops/s
[info]                  ·gc.alloc.rate:                   873.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              12011.358 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.858 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13506.795 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   113900.946 ±(99.9%) 5073.673 ops/s [Average]
[info]   (min, avg, max) = (111550.644, 113900.946, 114581.322), stdev = 1317.617
[info]   CI (99.9%): [108827.274, 118974.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   869.168 ±(99.9%) 38.704 MB/sec [Average]
[info]   (min, avg, max) = (851.239, 869.168, 874.355), stdev = 10.051
[info]   CI (99.9%): [830.464, 907.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   12011.367 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (12011.354, 12011.367, 12011.384), stdev = 0.013
[info]   CI (99.9%): [12011.316, 12011.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.038 ±(99.9%) 1.520 B/op [Average]
[info]   (min, avg, max) = (0.572, 1.038, 1.469), stdev = 0.395
[info]   CI (99.9%): [≈ 0, 2.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   908.249 ±(99.9%) 560.519 MB/sec [Average]
[info]   (min, avg, max) = (648.101, 908.249, 982.504), stdev = 145.565
[info]   CI (99.9%): [347.731, 1468.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12557.813 ±(99.9%) 7881.811 B/op [Average]
[info]   (min, avg, max) = (8903.220, 12557.813, 13655.952), stdev = 2046.881
[info]   CI (99.9%): [4676.003, 20439.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 42.47% complete, ETA 00:22:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127403.628 ops/s
[info] # Warmup Iteration   2: 132498.520 ops/s
[info] # Warmup Iteration   3: 133490.624 ops/s
[info] Iteration   1: 134274.921 ops/s
[info]                  ·gc.alloc.rate:                   539.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.178 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.002 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3868.866 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 132356.040 ops/s
[info]                  ·gc.alloc.rate:                   532.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.990 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7830.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 128912.443 ops/s
[info]                  ·gc.alloc.rate:                   518.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8018.924 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 135034.566 ops/s
[info]                  ·gc.alloc.rate:                   542.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3827.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 129885.702 ops/s
[info]                  ·gc.alloc.rate:                   522.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              6328.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7958.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   132092.734 ±(99.9%) 10273.155 ops/s [Average]
[info]   (min, avg, max) = (128912.443, 132092.734, 135034.566), stdev = 2667.906
[info]   CI (99.9%): [121819.579, 142365.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   531.091 ±(99.9%) 41.222 MB/sec [Average]
[info]   (min, avg, max) = (518.274, 531.091, 542.996), stdev = 10.705
[info]   CI (99.9%): [489.869, 572.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   6328.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6328.003, 6328.003, 6328.003), stdev = 0.001
[info]   CI (99.9%): [6328.003, 6328.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.681 ±(99.9%) 5.376 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.178), stdev = 1.396
[info]   CI (99.9%): [≈ 0, 6.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.004 ±(99.9%) 62.996 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.004, 37.261), stdev = 16.360
[info]   CI (99.9%): [≈ 0, 71.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   526.109 ±(99.9%) 692.095 MB/sec [Average]
[info]   (min, avg, max) = (328.440, 526.109, 658.367), stdev = 179.735
[info]   CI (99.9%): [≈ 0, 1218.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6300.846 ±(99.9%) 8625.467 B/op [Average]
[info]   (min, avg, max) = (3827.600, 6300.846, 8018.924), stdev = 2240.006
[info]   CI (99.9%): [≈ 0, 14926.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 43.01% complete, ETA 00:22:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 153907.013 ops/s
[info] # Warmup Iteration   2: 164542.183 ops/s
[info] # Warmup Iteration   3: 163065.107 ops/s
[info] Iteration   1: 164868.681 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 156261.449 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 164492.322 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 163415.332 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 164600.707 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   162727.698 ±(99.9%) 14081.343 ops/s [Average]
[info]   (min, avg, max) = (156261.449, 162727.698, 164868.681), stdev = 3656.880
[info]   CI (99.9%): [148646.355, 176809.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.003), stdev = 0.001
[info]   CI (99.9%): [0.002, 0.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 43.55% complete, ETA 00:22:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3045.331 ops/s
[info] # Warmup Iteration   2: 4198.199 ops/s
[info] # Warmup Iteration   3: 4345.423 ops/s
[info] Iteration   1: 4345.531 ops/s
[info]                  ·gc.alloc.rate:                   1997.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.690 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2293.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 830635.256 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 4332.609 ops/s
[info]                  ·gc.alloc.rate:                   1990.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.273 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723406.147 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4349.468 ops/s
[info]                  ·gc.alloc.rate:                   1999.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.488 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726845.602 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 4332.089 ops/s
[info]                  ·gc.alloc.rate:                   1990.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 611891.165 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 4352.038 ops/s
[info]                  ·gc.alloc.rate:                   2000.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              723379.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.528 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733376.897 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   4342.347 ±(99.9%) 36.267 ops/s [Average]
[info]   (min, avg, max) = (4332.089, 4342.347, 4352.038), stdev = 9.418
[info]   CI (99.9%): [4306.080, 4378.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1995.765 ±(99.9%) 17.896 MB/sec [Average]
[info]   (min, avg, max) = (1990.705, 1995.765, 2000.034), stdev = 4.647
[info]   CI (99.9%): [1977.869, 2013.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   723379.303 ±(99.9%) 1.154 B/op [Average]
[info]   (min, avg, max) = (723379.022, 723379.303, 723379.711), stdev = 0.300
[info]   CI (99.9%): [723378.150, 723380.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   12.068 ±(99.9%) 60.202 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.068, 37.690), stdev = 15.634
[info]   CI (99.9%): [≈ 0, 72.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2001.099 ±(99.9%) 832.915 MB/sec [Average]
[info]   (min, avg, max) = (1683.894, 2001.099, 2293.771), stdev = 216.305
[info]   CI (99.9%): [1168.184, 2834.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   725231.013 ±(99.9%) 298445.201 B/op [Average]
[info]   (min, avg, max) = (611891.165, 725231.013, 830635.256), stdev = 77505.271
[info]   CI (99.9%): [426785.812, 1023676.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 44.09% complete, ETA 00:22:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33172.031 ops/s
[info] # Warmup Iteration   2: 40673.899 ops/s
[info] # Warmup Iteration   3: 40177.644 ops/s
[info] Iteration   1: 40993.159 ops/s
[info]                  ·gc.alloc.rate:                   817.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              31408.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.996 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25114.674 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 41233.317 ops/s
[info]                  ·gc.alloc.rate:                   822.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              31408.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37401.923 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 41281.011 ops/s
[info]                  ·gc.alloc.rate:                   823.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              31408.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37386.639 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41294.744 ops/s
[info]                  ·gc.alloc.rate:                   824.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              31408.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.781 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25031.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 41364.103 ops/s
[info]                  ·gc.alloc.rate:                   825.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              31408.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.792 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37651.003 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   41233.267 ±(99.9%) 547.376 ops/s [Average]
[info]   (min, avg, max) = (40993.159, 41233.267, 41364.103), stdev = 142.152
[info]   CI (99.9%): [40685.890, 41780.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   822.840 ±(99.9%) 11.400 MB/sec [Average]
[info]   (min, avg, max) = (817.884, 822.840, 825.627), stdev = 2.960
[info]   CI (99.9%): [811.440, 834.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31408.010 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (31408.010, 31408.010, 31408.012), stdev = 0.001
[info]   CI (99.9%): [31408.008, 31408.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.910 ±(99.9%) 5.156 B/op [Average]
[info]   (min, avg, max) = (0.792, 1.910, 3.996), stdev = 1.339
[info]   CI (99.9%): [≈ 0, 7.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   852.195 ±(99.9%) 691.967 MB/sec [Average]
[info]   (min, avg, max) = (654.001, 852.195, 989.737), stdev = 179.702
[info]   CI (99.9%): [160.228, 1544.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   32517.244 ±(99.9%) 26169.777 B/op [Average]
[info]   (min, avg, max) = (25031.982, 32517.244, 37651.003), stdev = 6796.208
[info]   CI (99.9%): [6347.467, 58687.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 44.62% complete, ETA 00:21:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53892.656 ops/s
[info] # Warmup Iteration   2: 81849.120 ops/s
[info] # Warmup Iteration   3: 81870.485 ops/s
[info] Iteration   1: 82289.687 ops/s
[info]                  ·gc.alloc.rate:                   865.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12332.891 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 82108.100 ops/s
[info]                  ·gc.alloc.rate:                   863.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.596 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18648.416 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 82213.500 ops/s
[info]                  ·gc.alloc.rate:                   865.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18759.642 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 81850.196 ops/s
[info]                  ·gc.alloc.rate:                   861.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12635.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 82124.067 ops/s
[info]                  ·gc.alloc.rate:                   863.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18990.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   82117.110 ±(99.9%) 639.851 ops/s [Average]
[info]   (min, avg, max) = (81850.196, 82117.110, 82289.687), stdev = 166.167
[info]   CI (99.9%): [81477.259, 82756.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   863.952 ±(99.9%) 6.840 MB/sec [Average]
[info]   (min, avg, max) = (861.124, 863.952, 865.802), stdev = 1.776
[info]   CI (99.9%): [857.112, 870.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.276 ±(99.9%) 3.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.276, 2.391), stdev = 0.864
[info]   CI (99.9%): [≈ 0, 4.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   849.066 ±(99.9%) 697.091 MB/sec [Average]
[info]   (min, avg, max) = (644.797, 849.066, 990.751), stdev = 181.032
[info]   CI (99.9%): [151.975, 1546.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16273.420 ±(99.9%) 13333.635 B/op [Average]
[info]   (min, avg, max) = (12332.891, 16273.420, 18990.160), stdev = 3462.703
[info]   CI (99.9%): [2939.785, 29607.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 45.16% complete, ETA 00:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 225400.106 ops/s
[info] # Warmup Iteration   2: 239993.377 ops/s
[info] # Warmup Iteration   3: 242349.001 ops/s
[info] Iteration   1: 237773.981 ops/s
[info]                  ·gc.alloc.rate:                   773.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4347.498 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 242280.046 ops/s
[info]                  ·gc.alloc.rate:                   787.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6400.062 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 240657.810 ops/s
[info]                  ·gc.alloc.rate:                   782.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4297.657 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 242255.734 ops/s
[info]                  ·gc.alloc.rate:                   788.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6415.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 242769.362 ops/s
[info]                  ·gc.alloc.rate:                   789.679 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4284.027 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   241147.387 ±(99.9%) 7882.472 ops/s [Average]
[info]   (min, avg, max) = (237773.981, 241147.387, 242769.362), stdev = 2047.053
[info]   CI (99.9%): [233264.914, 249029.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   784.374 ±(99.9%) 25.672 MB/sec [Average]
[info]   (min, avg, max) = (773.395, 784.374, 789.679), stdev = 6.667
[info]   CI (99.9%): [758.701, 810.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.219 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.407 ±(99.9%) 1.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.407, 0.681), stdev = 0.371
[info]   CI (99.9%): [≈ 0, 1.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.395 ±(99.9%) 691.982 MB/sec [Average]
[info]   (min, avg, max) = (656.705, 789.395, 987.494), stdev = 179.705
[info]   CI (99.9%): [97.413, 1481.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5149.017 ±(99.9%) 4426.322 B/op [Average]
[info]   (min, avg, max) = (4284.027, 5149.017, 6415.843), stdev = 1149.502
[info]   CI (99.9%): [722.695, 9575.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 45.70% complete, ETA 00:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12799.263 ops/s
[info] # Warmup Iteration   2: 24224.037 ops/s
[info] # Warmup Iteration   3: 24432.638 ops/s
[info] Iteration   1: 24519.750 ops/s
[info]                  ·gc.alloc.rate:                   1119.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83718.472 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 24308.398 ops/s
[info]                  ·gc.alloc.rate:                   1110.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63829.740 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 24341.817 ops/s
[info]                  ·gc.alloc.rate:                   1111.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85601.117 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24235.893 ops/s
[info]                  ·gc.alloc.rate:                   1107.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64865.500 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 24305.235 ops/s
[info]                  ·gc.alloc.rate:                   1110.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65026.464 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   24342.218 ±(99.9%) 409.936 ops/s [Average]
[info]   (min, avg, max) = (24235.893, 24342.218, 24519.750), stdev = 106.459
[info]   CI (99.9%): [23932.282, 24752.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1111.843 ±(99.9%) 18.544 MB/sec [Average]
[info]   (min, avg, max) = (1107.000, 1111.843, 1119.869), stdev = 4.816
[info]   CI (99.9%): [1093.298, 1130.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71896.025 ±(99.9%) 0.061 B/op [Average]
[info]   (min, avg, max) = (71896.017, 71896.025, 71896.053), stdev = 0.016
[info]   CI (99.9%): [71895.964, 71896.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.761 ±(99.9%) 9.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.761, 6.681), stdev = 2.576
[info]   CI (99.9%): [≈ 0, 13.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1123.278 ±(99.9%) 670.972 MB/sec [Average]
[info]   (min, avg, max) = (985.596, 1123.278, 1323.704), stdev = 174.249
[info]   CI (99.9%): [452.306, 1794.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   72608.259 ±(99.9%) 42477.137 B/op [Average]
[info]   (min, avg, max) = (63829.740, 72608.259, 85601.117), stdev = 11031.178
[info]   CI (99.9%): [30131.122, 115085.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 46.24% complete, ETA 00:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42311.811 ops/s
[info] # Warmup Iteration   2: 52057.352 ops/s
[info] # Warmup Iteration   3: 52523.626 ops/s
[info] Iteration   1: 52699.148 ops/s
[info]                  ·gc.alloc.rate:                   1116.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29244.820 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 52295.377 ops/s
[info]                  ·gc.alloc.rate:                   1108.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.506 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.968 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29560.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 52627.784 ops/s
[info]                  ·gc.alloc.rate:                   1115.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.174 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39363.683 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 52747.555 ops/s
[info]                  ·gc.alloc.rate:                   1118.373 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29626.237 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52815.329 ops/s
[info]                  ·gc.alloc.rate:                   1119.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29745.781 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52637.039 ±(99.9%) 781.304 ops/s [Average]
[info]   (min, avg, max) = (52295.377, 52637.039, 52815.329), stdev = 202.902
[info]   CI (99.9%): [51855.735, 53418.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1115.669 ±(99.9%) 17.120 MB/sec [Average]
[info]   (min, avg, max) = (1108.188, 1115.669, 1119.436), stdev = 4.446
[info]   CI (99.9%): [1098.549, 1132.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.008), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.117 ±(99.9%) 2.153 B/op [Average]
[info]   (min, avg, max) = (1.243, 2.117, 2.506), stdev = 0.559
[info]   CI (99.9%): [≈ 0, 4.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1053.727 ±(99.9%) 565.740 MB/sec [Average]
[info]   (min, avg, max) = (979.138, 1053.727, 1316.174), stdev = 146.921
[info]   CI (99.9%): [487.987, 1619.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31508.177 ±(99.9%) 16924.606 B/op [Average]
[info]   (min, avg, max) = (29244.820, 31508.177, 39363.683), stdev = 4395.266
[info]   CI (99.9%): [14583.571, 48432.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 46.77% complete, ETA 00:21:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57152.808 ops/s
[info] # Warmup Iteration   2: 97161.845 ops/s
[info] # Warmup Iteration   3: 97023.218 ops/s
[info] Iteration   1: 97256.547 ops/s
[info]                  ·gc.alloc.rate:                   1331.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.945 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21171.594 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 97655.455 ops/s
[info]                  ·gc.alloc.rate:                   1337.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26630.962 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 97491.491 ops/s
[info]                  ·gc.alloc.rate:                   1335.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21508.148 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 96856.895 ops/s
[info]                  ·gc.alloc.rate:                   1326.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.984 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21773.845 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 96235.297 ops/s
[info]                  ·gc.alloc.rate:                   1318.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.681 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1008.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16493.793 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   97099.137 ±(99.9%) 2189.380 ops/s [Average]
[info]   (min, avg, max) = (96235.297, 97099.137, 97655.455), stdev = 568.575
[info]   CI (99.9%): [94909.757, 99288.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1329.900 ±(99.9%) 29.736 MB/sec [Average]
[info]   (min, avg, max) = (1318.195, 1329.900, 1337.577), stdev = 7.722
[info]   CI (99.9%): [1300.164, 1359.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (21559.984, 21560.008, 21560.025), stdev = 0.017
[info]   CI (99.9%): [21559.942, 21560.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.875 ±(99.9%) 3.108 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.875, 2.013), stdev = 0.807
[info]   CI (99.9%): [≈ 0, 3.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1328.060 ±(99.9%) 877.586 MB/sec [Average]
[info]   (min, avg, max) = (1008.442, 1328.060, 1652.177), stdev = 227.906
[info]   CI (99.9%): [450.474, 2205.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21515.668 ±(99.9%) 13826.246 B/op [Average]
[info]   (min, avg, max) = (16493.793, 21515.668, 26630.962), stdev = 3590.632
[info]   CI (99.9%): [7689.422, 35341.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 47.31% complete, ETA 00:20:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 235215.569 ops/s
[info] # Warmup Iteration   2: 246783.219 ops/s
[info] # Warmup Iteration   3: 246837.682 ops/s
[info] Iteration   1: 247395.894 ops/s
[info]                  ·gc.alloc.rate:                   788.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4178.488 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 241194.663 ops/s
[info]                  ·gc.alloc.rate:                   768.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.815 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6428.848 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 248550.496 ops/s
[info]                  ·gc.alloc.rate:                   792.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.144 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4161.167 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 247597.089 ops/s
[info]                  ·gc.alloc.rate:                   789.033 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6277.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 247660.800 ops/s
[info]                  ·gc.alloc.rate:                   789.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4199.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   246479.788 ±(99.9%) 11504.145 ops/s [Average]
[info]   (min, avg, max) = (241194.663, 246479.788, 248550.496), stdev = 2987.590
[info]   CI (99.9%): [234975.643, 257983.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   785.469 ±(99.9%) 36.687 MB/sec [Average]
[info]   (min, avg, max) = (768.628, 785.469, 792.142), stdev = 9.527
[info]   CI (99.9%): [748.783, 822.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.586 ±(99.9%) 0.710 B/op [Average]
[info]   (min, avg, max) = (0.395, 0.586, 0.815), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 1.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   789.433 ±(99.9%) 692.023 MB/sec [Average]
[info]   (min, avg, max) = (656.696, 789.433, 987.461), stdev = 179.716
[info]   CI (99.9%): [97.410, 1481.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5049.072 ±(99.9%) 4588.925 B/op [Average]
[info]   (min, avg, max) = (4161.167, 5049.072, 6428.848), stdev = 1191.729
[info]   CI (99.9%): [460.147, 9637.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 47.85% complete, ETA 00:20:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 261928.534 ops/s
[info] # Warmup Iteration   2: 265361.144 ops/s
[info] # Warmup Iteration   3: 273740.311 ops/s
[info] Iteration   1: 272936.191 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 273870.903 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 274655.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 274565.662 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 274948.001 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   274195.209 ±(99.9%) 3108.012 ops/s [Average]
[info]   (min, avg, max) = (272936.191, 274195.209, 274948.001), stdev = 807.141
[info]   CI (99.9%): [271087.197, 277303.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 48.39% complete, ETA 00:20:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51704.979 ops/s
[info] # Warmup Iteration   2: 71199.112 ops/s
[info] # Warmup Iteration   3: 70596.386 ops/s
[info] Iteration   1: 70979.822 ops/s
[info]                  ·gc.alloc.rate:                   1052.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21535.156 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72167.074 ops/s
[info]                  ·gc.alloc.rate:                   1070.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.346 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21224.588 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 72296.406 ops/s
[info]                  ·gc.alloc.rate:                   1072.576 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.978 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.719 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28408.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 72192.930 ops/s
[info]                  ·gc.alloc.rate:                   1070.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.361 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.344 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21486.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 71642.229 ops/s
[info]                  ·gc.alloc.rate:                   1062.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.915 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21767.896 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   71855.692 ±(99.9%) 2124.522 ops/s [Average]
[info]   (min, avg, max) = (70979.822, 71855.692, 72296.406), stdev = 551.732
[info]   CI (99.9%): [69731.170, 73980.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1065.763 ±(99.9%) 31.964 MB/sec [Average]
[info]   (min, avg, max) = (1052.601, 1065.763, 1072.576), stdev = 8.301
[info]   CI (99.9%): [1033.799, 1097.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.011 ±(99.9%) 0.089 B/op [Average]
[info]   (min, avg, max) = (23343.978, 23344.011, 23344.033), stdev = 0.023
[info]   CI (99.9%): [23343.923, 23344.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.547 ±(99.9%) 2.900 B/op [Average]
[info]   (min, avg, max) = (0.915, 1.547, 2.719), stdev = 0.753
[info]   CI (99.9%): [≈ 0, 4.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1045.159 ±(99.9%) 560.767 MB/sec [Average]
[info]   (min, avg, max) = (971.039, 1045.159, 1305.254), stdev = 145.629
[info]   CI (99.9%): [484.392, 1605.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22884.386 ±(99.9%) 11913.387 B/op [Average]
[info]   (min, avg, max) = (21224.588, 22884.386, 28408.087), stdev = 3093.869
[info]   CI (99.9%): [10970.998, 34797.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 48.92% complete, ETA 00:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 618189.350 ops/s
[info] # Warmup Iteration   2: 929786.353 ops/s
[info] # Warmup Iteration   3: 933134.856 ops/s
[info] Iteration   1: 930102.567 ops/s
[info]                  ·gc.alloc.rate:                   3010.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3012.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5099.274 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 927010.515 ops/s
[info]                  ·gc.alloc.rate:                   3000.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2699.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4584.925 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 940992.491 ops/s
[info]                  ·gc.alloc.rate:                   3046.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5104.075 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 935119.479 ops/s
[info]                  ·gc.alloc.rate:                   3027.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5147.229 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 934192.996 ops/s
[info]                  ·gc.alloc.rate:                   3024.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              5096.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.210 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3063.334 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5161.435 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   933483.610 ±(99.9%) 20456.942 ops/s [Average]
[info]   (min, avg, max) = (927010.515, 933483.610, 940992.491), stdev = 5312.603
[info]   CI (99.9%): [913026.667, 953940.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   3021.966 ±(99.9%) 66.558 MB/sec [Average]
[info]   (min, avg, max) = (3000.890, 3021.966, 3046.243), stdev = 17.285
[info]   CI (99.9%): [2955.407, 3088.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5096.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5096.000, 5096.000, 5096.000), stdev = 0.001
[info]   CI (99.9%): [5096.000, 5096.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.211 ±(99.9%) 0.256 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.211, 0.318), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2976.980 ±(99.9%) 601.242 MB/sec [Average]
[info]   (min, avg, max) = (2699.932, 2976.980, 3063.334), stdev = 156.141
[info]   CI (99.9%): [2375.738, 3578.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5019.388 ±(99.9%) 940.914 B/op [Average]
[info]   (min, avg, max) = (4584.925, 5019.388, 5161.435), stdev = 244.352
[info]   CI (99.9%): [4078.474, 5960.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 49.46% complete, ETA 00:20:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 822104.427 ops/s
[info] # Warmup Iteration   2: 1757697.481 ops/s
[info] # Warmup Iteration   3: 1783321.543 ops/s
[info] Iteration   1: 1809594.891 ops/s
[info]                  ·gc.alloc.rate:                   1701.275 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1439.959 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1792974.846 ops/s
[info]                  ·gc.alloc.rate:                   1685.869 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1464.474 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1801455.689 ops/s
[info]                  ·gc.alloc.rate:                   1693.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1761.616 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1812450.845 ops/s
[info]                  ·gc.alloc.rate:                   1704.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1465.797 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1815531.380 ops/s
[info]                  ·gc.alloc.rate:                   1706.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1467.934 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1806401.530 ±(99.9%) 35233.030 ops/s [Average]
[info]   (min, avg, max) = (1792974.846, 1806401.530, 1815531.380), stdev = 9149.906
[info]   CI (99.9%): [1771168.500, 1841634.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1698.443 ±(99.9%) 33.163 MB/sec [Average]
[info]   (min, avg, max) = (1685.869, 1698.443, 1706.948), stdev = 8.612
[info]   CI (99.9%): [1665.279, 1731.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.094 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.072, 0.094, 0.110), stdev = 0.015
[info]   CI (99.9%): [0.035, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1744.101 ±(99.9%) 588.167 MB/sec [Average]
[info]   (min, avg, max) = (1655.248, 1744.101, 2015.979), stdev = 152.745
[info]   CI (99.9%): [1155.934, 2332.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1519.956 ±(99.9%) 522.032 B/op [Average]
[info]   (min, avg, max) = (1439.959, 1519.956, 1761.616), stdev = 135.570
[info]   CI (99.9%): [997.924, 2041.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 50.00% complete, ETA 00:19:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8902772.234 ops/s
[info] # Warmup Iteration   2: 8776156.315 ops/s
[info] # Warmup Iteration   3: 8780174.626 ops/s
[info] Iteration   1: 8750319.006 ops/s
[info]                  ·gc.alloc.rate:                   2180.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2333.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.602 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 8676507.933 ops/s
[info]                  ·gc.alloc.rate:                   2160.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365.403 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8751090.461 ops/s
[info]                  ·gc.alloc.rate:                   2179.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364.315 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 8816059.070 ops/s
[info]                  ·gc.alloc.rate:                   2195.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 423.370 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8764472.511 ops/s
[info]                  ·gc.alloc.rate:                   2182.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 365.916 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   8751689.796 ±(99.9%) 192159.786 ops/s [Average]
[info]   (min, avg, max) = (8676507.933, 8751689.796, 8816059.070), stdev = 49903.286
[info]   CI (99.9%): [8559530.010, 8943849.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2179.694 ±(99.9%) 47.941 MB/sec [Average]
[info]   (min, avg, max) = (2160.745, 2179.694, 2195.516), stdev = 12.450
[info]   CI (99.9%): [2131.753, 2227.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.019 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.019, 0.026), stdev = 0.005
[info]   CI (99.9%): [0.001, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2156.380 ±(99.9%) 691.548 MB/sec [Average]
[info]   (min, avg, max) = (2014.140, 2156.380, 2371.212), stdev = 179.593
[info]   CI (99.9%): [1464.832, 2847.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   387.721 ±(99.9%) 118.819 B/op [Average]
[info]   (min, avg, max) = (364.315, 387.721, 423.370), stdev = 30.857
[info]   CI (99.9%): [268.902, 506.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 50.54% complete, ETA 00:19:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69049.664 ops/s
[info] # Warmup Iteration   2: 312183.430 ops/s
[info] # Warmup Iteration   3: 316772.308 ops/s
[info] Iteration   1: 313675.239 ops/s
[info]                  ·gc.alloc.rate:                   1850.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.627 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9957.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 317193.578 ops/s
[info]                  ·gc.alloc.rate:                   1871.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9945.892 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 315218.503 ops/s
[info]                  ·gc.alloc.rate:                   1860.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.520 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8395.021 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 317188.576 ops/s
[info]                  ·gc.alloc.rate:                   1871.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.835 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10058.434 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 318535.996 ops/s
[info]                  ·gc.alloc.rate:                   1880.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              9288.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.467 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8370.123 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   316362.379 ±(99.9%) 7363.514 ops/s [Average]
[info]   (min, avg, max) = (313675.239, 316362.379, 318535.996), stdev = 1912.281
[info]   CI (99.9%): [308998.865, 323725.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1866.919 ±(99.9%) 44.358 MB/sec [Average]
[info]   (min, avg, max) = (1850.575, 1866.919, 1880.284), stdev = 11.520
[info]   CI (99.9%): [1822.561, 1911.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9288.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9288.001, 9288.001, 9288.001), stdev = 0.001
[info]   CI (99.9%): [9288.001, 9288.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.559 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (0.411, 0.559, 0.723), stdev = 0.119
[info]   CI (99.9%): [0.101, 1.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1878.215 ±(99.9%) 671.225 MB/sec [Average]
[info]   (min, avg, max) = (1681.638, 1878.215, 2026.835), stdev = 174.315
[info]   CI (99.9%): [1206.990, 2549.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9345.356 ±(99.9%) 3388.691 B/op [Average]
[info]   (min, avg, max) = (8370.123, 9345.356, 10058.434), stdev = 880.032
[info]   CI (99.9%): [5956.665, 12734.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 51.08% complete, ETA 00:19:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591943.744 ops/s
[info] # Warmup Iteration   2: 1023580.183 ops/s
[info] # Warmup Iteration   3: 1031869.401 ops/s
[info] Iteration   1: 1034365.958 ops/s
[info]                  ·gc.alloc.rate:                   2276.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2316.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3525.259 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1030245.958 ops/s
[info]                  ·gc.alloc.rate:                   2267.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2341.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3577.077 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1022649.789 ops/s
[info]                  ·gc.alloc.rate:                   2250.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.160 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3109.488 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1035870.637 ops/s
[info]                  ·gc.alloc.rate:                   2280.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.583 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3598.161 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1025937.872 ops/s
[info]                  ·gc.alloc.rate:                   2257.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3464.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.128 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3644.143 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1029814.043 ±(99.9%) 21434.295 ops/s [Average]
[info]   (min, avg, max) = (1022649.789, 1029814.043, 1035870.637), stdev = 5566.418
[info]   CI (99.9%): [1008379.747, 1051248.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2266.406 ±(99.9%) 47.647 MB/sec [Average]
[info]   (min, avg, max) = (2250.628, 2266.406, 2280.268), stdev = 12.374
[info]   CI (99.9%): [2218.760, 2314.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3464.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3464.000, 3464.000, 3464.000), stdev = 0.001
[info]   CI (99.9%): [3464.000, 3464.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.191 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (0.128, 0.191, 0.286), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2284.337 ±(99.9%) 575.442 MB/sec [Average]
[info]   (min, avg, max) = (2020.294, 2284.337, 2375.168), stdev = 149.441
[info]   CI (99.9%): [1708.895, 2859.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3490.825 ±(99.9%) 837.173 B/op [Average]
[info]   (min, avg, max) = (3109.488, 3490.825, 3644.143), stdev = 217.411
[info]   CI (99.9%): [2653.652, 4327.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 51.61% complete, ETA 00:19:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1482891.258 ops/s
[info] # Warmup Iteration   2: 3822124.547 ops/s
[info] # Warmup Iteration   3: 3844747.992 ops/s
[info] Iteration   1: 3860627.583 ops/s
[info]                  ·gc.alloc.rate:                   2197.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.536 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 814.698 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3822821.857 ops/s
[info]                  ·gc.alloc.rate:                   2176.519 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2351.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 967.861 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 3860926.326 ops/s
[info]                  ·gc.alloc.rate:                   2197.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.043 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 826.029 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 3871958.955 ops/s
[info]                  ·gc.alloc.rate:                   2204.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.221 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3869729.028 ops/s
[info]                  ·gc.alloc.rate:                   2203.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2037.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 828.763 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3857212.750 ±(99.9%) 76585.548 ops/s [Average]
[info]   (min, avg, max) = (3822821.857, 3857212.750, 3871958.955), stdev = 19889.024
[info]   CI (99.9%): [3780627.202, 3933798.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2196.027 ±(99.9%) 43.695 MB/sec [Average]
[info]   (min, avg, max) = (2176.519, 2196.027, 2204.781), stdev = 11.348
[info]   CI (99.9%): [2152.332, 2239.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.167), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.046 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.046, 0.069), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2157.235 ±(99.9%) 722.001 MB/sec [Average]
[info]   (min, avg, max) = (1998.536, 2157.235, 2372.652), stdev = 187.501
[info]   CI (99.9%): [1435.234, 2879.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   880.315 ±(99.9%) 302.066 B/op [Average]
[info]   (min, avg, max) = (814.698, 880.315, 967.861), stdev = 78.446
[info]   CI (99.9%): [578.249, 1182.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 52.15% complete, ETA 00:18:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15391663.381 ops/s
[info] # Warmup Iteration   2: 17280711.412 ops/s
[info] # Warmup Iteration   3: 18556374.441 ops/s
[info] Iteration   1: 18583115.458 ops/s
[info]                  ·gc.alloc.rate:                   850.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.440 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 17965857.958 ops/s
[info]                  ·gc.alloc.rate:                   821.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 18510920.465 ops/s
[info]                  ·gc.alloc.rate:                   846.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18348348.642 ops/s
[info]                  ·gc.alloc.rate:                   839.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 18528850.798 ops/s
[info]                  ·gc.alloc.rate:                   847.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.281 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   18387418.664 ±(99.9%) 968023.229 ops/s [Average]
[info]   (min, avg, max) = (17965857.958, 18387418.664, 18583115.458), stdev = 251392.559
[info]   CI (99.9%): [17419395.435, 19355441.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   841.072 ±(99.9%) 44.441 MB/sec [Average]
[info]   (min, avg, max) = (821.741, 841.072, 850.195), stdev = 11.541
[info]   CI (99.9%): [796.631, 885.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.026
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.009 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.009, 0.012), stdev = 0.002
[info]   CI (99.9%): [0.001, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   855.697 ±(99.9%) 695.987 MB/sec [Average]
[info]   (min, avg, max) = (656.696, 855.697, 992.087), stdev = 180.746
[info]   CI (99.9%): [159.711, 1551.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   73.120 ±(99.9%) 56.598 B/op [Average]
[info]   (min, avg, max) = (56.514, 73.120, 84.281), stdev = 14.698
[info]   CI (99.9%): [16.521, 129.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 52.69% complete, ETA 00:18:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146532.272 ops/s
[info] # Warmup Iteration   2: 514332.317 ops/s
[info] # Warmup Iteration   3: 522535.880 ops/s
[info] Iteration   1: 523234.327 ops/s
[info]                  ·gc.alloc.rate:                   1807.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5969.032 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 525128.806 ops/s
[info]                  ·gc.alloc.rate:                   1815.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.374 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5000.245 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 525603.882 ops/s
[info]                  ·gc.alloc.rate:                   1817.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6037.064 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 527386.681 ops/s
[info]                  ·gc.alloc.rate:                   1822.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5035.573 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 522437.484 ops/s
[info]                  ·gc.alloc.rate:                   1806.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5101.368 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   524758.236 ±(99.9%) 7572.503 ops/s [Average]
[info]   (min, avg, max) = (522437.484, 524758.236, 527386.681), stdev = 1966.555
[info]   CI (99.9%): [517185.733, 532330.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1813.804 ±(99.9%) 25.959 MB/sec [Average]
[info]   (min, avg, max) = (1806.184, 1813.804, 1822.588), stdev = 6.741
[info]   CI (99.9%): [1787.845, 1839.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5440.001, 5440.001, 5440.001), stdev = 0.001
[info]   CI (99.9%): [5440.001, 5440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.125), stdev = 0.017
[info]   CI (99.9%): [0.041, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.325 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.248, 0.325, 0.376), stdev = 0.053
[info]   CI (99.9%): [0.121, 0.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.921 ±(99.9%) 671.114 MB/sec [Average]
[info]   (min, avg, max) = (1668.462, 1809.921, 2016.502), stdev = 174.286
[info]   CI (99.9%): [1138.807, 2481.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5428.656 ±(99.9%) 2026.015 B/op [Average]
[info]   (min, avg, max) = (5000.245, 5428.656, 6037.064), stdev = 526.150
[info]   CI (99.9%): [3402.641, 7454.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 53.23% complete, ETA 00:18:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1359622.960 ops/s
[info] # Warmup Iteration   2: 2408460.935 ops/s
[info] # Warmup Iteration   3: 2378930.227 ops/s
[info] Iteration   1: 2407001.887 ops/s
[info]                  ·gc.alloc.rate:                   1529.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 863.273 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2403654.690 ops/s
[info]                  ·gc.alloc.rate:                   1527.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1090.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2405847.123 ops/s
[info]                  ·gc.alloc.rate:                   1528.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 876.566 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2385919.704 ops/s
[info]                  ·gc.alloc.rate:                   1516.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1109.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2386365.950 ops/s
[info]                  ·gc.alloc.rate:                   1516.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1351.809 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 891.413 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2397757.871 ±(99.9%) 41094.615 ops/s [Average]
[info]   (min, avg, max) = (2385919.704, 2397757.871, 2407001.887), stdev = 10672.141
[info]   CI (99.9%): [2356663.257, 2438852.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1523.679 ±(99.9%) 25.811 MB/sec [Average]
[info]   (min, avg, max) = (1516.324, 1523.679, 1529.761), stdev = 6.703
[info]   CI (99.9%): [1497.868, 1549.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1000.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.000, 1000.000, 1000.000), stdev = 0.001
[info]   CI (99.9%): [1000.000, 1000.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.063 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.054, 0.063, 0.082), stdev = 0.012
[info]   CI (99.9%): [0.016, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1472.077 ±(99.9%) 711.618 MB/sec [Average]
[info]   (min, avg, max) = (1320.601, 1472.077, 1683.037), stdev = 184.805
[info]   CI (99.9%): [760.459, 2183.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   966.284 ±(99.9%) 472.648 B/op [Average]
[info]   (min, avg, max) = (863.273, 966.284, 1109.946), stdev = 122.745
[info]   CI (99.9%): [493.636, 1438.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 53.76% complete, ETA 00:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4335940.581 ops/s
[info] # Warmup Iteration   2: 5067875.345 ops/s
[info] # Warmup Iteration   3: 5231312.152 ops/s
[info] Iteration   1: 5256939.802 ops/s
[info]                  ·gc.alloc.rate:                   694.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.146 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5254356.800 ops/s
[info]                  ·gc.alloc.rate:                   694.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.744 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 5220300.085 ops/s
[info]                  ·gc.alloc.rate:                   689.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 198.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5258955.843 ops/s
[info]                  ·gc.alloc.rate:                   694.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.087 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 196.666 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5249464.899 ops/s
[info]                  ·gc.alloc.rate:                   693.628 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5248003.486 ±(99.9%) 61181.347 ops/s [Average]
[info]   (min, avg, max) = (5220300.085, 5248003.486, 5258955.843), stdev = 15888.601
[info]   CI (99.9%): [5186822.139, 5309184.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   693.506 ±(99.9%) 8.160 MB/sec [Average]
[info]   (min, avg, max) = (689.830, 693.506, 694.957), stdev = 2.119
[info]   CI (99.9%): [685.345, 701.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.422 ±(99.9%) 3.129 MB/sec [Average]
[info]   (min, avg, max) = (656.736, 657.422, 658.548), stdev = 0.813
[info]   CI (99.9%): [654.293, 660.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   197.179 ±(99.9%) 2.096 B/op [Average]
[info]   (min, avg, max) = (196.666, 197.179, 198.023), stdev = 0.544
[info]   CI (99.9%): [195.083, 199.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 54.30% complete, ETA 00:18:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 116866.306 ops/s
[info] # Warmup Iteration   2: 414013.547 ops/s
[info] # Warmup Iteration   3: 417316.369 ops/s
[info] Iteration   1: 414466.779 ops/s
[info]                  ·gc.alloc.rate:                   1944.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.395 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7549.436 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 408067.021 ops/s
[info]                  ·gc.alloc.rate:                   1914.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7741.081 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 417069.435 ops/s
[info]                  ·gc.alloc.rate:                   1956.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7624.188 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 418321.382 ops/s
[info]                  ·gc.alloc.rate:                   1962.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.548 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7635.244 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 418266.314 ops/s
[info]                  ·gc.alloc.rate:                   1962.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              7384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6378.151 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   415238.186 ±(99.9%) 16567.819 ops/s [Average]
[info]   (min, avg, max) = (408067.021, 415238.186, 418321.382), stdev = 4302.610
[info]   CI (99.9%): [398670.367, 431806.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1947.900 ±(99.9%) 77.627 MB/sec [Average]
[info]   (min, avg, max) = (1914.303, 1947.900, 1962.300), stdev = 20.160
[info]   CI (99.9%): [1870.272, 2025.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7384.001, 7384.001, 7384.001), stdev = 0.001
[info]   CI (99.9%): [7384.001, 7384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.411 ±(99.9%) 0.452 B/op [Average]
[info]   (min, avg, max) = (0.236, 0.411, 0.548), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.749 ±(99.9%) 547.534 MB/sec [Average]
[info]   (min, avg, max) = (1694.902, 1947.749, 2029.068), stdev = 142.193
[info]   CI (99.9%): [1400.215, 2495.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   7385.620 ±(99.9%) 2184.548 B/op [Average]
[info]   (min, avg, max) = (6378.151, 7385.620, 7741.081), stdev = 567.320
[info]   CI (99.9%): [5201.072, 9570.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 54.84% complete, ETA 00:17:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1552145.068 ops/s
[info] # Warmup Iteration   2: 2706703.675 ops/s
[info] # Warmup Iteration   3: 2697872.185 ops/s
[info] Iteration   1: 2707875.090 ops/s
[info]                  ·gc.alloc.rate:                   1431.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 765.818 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2718814.968 ops/s
[info]                  ·gc.alloc.rate:                   1437.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2783595.609 ops/s
[info]                  ·gc.alloc.rate:                   1471.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.280 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2734042.027 ops/s
[info]                  ·gc.alloc.rate:                   1445.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.367 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.870 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2773356.076 ops/s
[info]                  ·gc.alloc.rate:                   1465.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 957.229 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2743536.754 ±(99.9%) 128679.720 ops/s [Average]
[info]   (min, avg, max) = (2707875.090, 2743536.754, 2783595.609), stdev = 33417.715
[info]   CI (99.9%): [2614857.034, 2872216.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1450.251 ±(99.9%) 67.782 MB/sec [Average]
[info]   (min, avg, max) = (1431.547, 1450.251, 1471.360), stdev = 17.603
[info]   CI (99.9%): [1382.468, 1518.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.060 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.060, 0.084), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1469.242 ±(99.9%) 719.390 MB/sec [Average]
[info]   (min, avg, max) = (1317.674, 1469.242, 1686.581), stdev = 186.823
[info]   CI (99.9%): [749.852, 2188.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   842.870 ±(99.9%) 409.620 B/op [Average]
[info]   (min, avg, max) = (756.280, 842.870, 961.152), stdev = 106.377
[info]   CI (99.9%): [433.249, 1252.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 55.38% complete, ETA 00:17:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6317736.395 ops/s
[info] # Warmup Iteration   2: 6822115.599 ops/s
[info] # Warmup Iteration   3: 7011928.104 ops/s
[info] Iteration   1: 6908579.088 ops/s
[info]                  ·gc.alloc.rate:                   1053.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.311 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 298.938 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6891171.298 ops/s
[info]                  ·gc.alloc.rate:                   1050.574 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.394 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6926261.222 ops/s
[info]                  ·gc.alloc.rate:                   1055.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.010 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6935310.383 ops/s
[info]                  ·gc.alloc.rate:                   1057.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6916128.278 ops/s
[info]                  ·gc.alloc.rate:                   1054.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.159 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6915490.054 ±(99.9%) 65246.380 ops/s [Average]
[info]   (min, avg, max) = (6891171.298, 6915490.054, 6935310.383), stdev = 16944.278
[info]   CI (99.9%): [6850243.674, 6980736.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1054.400 ±(99.9%) 9.978 MB/sec [Average]
[info]   (min, avg, max) = (1050.574, 1054.400, 1057.405), stdev = 2.591
[info]   CI (99.9%): [1044.422, 1064.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.021, 0.028), stdev = 0.005
[info]   CI (99.9%): [≈ 10⁻⁴, 0.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1056.350 ±(99.9%) 551.232 MB/sec [Average]
[info]   (min, avg, max) = (986.639, 1056.350, 1312.311), stdev = 143.153
[info]   CI (99.9%): [505.118, 1607.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   240.455 ±(99.9%) 125.927 B/op [Average]
[info]   (min, avg, max) = (225.010, 240.455, 298.938), stdev = 32.703
[info]   CI (99.9%): [114.528, 366.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 55.91% complete, ETA 00:17:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275174.638 ops/s
[info] # Warmup Iteration   2: 701618.794 ops/s
[info] # Warmup Iteration   3: 708700.383 ops/s
[info] Iteration   1: 710926.190 ops/s
[info]                  ·gc.alloc.rate:                   2074.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1995.156 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4416.792 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 710108.894 ops/s
[info]                  ·gc.alloc.rate:                   2071.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4458.027 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 705972.451 ops/s
[info]                  ·gc.alloc.rate:                   2059.475 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4510.142 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 700034.411 ops/s
[info]                  ·gc.alloc.rate:                   2042.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4564.854 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 707629.391 ops/s
[info]                  ·gc.alloc.rate:                   2064.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              4592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4527.681 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   706934.267 ±(99.9%) 16677.112 ops/s [Average]
[info]   (min, avg, max) = (700034.411, 706934.267, 710926.190), stdev = 4330.993
[info]   CI (99.9%): [690257.156, 723611.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2062.415 ±(99.9%) 49.450 MB/sec [Average]
[info]   (min, avg, max) = (2042.031, 2062.415, 2074.301), stdev = 12.842
[info]   CI (99.9%): [2012.965, 2111.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4592.001, 4592.001, 4592.001), stdev = 0.001
[info]   CI (99.9%): [4592.001, 4592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.194 ±(99.9%) 0.230 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.194, 0.278), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2018.956 ±(99.9%) 61.760 MB/sec [Average]
[info]   (min, avg, max) = (1995.156, 2018.956, 2035.421), stdev = 16.039
[info]   CI (99.9%): [1957.196, 2080.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4495.499 ±(99.9%) 225.017 B/op [Average]
[info]   (min, avg, max) = (4416.792, 4495.499, 4564.854), stdev = 58.436
[info]   CI (99.9%): [4270.482, 4720.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 56.45% complete, ETA 00:17:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461937.730 ops/s
[info] # Warmup Iteration   2: 806924.049 ops/s
[info] # Warmup Iteration   3: 816127.468 ops/s
[info] Iteration   1: 814250.193 ops/s
[info]                  ·gc.alloc.rate:                   2656.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2662.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5147.716 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 813984.355 ops/s
[info]                  ·gc.alloc.rate:                   2655.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2688.662 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5199.693 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 806852.563 ops/s
[info]                  ·gc.alloc.rate:                   2633.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.284 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.274 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4617.391 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 811613.265 ops/s
[info]                  ·gc.alloc.rate:                   2648.259 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5263.257 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 815634.813 ops/s
[info]                  ·gc.alloc.rate:                   2661.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2718.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5245.714 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   812467.038 ±(99.9%) 13306.740 ops/s [Average]
[info]   (min, avg, max) = (806852.563, 812467.038, 815634.813), stdev = 3455.718
[info]   CI (99.9%): [799160.298, 825773.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2651.085 ±(99.9%) 42.691 MB/sec [Average]
[info]   (min, avg, max) = (2633.158, 2651.085, 2661.483), stdev = 11.087
[info]   CI (99.9%): [2608.394, 2693.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.000, 5136.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.142, 0.187), stdev = 0.027
[info]   CI (99.9%): [0.037, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.274 ±(99.9%) 0.202 B/op [Average]
[info]   (min, avg, max) = (0.241, 0.274, 0.362), stdev = 0.053
[info]   CI (99.9%): [0.072, 0.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2630.201 ±(99.9%) 572.387 MB/sec [Average]
[info]   (min, avg, max) = (2367.274, 2630.201, 2718.337), stdev = 148.647
[info]   CI (99.9%): [2057.814, 3202.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5094.754 ±(99.9%) 1041.944 B/op [Average]
[info]   (min, avg, max) = (4617.391, 5094.754, 5263.257), stdev = 270.589
[info]   CI (99.9%): [4052.811, 6136.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 56.99% complete, ETA 00:17:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 275493.367 ops/s
[info] # Warmup Iteration   2: 962706.684 ops/s
[info] # Warmup Iteration   3: 976933.598 ops/s
[info] Iteration   1: 975132.773 ops/s
[info]                  ·gc.alloc.rate:                   1209.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2118.057 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 988161.163 ops/s
[info]                  ·gc.alloc.rate:                   1225.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2107.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 979970.173 ops/s
[info]                  ·gc.alloc.rate:                   1215.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1604.283 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 991386.205 ops/s
[info]                  ·gc.alloc.rate:                   1229.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2123.591 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 991884.797 ops/s
[info]                  ·gc.alloc.rate:                   1230.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2133.082 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   985307.022 ±(99.9%) 28580.950 ops/s [Average]
[info]   (min, avg, max) = (975132.773, 985307.022, 991884.797), stdev = 7422.382
[info]   CI (99.9%): [956726.072, 1013887.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1221.908 ±(99.9%) 35.499 MB/sec [Average]
[info]   (min, avg, max) = (1209.319, 1221.908, 1230.086), stdev = 9.219
[info]   CI (99.9%): [1186.409, 1257.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.133 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.133, 0.198), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1263.109 ±(99.9%) 571.070 MB/sec [Average]
[info]   (min, avg, max) = (998.758, 1263.109, 1344.198), stdev = 148.305
[info]   CI (99.9%): [692.039, 1834.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2017.236 ±(99.9%) 889.646 B/op [Average]
[info]   (min, avg, max) = (1604.283, 2017.236, 2133.082), stdev = 231.038
[info]   CI (99.9%): [1127.590, 2906.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 57.53% complete, ETA 00:16:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7061283.385 ops/s
[info] # Warmup Iteration   2: 8210093.706 ops/s
[info] # Warmup Iteration   3: 8395639.773 ops/s
[info] Iteration   1: 8397844.921 ops/s
[info]                  ·gc.alloc.rate:                   384.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.001 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 47.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8376519.339 ops/s
[info]                  ·gc.alloc.rate:                   383.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.134 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      588.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8437094.718 ops/s
[info]                  ·gc.alloc.rate:                   385.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.007 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8443802.823 ops/s
[info]                  ·gc.alloc.rate:                   386.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.587 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8442084.283 ops/s
[info]                  ·gc.alloc.rate:                   386.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.354 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61.598 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8419469.217 ±(99.9%) 117531.817 ops/s [Average]
[info]   (min, avg, max) = (8376519.339, 8419469.217, 8443802.823), stdev = 30522.640
[info]   CI (99.9%): [8301937.400, 8537001.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   385.119 ±(99.9%) 5.498 MB/sec [Average]
[info]   (min, avg, max) = (383.116, 385.119, 386.321), stdev = 1.428
[info]   CI (99.9%): [379.621, 390.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.644 ±(99.9%) 5.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.644, 3.134), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 6.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.121 ±(99.9%) 1.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.121, 0.589), stdev = 0.262
[info]   CI (99.9%): [≈ 0, 1.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   367.392 ±(99.9%) 491.352 MB/sec [Average]
[info]   (min, avg, max) = (255.741, 367.392, 588.070), stdev = 127.602
[info]   CI (99.9%): [≈ 0, 858.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   68.730 ±(99.9%) 92.848 B/op [Average]
[info]   (min, avg, max) = (47.938, 68.730, 110.518), stdev = 24.112
[info]   CI (99.9%): [≈ 0, 161.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 58.06% complete, ETA 00:16:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32556.573 ops/s
[info] # Warmup Iteration   2: 322843.767 ops/s
[info] # Warmup Iteration   3: 325585.225 ops/s
[info] Iteration   1: 327979.471 ops/s
[info]                  ·gc.alloc.rate:                   1808.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9503.507 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 332861.714 ops/s
[info]                  ·gc.alloc.rate:                   1835.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.787 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7882.289 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 332293.013 ops/s
[info]                  ·gc.alloc.rate:                   1832.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.338 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9541.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 332642.997 ops/s
[info]                  ·gc.alloc.rate:                   1834.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7984.993 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 327719.857 ops/s
[info]                  ·gc.alloc.rate:                   1807.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              8680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.700 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9755.780 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   330699.410 ±(99.9%) 10053.881 ops/s [Average]
[info]   (min, avg, max) = (327719.857, 330699.410, 332861.714), stdev = 2610.961
[info]   CI (99.9%): [320645.530, 340753.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1823.659 ±(99.9%) 56.028 MB/sec [Average]
[info]   (min, avg, max) = (1807.228, 1823.659, 1835.917), stdev = 14.550
[info]   CI (99.9%): [1767.630, 1879.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8680.001, 8680.001, 8680.001), stdev = 0.001
[info]   CI (99.9%): [8680.001, 8680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.167), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.495 ±(99.9%) 0.971 B/op [Average]
[info]   (min, avg, max) = (0.197, 0.495, 0.787), stdev = 0.252
[info]   CI (99.9%): [≈ 0, 1.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1876.022 ±(99.9%) 702.591 MB/sec [Average]
[info]   (min, avg, max) = (1667.192, 1876.022, 2031.211), stdev = 182.461
[info]   CI (99.9%): [1173.432, 2578.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8933.611 ±(99.9%) 3537.257 B/op [Average]
[info]   (min, avg, max) = (7882.289, 8933.611, 9755.780), stdev = 918.614
[info]   CI (99.9%): [5396.354, 12470.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 58.60% complete, ETA 00:16:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5640.148 ops/s
[info] # Warmup Iteration   2: 7645.328 ops/s
[info] # Warmup Iteration   3: 7835.790 ops/s
[info] Iteration   1: 7953.264 ops/s
[info]                  ·gc.alloc.rate:                   1913.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.055 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.145 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324986.063 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7936.984 ops/s
[info]                  ·gc.alloc.rate:                   1909.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     59.459 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.478 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 394784.439 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7918.904 ops/s
[info]                  ·gc.alloc.rate:                   1905.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.352 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398991.045 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7842.318 ops/s
[info]                  ·gc.alloc.rate:                   1887.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.290 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 405395.922 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 7813.330 ops/s
[info]                  ·gc.alloc.rate:                   1880.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              378776.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.393 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340535.622 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7892.960 ±(99.9%) 237.006 ops/s [Average]
[info]   (min, avg, max) = (7813.330, 7892.960, 7953.264), stdev = 61.550
[info]   CI (99.9%): [7655.954, 8129.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1899.441 ±(99.9%) 56.613 MB/sec [Average]
[info]   (min, avg, max) = (1880.216, 1899.441, 1913.945), stdev = 14.702
[info]   CI (99.9%): [1842.828, 1956.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378776.053 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (378776.051, 378776.053, 378776.056), stdev = 0.002
[info]   CI (99.9%): [378776.044, 378776.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.114 ±(99.9%) 0.450 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.114, 0.300), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   22.728 ±(99.9%) 89.384 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.728, 59.459), stdev = 23.213
[info]   CI (99.9%): [≈ 0, 112.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1870.132 ±(99.9%) 720.759 MB/sec [Average]
[info]   (min, avg, max) = (1642.145, 1870.132, 2020.290), stdev = 187.179
[info]   CI (99.9%): [1149.372, 2590.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   372938.618 ±(99.9%) 143547.532 B/op [Average]
[info]   (min, avg, max) = (324986.063, 372938.618, 405395.922), stdev = 37278.838
[info]   CI (99.9%): [229391.086, 516486.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 59.14% complete, ETA 00:16:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7593.956 ops/s
[info] # Warmup Iteration   2: 14238.128 ops/s
[info] # Warmup Iteration   3: 14662.639 ops/s
[info] Iteration   1: 14383.533 ops/s
[info]                  ·gc.alloc.rate:                   500.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              54816.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.354 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.722 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35278.103 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14608.900 ops/s
[info]                  ·gc.alloc.rate:                   508.734 MB/sec
[info]                  ·gc.alloc.rate.norm:              54816.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69720.867 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14665.166 ops/s
[info]                  ·gc.alloc.rate:                   510.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              54816.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.234 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34850.068 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14617.700 ops/s
[info]                  ·gc.alloc.rate:                   509.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              54816.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.688 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70282.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14627.014 ops/s
[info]                  ·gc.alloc.rate:                   509.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              54816.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35301.366 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14580.463 ±(99.9%) 431.883 ops/s [Average]
[info]   (min, avg, max) = (14383.533, 14580.463, 14665.166), stdev = 112.159
[info]   CI (99.9%): [14148.579, 15012.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   507.758 ±(99.9%) 14.949 MB/sec [Average]
[info]   (min, avg, max) = (500.941, 507.758, 510.685), stdev = 3.882
[info]   CI (99.9%): [492.809, 522.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   54816.030 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (54816.028, 54816.030, 54816.037), stdev = 0.004
[info]   CI (99.9%): [54816.015, 54816.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.576 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.087, 0.354), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.536 ±(99.9%) 63.120 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.536, 38.722), stdev = 16.392
[info]   CI (99.9%): [≈ 0, 72.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   454.971 ±(99.9%) 685.202 MB/sec [Average]
[info]   (min, avg, max) = (322.392, 454.971, 652.688), stdev = 177.945
[info]   CI (99.9%): [≈ 0, 1140.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49086.636 ±(99.9%) 73527.060 B/op [Average]
[info]   (min, avg, max) = (34850.068, 49086.636, 70282.777), stdev = 19094.744
[info]   CI (99.9%): [≈ 0, 122613.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 59.68% complete, ETA 00:16:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18869.643 ops/s
[info] # Warmup Iteration   2: 23296.448 ops/s
[info] # Warmup Iteration   3: 23911.016 ops/s
[info] Iteration   1: 24134.165 ops/s
[info]                  ·gc.alloc.rate:                   412.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33361.215 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 24199.258 ops/s
[info]                  ·gc.alloc.rate:                   413.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.325 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     216.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21444.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 23685.299 ops/s
[info]                  ·gc.alloc.rate:                   404.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.533 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21910.808 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24303.964 ops/s
[info]                  ·gc.alloc.rate:                   415.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21266.578 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 24244.983 ops/s
[info]                  ·gc.alloc.rate:                   414.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42591.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24113.534 ±(99.9%) 952.407 ops/s [Average]
[info]   (min, avg, max) = (23685.299, 24113.534, 24303.964), stdev = 247.337
[info]   CI (99.9%): [23161.127, 25065.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   412.086 ±(99.9%) 16.312 MB/sec [Average]
[info]   (min, avg, max) = (404.768, 412.086, 415.319), stdev = 4.236
[info]   CI (99.9%): [395.774, 428.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (26896.018, 26896.019, 26896.022), stdev = 0.002
[info]   CI (99.9%): [26896.012, 26896.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.694 ±(99.9%) 5.664 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.694, 3.325), stdev = 1.471
[info]   CI (99.9%): [≈ 0, 6.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   45.170 ±(99.9%) 368.414 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 45.170, 216.264), stdev = 95.676
[info]   CI (99.9%): [≈ 0, 413.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   431.135 ±(99.9%) 572.161 MB/sec [Average]
[info]   (min, avg, max) = (328.391, 431.135, 656.356), stdev = 148.588
[info]   CI (99.9%): [≈ 0, 1003.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28114.969 ±(99.9%) 36883.014 B/op [Average]
[info]   (min, avg, max) = (21266.578, 28114.969, 42591.644), stdev = 9578.402
[info]   CI (99.9%): [≈ 0, 64997.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 60.22% complete, ETA 00:15:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 849.229 ops/s
[info] # Warmup Iteration   2: 2373.416 ops/s
[info] # Warmup Iteration   3: 2335.357 ops/s
[info] Iteration   1: 2413.916 ops/s
[info]                  ·gc.alloc.rate:                   1507.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              982982.138 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1070936.937 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2420.179 ops/s
[info]                  ·gc.alloc.rate:                   1511.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.169 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.070 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1078244.507 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2381.825 ops/s
[info]                  ·gc.alloc.rate:                   1488.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.171 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 883127.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2422.309 ops/s
[info]                  ·gc.alloc.rate:                   1512.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1091202.800 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2421.790 ops/s
[info]                  ·gc.alloc.rate:                   1512.406 MB/sec
[info]                  ·gc.alloc.rate.norm:              982976.168 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 876554.143 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2412.004 ±(99.9%) 66.227 ops/s [Average]
[info]   (min, avg, max) = (2381.825, 2412.004, 2422.309), stdev = 17.199
[info]   CI (99.9%): [2345.777, 2478.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1506.454 ±(99.9%) 40.295 MB/sec [Average]
[info]   (min, avg, max) = (1488.100, 1506.454, 1512.730), stdev = 10.465
[info]   CI (99.9%): [1466.158, 1546.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982977.366 ±(99.9%) 10.274 B/op [Average]
[info]   (min, avg, max) = (982976.168, 982977.366, 982982.138), stdev = 2.668
[info]   CI (99.9%): [982967.092, 982987.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.021 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.042), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   13.546 ±(99.9%) 52.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.546, 27.137), stdev = 13.552
[info]   CI (99.9%): [≈ 0, 65.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1533.061 ±(99.9%) 670.864 MB/sec [Average]
[info]   (min, avg, max) = (1336.942, 1533.061, 1679.283), stdev = 174.221
[info]   CI (99.9%): [862.197, 2203.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1000013.110 ±(99.9%) 423441.034 B/op [Average]
[info]   (min, avg, max) = (876554.143, 1000013.110, 1091202.800), stdev = 109966.292
[info]   CI (99.9%): [576572.077, 1423454.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 1.095
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 60.75% complete, ETA 00:15:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5500.228 ops/s
[info] # Warmup Iteration   2: 7492.203 ops/s
[info] # Warmup Iteration   3: 7686.995 ops/s
[info] Iteration   1: 7696.468 ops/s
[info]                  ·gc.alloc.rate:                   1655.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.061 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334882.320 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7624.671 ops/s
[info]                  ·gc.alloc.rate:                   1639.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341024.357 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7713.786 ops/s
[info]                  ·gc.alloc.rate:                   1658.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     42.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339672.850 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 7693.413 ops/s
[info]                  ·gc.alloc.rate:                   1655.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 342916.375 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7636.817 ops/s
[info]                  ·gc.alloc.rate:                   1642.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              338544.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 346986.575 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7673.031 ±(99.9%) 152.525 ops/s [Average]
[info]   (min, avg, max) = (7624.671, 7673.031, 7713.786), stdev = 39.610
[info]   CI (99.9%): [7520.506, 7825.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1650.449 ±(99.9%) 32.992 MB/sec [Average]
[info]   (min, avg, max) = (1639.798, 1650.449, 1658.985), stdev = 8.568
[info]   CI (99.9%): [1617.457, 1683.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338544.056 ±(99.9%) 0.014 B/op [Average]
[info]   (min, avg, max) = (338544.053, 338544.056, 338544.061), stdev = 0.004
[info]   CI (99.9%): [338544.041, 338544.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.217 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.208), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   23.019 ±(99.9%) 43.962 B/op [Average]
[info]   (min, avg, max) = (12.865, 23.019, 42.468), stdev = 11.417
[info]   CI (99.9%): [≈ 0, 66.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1662.844 ±(99.9%) 71.332 MB/sec [Average]
[info]   (min, avg, max) = (1637.775, 1662.844, 1683.730), stdev = 18.525
[info]   CI (99.9%): [1591.513, 1734.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   341096.495 ±(99.9%) 17075.006 B/op [Average]
[info]   (min, avg, max) = (334882.320, 341096.495, 346986.575), stdev = 4434.325
[info]   CI (99.9%): [324021.489, 358171.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 61.29% complete, ETA 00:15:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 22658.152 ops/s
[info] # Warmup Iteration   2: 40062.127 ops/s
[info] # Warmup Iteration   3: 40714.262 ops/s
[info] Iteration   1: 40071.152 ops/s
[info]                  ·gc.alloc.rate:                   580.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.888 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.604 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.725 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25326.153 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 40533.245 ops/s
[info]                  ·gc.alloc.rate:                   587.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.971 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25218.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39400.746 ops/s
[info]                  ·gc.alloc.rate:                   570.868 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.622 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.832 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26050.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39864.786 ops/s
[info]                  ·gc.alloc.rate:                   577.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              22808.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12926.388 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 40774.250 ops/s
[info]                  ·gc.alloc.rate:                   590.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.797 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.411 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.182 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25326.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   40128.836 ±(99.9%) 2094.331 ops/s [Average]
[info]   (min, avg, max) = (39400.746, 40128.836, 40774.250), stdev = 543.891
[info]   CI (99.9%): [38034.504, 42223.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   581.520 ±(99.9%) 30.505 MB/sec [Average]
[info]   (min, avg, max) = (570.868, 581.520, 590.921), stdev = 7.922
[info]   CI (99.9%): [551.015, 612.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.862 ±(99.9%) 0.616 B/op [Average]
[info]   (min, avg, max) = (22807.622, 22807.862, 22808.029), stdev = 0.160
[info]   CI (99.9%): [22807.245, 22808.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.142 ±(99.9%) 0.999 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.142, 0.604), stdev = 0.260
[info]   CI (99.9%): [≈ 0, 1.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.555 ±(99.9%) 39.257 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.555, 23.725), stdev = 10.195
[info]   CI (99.9%): [≈ 0, 44.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   585.987 ±(99.9%) 556.836 MB/sec [Average]
[info]   (min, avg, max) = (327.407, 585.987, 656.182), stdev = 144.608
[info]   CI (99.9%): [29.151, 1142.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22969.580 ±(99.9%) 21656.461 B/op [Average]
[info]   (min, avg, max) = (12926.388, 22969.580, 26050.090), stdev = 5624.114
[info]   CI (99.9%): [1313.119, 44626.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 61.83% complete, ETA 00:15:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54442.777 ops/s
[info] # Warmup Iteration   2: 63214.269 ops/s
[info] # Warmup Iteration   3: 63219.446 ops/s
[info] Iteration   1: 62674.012 ops/s
[info]                  ·gc.alloc.rate:                   473.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.350 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     84.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      585.422 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14704.119 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 62619.301 ops/s
[info]                  ·gc.alloc.rate:                   473.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8287.352 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 63195.588 ops/s
[info]                  ·gc.alloc.rate:                   477.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.448 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16316.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 62797.053 ops/s
[info]                  ·gc.alloc.rate:                   474.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8214.043 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 61854.613 ops/s
[info]                  ·gc.alloc.rate:                   467.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8339.116 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   62628.113 ±(99.9%) 1877.614 ops/s [Average]
[info]   (min, avg, max) = (61854.613, 62628.113, 63195.588), stdev = 487.610
[info]   CI (99.9%): [60750.499, 64505.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   473.124 ±(99.9%) 14.418 MB/sec [Average]
[info]   (min, avg, max) = (467.234, 473.124, 477.548), stdev = 3.744
[info]   CI (99.9%): [458.706, 487.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.005, 11888.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.687 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.687, 3.350), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.247 ±(99.9%) 144.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.247, 84.155), stdev = 37.406
[info]   CI (99.9%): [≈ 0, 161.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.248 ±(99.9%) 623.150 MB/sec [Average]
[info]   (min, avg, max) = (327.752, 445.248, 655.448), stdev = 161.830
[info]   CI (99.9%): [≈ 0, 1068.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11172.253 ±(99.9%) 15407.278 B/op [Average]
[info]   (min, avg, max) = (8214.043, 11172.253, 16316.636), stdev = 4001.221
[info]   CI (99.9%): [≈ 0, 26579.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.37% complete, ETA 00:14:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66444.434 ops/s
[info] # Warmup Iteration   2: 74641.768 ops/s
[info] # Warmup Iteration   3: 74853.424 ops/s
[info] Iteration   1: 74912.333 ops/s
[info]                  ·gc.alloc.rate:      1.143 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 70682.085 ops/s
[info]                  ·gc.alloc.rate:      1.078 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74007.446 ops/s
[info]                  ·gc.alloc.rate:      1.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74598.170 ops/s
[info]                  ·gc.alloc.rate:      1.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74632.480 ops/s
[info]                  ·gc.alloc.rate:      1.138 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   73766.503 ±(99.9%) 6759.553 ops/s [Average]
[info]   (min, avg, max) = (70682.085, 73766.503, 74912.333), stdev = 1755.434
[info]   CI (99.9%): [67006.950, 80526.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.125 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (1.078, 1.125, 1.143), stdev = 0.027
[info]   CI (99.9%): [1.022, 1.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.006, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 62.90% complete, ETA 00:14:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2149.936 ops/s
[info] # Warmup Iteration   2: 5286.318 ops/s
[info] # Warmup Iteration   3: 5322.210 ops/s
[info] Iteration   1: 5384.683 ops/s
[info]                  ·gc.alloc.rate:                   1666.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              487335.532 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.333 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 482527.964 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5373.179 ops/s
[info]                  ·gc.alloc.rate:                   1664.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              487336.313 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.482 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.466 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487417.142 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5332.331 ops/s
[info]                  ·gc.alloc.rate:                   1651.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              487335.955 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 494702.194 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5315.324 ops/s
[info]                  ·gc.alloc.rate:                   1645.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              487335.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.651 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.483 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498453.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5335.545 ops/s
[info]                  ·gc.alloc.rate:                   1652.077 MB/sec
[info]                  ·gc.alloc.rate.norm:              487336.868 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.419 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 498451.810 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5348.212 ±(99.9%) 113.051 ops/s [Average]
[info]   (min, avg, max) = (5315.324, 5348.212, 5384.683), stdev = 29.359
[info]   CI (99.9%): [5235.161, 5461.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1656.030 ±(99.9%) 34.613 MB/sec [Average]
[info]   (min, avg, max) = (1645.933, 1656.030, 1666.776), stdev = 8.989
[info]   CI (99.9%): [1621.418, 1690.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   487335.967 ±(99.9%) 2.555 B/op [Average]
[info]   (min, avg, max) = (487335.166, 487335.967, 487336.868), stdev = 0.664
[info]   CI (99.9%): [487333.412, 487338.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   23.264 ±(99.9%) 19.446 B/op [Average]
[info]   (min, avg, max) = (18.419, 23.264, 30.482), stdev = 5.050
[info]   CI (99.9%): [3.818, 42.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.835 ±(99.9%) 60.486 MB/sec [Average]
[info]   (min, avg, max) = (1650.333, 1672.835, 1689.757), stdev = 15.708
[info]   CI (99.9%): [1612.348, 1733.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   492310.469 ±(99.9%) 27283.383 B/op [Average]
[info]   (min, avg, max) = (482527.964, 492310.469, 498453.233), stdev = 7085.408
[info]   CI (99.9%): [465027.086, 519593.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 63.44% complete, ETA 00:14:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4805644.742 ops/s
[info] # Warmup Iteration   2: 5443886.724 ops/s
[info] # Warmup Iteration   3: 5623914.620 ops/s
[info] Iteration   1: 5605172.283 ops/s
[info]                  ·gc.alloc.rate:                   1680.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555.898 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 5606680.353 ops/s
[info]                  ·gc.alloc.rate:                   1681.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 466.642 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5610440.803 ops/s
[info]                  ·gc.alloc.rate:                   1682.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 469.414 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5526339.512 ops/s
[info]                  ·gc.alloc.rate:                   1657.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.484 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 479.216 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5463115.359 ops/s
[info]                  ·gc.alloc.rate:                   1638.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 388.998 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5562349.662 ±(99.9%) 252913.760 ops/s [Average]
[info]   (min, avg, max) = (5463115.359, 5562349.662, 5610440.803), stdev = 65680.900
[info]   CI (99.9%): [5309435.902, 5815263.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1667.896 ±(99.9%) 75.469 MB/sec [Average]
[info]   (min, avg, max) = (1638.288, 1667.896, 1682.329), stdev = 19.599
[info]   CI (99.9%): [1592.427, 1743.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.024, 0.030), stdev = 0.006
[info]   CI (99.9%): [0.001, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.432 ±(99.9%) 857.224 MB/sec [Average]
[info]   (min, avg, max) = (1350.193, 1669.432, 1979.404), stdev = 222.618
[info]   CI (99.9%): [812.208, 2526.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   472.034 ±(99.9%) 227.935 B/op [Average]
[info]   (min, avg, max) = (388.998, 472.034, 555.898), stdev = 59.194
[info]   CI (99.9%): [244.099, 699.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 63.98% complete, ETA 00:14:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 123637.333 ops/s
[info] # Warmup Iteration   2: 355880.025 ops/s
[info] # Warmup Iteration   3: 351567.376 ops/s
[info] Iteration   1: 356254.289 ops/s
[info]                  ·gc.alloc.rate:                   1913.723 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.736 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8784.755 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 355183.185 ops/s
[info]                  ·gc.alloc.rate:                   1907.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.069 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8895.118 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 354134.512 ops/s
[info]                  ·gc.alloc.rate:                   1902.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.278 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8979.268 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 356529.717 ops/s
[info]                  ·gc.alloc.rate:                   1915.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7463.279 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 351389.360 ops/s
[info]                  ·gc.alloc.rate:                   1887.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              8456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.473 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9109.023 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   354698.213 ±(99.9%) 8002.775 ops/s [Average]
[info]   (min, avg, max) = (351389.360, 354698.213, 356529.717), stdev = 2078.295
[info]   CI (99.9%): [346695.438, 362700.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1905.399 ±(99.9%) 42.765 MB/sec [Average]
[info]   (min, avg, max) = (1887.694, 1905.399, 1915.152), stdev = 11.106
[info]   CI (99.9%): [1862.634, 1948.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8456.001, 8456.001, 8456.001), stdev = 0.001
[info]   CI (99.9%): [8456.001, 8456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.167), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.480 ±(99.9%) 0.676 B/op [Average]
[info]   (min, avg, max) = (0.278, 0.480, 0.736), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.829 ±(99.9%) 558.054 MB/sec [Average]
[info]   (min, avg, max) = (1690.316, 1947.829, 2033.473), stdev = 144.925
[info]   CI (99.9%): [1389.774, 2505.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8646.289 ±(99.9%) 2587.105 B/op [Average]
[info]   (min, avg, max) = (7463.279, 8646.289, 9109.023), stdev = 671.863
[info]   CI (99.9%): [6059.184, 11233.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 64.52% complete, ETA 00:14:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2897224.552 ops/s
[info] # Warmup Iteration   2: 3283642.638 ops/s
[info] # Warmup Iteration   3: 3313883.951 ops/s
[info] Iteration   1: 3322799.335 ops/s
[info]                  ·gc.alloc.rate:                   540.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.251 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.187 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 3278017.163 ops/s
[info]                  ·gc.alloc.rate:                   533.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.064 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.003 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3261402.287 ops/s
[info]                  ·gc.alloc.rate:                   530.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.050 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 316.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3264694.500 ops/s
[info]                  ·gc.alloc.rate:                   530.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.999 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3313716.812 ops/s
[info]                  ·gc.alloc.rate:                   538.950 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 311.635 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3288126.020 ±(99.9%) 109295.060 ops/s [Average]
[info]   (min, avg, max) = (3261402.287, 3288126.020, 3322799.335), stdev = 28383.580
[info]   CI (99.9%): [3178830.960, 3397421.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   534.816 ±(99.9%) 17.625 MB/sec [Average]
[info]   (min, avg, max) = (530.614, 534.816, 540.423), stdev = 4.577
[info]   CI (99.9%): [517.190, 552.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.692 ±(99.9%) 5.510 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.692, 3.251), stdev = 1.431
[info]   CI (99.9%): [≈ 0, 6.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.328 ±(99.9%) 2.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.328, 1.540), stdev = 0.678
[info]   CI (99.9%): [≈ 0, 2.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   525.574 ±(99.9%) 692.006 MB/sec [Average]
[info]   (min, avg, max) = (327.712, 525.574, 658.064), stdev = 179.712
[info]   CI (99.9%): [≈ 0, 1217.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   251.693 ±(99.9%) 332.624 B/op [Average]
[info]   (min, avg, max) = (156.187, 251.693, 316.641), stdev = 86.381
[info]   CI (99.9%): [≈ 0, 584.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 65.05% complete, ETA 00:13:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90874.670 ops/s
[info] # Warmup Iteration   2: 337457.676 ops/s
[info] # Warmup Iteration   3: 341475.003 ops/s
[info] Iteration   1: 346895.530 ops/s
[info]                  ·gc.alloc.rate:                   1348.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.884 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5956.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 346333.673 ops/s
[info]                  ·gc.alloc.rate:                   1347.032 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6011.963 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 344412.367 ops/s
[info]                  ·gc.alloc.rate:                   1339.315 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.339 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6088.125 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 346858.644 ops/s
[info]                  ·gc.alloc.rate:                   1348.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.378 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6076.936 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 347639.205 ops/s
[info]                  ·gc.alloc.rate:                   1351.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6091.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   346427.884 ±(99.9%) 4693.495 ops/s [Average]
[info]   (min, avg, max) = (344412.367, 346427.884, 347639.205), stdev = 1218.886
[info]   CI (99.9%): [341734.389, 351121.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1347.118 ±(99.9%) 18.032 MB/sec [Average]
[info]   (min, avg, max) = (1339.315, 1347.118, 1351.757), stdev = 4.683
[info]   CI (99.9%): [1329.086, 1365.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.397 ±(99.9%) 0.652 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.397, 0.662), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1330.639 ±(99.9%) 49.755 MB/sec [Average]
[info]   (min, avg, max) = (1312.884, 1330.639, 1345.554), stdev = 12.921
[info]   CI (99.9%): [1280.884, 1380.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6045.167 ±(99.9%) 227.282 B/op [Average]
[info]   (min, avg, max) = (5956.891, 6045.167, 6091.919), stdev = 59.024
[info]   CI (99.9%): [5817.885, 6272.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 65.59% complete, ETA 00:13:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442620.271 ops/s
[info] # Warmup Iteration   2: 625137.964 ops/s
[info] # Warmup Iteration   3: 627373.859 ops/s
[info] Iteration   1: 631528.410 ops/s
[info]                  ·gc.alloc.rate:                   2275.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2320.141 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5783.327 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 628283.671 ops/s
[info]                  ·gc.alloc.rate:                   2264.761 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5028.683 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 626188.976 ops/s
[info]                  ·gc.alloc.rate:                   2257.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2358.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5926.968 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 628248.293 ops/s
[info]                  ·gc.alloc.rate:                   2263.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5935.906 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 631646.987 ops/s
[info]                  ·gc.alloc.rate:                   2276.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              5672.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5074.181 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   629179.268 ±(99.9%) 9075.347 ops/s [Average]
[info]   (min, avg, max) = (626188.976, 629179.268, 631646.987), stdev = 2356.839
[info]   CI (99.9%): [620103.920, 638254.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2267.610 ±(99.9%) 32.219 MB/sec [Average]
[info]   (min, avg, max) = (2257.133, 2267.610, 2276.870), stdev = 8.367
[info]   CI (99.9%): [2235.391, 2299.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5672.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5672.001, 5672.001, 5672.001), stdev = 0.001
[info]   CI (99.9%): [5672.001, 5672.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.240 ±(99.9%) 0.268 B/op [Average]
[info]   (min, avg, max) = (0.156, 0.240, 0.313), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2218.531 ±(99.9%) 694.147 MB/sec [Average]
[info]   (min, avg, max) = (2007.892, 2218.531, 2369.136), stdev = 180.268
[info]   CI (99.9%): [1524.384, 2912.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5549.813 ±(99.9%) 1768.410 B/op [Average]
[info]   (min, avg, max) = (5028.683, 5549.813, 5935.906), stdev = 459.251
[info]   CI (99.9%): [3781.402, 7318.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 66.13% complete, ETA 00:13:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 268821.210 ops/s
[info] # Warmup Iteration   2: 628044.525 ops/s
[info] # Warmup Iteration   3: 641153.550 ops/s
[info] Iteration   1: 633112.902 ops/s
[info]                  ·gc.alloc.rate:                   736.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1610.381 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 634286.130 ops/s
[info]                  ·gc.alloc.rate:                   738.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2423.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 637156.999 ops/s
[info]                  ·gc.alloc.rate:                   741.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1617.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 636673.078 ops/s
[info]                  ·gc.alloc.rate:                   741.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1628.589 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 636471.793 ops/s
[info]                  ·gc.alloc.rate:                   740.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1635.705 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   635540.180 ±(99.9%) 6733.065 ops/s [Average]
[info]   (min, avg, max) = (633112.902, 635540.180, 637156.999), stdev = 1748.556
[info]   CI (99.9%): [628807.115, 642273.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   739.655 ±(99.9%) 7.929 MB/sec [Average]
[info]   (min, avg, max) = (736.795, 739.655, 741.528), stdev = 2.059
[info]   CI (99.9%): [731.725, 747.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.134 ±(99.9%) 0.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.134, 0.310), stdev = 0.119
[info]   CI (99.9%): [≈ 0, 0.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.839 ±(99.9%) 553.277 MB/sec [Average]
[info]   (min, avg, max) = (647.664, 719.839, 976.702), stdev = 143.684
[info]   CI (99.9%): [166.562, 1273.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1783.229 ±(99.9%) 1379.795 B/op [Average]
[info]   (min, avg, max) = (1610.381, 1783.229, 2423.988), stdev = 358.328
[info]   CI (99.9%): [403.434, 3163.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 66.67% complete, ETA 00:13:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3049630.787 ops/s
[info] # Warmup Iteration   2: 3539191.506 ops/s
[info] # Warmup Iteration   3: 3608724.313 ops/s
[info] Iteration   1: 3610958.753 ops/s
[info]                  ·gc.alloc.rate:                   1505.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 717.769 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3599372.269 ops/s
[info]                  ·gc.alloc.rate:                   1500.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 579.658 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3613542.876 ops/s
[info]                  ·gc.alloc.rate:                   1506.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.248 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 726.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3617481.765 ops/s
[info]                  ·gc.alloc.rate:                   1507.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1340.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 583.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3612994.096 ops/s
[info]                  ·gc.alloc.rate:                   1505.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 733.739 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3610869.952 ±(99.9%) 26368.982 ops/s [Average]
[info]   (min, avg, max) = (3599372.269, 3610869.952, 3617481.765), stdev = 6847.941
[info]   CI (99.9%): [3584500.970, 3637238.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1504.981 ±(99.9%) 11.107 MB/sec [Average]
[info]   (min, avg, max) = (1500.074, 1504.981, 1507.675), stdev = 2.884
[info]   CI (99.9%): [1493.874, 1516.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.018, 0.034, 0.054), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1532.988 ±(99.9%) 704.481 MB/sec [Average]
[info]   (min, avg, max) = (1325.503, 1532.988, 1684.316), stdev = 182.951
[info]   CI (99.9%): [828.508, 2237.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   668.163 ±(99.9%) 305.312 B/op [Average]
[info]   (min, avg, max) = (579.658, 668.163, 733.739), stdev = 79.289
[info]   CI (99.9%): [362.851, 973.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 67.20% complete, ETA 00:13:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 57629.505 ops/s
[info] # Warmup Iteration   2: 233654.422 ops/s
[info] # Warmup Iteration   3: 231733.383 ops/s
[info] Iteration   1: 234119.748 ops/s
[info]                  ·gc.alloc.rate:                   1628.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11081.127 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 234862.787 ops/s
[info]                  ·gc.alloc.rate:                   1634.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.969 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11157.106 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 235079.297 ops/s
[info]                  ·gc.alloc.rate:                   1635.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11219.022 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 231781.397 ops/s
[info]                  ·gc.alloc.rate:                   1612.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9146.215 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 229940.618 ops/s
[info]                  ·gc.alloc.rate:                   1599.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              10952.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11562.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   233156.769 ±(99.9%) 8560.479 ops/s [Average]
[info]   (min, avg, max) = (229940.618, 233156.769, 235079.297), stdev = 2223.129
[info]   CI (99.9%): [224596.290, 241717.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1622.261 ±(99.9%) 59.658 MB/sec [Average]
[info]   (min, avg, max) = (1599.841, 1622.261, 1635.684), stdev = 15.493
[info]   CI (99.9%): [1562.603, 1681.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10952.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10952.002, 10952.002, 10952.002), stdev = 0.001
[info]   CI (99.9%): [10952.002, 10952.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.506 ±(99.9%) 1.054 B/op [Average]
[info]   (min, avg, max) = (0.141, 0.506, 0.712), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1604.863 ±(99.9%) 558.413 MB/sec [Average]
[info]   (min, avg, max) = (1346.853, 1604.863, 1689.079), stdev = 145.018
[info]   CI (99.9%): [1046.450, 2163.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10833.273 ±(99.9%) 3700.235 B/op [Average]
[info]   (min, avg, max) = (9146.215, 10833.273, 11562.897), stdev = 960.939
[info]   CI (99.9%): [7133.038, 14533.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 67.74% complete, ETA 00:12:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 619978.754 ops/s
[info] # Warmup Iteration   2: 859248.529 ops/s
[info] # Warmup Iteration   3: 864939.454 ops/s
[info] Iteration   1: 867188.694 ops/s
[info]                  ·gc.alloc.rate:                   1992.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2308.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4189.773 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 867498.386 ops/s
[info]                  ·gc.alloc.rate:                   1992.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3626.869 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 856954.885 ops/s
[info]                  ·gc.alloc.rate:                   1968.682 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.191 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3081.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 874027.318 ops/s
[info]                  ·gc.alloc.rate:                   2007.857 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3644.750 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 867120.479 ops/s
[info]                  ·gc.alloc.rate:                   1991.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3687.120 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   866557.952 ±(99.9%) 23549.529 ops/s [Average]
[info]   (min, avg, max) = (856954.885, 866557.952, 874027.318), stdev = 6115.738
[info]   CI (99.9%): [843008.423, 890107.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1990.622 ±(99.9%) 53.982 MB/sec [Average]
[info]   (min, avg, max) = (1968.682, 1990.622, 2007.857), stdev = 14.019
[info]   CI (99.9%): [1936.640, 2044.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 0.159 B/op [Average]
[info]   (min, avg, max) = (0.151, 0.197, 0.264), stdev = 0.041
[info]   CI (99.9%): [0.037, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2007.888 ±(99.9%) 861.038 MB/sec [Average]
[info]   (min, avg, max) = (1677.792, 2007.888, 2308.164), stdev = 223.609
[info]   CI (99.9%): [1146.851, 2868.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3646.043 ±(99.9%) 1511.318 B/op [Average]
[info]   (min, avg, max) = (3081.705, 3646.043, 4189.773), stdev = 392.485
[info]   CI (99.9%): [2134.725, 5157.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 12.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 68.28% complete, ETA 00:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 625041.889 ops/s
[info] # Warmup Iteration   2: 1616574.994 ops/s
[info] # Warmup Iteration   3: 1594770.664 ops/s
[info] Iteration   1: 1602025.982 ops/s
[info]                  ·gc.alloc.rate:                   1050.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.015 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1281.375 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1615428.461 ops/s
[info]                  ·gc.alloc.rate:                   1059.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 959.550 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1622514.594 ops/s
[info]                  ·gc.alloc.rate:                   1063.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1621397.300 ops/s
[info]                  ·gc.alloc.rate:                   1063.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 967.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1640821.345 ops/s
[info]                  ·gc.alloc.rate:                   1076.209 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1281.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1620437.537 ±(99.9%) 53936.896 ops/s [Average]
[info]   (min, avg, max) = (1602025.982, 1620437.537, 1640821.345), stdev = 14007.241
[info]   CI (99.9%): [1566500.641, 1674374.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1062.531 ±(99.9%) 36.088 MB/sec [Average]
[info]   (min, avg, max) = (1050.235, 1062.531, 1076.209), stdev = 9.372
[info]   CI (99.9%): [1026.443, 1098.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.024, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.070 B/op [Average]
[info]   (min, avg, max) = (0.080, 0.093, 0.122), stdev = 0.018
[info]   CI (99.9%): [0.023, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1122.525 ±(99.9%) 695.767 MB/sec [Average]
[info]   (min, avg, max) = (984.880, 1122.525, 1336.029), stdev = 180.689
[info]   CI (99.9%): [426.757, 1818.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1090.186 ±(99.9%) 671.735 B/op [Average]
[info]   (min, avg, max) = (959.550, 1090.186, 1281.375), stdev = 174.447
[info]   CI (99.9%): [418.452, 1761.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 68.82% complete, ETA 00:12:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6402753.084 ops/s
[info] # Warmup Iteration   2: 7318219.164 ops/s
[info] # Warmup Iteration   3: 7686690.354 ops/s
[info] Iteration   1: 7647493.994 ops/s
[info]                  ·gc.alloc.rate:                   932.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 135.033 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 7561050.140 ops/s
[info]                  ·gc.alloc.rate:                   922.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 204.801 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7734582.920 ops/s
[info]                  ·gc.alloc.rate:                   943.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.822 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 7750540.508 ops/s
[info]                  ·gc.alloc.rate:                   945.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 7748161.944 ops/s
[info]                  ·gc.alloc.rate:                   945.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 202.093 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7688365.901 ±(99.9%) 319029.260 ops/s [Average]
[info]   (min, avg, max) = (7561050.140, 7688365.901, 7750540.508), stdev = 82850.886
[info]   CI (99.9%): [7369336.641, 8007395.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   937.903 ±(99.9%) 38.838 MB/sec [Average]
[info]   (min, avg, max) = (922.500, 937.903, 945.658), stdev = 10.086
[info]   CI (99.9%): [899.065, 976.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.043, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.016, 0.017), stdev = 0.002
[info]   CI (99.9%): [0.009, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   922.276 ±(99.9%) 573.353 MB/sec [Average]
[info]   (min, avg, max) = (656.016, 922.276, 994.860), stdev = 148.898
[info]   CI (99.9%): [348.923, 1495.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   188.740 ±(99.9%) 115.772 B/op [Average]
[info]   (min, avg, max) = (135.033, 188.740, 204.801), stdev = 30.066
[info]   CI (99.9%): [72.968, 304.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 69.35% complete, ETA 00:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 163118.577 ops/s
[info] # Warmup Iteration   2: 511873.727 ops/s
[info] # Warmup Iteration   3: 518559.795 ops/s
[info] Iteration   1: 518930.863 ops/s
[info]                  ·gc.alloc.rate:                   1790.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6018.577 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 518546.953 ops/s
[info]                  ·gc.alloc.rate:                   1789.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.379 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5065.707 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 515558.872 ops/s
[info]                  ·gc.alloc.rate:                   1779.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5125.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 518268.574 ops/s
[info]                  ·gc.alloc.rate:                   1788.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2024.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6147.485 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 516436.062 ops/s
[info]                  ·gc.alloc.rate:                   1782.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              5432.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.381 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.117 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5160.399 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   517548.265 ±(99.9%) 5653.528 ops/s [Average]
[info]   (min, avg, max) = (515558.872, 517548.265, 518930.863), stdev = 1468.203
[info]   CI (99.9%): [511894.737, 523201.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1786.007 ±(99.9%) 19.366 MB/sec [Average]
[info]   (min, avg, max) = (1779.149, 1786.007, 1790.594), stdev = 5.029
[info]   CI (99.9%): [1766.641, 1805.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5432.001, 5432.001, 5432.001), stdev = 0.001
[info]   CI (99.9%): [5432.001, 5432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.041, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.342 ±(99.9%) 0.217 B/op [Average]
[info]   (min, avg, max) = (0.253, 0.342, 0.381), stdev = 0.056
[info]   CI (99.9%): [0.124, 0.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.767 ±(99.9%) 685.815 MB/sec [Average]
[info]   (min, avg, max) = (1668.876, 1809.767, 2024.089), stdev = 178.104
[info]   CI (99.9%): [1123.952, 2495.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5503.558 ±(99.9%) 2048.630 B/op [Average]
[info]   (min, avg, max) = (5065.707, 5503.558, 6147.485), stdev = 532.023
[info]   CI (99.9%): [3454.928, 7552.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 69.89% complete, ETA 00:11:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 420135.968 ops/s
[info] # Warmup Iteration   2: 649406.708 ops/s
[info] # Warmup Iteration   3: 652178.443 ops/s
[info] Iteration   1: 656905.945 ops/s
[info]                  ·gc.alloc.rate:                   2284.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.299 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2316.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5548.312 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 659722.094 ops/s
[info]                  ·gc.alloc.rate:                   2293.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5584.421 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 658470.115 ops/s
[info]                  ·gc.alloc.rate:                   2289.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.199 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2358.193 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5636.521 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 658570.578 ops/s
[info]                  ·gc.alloc.rate:                   2289.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5662.729 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 645370.071 ops/s
[info]                  ·gc.alloc.rate:                   2244.654 MB/sec
[info]                  ·gc.alloc.rate.norm:              5472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.203 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4964.542 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   655807.761 ±(99.9%) 22796.550 ops/s [Average]
[info]   (min, avg, max) = (645370.071, 655807.761, 659722.094), stdev = 5920.192
[info]   CI (99.9%): [633011.210, 678604.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2280.206 ±(99.9%) 77.487 MB/sec [Average]
[info]   (min, avg, max) = (2244.654, 2280.206, 2293.248), stdev = 20.123
[info]   CI (99.9%): [2202.719, 2357.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5472.001, 5472.001, 5472.001), stdev = 0.001
[info]   CI (99.9%): [5472.001, 5472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.220 ±(99.9%) 0.320 B/op [Average]
[info]   (min, avg, max) = (0.099, 0.220, 0.299), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2284.094 ±(99.9%) 538.540 MB/sec [Average]
[info]   (min, avg, max) = (2036.491, 2284.094, 2369.208), stdev = 139.857
[info]   CI (99.9%): [1745.554, 2822.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5479.305 ±(99.9%) 1121.247 B/op [Average]
[info]   (min, avg, max) = (4964.542, 5479.305, 5662.729), stdev = 291.184
[info]   CI (99.9%): [4358.058, 6600.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 70.43% complete, ETA 00:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4856174.953 ops/s
[info] # Warmup Iteration   2: 5446562.564 ops/s
[info] # Warmup Iteration   3: 5638375.118 ops/s
[info] Iteration   1: 5634426.049 ops/s
[info]                  ·gc.alloc.rate:                   1403.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.974 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 367.400 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5623150.042 ops/s
[info]                  ·gc.alloc.rate:                   1400.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 462.666 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5641482.691 ops/s
[info]                  ·gc.alloc.rate:                   1404.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 371.321 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 5618673.693 ops/s
[info]                  ·gc.alloc.rate:                   1399.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 374.690 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5602221.899 ops/s
[info]                  ·gc.alloc.rate:                   1395.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 377.653 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5623990.875 ±(99.9%) 58325.633 ops/s [Average]
[info]   (min, avg, max) = (5602221.899, 5623990.875, 5641482.691), stdev = 15146.982
[info]   CI (99.9%): [5565665.242, 5682316.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1400.588 ±(99.9%) 14.189 MB/sec [Average]
[info]   (min, avg, max) = (1395.338, 1400.588, 1404.967), stdev = 3.685
[info]   CI (99.9%): [1386.398, 1414.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.020, 0.029), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1396.067 ±(99.9%) 553.995 MB/sec [Average]
[info]   (min, avg, max) = (1314.974, 1396.067, 1652.696), stdev = 143.871
[info]   CI (99.9%): [842.072, 1950.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   390.746 ±(99.9%) 155.511 B/op [Average]
[info]   (min, avg, max) = (367.400, 390.746, 462.666), stdev = 40.386
[info]   CI (99.9%): [235.234, 546.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 70.97% complete, ETA 00:11:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125187.952 ops/s
[info] # Warmup Iteration   2: 362722.728 ops/s
[info] # Warmup Iteration   3: 364092.244 ops/s
[info] Iteration   1: 366129.092 ops/s
[info]                  ·gc.alloc.rate:                   1909.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.075 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8547.590 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 367363.638 ops/s
[info]                  ·gc.alloc.rate:                   1916.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.624 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2007.806 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8600.149 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 367148.540 ops/s
[info]                  ·gc.alloc.rate:                   1914.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8660.961 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 367383.385 ops/s
[info]                  ·gc.alloc.rate:                   1915.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7242.737 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 366003.829 ops/s
[info]                  ·gc.alloc.rate:                   1908.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              8208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.537 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8745.342 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   366805.697 ±(99.9%) 2628.153 ops/s [Average]
[info]   (min, avg, max) = (366003.829, 366805.697, 367383.385), stdev = 682.523
[info]   CI (99.9%): [364177.544, 369433.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1912.835 ±(99.9%) 14.234 MB/sec [Average]
[info]   (min, avg, max) = (1908.583, 1912.835, 1916.254), stdev = 3.697
[info]   CI (99.9%): [1898.601, 1927.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8208.001, 8208.001, 8208.001), stdev = 0.001
[info]   CI (99.9%): [8208.001, 8208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.027
[info]   CI (99.9%): [0.004, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.464 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (0.357, 0.464, 0.624), stdev = 0.116
[info]   CI (99.9%): [0.017, 0.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1948.009 ±(99.9%) 558.483 MB/sec [Average]
[info]   (min, avg, max) = (1690.297, 1948.009, 2033.530), stdev = 145.036
[info]   CI (99.9%): [1389.527, 2506.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8359.356 ±(99.9%) 2420.247 B/op [Average]
[info]   (min, avg, max) = (7242.737, 8359.356, 8745.342), stdev = 628.530
[info]   CI (99.9%): [5939.109, 10779.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 71.51% complete, ETA 00:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253217.486 ops/s
[info] # Warmup Iteration   2: 455492.594 ops/s
[info] # Warmup Iteration   3: 466408.569 ops/s
[info] Iteration   1: 466757.080 ops/s
[info]                  ·gc.alloc.rate:                   1221.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4395.636 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 466103.376 ops/s
[info]                  ·gc.alloc.rate:                   1219.829 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.422 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4420.015 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 468193.050 ops/s
[info]                  ·gc.alloc.rate:                   1225.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4429.294 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 468420.814 ops/s
[info]                  ·gc.alloc.rate:                   1226.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3340.497 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 468130.896 ops/s
[info]                  ·gc.alloc.rate:                   1225.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              4120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.814 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4481.506 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   467521.043 ±(99.9%) 3958.173 ops/s [Average]
[info]   (min, avg, max) = (466103.376, 467521.043, 468420.814), stdev = 1027.925
[info]   CI (99.9%): [463562.870, 471479.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1223.741 ±(99.9%) 10.810 MB/sec [Average]
[info]   (min, avg, max) = (1219.829, 1223.741, 1226.059), stdev = 2.807
[info]   CI (99.9%): [1212.931, 1234.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4120.001, 4120.001, 4120.001), stdev = 0.001
[info]   CI (99.9%): [4120.001, 4120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.224 ±(99.9%) 0.485 B/op [Average]
[info]   (min, avg, max) = (0.140, 0.224, 0.422), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1251.366 ±(99.9%) 555.471 MB/sec [Average]
[info]   (min, avg, max) = (994.089, 1251.366, 1332.814), stdev = 144.254
[info]   CI (99.9%): [695.895, 1806.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4213.390 ±(99.9%) 1882.832 B/op [Average]
[info]   (min, avg, max) = (3340.497, 4213.390, 4481.506), stdev = 488.966
[info]   CI (99.9%): [2330.557, 6096.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 72.04% complete, ETA 00:11:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2745037.818 ops/s
[info] # Warmup Iteration   2: 3141506.075 ops/s
[info] # Warmup Iteration   3: 3102032.179 ops/s
[info] Iteration   1: 3174166.534 ops/s
[info]                  ·gc.alloc.rate:                   532.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.301 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 163.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3198507.415 ops/s
[info]                  ·gc.alloc.rate:                   536.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.036 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3106341.496 ops/s
[info]                  ·gc.alloc.rate:                   521.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 166.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3153438.287 ops/s
[info]                  ·gc.alloc.rate:                   528.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.150 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3198210.291 ops/s
[info]                  ·gc.alloc.rate:                   536.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3166132.805 ±(99.9%) 147607.953 ops/s [Average]
[info]   (min, avg, max) = (3106341.496, 3166132.805, 3198507.415), stdev = 38333.317
[info]   CI (99.9%): [3018524.851, 3313740.758] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   531.020 ±(99.9%) 24.634 MB/sec [Average]
[info]   (min, avg, max) = (521.046, 531.020, 536.425), stdev = 6.397
[info]   CI (99.9%): [506.386, 555.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.702 ±(99.9%) 5.596 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.301), stdev = 1.453
[info]   CI (99.9%): [≈ 0, 6.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.348 ±(99.9%) 2.775 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.348, 1.637), stdev = 0.721
[info]   CI (99.9%): [≈ 0, 3.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   525.384 ±(99.9%) 690.217 MB/sec [Average]
[info]   (min, avg, max) = (328.401, 525.384, 658.036), stdev = 179.247
[info]   CI (99.9%): [≈ 0, 1215.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   260.691 ±(99.9%) 336.652 B/op [Average]
[info]   (min, avg, max) = (163.494, 260.691, 327.150), stdev = 87.427
[info]   CI (99.9%): [≈ 0, 597.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 72.58% complete, ETA 00:10:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86182.304 ops/s
[info] # Warmup Iteration   2: 320072.137 ops/s
[info] # Warmup Iteration   3: 327499.409 ops/s
[info] Iteration   1: 330495.272 ops/s
[info]                  ·gc.alloc.rate:                   1207.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6246.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 331858.354 ops/s
[info]                  ·gc.alloc.rate:                   1212.637 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.296 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4693.160 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 330031.934 ops/s
[info]                  ·gc.alloc.rate:                   1206.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.845 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6332.951 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 330682.579 ops/s
[info]                  ·gc.alloc.rate:                   1208.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.396 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6358.436 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 325263.836 ops/s
[info]                  ·gc.alloc.rate:                   1188.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              5752.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4868.785 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   329666.395 ±(99.9%) 9824.897 ops/s [Average]
[info]   (min, avg, max) = (325263.836, 329666.395, 331858.354), stdev = 2551.495
[info]   CI (99.9%): [319841.498, 339491.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1204.668 ±(99.9%) 35.650 MB/sec [Average]
[info]   (min, avg, max) = (1188.695, 1204.668, 1212.637), stdev = 9.258
[info]   CI (99.9%): [1169.018, 1240.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5752.001, 5752.001, 5752.001), stdev = 0.001
[info]   CI (99.9%): [5752.001, 5752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.338 ±(99.9%) 0.446 B/op [Average]
[info]   (min, avg, max) = (0.198, 0.338, 0.504), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.117 ±(99.9%) 691.320 MB/sec [Average]
[info]   (min, avg, max) = (989.412, 1194.117, 1335.786), stdev = 179.534
[info]   CI (99.9%): [502.797, 1885.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5699.934 ±(99.9%) 3243.067 B/op [Average]
[info]   (min, avg, max) = (4693.160, 5699.934, 6358.436), stdev = 842.214
[info]   CI (99.9%): [2456.867, 8943.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 73.12% complete, ETA 00:10:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1167057.137 ops/s
[info] # Warmup Iteration   2: 2045361.352 ops/s
[info] # Warmup Iteration   3: 2089982.513 ops/s
[info] Iteration   1: 2096489.125 ops/s
[info]                  ·gc.alloc.rate:                   3057.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3008.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2258.911 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 2087545.960 ops/s
[info]                  ·gc.alloc.rate:                   3044.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3036.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2289.641 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2065006.718 ops/s
[info]                  ·gc.alloc.rate:                   3012.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3051.203 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2325.794 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 2071735.940 ops/s
[info]                  ·gc.alloc.rate:                   3021.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2323.320 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2073933.464 ops/s
[info]                  ·gc.alloc.rate:                   3026.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2723.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2066.573 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2078942.241 ±(99.9%) 49204.485 ops/s [Average]
[info]   (min, avg, max) = (2065006.718, 2078942.241, 2096489.125), stdev = 12778.249
[info]   CI (99.9%): [2029737.756, 2128146.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3032.537 ±(99.9%) 71.092 MB/sec [Average]
[info]   (min, avg, max) = (3012.117, 3032.537, 3057.908), stdev = 18.462
[info]   CI (99.9%): [2961.445, 3103.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.129, 0.146), stdev = 0.017
[info]   CI (99.9%): [0.062, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.098 ±(99.9%) 0.049 B/op [Average]
[info]   (min, avg, max) = (0.079, 0.098, 0.110), stdev = 0.013
[info]   CI (99.9%): [0.049, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2975.505 ±(99.9%) 547.066 MB/sec [Average]
[info]   (min, avg, max) = (2723.640, 2975.505, 3057.902), stdev = 142.071
[info]   CI (99.9%): [2428.439, 3522.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2252.848 ±(99.9%) 414.621 B/op [Average]
[info]   (min, avg, max) = (2066.573, 2252.848, 2325.794), stdev = 107.676
[info]   CI (99.9%): [1838.227, 2667.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 1.000
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 73.66% complete, ETA 00:10:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34793.749 ops/s
[info] # Warmup Iteration   2: 297382.768 ops/s
[info] # Warmup Iteration   3: 291552.165 ops/s
[info] Iteration   1: 299406.545 ops/s
[info]                  ·gc.alloc.rate:                   529.629 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3042.944 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 300942.495 ops/s
[info]                  ·gc.alloc.rate:                   532.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1689.673 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 291546.899 ops/s
[info]                  ·gc.alloc.rate:                   515.646 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.450 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3513.426 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 293451.420 ops/s
[info]                  ·gc.alloc.rate:                   519.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3512.069 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 293649.808 ops/s
[info]                  ·gc.alloc.rate:                   519.385 MB/sec
[info]                  ·gc.alloc.rate.norm:              2784.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1761.938 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   295799.434 ±(99.9%) 15839.263 ops/s [Average]
[info]   (min, avg, max) = (291546.899, 295799.434, 300942.495), stdev = 4113.406
[info]   CI (99.9%): [279960.170, 311638.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   523.214 ±(99.9%) 28.198 MB/sec [Average]
[info]   (min, avg, max) = (515.646, 523.214, 532.377), stdev = 7.323
[info]   CI (99.9%): [495.016, 551.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2784.001, 2784.001, 2784.001), stdev = 0.001
[info]   CI (99.9%): [2784.001, 2784.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.125), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 1.137 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 0.657), stdev = 0.295
[info]   CI (99.9%): [≈ 0, 1.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   507.246 ±(99.9%) 647.982 MB/sec [Average]
[info]   (min, avg, max) = (323.111, 507.246, 654.772), stdev = 168.279
[info]   CI (99.9%): [≈ 0, 1155.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2704.010 ±(99.9%) 3518.323 B/op [Average]
[info]   (min, avg, max) = (1689.673, 2704.010, 3513.426), stdev = 913.697
[info]   CI (99.9%): [≈ 0, 6222.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 1.000
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 74.19% complete, ETA 00:10:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597572.172 ops/s
[info] # Warmup Iteration   2: 642790.122 ops/s
[info] # Warmup Iteration   3: 650518.704 ops/s
[info] Iteration   1: 644665.545 ops/s
[info]                  ·gc.alloc.rate:                   409.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.026 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1249.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 652556.060 ops/s
[info]                  ·gc.alloc.rate:                   414.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.109 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 801.727 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 648358.822 ops/s
[info]                  ·gc.alloc.rate:                   411.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.101 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      332.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 806.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 653684.013 ops/s
[info]                  ·gc.alloc.rate:                   415.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1591.063 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 640706.817 ops/s
[info]                  ·gc.alloc.rate:                   407.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 810.011 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   647994.252 ±(99.9%) 20870.294 ops/s [Average]
[info]   (min, avg, max) = (640706.817, 647994.252, 653684.013), stdev = 5419.949
[info]   CI (99.9%): [627123.958, 668864.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   411.647 ±(99.9%) 13.262 MB/sec [Average]
[info]   (min, avg, max) = (407.024, 411.647, 415.291), stdev = 3.444
[info]   CI (99.9%): [398.386, 424.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.648 ±(99.9%) 5.298 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.648, 3.109), stdev = 1.376
[info]   CI (99.9%): [≈ 0, 5.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.563 ±(99.9%) 12.780 B/op [Average]
[info]   (min, avg, max) = (0.051, 1.563, 7.500), stdev = 3.319
[info]   CI (99.9%): [≈ 0, 14.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   433.327 ±(99.9%) 574.284 MB/sec [Average]
[info]   (min, avg, max) = (329.694, 433.327, 660.753), stdev = 149.140
[info]   CI (99.9%): [≈ 0, 1007.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1051.749 ±(99.9%) 1375.852 B/op [Average]
[info]   (min, avg, max) = (801.727, 1051.749, 1591.063), stdev = 357.305
[info]   CI (99.9%): [≈ 0, 2427.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 74.73% complete, ETA 00:10:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3256457.338 ops/s
[info] # Warmup Iteration   2: 3598849.572 ops/s
[info] # Warmup Iteration   3: 3640067.180 ops/s
[info] Iteration   1: 3651689.514 ops/s
[info]                  ·gc.alloc.rate:                   1187.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.504 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568.780 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3578999.880 ops/s
[info]                  ·gc.alloc.rate:                   1164.125 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 436.201 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3645708.623 ops/s
[info]                  ·gc.alloc.rate:                   1185.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 573.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3654236.675 ops/s
[info]                  ·gc.alloc.rate:                   1188.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 574.691 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3668161.984 ops/s
[info]                  ·gc.alloc.rate:                   1193.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431.174 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3639759.335 ±(99.9%) 134576.265 ops/s [Average]
[info]   (min, avg, max) = (3578999.880, 3639759.335, 3668161.984), stdev = 34949.029
[info]   CI (99.9%): [3505183.070, 3774335.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1183.934 ±(99.9%) 43.892 MB/sec [Average]
[info]   (min, avg, max) = (1164.125, 1183.934, 1193.221), stdev = 11.399
[info]   CI (99.9%): [1140.042, 1227.825] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.034, 0.046), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1195.579 ±(99.9%) 693.918 MB/sec [Average]
[info]   (min, avg, max) = (991.782, 1195.579, 1334.227), stdev = 180.208
[info]   CI (99.9%): [501.661, 1889.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   516.802 ±(99.9%) 292.360 B/op [Average]
[info]   (min, avg, max) = (431.174, 516.802, 574.691), stdev = 75.925
[info]   CI (99.9%): [224.442, 809.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 8.000), stdev = 2.345
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 75.27% complete, ETA 00:09:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6049150.296 ops/s
[info] # Warmup Iteration   2: 6444845.550 ops/s
[info] # Warmup Iteration   3: 6644153.238 ops/s
[info] Iteration   1: 6686424.836 ops/s
[info]                  ·gc.alloc.rate:                   577.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.107 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6544697.159 ops/s
[info]                  ·gc.alloc.rate:                   565.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79.458 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6533046.181 ops/s
[info]                  ·gc.alloc.rate:                   564.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.035 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6492085.811 ops/s
[info]                  ·gc.alloc.rate:                   561.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6525358.664 ops/s
[info]                  ·gc.alloc.rate:                   563.840 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 159.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6556322.530 ±(99.9%) 290006.569 ops/s [Average]
[info]   (min, avg, max) = (6492085.811, 6556322.530, 6686424.836), stdev = 75313.785
[info]   CI (99.9%): [6266315.961, 6846329.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   566.523 ±(99.9%) 24.788 MB/sec [Average]
[info]   (min, avg, max) = (561.120, 566.523, 577.664), stdev = 6.437
[info]   CI (99.9%): [541.735, 591.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.243 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.671, 3.107), stdev = 1.362
[info]   CI (99.9%): [≈ 0, 5.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 1.234 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.158, 0.731), stdev = 0.320
[info]   CI (99.9%): [≈ 0, 1.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   594.979 ±(99.9%) 569.552 MB/sec [Average]
[info]   (min, avg, max) = (330.413, 594.979, 664.663), stdev = 147.911
[info]   CI (99.9%): [25.427, 1164.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   142.815 ±(99.9%) 136.471 B/op [Average]
[info]   (min, avg, max) = (79.458, 142.815, 159.877), stdev = 35.441
[info]   CI (99.9%): [6.344, 279.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 75.81% complete, ETA 00:09:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18406.498 ops/s
[info] # Warmup Iteration   2: 188536.973 ops/s
[info] # Warmup Iteration   3: 197672.834 ops/s
[info] Iteration   1: 199614.913 ops/s
[info]                  ·gc.alloc.rate:                   1270.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.492 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10325.830 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 200852.973 ops/s
[info]                  ·gc.alloc.rate:                   1278.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7753.871 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 199568.611 ops/s
[info]                  ·gc.alloc.rate:                   1270.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.657 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10472.574 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 199627.143 ops/s
[info]                  ·gc.alloc.rate:                   1270.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.900 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10532.607 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 199314.610 ops/s
[info]                  ·gc.alloc.rate:                   1268.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              10016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.986 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.765 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10601.692 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   199795.650 ±(99.9%) 2327.919 ops/s [Average]
[info]   (min, avg, max) = (199314.610, 199795.650, 200852.973), stdev = 604.553
[info]   CI (99.9%): [197467.731, 202123.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1271.497 ±(99.9%) 14.300 MB/sec [Average]
[info]   (min, avg, max) = (1268.584, 1271.497, 1278.006), stdev = 3.714
[info]   CI (99.9%): [1257.197, 1285.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10016.002, 10016.002, 10016.002), stdev = 0.001
[info]   CI (99.9%): [10016.002, 10016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.721 ±(99.9%) 0.720 B/op [Average]
[info]   (min, avg, max) = (0.492, 0.721, 0.986), stdev = 0.187
[info]   CI (99.9%): [0.001, 1.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1261.150 ±(99.9%) 586.987 MB/sec [Average]
[info]   (min, avg, max) = (989.366, 1261.150, 1342.765), stdev = 152.439
[info]   CI (99.9%): [674.163, 1848.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9937.315 ±(99.9%) 4716.309 B/op [Average]
[info]   (min, avg, max) = (7753.871, 9937.315, 10601.692), stdev = 1224.811
[info]   CI (99.9%): [5221.006, 14653.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 76.34% complete, ETA 00:09:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 497725.317 ops/s
[info] # Warmup Iteration   2: 727001.541 ops/s
[info] # Warmup Iteration   3: 735768.022 ops/s
[info] Iteration   1: 735870.357 ops/s
[info]                  ·gc.alloc.rate:                   2823.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.267 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2668.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5708.934 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 736330.508 ops/s
[info]                  ·gc.alloc.rate:                   2825.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.311 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3031.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6480.619 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 727065.254 ops/s
[info]                  ·gc.alloc.rate:                   2789.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2709.185 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5865.398 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 728042.044 ops/s
[info]                  ·gc.alloc.rate:                   2793.749 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5872.520 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 732689.547 ops/s
[info]                  ·gc.alloc.rate:                   2811.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3061.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6576.486 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   731999.542 ±(99.9%) 16587.470 ops/s [Average]
[info]   (min, avg, max) = (727065.254, 731999.542, 736330.508), stdev = 4307.713
[info]   CI (99.9%): [715412.072, 748587.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2808.748 ±(99.9%) 63.179 MB/sec [Average]
[info]   (min, avg, max) = (2789.833, 2808.748, 2825.120), stdev = 16.407
[info]   CI (99.9%): [2745.569, 2871.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.000, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.129, 0.187), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.277 ±(99.9%) 0.376 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.277, 0.406), stdev = 0.098
[info]   CI (99.9%): [≈ 0, 0.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2837.335 ±(99.9%) 738.713 MB/sec [Average]
[info]   (min, avg, max) = (2668.762, 2837.335, 3061.235), stdev = 191.842
[info]   CI (99.9%): [2098.622, 3576.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6100.791 ±(99.9%) 1530.146 B/op [Average]
[info]   (min, avg, max) = (5708.934, 6100.791, 6576.486), stdev = 397.374
[info]   CI (99.9%): [4570.645, 7630.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   42.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 76.88% complete, ETA 00:09:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3288291.377 ops/s
[info] # Warmup Iteration   2: 3746277.555 ops/s
[info] # Warmup Iteration   3: 3826762.972 ops/s
[info] Iteration   1: 3835160.636 ops/s
[info]                  ·gc.alloc.rate:                   2475.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2668.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1095.145 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3829461.933 ops/s
[info]                  ·gc.alloc.rate:                   2471.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2355.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.233 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3863455.569 ops/s
[info]                  ·gc.alloc.rate:                   2494.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.460 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.030 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3851392.203 ops/s
[info]                  ·gc.alloc.rate:                   2486.003 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1109.291 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3833660.066 ops/s
[info]                  ·gc.alloc.rate:                   2474.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2378.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 976.452 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3842626.082 ±(99.9%) 55137.185 ops/s [Average]
[info]   (min, avg, max) = (3829461.933, 3842626.082, 3863455.569), stdev = 14318.952
[info]   CI (99.9%): [3787488.897, 3897763.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2480.375 ±(99.9%) 36.129 MB/sec [Average]
[info]   (min, avg, max) = (2471.459, 2480.375, 2494.034), stdev = 9.383
[info]   CI (99.9%): [2444.246, 2516.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.133, 0.208), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.055 ±(99.9%) 0.069 B/op [Average]
[info]   (min, avg, max) = (0.042, 0.055, 0.086), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2496.581 ±(99.9%) 688.457 MB/sec [Average]
[info]   (min, avg, max) = (2355.265, 2496.581, 2714.273), stdev = 178.790
[info]   CI (99.9%): [1808.124, 3185.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1022.630 ±(99.9%) 280.952 B/op [Average]
[info]   (min, avg, max) = (964.030, 1022.630, 1109.291), stdev = 72.962
[info]   CI (99.9%): [741.679, 1303.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 10.000), stdev = 1.673
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 77.42% complete, ETA 00:08:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67735.717 ops/s
[info] # Warmup Iteration   2: 248879.502 ops/s
[info] # Warmup Iteration   3: 254136.945 ops/s
[info] Iteration   1: 256245.020 ops/s
[info]                  ·gc.alloc.rate:                   1833.433 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.895 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12188.510 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 256677.103 ops/s
[info]                  ·gc.alloc.rate:                   1836.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.638 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.868 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10240.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 252140.986 ops/s
[info]                  ·gc.alloc.rate:                   1804.312 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12586.105 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 256706.174 ops/s
[info]                  ·gc.alloc.rate:                   1837.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.511 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.552 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10353.271 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 256188.912 ops/s
[info]                  ·gc.alloc.rate:                   1833.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              11264.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12486.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   255591.639 ±(99.9%) 7484.296 ops/s [Average]
[info]   (min, avg, max) = (252140.986, 255591.639, 256706.174), stdev = 1943.648
[info]   CI (99.9%): [248107.343, 263075.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1828.990 ±(99.9%) 53.564 MB/sec [Average]
[info]   (min, avg, max) = (1804.312, 1828.990, 1837.086), stdev = 13.910
[info]   CI (99.9%): [1775.426, 1882.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11264.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11264.002, 11264.002, 11264.002), stdev = 0.001
[info]   CI (99.9%): [11264.001, 11264.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.589 ±(99.9%) 0.740 B/op [Average]
[info]   (min, avg, max) = (0.390, 0.589, 0.895), stdev = 0.192
[info]   CI (99.9%): [≈ 0, 1.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1878.135 ±(99.9%) 702.911 MB/sec [Average]
[info]   (min, avg, max) = (1669.868, 1878.135, 2032.247), stdev = 182.544
[info]   CI (99.9%): [1175.224, 2581.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11570.881 ±(99.9%) 4516.420 B/op [Average]
[info]   (min, avg, max) = (10240.351, 11570.881, 12586.105), stdev = 1172.900
[info]   CI (99.9%): [7054.461, 16087.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 77.96% complete, ETA 00:08:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 527990.696 ops/s
[info] # Warmup Iteration   2: 818674.637 ops/s
[info] # Warmup Iteration   3: 841692.959 ops/s
[info] Iteration   1: 840793.819 ops/s
[info]                  ·gc.alloc.rate:                   1846.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.195 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.018 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3075.469 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 836456.973 ops/s
[info]                  ·gc.alloc.rate:                   1836.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3745.174 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 842574.057 ops/s
[info]                  ·gc.alloc.rate:                   1849.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3122.569 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 840803.683 ops/s
[info]                  ·gc.alloc.rate:                   1846.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3778.082 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 842267.047 ops/s
[info]                  ·gc.alloc.rate:                   1849.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3157.927 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   840579.116 ±(99.9%) 9415.885 ops/s [Average]
[info]   (min, avg, max) = (836456.973, 840579.116, 842574.057), stdev = 2445.276
[info]   CI (99.9%): [831163.230, 849995.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1845.615 ±(99.9%) 20.378 MB/sec [Average]
[info]   (min, avg, max) = (1836.644, 1845.615, 1849.834), stdev = 5.292
[info]   CI (99.9%): [1825.237, 1865.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.187 ±(99.9%) 0.225 B/op [Average]
[info]   (min, avg, max) = (0.117, 0.187, 0.274), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1802.508 ±(99.9%) 712.909 MB/sec [Average]
[info]   (min, avg, max) = (1643.018, 1802.508, 2018.102), stdev = 185.140
[info]   CI (99.9%): [1089.599, 2515.417] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3375.844 ±(99.9%) 1361.491 B/op [Average]
[info]   (min, avg, max) = (3075.469, 3375.844, 3778.082), stdev = 353.575
[info]   CI (99.9%): [2014.353, 4737.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 78.49% complete, ETA 00:08:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 595758.936 ops/s
[info] # Warmup Iteration   2: 1429447.392 ops/s
[info] # Warmup Iteration   3: 1438403.870 ops/s
[info] Iteration   1: 1434716.028 ops/s
[info]                  ·gc.alloc.rate:                   824.179 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.564 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 712.474 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1436201.266 ops/s
[info]                  ·gc.alloc.rate:                   824.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1073.413 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1451484.830 ops/s
[info]                  ·gc.alloc.rate:                   833.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 711.464 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1451769.599 ops/s
[info]                  ·gc.alloc.rate:                   833.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1448232.451 ops/s
[info]                  ·gc.alloc.rate:                   831.849 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1444480.835 ±(99.9%) 32225.966 ops/s [Average]
[info]   (min, avg, max) = (1434716.028, 1444480.835, 1451769.599), stdev = 8368.981
[info]   CI (99.9%): [1412254.869, 1476706.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   829.646 ±(99.9%) 18.230 MB/sec [Average]
[info]   (min, avg, max) = (824.179, 829.646, 833.758), stdev = 4.734
[info]   CI (99.9%): [811.416, 847.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.098 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.082, 0.113), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   787.194 ±(99.9%) 692.524 MB/sec [Average]
[info]   (min, avg, max) = (649.564, 787.194, 988.755), stdev = 179.846
[info]   CI (99.9%): [94.670, 1479.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   857.799 ±(99.9%) 755.627 B/op [Average]
[info]   (min, avg, max) = (711.464, 857.799, 1073.413), stdev = 196.234
[info]   CI (99.9%): [102.172, 1613.425] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 79.03% complete, ETA 00:08:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4267254.109 ops/s
[info] # Warmup Iteration   2: 4681558.492 ops/s
[info] # Warmup Iteration   3: 4717087.250 ops/s
[info] Iteration   1: 4736584.008 ops/s
[info]                  ·gc.alloc.rate:                   361.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.739 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4716105.660 ops/s
[info]                  ·gc.alloc.rate:                   359.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85.367 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4710332.710 ops/s
[info]                  ·gc.alloc.rate:                   359.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.249 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 110.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 4528740.738 ops/s
[info]                  ·gc.alloc.rate:                   345.280 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.732 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 4764491.236 ops/s
[info]                  ·gc.alloc.rate:                   363.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.485 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4691250.870 ±(99.9%) 359219.185 ops/s [Average]
[info]   (min, avg, max) = (4528740.738, 4691250.870, 4764491.236), stdev = 93288.082
[info]   CI (99.9%): [4332031.685, 5050470.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   357.679 ±(99.9%) 27.377 MB/sec [Average]
[info]   (min, avg, max) = (345.280, 357.679, 363.247), stdev = 7.110
[info]   CI (99.9%): [330.302, 385.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.562 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.249), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.223 ±(99.9%) 1.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.223, 1.086), stdev = 0.482
[info]   CI (99.9%): [≈ 0, 2.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   365.579 ±(99.9%) 645.374 MB/sec [Average]
[info]   (min, avg, max) = (255.739, 365.579, 658.136), stdev = 167.602
[info]   CI (99.9%): [≈ 0, 1010.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   123.552 ±(99.9%) 231.144 B/op [Average]
[info]   (min, avg, max) = (84.998, 123.552, 228.732), stdev = 60.027
[info]   CI (99.9%): [≈ 0, 354.696] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 79.57% complete, ETA 00:08:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 174012.291 ops/s
[info] # Warmup Iteration   2: 503082.500 ops/s
[info] # Warmup Iteration   3: 506289.848 ops/s
[info] Iteration   1: 503765.183 ops/s
[info]                  ·gc.alloc.rate:                   1717.573 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.325 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5162.318 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 502188.698 ops/s
[info]                  ·gc.alloc.rate:                   1712.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.921 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6271.622 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 506756.678 ops/s
[info]                  ·gc.alloc.rate:                   1728.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5214.691 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 509765.944 ops/s
[info]                  ·gc.alloc.rate:                   1738.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.257 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5207.730 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 509615.614 ops/s
[info]                  ·gc.alloc.rate:                   1737.966 MB/sec
[info]                  ·gc.alloc.rate.norm:              5368.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.386 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5225.711 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   506418.424 ±(99.9%) 13125.076 ops/s [Average]
[info]   (min, avg, max) = (502188.698, 506418.424, 509765.944), stdev = 3408.541
[info]   CI (99.9%): [493293.348, 519543.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1726.946 ±(99.9%) 45.076 MB/sec [Average]
[info]   (min, avg, max) = (1712.626, 1726.946, 1738.454), stdev = 11.706
[info]   CI (99.9%): [1681.870, 1772.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5368.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5368.001, 5368.001, 5368.001), stdev = 0.001
[info]   CI (99.9%): [5368.001, 5368.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.350 ±(99.9%) 0.581 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.350, 0.587), stdev = 0.151
[info]   CI (99.9%): [≈ 0, 0.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1741.977 ±(99.9%) 560.556 MB/sec [Average]
[info]   (min, avg, max) = (1651.762, 1741.977, 2000.921), stdev = 145.575
[info]   CI (99.9%): [1181.422, 2302.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5416.415 ±(99.9%) 1843.243 B/op [Average]
[info]   (min, avg, max) = (5162.318, 5416.415, 6271.622), stdev = 478.684
[info]   CI (99.9%): [3573.172, 7259.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 80.11% complete, ETA 00:07:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2882231.005 ops/s
[info] # Warmup Iteration   2: 3386746.843 ops/s
[info] # Warmup Iteration   3: 3505852.129 ops/s
[info] Iteration   1: 3501587.905 ops/s
[info]                  ·gc.alloc.rate:                   1654.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.052 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 740.892 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3482256.347 ops/s
[info]                  ·gc.alloc.rate:                   1646.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 750.720 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3478205.000 ops/s
[info]                  ·gc.alloc.rate:                   1643.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.440 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3499279.703 ops/s
[info]                  ·gc.alloc.rate:                   1654.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 756.233 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3503342.682 ops/s
[info]                  ·gc.alloc.rate:                   1656.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.242 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 758.027 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3492934.327 ±(99.9%) 45335.277 ops/s [Average]
[info]   (min, avg, max) = (3478205.000, 3492934.327, 3503342.682), stdev = 11773.427
[info]   CI (99.9%): [3447599.051, 3538269.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1651.071 ±(99.9%) 21.170 MB/sec [Average]
[info]   (min, avg, max) = (1643.983, 1651.071, 1656.021), stdev = 5.498
[info]   CI (99.9%): [1629.900, 1672.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.117, 0.125), stdev = 0.011
[info]   CI (99.9%): [0.073, 0.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.053 ±(99.9%) 0.020 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.053, 0.057), stdev = 0.005
[info]   CI (99.9%): [0.032, 0.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1669.842 ±(99.9%) 60.397 MB/sec [Average]
[info]   (min, avg, max) = (1648.052, 1669.842, 1687.242), stdev = 15.685
[info]   CI (99.9%): [1609.446, 1730.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   752.462 ±(99.9%) 27.085 B/op [Average]
[info]   (min, avg, max) = (740.892, 752.462, 758.027), stdev = 7.034
[info]   CI (99.9%): [725.377, 779.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 80.65% complete, ETA 00:07:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114140.782 ops/s
[info] # Warmup Iteration   2: 306748.076 ops/s
[info] # Warmup Iteration   3: 306642.819 ops/s
[info] Iteration   1: 309998.232 ops/s
[info]                  ·gc.alloc.rate:                   1650.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.871 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8389.081 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 306527.231 ops/s
[info]                  ·gc.alloc.rate:                   1632.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8559.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 311252.709 ops/s
[info]                  ·gc.alloc.rate:                   1658.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.779 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6783.935 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 303330.567 ops/s
[info]                  ·gc.alloc.rate:                   1615.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.529 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8741.129 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 309227.916 ops/s
[info]                  ·gc.alloc.rate:                   1647.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              8384.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.636 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8604.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   308067.331 ±(99.9%) 12181.495 ops/s [Average]
[info]   (min, avg, max) = (303330.567, 308067.331, 311252.709), stdev = 3163.495
[info]   CI (99.9%): [295885.837, 320248.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1640.922 ±(99.9%) 65.022 MB/sec [Average]
[info]   (min, avg, max) = (1615.706, 1640.922, 1658.253), stdev = 16.886
[info]   CI (99.9%): [1575.900, 1705.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8384.001, 8384.001, 8384.001), stdev = 0.001
[info]   CI (99.9%): [8384.001, 8384.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.167), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.511 ±(99.9%) 0.892 B/op [Average]
[info]   (min, avg, max) = (0.316, 0.511, 0.855), stdev = 0.232
[info]   CI (99.9%): [≈ 0, 1.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1607.102 ±(99.9%) 574.110 MB/sec [Average]
[info]   (min, avg, max) = (1341.779, 1607.102, 1690.479), stdev = 149.095
[info]   CI (99.9%): [1032.991, 2181.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8215.685 ±(99.9%) 3119.786 B/op [Average]
[info]   (min, avg, max) = (6783.935, 8215.685, 8741.129), stdev = 810.199
[info]   CI (99.9%): [5095.899, 11335.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 81.18% complete, ETA 00:07:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255216.641 ops/s
[info] # Warmup Iteration   2: 461022.935 ops/s
[info] # Warmup Iteration   3: 464593.989 ops/s
[info] Iteration   1: 468301.349 ops/s
[info]                  ·gc.alloc.rate:                   1201.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4381.240 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 464273.788 ops/s
[info]                  ·gc.alloc.rate:                   1191.658 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.423 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4437.339 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 467347.809 ops/s
[info]                  ·gc.alloc.rate:                   1199.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.700 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3325.825 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 470918.855 ops/s
[info]                  ·gc.alloc.rate:                   1208.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.330 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4425.931 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 470322.945 ops/s
[info]                  ·gc.alloc.rate:                   1207.343 MB/sec
[info]                  ·gc.alloc.rate.norm:              4040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4460.641 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   468232.949 ±(99.9%) 10196.080 ops/s [Average]
[info]   (min, avg, max) = (464273.788, 468232.949, 470918.855), stdev = 2647.890
[info]   CI (99.9%): [458036.869, 478429.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1201.925 ±(99.9%) 26.348 MB/sec [Average]
[info]   (min, avg, max) = (1191.658, 1201.925, 1208.852), stdev = 6.843
[info]   CI (99.9%): [1175.577, 1228.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4040.001, 4040.001, 4040.001), stdev = 0.001
[info]   CI (99.9%): [4040.001, 4040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.125), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.224 ±(99.9%) 0.488 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.224, 0.423), stdev = 0.127
[info]   CI (99.9%): [≈ 0, 0.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1251.488 ±(99.9%) 569.647 MB/sec [Average]
[info]   (min, avg, max) = (987.700, 1251.488, 1333.050), stdev = 147.935
[info]   CI (99.9%): [681.842, 1821.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4206.195 ±(99.9%) 1898.319 B/op [Average]
[info]   (min, avg, max) = (3325.825, 4206.195, 4460.641), stdev = 492.987
[info]   CI (99.9%): [2307.877, 6104.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 81.72% complete, ETA 00:07:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2498423.122 ops/s
[info] # Warmup Iteration   2: 2867115.045 ops/s
[info] # Warmup Iteration   3: 2912336.672 ops/s
[info] Iteration   1: 2879070.767 ops/s
[info]                  ·gc.alloc.rate:                   585.265 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.247 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.775 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.054 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 360.892 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2927474.718 ops/s
[info]                  ·gc.alloc.rate:                   595.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2909593.490 ops/s
[info]                  ·gc.alloc.rate:                   591.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 354.584 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2913974.026 ops/s
[info]                  ·gc.alloc.rate:                   592.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177.385 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2910911.957 ops/s
[info]                  ·gc.alloc.rate:                   591.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355.313 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2908204.992 ±(99.9%) 68414.326 ops/s [Average]
[info]   (min, avg, max) = (2879070.767, 2908204.992, 2927474.718), stdev = 17766.983
[info]   CI (99.9%): [2839790.666, 2976619.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   591.291 ±(99.9%) 14.234 MB/sec [Average]
[info]   (min, avg, max) = (585.265, 591.291, 595.371), stdev = 3.697
[info]   CI (99.9%): [577.057, 605.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.695 ±(99.9%) 5.495 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.695, 3.247), stdev = 1.427
[info]   CI (99.9%): [≈ 0, 6.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.380 ±(99.9%) 3.005 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.380, 1.775), stdev = 0.780
[info]   CI (99.9%): [≈ 0, 3.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   591.617 ±(99.9%) 566.592 MB/sec [Average]
[info]   (min, avg, max) = (328.417, 591.617, 660.054), stdev = 147.142
[info]   CI (99.9%): [25.025, 1158.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   320.261 ±(99.9%) 307.762 B/op [Average]
[info]   (min, avg, max) = (177.385, 320.261, 360.892), stdev = 79.925
[info]   CI (99.9%): [12.500, 628.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 82.26% complete, ETA 00:07:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80805.828 ops/s
[info] # Warmup Iteration   2: 319070.080 ops/s
[info] # Warmup Iteration   3: 324566.235 ops/s
[info] Iteration   1: 326557.889 ops/s
[info]                  ·gc.alloc.rate:                   1253.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6311.868 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 325819.119 ops/s
[info]                  ·gc.alloc.rate:                   1250.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.603 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6377.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 326214.304 ops/s
[info]                  ·gc.alloc.rate:                   1251.695 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6415.039 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 326781.276 ops/s
[info]                  ·gc.alloc.rate:                   1253.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4830.351 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 326905.161 ops/s
[info]                  ·gc.alloc.rate:                   1254.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              6040.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6464.178 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   326455.550 ±(99.9%) 1702.539 ops/s [Average]
[info]   (min, avg, max) = (325819.119, 326455.550, 326905.161), stdev = 442.144
[info]   CI (99.9%): [324753.010, 328158.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1252.731 ±(99.9%) 6.901 MB/sec [Average]
[info]   (min, avg, max) = (1250.181, 1252.731, 1254.598), stdev = 1.792
[info]   CI (99.9%): [1245.831, 1259.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6040.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6040.001, 6040.001, 6040.001), stdev = 0.001
[info]   CI (99.9%): [6040.001, 6040.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.321 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.321, 0.603), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 1.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1260.928 ±(99.9%) 557.525 MB/sec [Average]
[info]   (min, avg, max) = (1002.843, 1260.928, 1342.706), stdev = 144.787
[info]   CI (99.9%): [703.403, 1818.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6079.817 ±(99.9%) 2698.078 B/op [Average]
[info]   (min, avg, max) = (4830.351, 6079.817, 6464.178), stdev = 700.682
[info]   CI (99.9%): [3381.738, 8777.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 82.80% complete, ETA 00:06:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 321373.616 ops/s
[info] # Warmup Iteration   2: 674317.499 ops/s
[info] # Warmup Iteration   3: 691798.008 ops/s
[info] Iteration   1: 693806.443 ops/s
[info]                  ·gc.alloc.rate:                   2123.311 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4487.997 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 692768.897 ops/s
[info]                  ·gc.alloc.rate:                   2119.531 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2331.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5297.550 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 693239.268 ops/s
[info]                  ·gc.alloc.rate:                   2120.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2014.115 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4573.479 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 698822.039 ops/s
[info]                  ·gc.alloc.rate:                   2138.965 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4562.418 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 694010.758 ops/s
[info]                  ·gc.alloc.rate:                   2123.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5377.971 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   694529.481 ±(99.9%) 9428.617 ops/s [Average]
[info]   (min, avg, max) = (692768.897, 694529.481, 698822.039), stdev = 2448.582
[info]   CI (99.9%): [685100.864, 703958.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2125.232 ±(99.9%) 30.236 MB/sec [Average]
[info]   (min, avg, max) = (2119.531, 2125.232, 2138.965), stdev = 7.852
[info]   CI (99.9%): [2094.996, 2155.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4816.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.001, 4816.001, 4816.001), stdev = 0.001
[info]   CI (99.9%): [4816.001, 4816.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.187), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.236 ±(99.9%) 0.465 B/op [Average]
[info]   (min, avg, max) = (0.142, 0.236, 0.426), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2144.366 ±(99.9%) 732.651 MB/sec [Average]
[info]   (min, avg, max) = (1978.699, 2144.366, 2371.214), stdev = 190.267
[info]   CI (99.9%): [1411.714, 2877.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4859.883 ±(99.9%) 1688.124 B/op [Average]
[info]   (min, avg, max) = (4487.997, 4859.883, 5377.971), stdev = 438.400
[info]   CI (99.9%): [3171.759, 6548.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 83.33% complete, ETA 00:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 492755.010 ops/s
[info] # Warmup Iteration   2: 1527113.585 ops/s
[info] # Warmup Iteration   3: 1540694.219 ops/s
[info] Iteration   1: 1526047.490 ops/s
[info]                  ·gc.alloc.rate:                   1155.462 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1353.446 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1544968.015 ops/s
[info]                  ·gc.alloc.rate:                   1169.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.370 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1010.097 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1551779.319 ops/s
[info]                  ·gc.alloc.rate:                   1175.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1348.501 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1549536.075 ops/s
[info]                  ·gc.alloc.rate:                   1173.491 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1017.947 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1551299.365 ops/s
[info]                  ·gc.alloc.rate:                   1174.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1362.483 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1544726.053 ±(99.9%) 41519.182 ops/s [Average]
[info]   (min, avg, max) = (1526047.490, 1544726.053, 1551779.319), stdev = 10782.400
[info]   CI (99.9%): [1503206.870, 1586245.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1169.737 ±(99.9%) 31.730 MB/sec [Average]
[info]   (min, avg, max) = (1155.462, 1169.737, 1175.134), stdev = 8.240
[info]   CI (99.9%): [1138.007, 1201.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.093 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.093, 0.127), stdev = 0.024
[info]   CI (99.9%): [0.001, 0.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1195.519 ±(99.9%) 700.097 MB/sec [Average]
[info]   (min, avg, max) = (991.370, 1195.519, 1342.704), stdev = 181.813
[info]   CI (99.9%): [495.422, 1895.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1218.495 ±(99.9%) 719.090 B/op [Average]
[info]   (min, avg, max) = (1010.097, 1218.495, 1362.483), stdev = 186.745
[info]   CI (99.9%): [499.405, 1937.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 83.87% complete, ETA 00:06:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6432351.956 ops/s
[info] # Warmup Iteration   2: 6760838.745 ops/s
[info] # Warmup Iteration   3: 6880825.797 ops/s
[info] Iteration   1: 6840233.653 ops/s
[info]                  ·gc.alloc.rate:                   208.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.857 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6848376.262 ops/s
[info]                  ·gc.alloc.rate:                   208.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6857881.982 ops/s
[info]                  ·gc.alloc.rate:                   209.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.057 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6840290.624 ops/s
[info]                  ·gc.alloc.rate:      208.625 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 6876923.673 ops/s
[info]                  ·gc.alloc.rate:                   209.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.542 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6852741.239 ±(99.9%) 59083.482 ops/s [Average]
[info]   (min, avg, max) = (6840233.653, 6852741.239, 6876923.673), stdev = 15343.793
[info]   CI (99.9%): [6793657.757, 6911824.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   208.976 ±(99.9%) 1.856 MB/sec [Average]
[info]   (min, avg, max) = (208.566, 208.976, 209.742), stdev = 0.482
[info]   CI (99.9%): [207.120, 210.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.015 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.057), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.013), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.612 ±(99.9%) 440.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.612, 255.808), stdev = 114.381
[info]   CI (99.9%): [≈ 0, 645.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   46.978 ±(99.9%) 101.125 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 46.978, 58.857), stdev = 26.262
[info]   CI (99.9%): [≈ 0, 148.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 84.41% complete, ETA 00:06:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41626.867 ops/s
[info] # Warmup Iteration   2: 243711.911 ops/s
[info] # Warmup Iteration   3: 242810.746 ops/s
[info] Iteration   1: 245412.025 ops/s
[info]                  ·gc.alloc.rate:                   1688.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.910 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10571.244 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 243387.214 ops/s
[info]                  ·gc.alloc.rate:                   1675.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.942 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10762.611 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 242404.639 ops/s
[info]                  ·gc.alloc.rate:                   1668.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10879.956 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 243618.631 ops/s
[info]                  ·gc.alloc.rate:                   1676.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.403 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10883.800 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 244588.225 ops/s
[info]                  ·gc.alloc.rate:                   1683.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              10832.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.670 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10879.043 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   243882.147 ±(99.9%) 4447.662 ops/s [Average]
[info]   (min, avg, max) = (242404.639, 243882.147, 245412.025), stdev = 1155.044
[info]   CI (99.9%): [239434.485, 248329.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1678.421 ±(99.9%) 29.958 MB/sec [Average]
[info]   (min, avg, max) = (1668.140, 1678.421, 1688.558), stdev = 7.780
[info]   CI (99.9%): [1648.463, 1708.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10832.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10832.002, 10832.002, 10832.002), stdev = 0.001
[info]   CI (99.9%): [10832.001, 10832.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.591 ±(99.9%) 0.869 B/op [Average]
[info]   (min, avg, max) = (0.401, 0.591, 0.942), stdev = 0.226
[info]   CI (99.9%): [≈ 0, 1.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.688 ±(99.9%) 65.324 MB/sec [Average]
[info]   (min, avg, max) = (1647.910, 1672.688, 1690.433), stdev = 16.964
[info]   CI (99.9%): [1607.364, 1738.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10795.331 ±(99.9%) 521.194 B/op [Average]
[info]   (min, avg, max) = (10571.244, 10795.331, 10883.800), stdev = 135.353
[info]   CI (99.9%): [10274.136, 11316.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 84.95% complete, ETA 00:05:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 456309.710 ops/s
[info] # Warmup Iteration   2: 905086.192 ops/s
[info] # Warmup Iteration   3: 920630.126 ops/s
[info] Iteration   1: 910465.488 ops/s
[info]                  ·gc.alloc.rate:                   1466.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.144 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2826.479 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 925102.452 ops/s
[info]                  ·gc.alloc.rate:                   1490.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.212 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2239.460 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 912988.739 ops/s
[info]                  ·gc.alloc.rate:                   1471.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2856.450 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 917101.937 ops/s
[info]                  ·gc.alloc.rate:                   1477.862 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2290.932 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 921448.480 ops/s
[info]                  ·gc.alloc.rate:                   1484.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2866.065 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   917421.419 ±(99.9%) 23051.755 ops/s [Average]
[info]   (min, avg, max) = (910465.488, 917421.419, 925102.452), stdev = 5986.468
[info]   CI (99.9%): [894369.664, 940473.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1478.285 ±(99.9%) 37.383 MB/sec [Average]
[info]   (min, avg, max) = (1466.675, 1478.285, 1490.804), stdev = 9.708
[info]   CI (99.9%): [1440.903, 1515.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.125), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.143 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (0.072, 0.143, 0.212), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1524.289 ±(99.9%) 700.765 MB/sec [Average]
[info]   (min, avg, max) = (1316.481, 1524.289, 1677.787), stdev = 181.987
[info]   CI (99.9%): [823.524, 2225.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2615.877 ±(99.9%) 1235.963 B/op [Average]
[info]   (min, avg, max) = (2239.460, 2615.877, 2866.065), stdev = 320.976
[info]   CI (99.9%): [1379.914, 3851.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 85.48% complete, ETA 00:05:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 805738.686 ops/s
[info] # Warmup Iteration   2: 2503536.387 ops/s
[info] # Warmup Iteration   3: 2421438.428 ops/s
[info] Iteration   1: 2431201.708 ops/s
[info]                  ·gc.alloc.rate:                   1001.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 633.699 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2507916.107 ops/s
[info]                  ·gc.alloc.rate:                   1032.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.513 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 618.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2496567.761 ops/s
[info]                  ·gc.alloc.rate:                   1027.740 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.752 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.679 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2516994.026 ops/s
[info]                  ·gc.alloc.rate:                   1036.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 623.582 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2512317.693 ops/s
[info]                  ·gc.alloc.rate:                   1034.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2492999.459 ±(99.9%) 136183.490 ops/s [Average]
[info]   (min, avg, max) = (2431201.708, 2492999.459, 2516994.026), stdev = 35366.420
[info]   CI (99.9%): [2356815.969, 2629182.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1026.385 ±(99.9%) 55.751 MB/sec [Average]
[info]   (min, avg, max) = (1001.105, 1026.385, 1036.237), stdev = 14.478
[info]   CI (99.9%): [970.634, 1082.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.061 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.039, 0.061, 0.091), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.665 ±(99.9%) 599.389 MB/sec [Average]
[info]   (min, avg, max) = (979.011, 1057.665, 1335.860), stdev = 155.659
[info]   CI (99.9%): [458.276, 1657.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   667.476 ±(99.9%) 365.403 B/op [Average]
[info]   (min, avg, max) = (618.475, 667.476, 836.943), stdev = 94.894
[info]   CI (99.9%): [302.072, 1032.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 86.02% complete, ETA 00:05:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4324500.116 ops/s
[info] # Warmup Iteration   2: 5890843.290 ops/s
[info] # Warmup Iteration   3: 6028802.871 ops/s
[info] Iteration   1: 6073416.369 ops/s
[info]                  ·gc.alloc.rate:                   679.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 170.729 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6134598.357 ops/s
[info]                  ·gc.alloc.rate:                   686.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 6119095.712 ops/s
[info]                  ·gc.alloc.rate:                   684.157 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.941 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6164779.059 ops/s
[info]                  ·gc.alloc.rate:                   689.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.125 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.774 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6044868.432 ops/s
[info]                  ·gc.alloc.rate:                   675.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   6107351.586 ±(99.9%) 185011.011 ops/s [Average]
[info]   (min, avg, max) = (6044868.432, 6107351.586, 6164779.059), stdev = 48046.772
[info]   CI (99.9%): [5922340.575, 6292362.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   682.937 ±(99.9%) 20.731 MB/sec [Average]
[info]   (min, avg, max) = (675.908, 682.937, 689.346), stdev = 5.384
[info]   CI (99.9%): [662.206, 703.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.016 ±(99.9%) 0.048 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.027), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.544 ±(99.9%) 3.483 MB/sec [Average]
[info]   (min, avg, max) = (656.716, 657.544, 658.848), stdev = 0.905
[info]   CI (99.9%): [654.061, 661.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   169.466 ±(99.9%) 5.854 B/op [Average]
[info]   (min, avg, max) = (167.774, 169.466, 171.366), stdev = 1.520
[info]   CI (99.9%): [163.612, 175.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 86.56% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4275192.764 ops/s
[info] # Warmup Iteration   2: 5856630.966 ops/s
[info] # Warmup Iteration   3: 5983314.858 ops/s
[info] Iteration   1: 5975519.937 ops/s
[info]                  ·gc.alloc.rate:                   364.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.742 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.371 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5971687.160 ops/s
[info]                  ·gc.alloc.rate:                   364.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67.418 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6020528.603 ops/s
[info]                  ·gc.alloc.rate:                   367.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.296 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.862 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.032 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86.289 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5870473.377 ops/s
[info]                  ·gc.alloc.rate:                   358.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 88.494 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6040571.324 ops/s
[info]                  ·gc.alloc.rate:                   368.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.844 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 171.132 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5975756.080 ±(99.9%) 253285.264 ops/s [Average]
[info]   (min, avg, max) = (5870473.377, 5975756.080, 6040571.324), stdev = 65777.379
[info]   CI (99.9%): [5722470.816, 6229041.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   364.461 ±(99.9%) 15.409 MB/sec [Average]
[info]   (min, avg, max) = (358.096, 364.461, 368.470), stdev = 4.002
[info]   CI (99.9%): [349.052, 379.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.661 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.296), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.174 ±(99.9%) 1.480 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.862), stdev = 0.384
[info]   CI (99.9%): [≈ 0, 1.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   365.689 ±(99.9%) 642.865 MB/sec [Average]
[info]   (min, avg, max) = (255.729, 365.689, 656.844), stdev = 166.950
[info]   CI (99.9%): [≈ 0, 1008.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   96.141 ±(99.9%) 165.980 B/op [Average]
[info]   (min, avg, max) = (67.371, 96.141, 171.132), stdev = 43.104
[info]   CI (99.9%): [≈ 0, 262.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 87.10% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48678.522 ops/s
[info] # Warmup Iteration   2: 344160.800 ops/s
[info] # Warmup Iteration   3: 347695.920 ops/s
[info] Iteration   1: 345281.823 ops/s
[info]                  ·gc.alloc.rate:                   1959.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.474 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9063.950 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 346247.349 ops/s
[info]                  ·gc.alloc.rate:                   1966.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.662 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1671.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7597.104 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 344898.094 ops/s
[info]                  ·gc.alloc.rate:                   1957.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.285 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.090 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9210.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 343588.604 ops/s
[info]                  ·gc.alloc.rate:                   1951.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9288.399 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 347201.802 ops/s
[info]                  ·gc.alloc.rate:                   1971.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              8936.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.582 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9219.067 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   345443.534 ±(99.9%) 5273.431 ops/s [Average]
[info]   (min, avg, max) = (343588.604, 345443.534, 347201.802), stdev = 1369.493
[info]   CI (99.9%): [340170.103, 350716.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1961.254 ±(99.9%) 29.771 MB/sec [Average]
[info]   (min, avg, max) = (1951.064, 1961.254, 1971.143), stdev = 7.731
[info]   CI (99.9%): [1931.483, 1991.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8936.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8936.001, 8936.001, 8936.001), stdev = 0.001
[info]   CI (99.9%): [8936.001, 8936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.474 ±(99.9%) 0.514 B/op [Average]
[info]   (min, avg, max) = (0.285, 0.474, 0.662), stdev = 0.133
[info]   CI (99.9%): [≈ 0, 0.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.851 ±(99.9%) 598.466 MB/sec [Average]
[info]   (min, avg, max) = (1671.619, 1947.851, 2033.582), stdev = 155.420
[info]   CI (99.9%): [1349.385, 2546.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8875.807 ±(99.9%) 2770.435 B/op [Average]
[info]   (min, avg, max) = (7597.104, 8875.807, 9288.399), stdev = 719.473
[info]   CI (99.9%): [6105.372, 11646.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 87.63% complete, ETA 00:04:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 498273.619 ops/s
[info] # Warmup Iteration   2: 715975.964 ops/s
[info] # Warmup Iteration   3: 715381.083 ops/s
[info] Iteration   1: 718961.937 ops/s
[info]                  ·gc.alloc.rate:                   1603.943 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.319 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3596.083 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 718355.375 ops/s
[info]                  ·gc.alloc.rate:                   1602.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3625.397 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 720094.642 ops/s
[info]                  ·gc.alloc.rate:                   1606.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.318 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3645.029 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 715133.701 ops/s
[info]                  ·gc.alloc.rate:                   1595.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2952.736 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 715894.774 ops/s
[info]                  ·gc.alloc.rate:                   1597.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              3512.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3701.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   717688.086 ±(99.9%) 8077.255 ops/s [Average]
[info]   (min, avg, max) = (715133.701, 717688.086, 720094.642), stdev = 2097.637
[info]   CI (99.9%): [709610.831, 725765.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1601.247 ±(99.9%) 18.202 MB/sec [Average]
[info]   (min, avg, max) = (1595.554, 1601.247, 1606.883), stdev = 4.727
[info]   CI (99.9%): [1583.045, 1619.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   3512.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3512.001, 3512.001, 3512.001), stdev = 0.001
[info]   CI (99.9%): [3512.001, 3512.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.112, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.246 ±(99.9%) 0.317 B/op [Average]
[info]   (min, avg, max) = (0.137, 0.246, 0.319), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1597.875 ±(99.9%) 555.067 MB/sec [Average]
[info]   (min, avg, max) = (1341.471, 1597.875, 1683.447), stdev = 144.149
[info]   CI (99.9%): [1042.807, 2152.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3504.160 ±(99.9%) 1196.221 B/op [Average]
[info]   (min, avg, max) = (2952.736, 3504.160, 3701.554), stdev = 310.655
[info]   CI (99.9%): [2307.939, 4700.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 88.17% complete, ETA 00:04:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489463.510 ops/s
[info] # Warmup Iteration   2: 1044667.077 ops/s
[info] # Warmup Iteration   3: 1050974.766 ops/s
[info] Iteration   1: 1040798.660 ops/s
[info]                  ·gc.alloc.rate:                   1364.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1616.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2444.766 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1050995.559 ops/s
[info]                  ·gc.alloc.rate:                   1378.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.122 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1953.274 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1056102.614 ops/s
[info]                  ·gc.alloc.rate:                   1384.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1959.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1061437.779 ops/s
[info]                  ·gc.alloc.rate:                   1391.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1965.638 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1057664.755 ops/s
[info]                  ·gc.alloc.rate:                   1387.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              2064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.155 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.135 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2479.431 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   1053399.873 ±(99.9%) 30725.222 ops/s [Average]
[info]   (min, avg, max) = (1040798.660, 1053399.873, 1061437.779), stdev = 7979.243
[info]   CI (99.9%): [1022674.652, 1084125.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1381.453 ±(99.9%) 40.899 MB/sec [Average]
[info]   (min, avg, max) = (1364.754, 1381.453, 1391.930), stdev = 10.621
[info]   CI (99.9%): [1340.554, 1422.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2064.000, 2064.000, 2064.000), stdev = 0.001
[info]   CI (99.9%): [2064.000, 2064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.118 ±(99.9%) 0.197 B/op [Average]
[info]   (min, avg, max) = (0.062, 0.118, 0.187), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1445.616 ±(99.9%) 693.765 MB/sec [Average]
[info]   (min, avg, max) = (1304.122, 1445.616, 1667.135), stdev = 180.168
[info]   CI (99.9%): [751.852, 2139.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2160.549 ±(99.9%) 1061.174 B/op [Average]
[info]   (min, avg, max) = (1953.274, 2160.549, 2479.431), stdev = 275.583
[info]   CI (99.9%): [1099.375, 3221.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 88.71% complete, ETA 00:04:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 699168.469 ops/s
[info] # Warmup Iteration   2: 752728.931 ops/s
[info] # Warmup Iteration   3: 752949.094 ops/s
[info] Iteration   1: 758973.081 ops/s
[info]                  ·gc.alloc.rate:                   648.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1374.483 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 754156.943 ops/s
[info]                  ·gc.alloc.rate:                   644.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1377.669 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 758984.812 ops/s
[info]                  ·gc.alloc.rate:                   648.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1367.524 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 758748.632 ops/s
[info]                  ·gc.alloc.rate:                   647.931 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1369.333 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 758114.362 ops/s
[info]                  ·gc.alloc.rate:                   647.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              1344.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1372.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   757795.566 ±(99.9%) 7950.063 ops/s [Average]
[info]   (min, avg, max) = (754156.943, 757795.566, 758984.812), stdev = 2064.606
[info]   CI (99.9%): [749845.503, 765745.629] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   647.083 ±(99.9%) 6.705 MB/sec [Average]
[info]   (min, avg, max) = (644.035, 647.083, 648.159), stdev = 1.741
[info]   CI (99.9%): [640.378, 653.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1344.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1344.001, 1344.001, 1344.001), stdev = 0.001
[info]   CI (99.9%): [1344.000, 1344.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.104 ±(99.9%) 0.252 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.104, 0.173), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   660.707 ±(99.9%) 5.109 MB/sec [Average]
[info]   (min, avg, max) = (659.392, 660.707, 662.860), stdev = 1.327
[info]   CI (99.9%): [655.598, 665.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1372.305 ±(99.9%) 15.553 B/op [Average]
[info]   (min, avg, max) = (1367.524, 1372.305, 1377.669), stdev = 4.039
[info]   CI (99.9%): [1356.752, 1387.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 89.25% complete, ETA 00:04:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200350.746 ops/s
[info] # Warmup Iteration   2: 293723.692 ops/s
[info] # Warmup Iteration   3: 292030.213 ops/s
[info] Iteration   1: 297627.877 ops/s
[info]                  ·gc.alloc.rate:                   1013.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5178.205 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 297074.324 ops/s
[info]                  ·gc.alloc.rate:                   1011.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5193.207 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 298244.252 ops/s
[info]                  ·gc.alloc.rate:                   1015.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5190.292 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 297044.671 ops/s
[info]                  ·gc.alloc.rate:                   1011.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.441 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6988.530 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 296865.509 ops/s
[info]                  ·gc.alloc.rate:                   1010.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              5360.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.100 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5276.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   297371.327 ±(99.9%) 2177.047 ops/s [Average]
[info]   (min, avg, max) = (296865.509, 297371.327, 298244.252), stdev = 565.372
[info]   CI (99.9%): [295194.280, 299548.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1012.569 ±(99.9%) 7.396 MB/sec [Average]
[info]   (min, avg, max) = (1010.878, 1012.569, 1015.572), stdev = 1.921
[info]   CI (99.9%): [1005.173, 1019.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5360.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5360.001, 5360.001, 5360.001), stdev = 0.001
[info]   CI (99.9%): [5360.001, 5360.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.031, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.397 ±(99.9%) 0.233 B/op [Average]
[info]   (min, avg, max) = (0.330, 0.397, 0.441), stdev = 0.061
[info]   CI (99.9%): [0.163, 0.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1051.281 ±(99.9%) 576.579 MB/sec [Average]
[info]   (min, avg, max) = (979.001, 1051.281, 1318.892), stdev = 149.736
[info]   CI (99.9%): [474.703, 1627.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5565.315 ±(99.9%) 3067.254 B/op [Average]
[info]   (min, avg, max) = (5178.205, 5565.315, 6988.530), stdev = 796.556
[info]   CI (99.9%): [2498.061, 8632.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 89.78% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 177103.694 ops/s
[info] # Warmup Iteration   2: 283399.686 ops/s
[info] # Warmup Iteration   3: 303782.254 ops/s
[info] Iteration   1: 302972.409 ops/s
[info]                  ·gc.alloc.rate:                   320.270 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.814 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 302838.497 ops/s
[info]                  ·gc.alloc.rate:                   320.105 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1329.419 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 302961.360 ops/s
[info]                  ·gc.alloc.rate:                   320.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 302951.211 ops/s
[info]                  ·gc.alloc.rate:                   320.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.892 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1683.616 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 304442.411 ops/s
[info]                  ·gc.alloc.rate:                   321.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              1664.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.080 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1675.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   303233.178 ±(99.9%) 2611.213 ops/s [Average]
[info]   (min, avg, max) = (302838.497, 303233.178, 304442.411), stdev = 678.124
[info]   CI (99.9%): [300621.964, 305844.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   320.569 ±(99.9%) 2.818 MB/sec [Average]
[info]   (min, avg, max) = (320.105, 320.569, 321.867), stdev = 0.732
[info]   CI (99.9%): [317.751, 323.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1664.001, 1664.001, 1664.001), stdev = 0.001
[info]   CI (99.9%): [1664.001, 1664.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.783 ±(99.9%) 6.694 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.783, 3.892), stdev = 1.738
[info]   CI (99.9%): [≈ 0, 7.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.065 ±(99.9%) 34.769 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.065, 20.217), stdev = 9.029
[info]   CI (99.9%): [≈ 0, 38.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   283.092 ±(99.9%) 144.183 MB/sec [Average]
[info]   (min, avg, max) = (255.741, 283.092, 324.140), stdev = 37.444
[info]   CI (99.9%): [138.909, 427.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1469.235 ±(99.9%) 739.298 B/op [Average]
[info]   (min, avg, max) = (1328.814, 1469.235, 1683.616), stdev = 191.993
[info]   CI (99.9%): [729.937, 2208.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 90.32% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 820513.515 ops/s
[info] # Warmup Iteration   2: 1050009.942 ops/s
[info] # Warmup Iteration   3: 1069104.455 ops/s
[info] Iteration   1: 1076513.230 ops/s
[info]                  ·gc.alloc.rate:                   908.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 961.220 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1078412.792 ops/s
[info]                  ·gc.alloc.rate:                   910.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.388 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1437.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1069555.863 ops/s
[info]                  ·gc.alloc.rate:                   902.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1453.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1074822.164 ops/s
[info]                  ·gc.alloc.rate:                   906.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1451.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1070573.092 ops/s
[info]                  ·gc.alloc.rate:                   903.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              1328.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 974.411 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   1073975.428 ±(99.9%) 14657.260 ops/s [Average]
[info]   (min, avg, max) = (1069555.863, 1073975.428, 1078412.792), stdev = 3806.444
[info]   CI (99.9%): [1059318.169, 1088632.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   906.129 ±(99.9%) 12.726 MB/sec [Average]
[info]   (min, avg, max) = (902.254, 906.129, 910.120), stdev = 3.305
[info]   CI (99.9%): [893.403, 918.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1328.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1328.000, 1328.000, 1328.000), stdev = 0.001
[info]   CI (99.9%): [1328.000, 1328.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.116 ±(99.9%) 0.152 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.116, 0.152), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   856.851 ±(99.9%) 691.795 MB/sec [Average]
[info]   (min, avg, max) = (657.358, 856.851, 991.082), stdev = 179.657
[info]   CI (99.9%): [165.056, 1548.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1255.719 ±(99.9%) 1012.450 B/op [Average]
[info]   (min, avg, max) = (961.220, 1255.719, 1453.686), stdev = 262.930
[info]   CI (99.9%): [243.269, 2268.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 90.86% complete, ETA 00:03:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 741527.464 ops/s
[info] # Warmup Iteration   2: 927513.652 ops/s
[info] # Warmup Iteration   3: 915359.822 ops/s
[info] Iteration   1: 918603.922 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 917356.782 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 918610.591 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 924061.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 929606.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   921647.921 ±(99.9%) 19828.868 ops/s [Average]
[info]   (min, avg, max) = (917356.782, 921647.921, 929606.333), stdev = 5149.494
[info]   CI (99.9%): [901819.053, 941476.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 91.40% complete, ETA 00:03:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264916.576 ops/s
[info] # Warmup Iteration   2: 326791.829 ops/s
[info] # Warmup Iteration   3: 322457.127 ops/s
[info] Iteration   1: 335035.894 ops/s
[info]                  ·gc.alloc.rate:                   357.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.048 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.226 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.638 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 334130.185 ops/s
[info]                  ·gc.alloc.rate:                   356.596 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1204.892 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 334361.145 ops/s
[info]                  ·gc.alloc.rate:                   356.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.790 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1541.097 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 334901.671 ops/s
[info]                  ·gc.alloc.rate:                   357.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.503 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1538.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   5: 334572.356 ops/s
[info]                  ·gc.alloc.rate:                   357.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              1680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1532.323 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   334600.250 ±(99.9%) 1440.202 ops/s [Average]
[info]   (min, avg, max) = (334130.185, 334600.250, 335035.894), stdev = 374.016
[info]   CI (99.9%): [333160.049, 336040.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   357.162 ±(99.9%) 1.629 MB/sec [Average]
[info]   (min, avg, max) = (356.596, 357.162, 357.593), stdev = 0.423
[info]   CI (99.9%): [355.533, 358.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1680.001, 1680.001, 1680.001), stdev = 0.001
[info]   CI (99.9%): [1680.001, 1680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.780 ±(99.9%) 6.480 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.780, 3.790), stdev = 1.683
[info]   CI (99.9%): [≈ 0, 7.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.672 ±(99.9%) 30.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.672, 17.838), stdev = 7.920
[info]   CI (99.9%): [≈ 0, 34.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   298.431 ±(99.9%) 150.046 MB/sec [Average]
[info]   (min, avg, max) = (255.750, 298.431, 327.503), stdev = 38.967
[info]   CI (99.9%): [148.385, 448.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1403.717 ±(99.9%) 704.739 B/op [Average]
[info]   (min, avg, max) = (1201.638, 1403.717, 1541.097), stdev = 183.019
[info]   CI (99.9%): [698.978, 2108.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 4.000), stdev = 1.517
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 91.94% complete, ETA 00:03:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 798582.042 ops/s
[info] # Warmup Iteration   2: 1082772.991 ops/s
[info] # Warmup Iteration   3: 1109000.360 ops/s
[info] Iteration   1: 1118367.882 ops/s
[info]                  ·gc.alloc.rate:                   1671.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2314.518 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1115671.021 ops/s
[info]                  ·gc.alloc.rate:                   1667.586 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2338.551 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1112562.718 ops/s
[info]                  ·gc.alloc.rate:                   1662.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.464 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2362.042 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 1120132.807 ops/s
[info]                  ·gc.alloc.rate:                   1673.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2360.087 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1124993.781 ops/s
[info]                  ·gc.alloc.rate:                   1681.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              2352.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2359.177 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1118345.642 ±(99.9%) 18059.891 ops/s [Average]
[info]   (min, avg, max) = (1112562.718, 1118345.642, 1124993.781), stdev = 4690.096
[info]   CI (99.9%): [1100285.750, 1136405.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1671.285 ±(99.9%) 27.017 MB/sec [Average]
[info]   (min, avg, max) = (1662.367, 1671.285, 1681.149), stdev = 7.016
[info]   CI (99.9%): [1644.268, 1698.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2352.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.000, 2352.000, 2352.000), stdev = 0.001
[info]   CI (99.9%): [2352.000, 2352.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.087, 0.104), stdev = 0.009
[info]   CI (99.9%): [0.052, 0.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.116, 0.123, 0.147), stdev = 0.014
[info]   CI (99.9%): [0.071, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1667.647 ±(99.9%) 63.935 MB/sec [Average]
[info]   (min, avg, max) = (1644.880, 1667.647, 1686.279), stdev = 16.604
[info]   CI (99.9%): [1603.711, 1731.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2346.875 ±(99.9%) 78.731 B/op [Average]
[info]   (min, avg, max) = (2314.518, 2346.875, 2362.042), stdev = 20.446
[info]   CI (99.9%): [2268.144, 2425.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.47% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 644417.577 ops/s
[info] # Warmup Iteration   2: 1258022.419 ops/s
[info] # Warmup Iteration   3: 1301113.264 ops/s
[info] Iteration   1: 1309359.702 ops/s
[info]                  ·gc.alloc.rate:                   858.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1296696.167 ops/s
[info]                  ·gc.alloc.rate:                   850.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.177 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1174.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1304254.863 ops/s
[info]                  ·gc.alloc.rate:                   855.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 780.954 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1293006.457 ops/s
[info]                  ·gc.alloc.rate:                   847.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1186.693 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1295692.883 ops/s
[info]                  ·gc.alloc.rate:                   849.443 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.291 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1299802.015 ±(99.9%) 26108.396 ops/s [Average]
[info]   (min, avg, max) = (1293006.457, 1299802.015, 1309359.702), stdev = 6780.268
[info]   CI (99.9%): [1273693.618, 1325910.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   852.183 ±(99.9%) 17.076 MB/sec [Average]
[info]   (min, avg, max) = (847.788, 852.183, 858.401), stdev = 4.435
[info]   CI (99.9%): [835.107, 869.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.146), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.081 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.081, 0.177), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   843.439 ±(99.9%) 692.191 MB/sec [Average]
[info]   (min, avg, max) = (646.049, 843.439, 981.379), stdev = 179.760
[info]   CI (99.9%): [151.248, 1535.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1022.291 ±(99.9%) 856.170 B/op [Average]
[info]   (min, avg, max) = (776.703, 1022.291, 1192.291), stdev = 222.345
[info]   CI (99.9%): [166.122, 1878.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.01% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2109102.911 ops/s
[info] # Warmup Iteration   2: 2313259.823 ops/s
[info] # Warmup Iteration   3: 2325731.897 ops/s
[info] Iteration   1: 2331206.640 ops/s
[info]                  ·gc.alloc.rate:                   568.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.106 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 448.831 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2325964.876 ops/s
[info]                  ·gc.alloc.rate:                   567.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.384 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 223.569 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 2331432.246 ops/s
[info]                  ·gc.alloc.rate:                   568.839 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446.090 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2335931.838 ops/s
[info]                  ·gc.alloc.rate:                   569.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.021 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2332653.854 ops/s
[info]                  ·gc.alloc.rate:                   569.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              384.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 445.636 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   2331437.891 ±(99.9%) 13841.114 ops/s [Average]
[info]   (min, avg, max) = (2325964.876, 2331437.891, 2335931.838), stdev = 3594.493
[info]   CI (99.9%): [2317596.777, 2345279.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   568.809 ±(99.9%) 3.430 MB/sec [Average]
[info]   (min, avg, max) = (567.465, 568.809, 569.942), stdev = 0.891
[info]   CI (99.9%): [565.379, 572.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   384.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (384.000, 384.000, 384.000), stdev = 0.001
[info]   CI (99.9%): [384.000, 384.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.671 ±(99.9%) 5.241 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.671, 3.106), stdev = 1.361
[info]   CI (99.9%): [≈ 0, 5.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.453 ±(99.9%) 3.539 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.453, 2.097), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 3.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   595.373 ±(99.9%) 570.450 MB/sec [Average]
[info]   (min, avg, max) = (330.384, 595.373, 664.730), stdev = 148.144
[info]   CI (99.9%): [24.923, 1165.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   401.829 ±(99.9%) 383.760 B/op [Average]
[info]   (min, avg, max) = (223.569, 401.829, 448.831), stdev = 99.661
[info]   CI (99.9%): [18.070, 785.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.55% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1270763.802 ops/s
[info] # Warmup Iteration   2: 1963929.413 ops/s
[info] # Warmup Iteration   3: 1959881.351 ops/s
[info] Iteration   1: 1960260.755 ops/s
[info]                  ·gc.alloc.rate:                   1355.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.438 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1050.414 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1958211.557 ops/s
[info]                  ·gc.alloc.rate:                   1353.806 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.068 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1056.868 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1956895.362 ops/s
[info]                  ·gc.alloc.rate:                   1352.898 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1064.012 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1960279.704 ops/s
[info]                  ·gc.alloc.rate:                   1355.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1069.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1935658.786 ops/s
[info]                  ·gc.alloc.rate:                   1338.022 MB/sec
[info]                  ·gc.alloc.rate.norm:              1088.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.865 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1088.686 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1954261.233 ±(99.9%) 40423.096 ops/s [Average]
[info]   (min, avg, max) = (1935658.786, 1954261.233, 1960279.704), stdev = 10497.750
[info]   CI (99.9%): [1913838.137, 1994684.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1350.999 ±(99.9%) 28.172 MB/sec [Average]
[info]   (min, avg, max) = (1338.022, 1350.999, 1355.256), stdev = 7.316
[info]   CI (99.9%): [1322.827, 1379.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.074 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.033, 0.074, 0.102), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1323.390 ±(99.9%) 47.094 MB/sec [Average]
[info]   (min, avg, max) = (1308.438, 1323.390, 1338.865), stdev = 12.230
[info]   CI (99.9%): [1276.295, 1370.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1065.822 ±(99.9%) 56.282 B/op [Average]
[info]   (min, avg, max) = (1050.414, 1065.822, 1088.686), stdev = 14.616
[info]   CI (99.9%): [1009.540, 1122.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 94.09% complete, ETA 00:02:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 947469.435 ops/s
[info] # Warmup Iteration   2: 2600769.333 ops/s
[info] # Warmup Iteration   3: 3017217.921 ops/s
[info] Iteration   1: 3043062.683 ops/s
[info]                  ·gc.alloc.rate:                   1113.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 500.952 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3005499.643 ops/s
[info]                  ·gc.alloc.rate:                   1100.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 508.075 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3016022.607 ops/s
[info]                  ·gc.alloc.rate:                   1103.676 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 679.244 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3034910.065 ops/s
[info]                  ·gc.alloc.rate:                   1110.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 509.709 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2960840.829 ops/s
[info]                  ·gc.alloc.rate:                   1083.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              576.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 525.999 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   3012067.166 ±(99.9%) 124260.638 ops/s [Average]
[info]   (min, avg, max) = (2960840.829, 3012067.166, 3043062.683), stdev = 32270.093
[info]   CI (99.9%): [2887806.527, 3136327.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1102.387 ±(99.9%) 45.518 MB/sec [Average]
[info]   (min, avg, max) = (1083.589, 1102.387, 1113.638), stdev = 11.821
[info]   CI (99.9%): [1056.869, 1147.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   576.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (576.000, 576.000, 576.000), stdev = 0.001
[info]   CI (99.9%): [576.000, 576.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.050 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (0.032, 0.050, 0.076), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1042.603 ±(99.9%) 558.315 MB/sec [Average]
[info]   (min, avg, max) = (968.539, 1042.603, 1301.502), stdev = 144.993
[info]   CI (99.9%): [484.288, 1600.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   544.796 ±(99.9%) 291.554 B/op [Average]
[info]   (min, avg, max) = (500.952, 544.796, 679.244), stdev = 75.716
[info]   CI (99.9%): [253.241, 836.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.62% complete, ETA 00:02:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2388057.725 ops/s
[info] # Warmup Iteration   2: 3111964.284 ops/s
[info] # Warmup Iteration   3: 3188618.525 ops/s
[info] Iteration   1: 3198649.219 ops/s
[info]                  ·gc.alloc.rate:                   633.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 325.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3200957.249 ops/s
[info]                  ·gc.alloc.rate:                   634.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 322.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3152056.778 ops/s
[info]                  ·gc.alloc.rate:                   624.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 327.967 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3164847.684 ops/s
[info]                  ·gc.alloc.rate:                   627.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.632 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3188094.526 ops/s
[info]                  ·gc.alloc.rate:                   632.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 324.587 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   3180921.091 ±(99.9%) 83005.614 ops/s [Average]
[info]   (min, avg, max) = (3152056.778, 3180921.091, 3200957.249), stdev = 21556.294
[info]   CI (99.9%): [3097915.478, 3263926.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   630.542 ±(99.9%) 16.102 MB/sec [Average]
[info]   (min, avg, max) = (624.967, 630.542, 634.396), stdev = 4.182
[info]   CI (99.9%): [614.440, 646.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.701 ±(99.9%) 5.412 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.214), stdev = 1.406
[info]   CI (99.9%): [≈ 0, 6.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.345 ±(99.9%) 2.663 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.345, 1.582), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 3.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   657.714 ±(99.9%) 6.486 MB/sec [Average]
[info]   (min, avg, max) = (656.655, 657.714, 660.671), stdev = 1.684
[info]   CI (99.9%): [651.228, 664.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   325.454 ±(99.9%) 7.416 B/op [Average]
[info]   (min, avg, max) = (322.947, 325.454, 327.967), stdev = 1.926
[info]   CI (99.9%): [318.038, 332.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.16% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2766477.318 ops/s
[info] # Warmup Iteration   2: 3464638.661 ops/s
[info] # Warmup Iteration   3: 3222520.108 ops/s
[info] Iteration   1: 3477204.517 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 3478470.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3475885.128 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 3480920.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 3481654.506 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   3478827.116 ±(99.9%) 9391.285 ops/s [Average]
[info]   (min, avg, max) = (3475885.128, 3478827.116, 3481654.506), stdev = 2438.887
[info]   CI (99.9%): [3469435.831, 3488218.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.70% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2080385.359 ops/s
[info] # Warmup Iteration   2: 2799932.647 ops/s
[info] # Warmup Iteration   3: 2870859.891 ops/s
[info] Iteration   1: 2856368.051 ops/s
[info]                  ·gc.alloc.rate:                   1205.228 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 718.303 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2865304.170 ops/s
[info]                  ·gc.alloc.rate:                   1209.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 538.983 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2875927.026 ops/s
[info]                  ·gc.alloc.rate:                   1213.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 719.621 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2854772.506 ops/s
[info]                  ·gc.alloc.rate:                   1204.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2855758.529 ops/s
[info]                  ·gc.alloc.rate:                   1204.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              664.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 550.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2861626.056 ±(99.9%) 34820.761 ops/s [Average]
[info]   (min, avg, max) = (2854772.506, 2861626.056, 2875927.026), stdev = 9042.841
[info]   CI (99.9%): [2826805.295, 2896446.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1207.243 ±(99.9%) 14.789 MB/sec [Average]
[info]   (min, avg, max) = (1204.174, 1207.243, 1213.152), stdev = 3.841
[info]   CI (99.9%): [1192.454, 1222.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   664.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (664.000, 664.000, 664.000), stdev = 0.001
[info]   CI (99.9%): [664.000, 664.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.083), stdev = 0.011
[info]   CI (99.9%): [0.027, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.039 ±(99.9%) 0.024 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.039, 0.046), stdev = 0.006
[info]   CI (99.9%): [0.015, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1184.745 ±(99.9%) 684.768 MB/sec [Average]
[info]   (min, avg, max) = (981.450, 1184.745, 1324.704), stdev = 177.832
[info]   CI (99.9%): [499.977, 1869.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   651.611 ±(99.9%) 376.111 B/op [Average]
[info]   (min, avg, max) = (538.983, 651.611, 730.462), stdev = 97.675
[info]   CI (99.9%): [275.501, 1027.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.24% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5891.415 ops/s
[info] # Warmup Iteration   2: 9399.524 ops/s
[info] # Warmup Iteration   3: 11257.039 ops/s
[info] Iteration   1: 11158.133 ops/s
[info]                  ·gc.alloc.rate:                   1637.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              230856.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.936 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1632.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 230245.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 11113.123 ops/s
[info]                  ·gc.alloc.rate:                   1629.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              230763.437 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.189 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.735 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233064.058 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 12590.115 ops/s
[info]                  ·gc.alloc.rate:                   1841.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              230152.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.609 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1993.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249258.497 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12673.025 ops/s
[info]                  ·gc.alloc.rate:                   1853.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              230207.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.097 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207895.186 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12639.078 ops/s
[info]                  ·gc.alloc.rate:                   1848.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.186 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 251568.661 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12034.695 ±(99.9%) 3162.977 ops/s [Average]
[info]   (min, avg, max) = (11113.123, 12034.695, 12673.025), stdev = 821.415
[info]   CI (99.9%): [8871.717, 15197.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1761.861 ±(99.9%) 452.879 MB/sec [Average]
[info]   (min, avg, max) = (1629.152, 1761.861, 1853.562), stdev = 117.611
[info]   CI (99.9%): [1308.982, 2214.740] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230437.498 ±(99.9%) 1317.476 B/op [Average]
[info]   (min, avg, max) = (230152.032, 230437.498, 230856.039), stdev = 342.144
[info]   CI (99.9%): [229120.023, 231754.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.133 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.133, 0.189), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.397] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   17.305 ±(99.9%) 35.137 B/op [Average]
[info]   (min, avg, max) = (2.936, 17.305, 26.735), stdev = 9.125
[info]   CI (99.9%): [≈ 0, 52.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1793.181 ±(99.9%) 754.230 MB/sec [Average]
[info]   (min, avg, max) = (1632.821, 1793.181, 2019.823), stdev = 195.871
[info]   CI (99.9%): [1038.951, 2547.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234406.304 ±(99.9%) 67717.999 B/op [Average]
[info]   (min, avg, max) = (207895.186, 234406.304, 251568.661), stdev = 17586.149
[info]   CI (99.9%): [166688.304, 302124.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 11.000), stdev = 2.683
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.77% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5838.242 ops/s
[info] # Warmup Iteration   2: 15331.078 ops/s
[info] # Warmup Iteration   3: 16038.827 ops/s
[info] Iteration   1: 16208.011 ops/s
[info]                  ·gc.alloc.rate:                   223.054 MB/sec
[info]                  ·gc.alloc.rate.norm:              21664.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24836.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 16055.271 ops/s
[info]                  ·gc.alloc.rate:      220.983 MB/sec
[info]                  ·gc.alloc.rate.norm: 21664.025 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 16191.821 ops/s
[info]                  ·gc.alloc.rate:                   222.938 MB/sec
[info]                  ·gc.alloc.rate.norm:              21664.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.855 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24862.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 16054.440 ops/s
[info]                  ·gc.alloc.rate:                   220.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              21664.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.762 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25076.489 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15993.221 ops/s
[info]                  ·gc.alloc.rate:                   220.091 MB/sec
[info]                  ·gc.alloc.rate.norm:              21657.736 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.562 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     55.306 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31725.373 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   16100.553 ±(99.9%) 363.137 ops/s [Average]
[info]   (min, avg, max) = (15993.221, 16100.553, 16208.011), stdev = 94.306
[info]   CI (99.9%): [15737.416, 16463.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   221.605 ±(99.9%) 5.085 MB/sec [Average]
[info]   (min, avg, max) = (220.091, 221.605, 223.054), stdev = 1.320
[info]   CI (99.9%): [216.520, 226.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   21662.769 ±(99.9%) 10.834 B/op [Average]
[info]   (min, avg, max) = (21657.736, 21662.769, 21664.032), stdev = 2.813
[info]   CI (99.9%): [21651.936, 21673.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.943 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.125, 0.562), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.278 ±(99.9%) 92.847 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.278, 55.306), stdev = 24.112
[info]   CI (99.9%): [≈ 0, 105.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.948 ±(99.9%) 482.120 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.948, 322.401), stdev = 125.205
[info]   CI (99.9%): [≈ 0, 700.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21300.281 ±(99.9%) 47232.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21300.281, 31725.373), stdev = 12266.238
[info]   CI (99.9%): [≈ 0, 68533.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   6.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.200, 2.000), stdev = 0.837
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 97.31% complete, ETA 00:01:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17088.231 ops/s
[info] # Warmup Iteration   2: 35876.990 ops/s
[info] # Warmup Iteration   3: 37000.306 ops/s
[info] Iteration   1: 37820.473 ops/s
[info]                  ·gc.alloc.rate:                   347.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              14448.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10644.597 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 36400.699 ops/s
[info]                  ·gc.alloc.rate:                   334.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              14448.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.019 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22120.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 37873.669 ops/s
[info]                  ·gc.alloc.rate:                   347.641 MB/sec
[info]                  ·gc.alloc.rate.norm:              14448.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.297 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.708 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13702.714 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 37893.948 ops/s
[info]                  ·gc.alloc.rate:                   347.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              14448.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13695.483 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 37832.127 ops/s
[info]                  ·gc.alloc.rate:                   347.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              14448.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.715 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13634.786 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37564.183 ±(99.9%) 2507.136 ops/s [Average]
[info]   (min, avg, max) = (36400.699, 37564.183, 37893.948), stdev = 651.095
[info]   CI (99.9%): [35057.047, 40071.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   344.818 ±(99.9%) 23.083 MB/sec [Average]
[info]   (min, avg, max) = (334.106, 344.818, 347.891), stdev = 5.995
[info]   CI (99.9%): [321.735, 367.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14448.012 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (14448.011, 14448.012, 14448.014), stdev = 0.001
[info]   CI (99.9%): [14448.007, 14448.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.666 ±(99.9%) 5.662 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.297), stdev = 1.470
[info]   CI (99.9%): [≈ 0, 6.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   27.702 ±(99.9%) 235.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.702, 137.014), stdev = 61.109
[info]   CI (99.9%): [≈ 0, 263.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.902 ±(99.9%) 366.713 MB/sec [Average]
[info]   (min, avg, max) = (255.792, 350.902, 511.523), stdev = 95.234
[info]   CI (99.9%): [≈ 0, 717.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14759.547 ±(99.9%) 16632.105 B/op [Average]
[info]   (min, avg, max) = (10644.597, 14759.547, 22120.155), stdev = 4319.305
[info]   CI (99.9%): [≈ 0, 31391.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 5.000), stdev = 1.924
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 97.85% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 734.606 ops/s
[info] # Warmup Iteration   2: 3003.747 ops/s
[info] # Warmup Iteration   3: 2787.406 ops/s
[info] Iteration   1: 3236.162 ops/s
[info]                  ·gc.alloc.rate:                   1024.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              498307.885 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474402.086 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 3521.381 ops/s
[info]                  ·gc.alloc.rate:                   1115.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              498440.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     46.519 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586214.124 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3520.803 ops/s
[info]                  ·gc.alloc.rate:                   1115.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              498440.125 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 442861.102 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3505.631 ops/s
[info]                  ·gc.alloc.rate:                   1110.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              498440.116 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.344 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 446848.255 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3493.577 ops/s
[info]                  ·gc.alloc.rate:                   1106.458 MB/sec
[info]                  ·gc.alloc.rate.norm:              498440.126 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.751 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 601243.578 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3455.511 ±(99.9%) 474.258 ops/s [Average]
[info]   (min, avg, max) = (3236.162, 3455.511, 3521.381), stdev = 123.163
[info]   CI (99.9%): [2981.253, 3929.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1094.224 ±(99.9%) 150.877 MB/sec [Average]
[info]   (min, avg, max) = (1024.436, 1094.224, 1115.135), stdev = 39.182
[info]   CI (99.9%): [943.347, 1245.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   498413.674 ±(99.9%) 227.718 B/op [Average]
[info]   (min, avg, max) = (498307.885, 498413.674, 498440.126), stdev = 59.138
[info]   CI (99.9%): [498185.956, 498641.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   20.833 ±(99.9%) 58.695 B/op [Average]
[info]   (min, avg, max) = (9.304, 20.833, 46.519), stdev = 15.243
[info]   CI (99.9%): [≈ 0, 79.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1121.464 ±(99.9%) 709.998 MB/sec [Average]
[info]   (min, avg, max) = (975.289, 1121.464, 1334.665), stdev = 184.384
[info]   CI (99.9%): [411.467, 1831.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   510313.829 ±(99.9%) 297625.612 B/op [Average]
[info]   (min, avg, max) = (442861.102, 510313.829, 601243.578), stdev = 77292.426
[info]   CI (99.9%): [212688.217, 807939.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 11.000), stdev = 2.702
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 98.39% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_c541fbd0/target/73287fdd/jackson-module-afterburner-2.9.3.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21744.719 ops/s
[info] # Warmup Iteration   2: 51824.491 ops/s
[info] # Warmup Iteration   3: 51689.006 ops/s
[info] Iteration   1: 51965.358 ops/s
[info]                  ·gc.alloc.rate:                   680.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19579.848 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 50992.897 ops/s
[info]                  ·gc.alloc.rate:                   667.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.428 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20045.913 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 51997.617 ops/s
[info]                  ·gc.alloc.rate:                   680.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.990 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.890 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19739.182 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 51714.722 ops/s
[info]                  ·gc.alloc.rate:                   676.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              20604.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19928.276 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 51728.603 ops/s
[info]                  ·gc.alloc.rate:                   677.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              20603.997 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.421 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20003.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   51679.839 ±(99.9%) 1561.753 ops/s [Average]
[info]   (min, avg, max) = (50992.897, 51679.839, 51997.617), stdev = 405.582
[info]   CI (99.9%): [50118.086, 53241.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   676.507 ±(99.9%) 20.465 MB/sec [Average]
[info]   (min, avg, max) = (667.509, 676.507, 680.694), stdev = 5.315
[info]   CI (99.9%): [656.042, 696.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20604.013 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (20603.990, 20604.013, 20604.051), stdev = 0.024
[info]   CI (99.9%): [20603.921, 20604.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.902 ±(99.9%) 4.566 B/op [Average]
[info]   (min, avg, max) = (0.634, 1.902, 3.800), stdev = 1.186
[info]   CI (99.9%): [≈ 0, 6.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   652.030 ±(99.9%) 16.648 MB/sec [Average]
[info]   (min, avg, max) = (646.419, 652.030, 657.421), stdev = 4.323
[info]   CI (99.9%): [635.382, 668.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19859.434 ±(99.9%) 753.163 B/op [Average]
[info]   (min, avg, max) = (19579.848, 19859.434, 20045.913), stdev = 195.594
[info]   CI (99.9%): [19106.271, 20612.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 98.92% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 74635.284 ops/s
[info] # Warmup Iteration   2: 92176.117 ops/s
[info] # Warmup Iteration   3: 92434.369 ops/s
[info] Iteration   1: 93430.900 ops/s
[info]                  ·gc.alloc.rate:                   612.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.393 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     57.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11108.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 93570.573 ops/s
[info]                  ·gc.alloc.rate:                   613.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11025.023 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 93978.661 ops/s
[info]                  ·gc.alloc.rate:                   616.156 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.405 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10977.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 93388.592 ops/s
[info]                  ·gc.alloc.rate:                   612.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.427 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11046.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 92796.640 ops/s
[info]                  ·gc.alloc.rate:                   608.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              10320.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11128.741 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   93433.073 ±(99.9%) 1637.772 ops/s [Average]
[info]   (min, avg, max) = (92796.640, 93433.073, 93978.661), stdev = 425.324
[info]   CI (99.9%): [91795.301, 95070.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   612.642 ±(99.9%) 10.402 MB/sec [Average]
[info]   (min, avg, max) = (608.632, 612.642, 616.156), stdev = 2.701
[info]   CI (99.9%): [602.240, 623.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.004, 10320.004, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.720 ±(99.9%) 5.754 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.720, 3.393), stdev = 1.494
[info]   CI (99.9%): [≈ 0, 6.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   12.133 ±(99.9%) 96.917 B/op [Average]
[info]   (min, avg, max) = (0.350, 12.133, 57.151), stdev = 25.169
[info]   CI (99.9%): [≈ 0, 109.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   656.403 ±(99.9%) 6.838 MB/sec [Average]
[info]   (min, avg, max) = (655.358, 656.403, 659.496), stdev = 1.776
[info]   CI (99.9%): [649.565, 663.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   11057.354 ±(99.9%) 238.151 B/op [Average]
[info]   (min, avg, max) = (10977.400, 11057.354, 11128.741), stdev = 61.847
[info]   CI (99.9%): [10819.203, 11295.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.46% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89207.658 ops/s
[info] # Warmup Iteration   2: 107448.678 ops/s
[info] # Warmup Iteration   3: 107799.614 ops/s
[info] Iteration   1: 107935.528 ops/s
[info]                  ·gc.alloc.rate:      4.939 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 107879.529 ops/s
[info]                  ·gc.alloc.rate:      4.934 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 108269.028 ops/s
[info]                  ·gc.alloc.rate:      4.953 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 107729.159 ops/s
[info]                  ·gc.alloc.rate:      4.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 107689.696 ops/s
[info]                  ·gc.alloc.rate:      4.925 MB/sec
[info]                  ·gc.alloc.rate.norm: 72.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   107900.588 ±(99.9%) 884.969 ops/s [Average]
[info]   (min, avg, max) = (107689.696, 107900.588, 108269.028), stdev = 229.824
[info]   CI (99.9%): [107015.619, 108785.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   4.936 ±(99.9%) 0.042 MB/sec [Average]
[info]   (min, avg, max) = (4.925, 4.936, 4.953), stdev = 0.011
[info]   CI (99.9%): [4.894, 4.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   72.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.004, 72.004, 72.004), stdev = 0.001
[info]   CI (99.9%): [72.004, 72.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 00:39:38
[info] Benchmark                                                                                  Mode  Cnt         Score        Error   Units
[info] AdtBenchmark.readCirce                                                                    thrpt    5    769094.222 ±   7461.182   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                     thrpt    5      2032.777 ±     19.028  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                thrpt    5      4160.001 ±      0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                            thrpt    5         0.129 ±      0.183  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                       thrpt    5         0.264 ±      0.372    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                        thrpt    5      2007.247 ±     86.197  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                   thrpt    5      4107.816 ±    197.202    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                          thrpt    5        30.000               counts
[info] AdtBenchmark.readCirce:·gc.time                                                           thrpt    5        27.000                   ms
[info] AdtBenchmark.readJacksonScala                                                             thrpt    5   1635520.902 ±  23487.045   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                              thrpt    5      1313.446 ±     18.724  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         thrpt    5      1264.000 ±      0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±      0.188  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.100 ±      0.180    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                 thrpt    5      1331.234 ±     52.943  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      1281.118 ±     47.468    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                   thrpt    5        20.000               counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                    thrpt    5        23.000                   ms
[info] AdtBenchmark.readJsoniterScala                                                            thrpt    5   4015306.018 ±  32312.021   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                             thrpt    5       265.320 ±      2.223  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        thrpt    5       104.000 ±      0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.635 ±      5.324  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.250 ±      2.093    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                                thrpt    5       271.105 ±    708.792  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       106.353 ±    278.319    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                  thrpt    5         5.000               counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                   thrpt    5        12.000                   ms
[info] AdtBenchmark.readPlayJson                                                                 thrpt    5    159318.688 ±   6802.531   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                  thrpt    5      1326.228 ±     55.914  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                             thrpt    5     13104.003 ±      0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                         thrpt    5         0.092 ±      0.134  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.907 ±      1.346    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                     thrpt    5      1262.846 ±    571.869  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                                thrpt    5     12472.032 ±   5425.774    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                       thrpt    5        19.000               counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                        thrpt    5        23.000                   ms
[info] AdtBenchmark.writeJacksonScala                                                            thrpt    5   2086946.689 ±   8325.304   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                             thrpt    5       678.824 ±      2.687  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       512.000 ±      0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.154 ±      0.665  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.116 ±      0.501    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5       719.001 ±    542.727  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       542.234 ±    407.198    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                  thrpt    5        11.000               counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                   thrpt    5        13.000                   ms
[info] AdtBenchmark.writeJsoniterScala                                                           thrpt    5  13617829.240 ± 625258.465   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                            thrpt    5       692.182 ±     32.055  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        80.000 ±      0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.058 ±      0.222  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.007 ±      0.026    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       657.542 ±      3.668  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        76.005 ±      3.623    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                 thrpt    5        10.000               counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                  thrpt    5        10.000                   ms
[info] AdtBenchmark.writePlayJson                                                                thrpt    5    318447.547 ±   2156.677   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                 thrpt    5      1039.154 ±      6.647  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                            thrpt    5      5136.001 ±      0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.092 ±      0.122  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.453 ±      0.601    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5       991.395 ±     31.408  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      4899.988 ±    171.855    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                      thrpt    5        15.000               counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                       thrpt    5        19.000                   ms
[info] AnyRefsBenchmark.readCirce                                                                thrpt    5   1623474.235 ±  23461.844   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2533.093 ±     35.861  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      2456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.092 ±      0.122  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.089 ±      0.117    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2560.166 ±    703.806  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      2482.283 ±    684.167    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                      thrpt    5        38.000               counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                       thrpt    5        36.000                   ms
[info] AnyRefsBenchmark.readJacksonScala                                                         thrpt    5   2574059.975 ±   4742.860   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1805.641 ±      4.227  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1104.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.117 ±      0.108  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.071 ±      0.066    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1746.451 ±    586.969  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1067.851 ±    361.395    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        26.000               counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.readJsoniterScala                                                        thrpt    5  11295159.582 ±  56977.110   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      1435.241 ±      7.657  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       200.000 ±      0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±      0.160  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.012 ±      0.022    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1467.142 ±    692.168  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       204.467 ±     97.332    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        22.000               counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        20.000                   ms
[info] AnyRefsBenchmark.readPlayJson                                                             thrpt    5    659750.494 ±   7926.154   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1743.740 ±     19.709  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      4160.001 ±      0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.117 ±      0.166  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.278 ±      0.396    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      1740.542 ±    517.111  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4152.265 ±   1225.581    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        26.000               counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeCirce                                                               thrpt    5   1931038.306 ±  56536.975   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      1786.265 ±     52.492  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      1456.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.083 ±      0.057  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.068 ±      0.046    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      1800.706 ±    728.394  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1467.396 ±    573.279    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                     thrpt    5        27.000               counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                      thrpt    5        26.000                   ms
[info] AnyRefsBenchmark.writeJacksonScala                                                        thrpt    5   6359165.226 ± 122289.386   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1745.208 ±     34.115  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       432.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.112 ±      0.122  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.028 ±      0.030    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1740.505 ±    560.495  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       430.780 ±    134.932    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        26.000               counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        31.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                       thrpt    5  23350074.795 ± 289141.381   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       712.053 ±      8.893  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        48.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.143  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.005 ±      0.010    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       723.375 ±    565.262  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        48.759 ±     37.963    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        11.000               counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        11.000                   ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                               thrpt    5  23831921.175 ± 412836.744   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                thrpt    5        ≈ 10⁻⁴               MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                           thrpt    5        ≈ 10⁻⁵                 B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                     thrpt    5           ≈ 0               counts
[info] AnyRefsBenchmark.writePlayJson                                                            thrpt    5   1178896.097 ±  65487.967   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1779.692 ±     97.958  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      2376.000 ±      0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.096 ±      0.122  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.128 ±      0.162    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1810.401 ±    698.931  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      2416.082 ±    874.898    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        27.000               counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        31.000                   ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                         thrpt    5      8522.251 ±    216.170   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1248.013 ±     30.741  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    230473.809 ±     15.151    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±      0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        14.611 ±     12.422    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1257.884 ±    547.604  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    232170.663 ±  96310.867    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                               thrpt    5        19.000               counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                thrpt    5        19.000                   ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                  thrpt    5     24748.918 ±   2275.670   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       915.529 ±     84.641  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     58227.116 ±     59.652    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'       thrpt    5         0.048 ±      0.417  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm  thrpt    5         3.215 ±     27.682    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.083 ±      0.247  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         5.359 ±     16.286    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       916.541 ±    576.928  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     58384.360 ±  38600.463    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        16.000               counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        45.000                   ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                 thrpt    5     29151.606 ±    739.688   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       529.105 ±     13.533  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     28568.015 ±      0.008    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.559 ±      4.414  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        30.019 ±    236.738    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       529.134 ±    696.301  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     28560.510 ±  37478.177    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                 thrpt    5     16134.382 ±    537.928   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5      1547.214 ±     51.447  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5    150944.024 ±      0.322    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.083 ±      0.204  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         8.113 ±     19.848    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1543.084 ±    724.428  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5    150622.875 ±  73567.439    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        27.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                thrpt    5     17406.633 ±    604.773   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5      1577.525 ±     55.468  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5    142648.025 ±      0.010    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±      0.067  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         6.032 ±      6.234    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1539.736 ±    695.737  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    139250.650 ±  63508.242    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        19.000                   ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     18107.636 ±    468.172   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5      1522.433 ±     38.705  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5    132320.024 ±      0.011    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.092 ±      0.146  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5         7.957 ±     12.584    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5      1538.159 ±    695.379  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5    133738.066 ±  62358.445    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5        23.000               counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        22.000                   ms
[info] ArrayOfBooleansBenchmark.readCirce                                                        thrpt    5     44763.361 ±    229.472   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1552.778 ±      7.920  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     54600.009 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         2.489 ±      4.282    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1596.840 ±    573.551  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     56154.696 ±  20407.361    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                              thrpt    5        24.000               counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                               thrpt    5        24.000                   ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                 thrpt    5    104574.729 ±   2183.227   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       238.662 ±      4.983  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      3592.004 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.801 ±      6.755  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        11.996 ±    101.200    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       269.316 ±    116.342  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      4052.528 ±   1707.017    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                       thrpt    5         5.000               counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                        thrpt    5        16.000                   ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                thrpt    5    214974.614 ±  12511.863   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       292.853 ±     16.947  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      2144.002 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.658 ±      5.559  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.939 ±     41.774    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       285.516 ±    156.701  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2092.201 ±   1208.632    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         5.000               counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                     thrpt    5     13063.593 ±    295.217   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      3983.438 ±     88.245  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5    479960.385 ±      3.039    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.154 ±      0.166  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        18.560 ±     20.125    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      3941.590 ±    710.122  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    474915.446 ±  84672.563    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                           thrpt    5        58.000               counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                            thrpt    5        63.000                   ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                       thrpt    5     45603.410 ±    698.602   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       800.635 ±     12.247  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     27632.009 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±      0.113  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         2.872 ±      3.879    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       785.105 ±    687.438  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     27104.911 ±  23925.559    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                             thrpt    5        12.000               counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                   ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                thrpt    5    133571.516 ±   4214.834   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       954.492 ±     29.861  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     11248.003 ±      0.034    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.071 ±      0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.835 ±      0.860    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       975.395 ±     31.060  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     11494.713 ±    404.042    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        15.000               counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        17.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                               thrpt    5    297223.272 ±   4853.450   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1068.233 ±     17.152  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      5656.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.087 ±      0.132  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.463 ±      0.695    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1058.131 ±    579.377  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      5602.578 ±   3067.156    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        16.000               counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        15.000                   ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    316047.660 ±  14603.832   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0               counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                    thrpt    5     54367.817 ±    831.160   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       537.999 ±      8.362  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     15576.001 ±      0.099    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.807 ±      6.728  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        23.426 ±    195.218    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5       569.209 ±    540.035  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     16488.866 ±  15754.599    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                          thrpt    5         9.000               counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                           thrpt    5        14.000                   ms
[info] ArrayOfBytesBenchmark.readCirce                                                           thrpt    5     21442.768 ±    230.488   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      1945.532 ±     20.205  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5    142815.583 ±      2.499    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.121 ±      0.222  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         8.861 ±     16.315    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1943.267 ±    630.559  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    142674.216 ±  47517.553    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                 thrpt    5        29.000               counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                  thrpt    5        30.000                   ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                    thrpt    5     54331.394 ±    282.704   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       126.494 ±      0.630  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      3664.008 ±      0.003    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.975 ±      8.386  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        28.301 ±    243.353    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       153.506 ±    539.596  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      4446.158 ±  15628.911    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                          thrpt    5         3.000               counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                           thrpt    5         9.000                   ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                   thrpt    5    133846.733 ±   5249.325   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       182.339 ±      7.162  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      2144.003 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.006 ±      0.055  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.075 ±      0.643    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       153.490 ±    539.539  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1813.276 ±   6374.598    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         3.000               counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         7.000                   ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                        thrpt    5      9939.140 ±    226.727   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3329.591 ±     75.801  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5    527320.054 ±      0.103    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.042 ±      0.057  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         6.593 ±      8.951    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      3324.239 ±    594.873  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    526501.092 ±  96355.023    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                              thrpt    5        49.000               counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                               thrpt    5        54.000                   ms
[info] ArrayOfBytesBenchmark.writeCirce                                                          thrpt    5     34420.811 ±   2177.709   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1334.219 ±     84.142  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     61009.609 ±     13.753    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.121 ±      0.207  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         5.518 ±      9.532    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1389.591 ±    528.557  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     63475.120 ±  19777.219    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                thrpt    5        21.000               counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                 thrpt    5        20.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                  thrpt    5    236829.922 ±  11254.339   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       565.798 ±     26.788  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      3760.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.709 ±      5.433  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         4.721 ±     36.181    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       591.865 ±    567.076  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      3937.815 ±   3826.539    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000               counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5    250907.249 ±   2507.984   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5         0.002 ±      0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0               counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                       thrpt    5      4512.863 ±     60.336   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      2089.521 ±     28.960  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5    728752.093 ±      0.014    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.143  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        27.597 ±     50.068    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      2071.530 ±    553.696  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    722625.286 ± 203617.093    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                             thrpt    5        31.000               counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                              thrpt    5        33.000                   ms
[info] ArrayOfDoublesBenchmark.readCirce                                                         thrpt    5      2919.693 ±     95.358   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1374.008 ±     45.096  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    740720.144 ±      0.025    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.146 ±      0.196  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        78.701 ±    108.154    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1324.241 ±     48.698  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    713947.400 ±  40561.244    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                               thrpt    5        20.000               counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                thrpt    5        19.000                   ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                  thrpt    5      6361.212 ±     88.187   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       903.268 ±     12.672  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5    223512.065 ±      0.009    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.050 ±      0.134  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        12.376 ±     33.238    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       849.177 ±    689.099  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    210237.393 ± 172809.312    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                        thrpt    5        13.000               counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                         thrpt    5        15.000                   ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                 thrpt    5      8274.737 ±    302.842   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       587.813 ±     21.340  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5    111808.050 ±      0.006    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.701 ±      5.548  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       134.312 ±   1063.249    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       591.576 ±    566.600  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5    112498.783 ± 107466.854    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         9.000               counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                      thrpt    5      3757.839 ±     50.288   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1633.115 ±     27.527  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    684002.909 ±   5920.306    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.033 ±      0.044  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        13.948 ±     18.401    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1670.419 ±     68.602  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    699621.086 ±  23725.171    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                            thrpt    5        25.000               counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                             thrpt    5        28.000                   ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                        thrpt    5      5964.148 ±     85.366   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       518.463 ±      7.601  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    136824.069 ±      0.009    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.707 ±      5.866  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5       187.790 ±   1558.039    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       508.143 ±    647.593  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    134139.709 ± 171249.651    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                              thrpt    5         8.000               counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                               thrpt    5        11.000                   ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                 thrpt    5      6870.157 ±    286.867   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       298.745 ±     12.472  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     68443.641 ±      1.883    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.802 ±      6.802  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5       185.958 ±   1577.819    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       282.792 ±    142.652  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     64804.056 ±  33155.043    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         5.000               counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        13.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                thrpt    5      7634.897 ±    113.745   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       271.327 ±      4.025  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     55936.054 ±      0.007    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.660 ±      5.653  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5       136.393 ±   1167.490    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       219.461 ±    488.373  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     45280.340 ± 100801.699    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         4.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                   ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5      7812.194 ±     92.604   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       205.118 ±      2.434  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5     41328.053 ±      0.007    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.009 ±      0.058  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5         1.794 ±     11.592    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5       204.595 ±    440.405  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5     41234.711 ±  88762.909    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         4.000               counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5         9.000                   ms
[info] ArrayOfFloatsBenchmark.readCirce                                                          thrpt    5      4224.011 ±     47.668   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1483.024 ±     16.583  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    552600.101 ±      0.026    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.137 ±      0.303  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        51.210 ±    113.175    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1460.728 ±    704.216  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    544379.748 ± 265830.998    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                thrpt    5        22.000               counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                 thrpt    5        24.000                   ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                   thrpt    5     11481.538 ±    260.011   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       966.325 ±     22.286  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5    132471.225 ±     62.002    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±      0.183  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         7.980 ±     25.062    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       982.046 ±     41.159  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5    134628.604 ±   5765.561    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        15.000               counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        18.000                   ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                  thrpt    5     18424.562 ±    268.565   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5        96.465 ±      1.370  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      8240.024 ±      0.015    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.417 ±      3.532  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        35.802 ±    302.957    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       102.320 ±    539.505  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      8738.785 ±  46077.868    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         2.000               counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         5.000                   ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                       thrpt    5      4393.734 ±     48.284   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1881.150 ±     19.871  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    673872.096 ±      0.015    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.054 ±      0.122  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        19.405 ±     43.719    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1877.954 ±    672.833  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    672740.676 ± 241645.940    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                             thrpt    5        28.000               counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                              thrpt    5        29.000                   ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                         thrpt    5      9053.711 ±   1428.317   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       515.791 ±     85.755  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     89890.697 ±  27392.395    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.696 ±      5.811  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5       122.904 ±   1026.534    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       508.273 ±    648.709  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     89071.685 ± 120972.726    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                               thrpt    5         8.000               counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                thrpt    5        11.000                   ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                  thrpt    5     11232.027 ±    799.815   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       335.032 ±     23.788  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     46941.792 ±      0.590    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.793 ±      6.688  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5       110.683 ±    933.750    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       347.327 ±    370.817  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     48569.055 ±  50168.980    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        15.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                 thrpt    5     13249.046 ±    304.790   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       323.665 ±      7.535  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     38448.034 ±      0.013    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.668 ±      5.622  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        80.147 ±    674.297    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       351.181 ±    366.417  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     41727.823 ±  43751.962    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         6.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        12.000                   ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5     13412.360 ±     85.767   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5       244.667 ±      1.567  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5     28712.032 ±      0.013    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                 thrpt    5         0.681 ±      5.632  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm            thrpt    5        79.860 ±    660.965    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space             thrpt    5       270.620 ±    127.857  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm        thrpt    5     31757.703 ±  15004.458    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5         5.000               counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                thrpt    5        11.000                   ms
[info] ArrayOfIntsBenchmark.readCirce                                                            thrpt    5     16675.065 ±    363.141   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2073.628 ±     44.831  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    195749.007 ±     23.980    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.112 ±      0.134  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        10.606 ±     12.557    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2080.537 ±    629.877  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    196403.822 ±  59405.493    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000               counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                   thrpt    5        34.000                   ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                     thrpt    5     38065.365 ±   2192.133   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       273.519 ±     14.903  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     11305.200 ±     10.238    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'          thrpt    5         0.026 ±      0.222  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     thrpt    5         1.093 ±      9.411    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.833 ±      6.647  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        34.340 ±    273.697    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       284.041 ±    149.270  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     11754.927 ±   6675.896    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                           thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                            thrpt    5        45.000                   ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                    thrpt    5     90283.426 ±   1446.417   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       472.700 ±      7.459  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5      8240.005 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.666 ±      5.515  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        11.685 ±     96.722    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       445.941 ±    624.447  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      7778.709 ±  10955.689    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         9.000                   ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                         thrpt    5      8585.938 ±    313.740   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      3035.266 ±    110.735  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    556457.147 ±      9.459    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.125 ±      0.247  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5        22.879 ±     45.005    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      3048.475 ±     63.800  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    558933.548 ±  29298.367    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                               thrpt    5        45.000               counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                thrpt    5        49.000                   ms
[info] ArrayOfIntsBenchmark.writeCirce                                                           thrpt    5     25767.173 ±   6751.980   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1389.291 ±    364.297  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5     84863.182 ±     41.254    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.088  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         6.680 ±      6.496    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1389.838 ±    528.082  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     84870.834 ±  19630.144    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                 thrpt    5        21.000               counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                  thrpt    5        21.000                   ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                    thrpt    5    100744.004 ±   2399.674   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       812.355 ±     19.400  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     12692.324 ±      0.051    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.071 ±      0.122  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.107 ±      1.910    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       776.789 ±    680.619  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     12137.507 ±  10649.385    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        12.000               counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        14.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                   thrpt    5    118821.380 ±   2924.795   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       506.077 ±     12.242  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      6704.004 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.686 ±      5.412  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         9.049 ±     71.410    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       460.406 ±    693.422  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      6101.902 ±   9225.842    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         7.000               counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5         8.000                   ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5    154365.693 ±   1190.171   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0               counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                        thrpt    5      4206.729 ±    120.210   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1809.804 ±     51.881  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5    677212.442 ±      1.976    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±      0.266  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5        31.156 ±     99.201    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1795.535 ±    712.711  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    672092.303 ± 276434.921    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                              thrpt    5        27.000               counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                               thrpt    5        28.000                   ms
[info] ArrayOfLongsBenchmark.readCirce                                                           thrpt    5     15764.239 ±    438.883   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2120.257 ±     59.440  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5    211684.442 ±     26.788    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.108 ±      0.378  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5        10.822 ±     37.787    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2148.584 ±    684.705  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5    214613.949 ±  73996.467    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                 thrpt    5        32.000               counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                  thrpt    5        31.000                   ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                    thrpt    5     31142.885 ±   1870.555   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       423.987 ±     25.354  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5     21429.697 ±     48.941    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'         thrpt    5         0.006 ±      0.052  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm    thrpt    5         0.314 ±      2.702    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.846 ±      6.925  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        43.769 ±    358.960    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       444.555 ±    527.133  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     22473.286 ±  26417.630    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000               counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        11.000                   ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                   thrpt    5     59412.265 ±    870.872   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       617.835 ±      9.043  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     16368.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.046 ±      0.088  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.214 ±      2.339    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       591.297 ±    562.377  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     15675.391 ±  15033.269    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         9.000               counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5         9.000                   ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                        thrpt    5      8266.706 ±    118.049   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      2998.598 ±     46.758  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5    571088.399 ±      2.997    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.071 ±      0.091  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5        13.470 ±     17.355    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2979.841 ±    564.901  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    567578.494 ± 112840.888    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                              thrpt    5        44.000               counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                               thrpt    5        51.000                   ms
[info] ArrayOfLongsBenchmark.writeCirce                                                          thrpt    5     23019.281 ±   6267.045   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1598.841 ±    435.773  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5    109319.969 ±     43.332    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.134 ±      0.090  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         9.156 ±      6.133    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1593.471 ±   1016.383  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    108720.282 ±  54852.572    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                thrpt    5        24.000               counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                 thrpt    5        23.000                   ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                   thrpt    5     57236.342 ±   1690.985   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       713.326 ±     21.019  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5     19616.257 ±      0.106    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.075 ±      0.122  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.061 ±      3.350    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       711.022 ±    552.649  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     19560.991 ±  15421.318    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        11.000               counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        13.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                  thrpt    5     62942.064 ±   2992.499   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       419.756 ±     19.858  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     10496.007 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.664 ±      5.670  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        16.619 ±    141.985    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       380.096 ±    614.583  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      9511.011 ±  15435.393    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         6.000               counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5         9.000                   ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5     77685.027 ±     68.714   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5         0.005 ±      0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0               counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                       thrpt    5      3603.203 ±     70.885   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1564.542 ±     30.316  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5    683384.446 ±      3.472    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.037 ±      0.067  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        16.343 ±     29.090    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1455.327 ±    727.073  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    635701.086 ± 318015.805    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                             thrpt    5        22.000               counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                              thrpt    5        23.000                   ms
[info] ArrayOfShortsBenchmark.readCirce                                                          thrpt    5     18036.078 ±    393.264   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2343.835 ±     50.957  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    204533.862 ±     16.762    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.133 ±      0.281  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        11.622 ±     24.477    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2356.398 ±     80.613  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    205637.122 ±   9085.584    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                thrpt    5        35.000               counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                 thrpt    5        35.000                   ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                   thrpt    5     44907.421 ±    960.146   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       177.131 ±      3.852  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      6208.009 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.020 ±      0.171  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.704 ±      6.063    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       153.465 ±    539.450  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      5393.959 ±  18961.048    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         3.000               counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                          thrpt    5         7.000                   ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                  thrpt    5    100773.780 ±   3574.985   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       267.353 ±      9.380  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      4176.004 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.654 ±      5.517  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        10.161 ±     85.750    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       219.471 ±    488.370  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      3431.730 ±   7620.006    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000               counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                   ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                       thrpt    5      9288.486 ±    219.569   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3321.457 ±     80.156  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    562784.045 ±      0.008    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±      0.154  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        13.419 ±     26.348    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      3323.734 ±    577.165  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    563181.582 ±  98075.498    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                             thrpt    5        49.000               counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                              thrpt    5        56.000                   ms
[info] ArrayOfShortsBenchmark.writeCirce                                                         thrpt    5     26847.210 ±   6367.043   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1494.357 ±    354.901  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     87614.004 ±     40.013    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.075 ±      0.122  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         4.397 ±      7.325    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1526.047 ±    681.494  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     89520.069 ±  37477.752    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                               thrpt    5        23.000               counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                thrpt    5        23.000                   ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                  thrpt    5    113900.946 ±   5073.673   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       869.168 ±     38.704  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     12011.367 ±      0.051    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±      0.108  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.038 ±      1.520    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       908.249 ±    560.519  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     12557.813 ±   7881.811    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        14.000               counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        16.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                 thrpt    5    132092.734 ±  10273.155   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       531.091 ±     41.222  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      6328.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.681 ±      5.376  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         8.004 ±     62.996    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       526.109 ±    692.095  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      6300.846 ±   8625.467    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000               counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5         9.000                   ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    162727.698 ±  14081.343   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.003 ±      0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                      thrpt    5      4342.347 ±     36.267   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1995.765 ±     17.896  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    723379.303 ±      1.154    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.033 ±      0.166  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        12.068 ±     60.202    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2001.099 ±    832.915  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    725231.013 ± 298445.201    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                            thrpt    5        30.000               counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                             thrpt    5        33.000                   ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                           thrpt    5     41233.267 ±    547.376   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5       822.840 ±     11.400  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     31408.010 ±      0.003    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.050 ±      0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         1.910 ±      5.156    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5       852.195 ±    691.967  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     32517.244 ±  26169.777    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                 thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                  thrpt    5        12.000                   ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                    thrpt    5     82117.110 ±    639.851   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       863.952 ±      6.840  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5     16560.005 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±      0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.276 ±      3.328    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       849.066 ±    697.091  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     16273.420 ±  13333.635    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                          thrpt    5        13.000               counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                           thrpt    5        13.000                   ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                   thrpt    5    241147.387 ±   7882.472   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       784.374 ±     25.672  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      5120.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.062 ±      0.219  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.407 ±      1.429    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       789.395 ±    691.982  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      5149.017 ±   4426.322    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                        thrpt    5     24342.218 ±    409.936   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1111.843 ±     18.544  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     71896.025 ±      0.061    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.058 ±      0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.761 ±      9.918    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1123.278 ±    670.972  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     72608.259 ±  42477.137    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                              thrpt    5        17.000               counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                               thrpt    5        18.000                   ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                          thrpt    5     52637.039 ±    781.304   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1115.669 ±     17.120  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     33360.008 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.071 ±      0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         2.117 ±      2.153    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1053.727 ±    565.740  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     31508.177 ±  16924.606    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                 thrpt    5        14.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                   thrpt    5     97099.137 ±   2189.380   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5      1329.900 ±     29.736  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5     21560.008 ±      0.066    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.054 ±      0.193  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.875 ±      3.108    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1328.060 ±    877.586  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     21515.668 ±  13826.246    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        20.000               counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        22.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                  thrpt    5    246479.788 ±  11504.145   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       785.469 ±     36.687  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5016.002 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±      0.108  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.586 ±      0.710    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       789.433 ±    692.023  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5049.072 ±   4588.925    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        12.000               counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        11.000                   ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5    274195.209 ±   3108.012   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴               MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5         0.001 ±      0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                       thrpt    5     71855.692 ±   2124.522   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1065.763 ±     31.964  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     23344.011 ±      0.089    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±      0.134  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.547 ±      2.900    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1045.159 ±    560.767  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     22884.386 ±  11913.387    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                             thrpt    5        16.000               counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                              thrpt    5        15.000                   ms
[info] ArraysBenchmark.readCirce                                                                 thrpt    5    933483.610 ±  20456.942   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                  thrpt    5      3021.966 ±     66.558  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                             thrpt    5      5096.000 ±      0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.125 ±      0.150  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.211 ±      0.256    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      2976.980 ±    601.242  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      5019.388 ±    940.914    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                       thrpt    5        44.000               counts
[info] ArraysBenchmark.readCirce:·gc.time                                                        thrpt    5        39.000                   ms
[info] ArraysBenchmark.readJacksonScala                                                          thrpt    5   1806401.530 ±  35233.030   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                           thrpt    5      1698.443 ±     33.163  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                      thrpt    5      1480.000 ±      0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.108 ±      0.067  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.094 ±      0.059    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1744.101 ±    588.167  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      1519.956 ±    522.032    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                                thrpt    5        26.000               counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                 thrpt    5        31.000                   ms
[info] ArraysBenchmark.readJsoniterScala                                                         thrpt    5   8751689.796 ± 192159.786   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                          thrpt    5      2179.694 ±     47.941  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       392.000 ±      0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±      0.098  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.019 ±      0.018    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5      2156.380 ±    691.548  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       387.721 ±    118.819    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                               thrpt    5        32.000               counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                                thrpt    5        28.000                   ms
[info] ArraysBenchmark.readPlayJson                                                              thrpt    5    316362.379 ±   7363.514   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                               thrpt    5      1866.919 ±     44.358  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                          thrpt    5      9288.001 ±      0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.112 ±      0.091  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.559 ±      0.458    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1878.215 ±    671.225  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      9345.356 ±   3388.691    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                    thrpt    5        28.000               counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                     thrpt    5        34.000                   ms
[info] ArraysBenchmark.writeCirce                                                                thrpt    5   1029814.043 ±  21434.295   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                 thrpt    5      2266.406 ±     47.647  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                            thrpt    5      3464.000 ±      0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.125 ±      0.150  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.191 ±      0.228    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2284.337 ±    575.442  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      3490.825 ±    837.173    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                      thrpt    5        34.000               counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                       thrpt    5        32.000                   ms
[info] ArraysBenchmark.writeJacksonScala                                                         thrpt    5   3857212.750 ±  76585.548   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                          thrpt    5      2196.027 ±     43.695  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                     thrpt    5       896.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±      0.166  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.046 ±      0.069    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      2157.235 ±    722.001  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       880.315 ±    302.066    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                               thrpt    5        32.000               counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                                thrpt    5        37.000                   ms
[info] ArraysBenchmark.writeJsoniterScala                                                        thrpt    5  18387418.664 ± 968023.229   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                         thrpt    5       841.072 ±     44.441  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5        72.000 ±      0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±      0.098  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.009 ±      0.008    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5       855.697 ±    695.987  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5        73.120 ±     56.598    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                              thrpt    5        13.000               counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                               thrpt    5        12.000                   ms
[info] ArraysBenchmark.writePlayJson                                                             thrpt    5    524758.236 ±   7572.503   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                              thrpt    5      1813.804 ±     25.959  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                         thrpt    5      5440.001 ±      0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.108 ±      0.067  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.325 ±      0.204    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      1809.921 ±    671.114  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      5428.656 ±   2026.015    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                   thrpt    5        27.000               counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                    thrpt    5        33.000                   ms
[info] BitSetsBenchmark.readJacksonScala                                                         thrpt    5   2397757.871 ±  41094.615   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1523.679 ±     25.811  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1000.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±      0.072  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.063 ±      0.047    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1472.077 ±    711.618  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       966.284 ±    472.648    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                               thrpt    5        22.000               counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                                thrpt    5        26.000                   ms
[info] BitSetsBenchmark.readJsoniterScala                                                        thrpt    5   5248003.486 ±  61181.347   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5       693.506 ±      8.160  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       208.000 ±      0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.054 ±      0.185  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.016 ±      0.055    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5       657.422 ±      3.129  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       197.179 ±      2.096    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        10.000               counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                               thrpt    5         9.000                   ms
[info] BitSetsBenchmark.readPlayJson                                                             thrpt    5    415238.186 ±  16567.819   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1947.900 ±     77.627  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      7384.001 ±      0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.108 ±      0.119  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.411 ±      0.452    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      1947.749 ±    547.534  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      7385.620 ±   2184.548    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000               counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                    thrpt    5        35.000                   ms
[info] BitSetsBenchmark.writeJacksonScala                                                        thrpt    5   2743536.754 ± 128679.720   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      1450.251 ±     67.782  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       832.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±      0.127  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.060 ±      0.073    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1469.242 ±    719.390  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       842.870 ±    409.620    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        22.000               counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        25.000                   ms
[info] BitSetsBenchmark.writeJsoniterScala                                                       thrpt    5   6915490.054 ±  65246.380   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5      1054.400 ±      9.978  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       240.000 ±      0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.092 ±      0.091  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.021 ±      0.021    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1056.350 ±    551.232  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       240.455 ±    125.927    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5        16.000               counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5        14.000                   ms
[info] BitSetsBenchmark.writePlayJson                                                            thrpt    5    706934.267 ±  16677.112   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      2062.415 ±     49.450  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      4592.001 ±      0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.087 ±      0.105  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.194 ±      0.230    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      2018.956 ±     61.760  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4495.499 ±    225.017    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                  thrpt    5        30.000               counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                   thrpt    5        36.000                   ms
[info] ExtractFieldsBenchmark.readCirce                                                          thrpt    5    812467.038 ±  13306.740   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2651.085 ±     42.691  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5      5136.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.142 ±      0.104  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.274 ±      0.202    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2630.201 ±    572.387  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      5094.754 ±   1041.944    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                thrpt    5        39.000               counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                 thrpt    5        38.000                   ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                   thrpt    5    985307.022 ±  28580.950   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5      1221.908 ±     35.499  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1952.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.083 ±      0.098  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.133 ±      0.155    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1263.109 ±    571.070  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2017.236 ±    889.646    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        19.000               counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        24.000                   ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                  thrpt    5   8419469.217 ± 117531.817   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       385.119 ±      5.498  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5        72.000 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.644 ±      5.363  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.121 ±      1.008    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       367.392 ±    491.352  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5        68.730 ±     92.848    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         6.000               counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                   ms
[info] ExtractFieldsBenchmark.readPlayJson                                                       thrpt    5    330699.410 ±  10053.881   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1823.659 ±     56.028  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5      8680.001 ±      0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±      0.204  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.495 ±      0.971    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1876.022 ±    702.591  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8933.611 ±   3537.257    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                             thrpt    5        28.000               counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                              thrpt    5        33.000                   ms
[info] GoogleMapsAPIBenchmark.readCirce                                                          thrpt    5      7892.960 ±    237.006   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      1899.441 ±     56.613  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5    378776.053 ±      0.009    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.114 ±      0.450  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        22.728 ±     89.384    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1870.132 ±    720.759  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    372938.618 ± 143547.532    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                thrpt    5        28.000               counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                 thrpt    5        30.000                   ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                   thrpt    5     14580.463 ±    431.883   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       507.758 ±     14.949  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     54816.030 ±      0.016    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.087 ±      0.576  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         9.536 ±     63.120    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       454.971 ±    685.202  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     49086.636 ±  73527.060    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                         thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                          thrpt    5         8.000                   ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                  thrpt    5     24113.534 ±    952.407   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       412.086 ±     16.312  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5     26896.019 ±      0.007    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.694 ±      5.664  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        45.170 ±    368.414    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       431.135 ±    572.161  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     28114.969 ±  36883.014    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        12.000                   ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                       thrpt    5      2412.004 ±     66.227   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1506.454 ±     40.295  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5    982977.366 ±     10.274    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.021 ±      0.080  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5        13.546 ±     52.183    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1533.061 ±    670.864  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5   1000013.110 ± 423441.034    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                             thrpt    5        23.000               counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                              thrpt    5        31.000                   ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                         thrpt    5      7673.031 ±    152.525   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1650.449 ±     32.992  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5    338544.056 ±      0.014    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±      0.217  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        23.019 ±     43.962    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1662.844 ±     71.332  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    341096.495 ±  17075.006    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000               counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                thrpt    5        28.000                   ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                  thrpt    5     40128.836 ±   2094.331   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       581.520 ±     30.505  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     22807.862 ±      0.616    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.142 ±      0.999  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         5.555 ±     39.257    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       585.987 ±    556.836  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     22969.580 ±  21656.461    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         9.000               counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        11.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                 thrpt    5     62628.113 ±   1877.614   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       473.124 ±     14.418  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     11888.007 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.687 ±      5.734  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        17.247 ±    144.037    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       445.248 ±    623.150  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     11172.253 ±  15407.278    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000               counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        10.000                   ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5     73766.503 ±   6759.553   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5         1.125 ±      0.103  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        24.006 ±      0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0               counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                      thrpt    5      5348.212 ±    113.051   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1656.030 ±     34.613  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5    487335.967 ±      2.555    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±      0.067  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        23.264 ±     19.446    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1672.835 ±     60.486  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    492310.469 ±  27283.383    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                            thrpt    5        25.000               counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                             thrpt    5        32.000                   ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                 thrpt    5   5562349.662 ± 252913.760   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5      1667.896 ±     75.469  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       472.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.083 ±      0.080  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.024 ±      0.023    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1669.432 ±    857.224  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       472.034 ±    227.935    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5        25.000               counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        24.000                   ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                      thrpt    5    354698.213 ±   8002.775   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1905.399 ±     42.765  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8456.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.108 ±      0.154  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.480 ±      0.676    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1947.829 ±    558.054  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8646.289 ±   2587.105    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                            thrpt    5        29.000               counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                             thrpt    5        34.000                   ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                                thrpt    5   3288126.020 ± 109295.060   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       534.816 ±     17.625  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       256.000 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.692 ±      5.510  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.328 ±      2.610    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       525.574 ±    692.006  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       251.693 ±    332.624    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000               counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5         8.000                   ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                     thrpt    5    346427.884 ±   4693.495   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1347.118 ±     18.032  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5      6120.001 ±      0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±      0.143  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.397 ±      0.652    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1330.639 ±     49.755  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      6045.167 ±    227.282    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                           thrpt    5        20.000               counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                            thrpt    5        23.000                   ms
[info] IterablesBenchmark.readCirce                                                              thrpt    5    629179.268 ±   9075.347   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                               thrpt    5      2267.610 ±     32.219  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                          thrpt    5      5672.001 ±      0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.096 ±      0.108  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.240 ±      0.268    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      2218.531 ±    694.147  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5549.813 ±   1768.410    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                    thrpt    5        33.000               counts
[info] IterablesBenchmark.readCirce:·gc.time                                                     thrpt    5        32.000                   ms
[info] IterablesBenchmark.readJacksonScala                                                       thrpt    5    635540.180 ±   6733.065   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                        thrpt    5       739.655 ±      7.929  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                   thrpt    5      1832.001 ±      0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.054 ±      0.185  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.134 ±      0.458    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5       719.839 ±    553.277  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      1783.229 ±   1379.795    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                             thrpt    5        11.000               counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                              thrpt    5        14.000                   ms
[info] IterablesBenchmark.readJsoniterScala                                                      thrpt    5   3610869.952 ±  26368.982   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                       thrpt    5      1504.981 ±     11.107  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       656.000 ±      0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.079 ±      0.119  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.034 ±      0.052    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1532.988 ±    704.481  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       668.163 ±    305.312    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                            thrpt    5        23.000               counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                             thrpt    5        21.000                   ms
[info] IterablesBenchmark.readPlayJson                                                           thrpt    5    233156.769 ±   8560.479   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                            thrpt    5      1622.261 ±     59.658  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                       thrpt    5     10952.002 ±      0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.075 ±      0.156  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.506 ±      1.054    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      1604.863 ±    558.413  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     10833.273 ±   3700.235    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                 thrpt    5        24.000               counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                  thrpt    5        29.000                   ms
[info] IterablesBenchmark.writeCirce                                                             thrpt    5    866557.952 ±  23549.529   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                              thrpt    5      1990.622 ±     53.982  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                         thrpt    5      3616.000 ±      0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.108 ±      0.088  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.197 ±      0.159    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2007.888 ±    861.038  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      3646.043 ±   1511.318    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                   thrpt    5        30.000               counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                    thrpt    5        34.000                   ms
[info] IterablesBenchmark.writeJacksonScala                                                      thrpt    5   1620437.537 ±  53936.896   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                       thrpt    5      1062.531 ±     36.088  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1032.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.096 ±      0.072  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.093 ±      0.070    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1122.525 ±    695.767  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1090.186 ±    671.735    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                            thrpt    5        17.000               counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                             thrpt    5        20.000                   ms
[info] IterablesBenchmark.writeJsoniterScala                                                     thrpt    5   7688365.901 ± 319029.260   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                      thrpt    5       937.903 ±     38.838  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       192.000 ±      0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±      0.036  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.016 ±      0.008    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       922.276 ±    573.353  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       188.740 ±    115.772    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                           thrpt    5        14.000               counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                            thrpt    5        12.000                   ms
[info] IterablesBenchmark.writePlayJson                                                          thrpt    5    517548.265 ±   5653.528   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                           thrpt    5      1786.007 ±     19.366  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                      thrpt    5      5432.001 ±      0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.112 ±      0.072  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.342 ±      0.217    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1809.767 ±    685.815  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      5503.558 ±   2048.630    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                                thrpt    5        27.000               counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                 thrpt    5        32.000                   ms
[info] MapsBenchmark.readCirce                                                                   thrpt    5    655807.761 ±  22796.550   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      2280.206 ±     77.487  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      5472.001 ±      0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.092 ±      0.134  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.220 ±      0.320    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5      2284.094 ±    538.540  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5      5479.305 ±   1121.247    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                         thrpt    5        34.000               counts
[info] MapsBenchmark.readCirce:·gc.time                                                          thrpt    5        33.000                   ms
[info] MapsBenchmark.readJsoniterScala                                                           thrpt    5   5623990.875 ±  58325.633   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5      1400.588 ±     14.189  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       392.000 ±      0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.071 ±      0.091  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.020 ±      0.026    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5      1396.067 ±    553.995  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       390.746 ±    155.511    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5        21.000               counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        18.000                   ms
[info] MapsBenchmark.readPlayJson                                                                thrpt    5    366805.697 ±   2628.153   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1912.835 ±     14.234  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5      8208.001 ±      0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.108 ±      0.105  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.464 ±      0.448    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5      1948.009 ±    558.483  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      8359.356 ±   2420.247    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                      thrpt    5        29.000               counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                       thrpt    5        34.000                   ms
[info] MapsBenchmark.writeCirce                                                                  thrpt    5    467521.043 ±   3958.173   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      1223.741 ±     10.810  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5      4120.001 ±      0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.067 ±      0.143  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.224 ±      0.485    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      1251.366 ±    555.471  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5      4213.390 ±   1882.832    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                        thrpt    5        19.000               counts
[info] MapsBenchmark.writeCirce:·gc.time                                                         thrpt    5        18.000                   ms
[info] MapsBenchmark.writeJsoniterScala                                                          thrpt    5   3166132.805 ± 147607.953   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       531.020 ±     24.634  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       264.000 ±      0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.702 ±      5.596  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.348 ±      2.775    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5       525.384 ±    690.217  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       260.691 ±    336.652    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         8.000               counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5         9.000                   ms
[info] MapsBenchmark.writePlayJson                                                               thrpt    5    329666.395 ±   9824.897   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1204.668 ±     35.650  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5752.001 ±      0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.071 ±      0.091  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.338 ±      0.446    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1194.117 ±    691.320  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      5699.934 ±   3243.067    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                     thrpt    5        18.000               counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                      thrpt    5        21.000                   ms
[info] MissingReqFieldBenchmark.readCirce                                                        thrpt    5   2078942.241 ±  49204.485   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      3032.537 ±     71.092  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5      2296.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.129 ±      0.067  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.098 ±      0.049    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      2975.505 ±    547.066  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      2252.848 ±    414.621    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                              thrpt    5        44.000               counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                               thrpt    5        40.000                   ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                 thrpt    5    295799.434 ±  15839.263   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       523.214 ±     28.198  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5      2784.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.046 ±      0.215  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.244 ±      1.137    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       507.246 ±    647.982  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2704.010 ±   3518.323    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                       thrpt    5         8.000               counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                        thrpt    5        10.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                thrpt    5    647994.252 ±  20870.294   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       411.647 ±     13.262  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      1000.001 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.648 ±      5.298  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.563 ±     12.780    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       433.327 ±    574.284  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1051.749 ±   1375.852    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         7.000               counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                            thrpt    5   3639759.335 ± 134576.265   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                             thrpt    5      1183.934 ±     43.892  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                        thrpt    5       512.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                    thrpt    5         0.079 ±      0.088  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.034 ±      0.039    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space                thrpt    5      1195.579 ±    693.918  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm           thrpt    5       516.802 ±    292.360    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                  thrpt    5        18.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                   thrpt    5        20.000                   ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                      thrpt    5   6556322.530 ± 290006.569   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                       thrpt    5       566.523 ±     24.788  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                  thrpt    5       136.000 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space              thrpt    5         0.671 ±      5.243  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm         thrpt    5         0.158 ±      1.234    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space          thrpt    5       594.979 ±    569.552  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm     thrpt    5       142.815 ±    136.471    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                            thrpt    5         9.000               counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                             thrpt    5        10.000                   ms
[info] MissingReqFieldBenchmark.readPlayJson                                                     thrpt    5    199795.650 ±   2327.919   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1271.497 ±     14.300  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     10016.002 ±      0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±      0.091  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.721 ±      0.720    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1261.150 ±    586.987  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      9937.315 ±   4716.309    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                           thrpt    5        19.000               counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                            thrpt    5        23.000                   ms
[info] MutableIterablesBenchmark.readCirce                                                       thrpt    5    731999.542 ±  16587.470   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      2808.748 ±     63.179  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      6040.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.129 ±      0.174  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.277 ±      0.376    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      2837.335 ±    738.713  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      6100.791 ±   1530.146    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                             thrpt    5        42.000               counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                              thrpt    5        40.000                   ms
[info] MutableIterablesBenchmark.readJsoniterScala                                               thrpt    5   3842626.082 ±  55137.185   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5      2480.375 ±     36.129  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1016.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.133 ±      0.166  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.055 ±      0.069    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      2496.581 ±    688.457  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1022.630 ±    280.952    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                     thrpt    5        37.000               counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        38.000                   ms
[info] MutableIterablesBenchmark.readPlayJson                                                    thrpt    5    255591.639 ±   7484.296   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1828.990 ±     53.564  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     11264.002 ±      0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.096 ±      0.122  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.589 ±      0.740    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1878.135 ±    702.911  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     11570.881 ±   4516.420    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                          thrpt    5        28.000               counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                           thrpt    5        33.000                   ms
[info] MutableIterablesBenchmark.writeCirce                                                      thrpt    5    840579.116 ±   9415.885   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1845.615 ±     20.378  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      3456.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±      0.119  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.187 ±      0.225    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1802.508 ±    712.909  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      3375.844 ±   1361.491    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                            thrpt    5        27.000               counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                             thrpt    5        25.000                   ms
[info] MutableIterablesBenchmark.writeJacksonScala                                               thrpt    5   1444480.835 ±  32225.966   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       829.646 ±     18.230  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5       904.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.075 ±      0.091  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.082 ±      0.098    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       787.194 ±    692.524  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       857.799 ±    755.627    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        12.000               counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        15.000                   ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                              thrpt    5   4691250.870 ± 359219.185   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       357.679 ±     27.377  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       120.000 ±      0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.666 ±      5.562  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.223 ±      1.858    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       365.579 ±    645.374  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       123.552 ±    231.144    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5         6.000               counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        10.000                   ms
[info] MutableIterablesBenchmark.writePlayJson                                                   thrpt    5    506418.424 ±  13125.076   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1726.946 ±     45.076  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      5368.001 ±      0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.112 ±      0.185  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.350 ±      0.581    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1741.977 ±    560.556  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      5416.415 ±   1843.243    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                         thrpt    5        26.000               counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                          thrpt    5        29.000                   ms
[info] MutableMapsBenchmark.readJsoniterScala                                                    thrpt    5   3492934.327 ±  45335.277   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5      1651.071 ±     21.170  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       744.000 ±      0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.117 ±      0.044  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.053 ±      0.020    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1669.842 ±     60.397  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       752.462 ±     27.085    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                          thrpt    5        25.000               counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        24.000                   ms
[info] MutableMapsBenchmark.readPlayJson                                                         thrpt    5    308067.331 ±  12181.495   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1640.922 ±     65.022  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5      8384.001 ±      0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.100 ±      0.174  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.511 ±      0.892    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1607.102 ±    574.110  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      8215.685 ±   3119.786    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                               thrpt    5        24.000               counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                                thrpt    5        28.000                   ms
[info] MutableMapsBenchmark.writeCirce                                                           thrpt    5    468232.949 ±  10196.080   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1201.925 ±     26.348  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      4040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.067 ±      0.143  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.224 ±      0.488    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1251.488 ±    569.647  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      4206.195 ±   1898.319    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                 thrpt    5        19.000               counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                  thrpt    5        17.000                   ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                   thrpt    5   2908204.992 ±  68414.326   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       591.291 ±     14.234  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       320.000 ±      0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.695 ±      5.495  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.380 ±      3.005    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       591.617 ±    566.592  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       320.261 ±    307.762    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         9.000               counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        11.000                   ms
[info] MutableMapsBenchmark.writePlayJson                                                        thrpt    5    326455.550 ±   1702.539   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1252.731 ±      6.901  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      6040.001 ±      0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±      0.174  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.321 ±      0.839    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1260.928 ±    557.525  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      6079.817 ±   2698.078    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                              thrpt    5        19.000               counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                               thrpt    5        21.000                   ms
[info] PrimitivesBenchmark.readCirce                                                             thrpt    5    694529.481 ±   9428.617   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2125.232 ±     30.236  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      4816.001 ±      0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.104 ±      0.204  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.236 ±      0.465    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2144.366 ±    732.651  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      4859.883 ±   1688.124    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                   thrpt    5        32.000               counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                    thrpt    5        29.000                   ms
[info] PrimitivesBenchmark.readJacksonScala                                                      thrpt    5   1544726.053 ±  41519.182   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5      1169.737 ±     31.730  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1192.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.092 ±      0.091  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.093 ±      0.092    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1195.519 ±    700.097  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1218.495 ±    719.090    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        18.000               counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.readJsoniterScala                                                     thrpt    5   6852741.239 ±  59083.482   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       208.976 ±      1.856  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5        48.000 ±      0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.015 ±      0.095  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.003 ±      0.022    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       204.612 ±    440.442  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5        46.978 ±    101.125    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5         4.000               counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.readPlayJson                                                          thrpt    5    243882.147 ±   4447.662   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1678.421 ±     29.958  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10832.002 ±      0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±      0.134  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.591 ±      0.869    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1672.688 ±     65.324  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10795.331 ±    521.194    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000               counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        30.000                   ms
[info] PrimitivesBenchmark.writeCirce                                                            thrpt    5    917421.419 ±  23051.755   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1478.285 ±     37.383  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      2536.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.083 ±      0.127  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.143 ±      0.214    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1524.289 ±    700.765  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      2615.877 ±   1235.963    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                  thrpt    5        23.000               counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                   thrpt    5        21.000                   ms
[info] PrimitivesBenchmark.writeJacksonScala                                                     thrpt    5   2492999.459 ± 136183.490   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5      1026.385 ±     55.751  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5       648.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±      0.122  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.061 ±      0.077    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1057.665 ±    599.389  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       667.476 ±    365.403    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        16.000               counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        20.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                    thrpt    5   6107351.586 ± 185011.011   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       682.937 ±     20.731  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.062 ±      0.188  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.016 ±      0.048    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       657.544 ±      3.483  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       169.466 ±      5.854    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        10.000               counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5   5975756.080 ± 253285.264   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5       364.461 ±     15.409  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        96.000 ±      0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                    thrpt    5         0.666 ±      5.661  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.174 ±      1.480    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space                thrpt    5       365.689 ±    642.865  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm           thrpt    5        96.141 ±    165.980    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5         6.000               counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                   thrpt    5        10.000                   ms
[info] PrimitivesBenchmark.writePlayJson                                                         thrpt    5    345443.534 ±   5273.431   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1961.254 ±     29.771  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      8936.001 ±      0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.104 ±      0.113  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.474 ±      0.514    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1947.851 ±    598.466  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      8875.807 ±   2770.435    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                               thrpt    5        29.000               counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                thrpt    5        33.000                   ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                     thrpt    5    717688.086 ±   8077.255   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1601.247 ±     18.202  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5      3512.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.112 ±      0.146  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.246 ±      0.317    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1597.875 ±    555.067  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      3504.160 ±   1196.221    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                           thrpt    5        24.000               counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                   ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                              thrpt    5   1053399.873 ±  30725.222   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1381.453 ±     40.899  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5      2064.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.079 ±      0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.118 ±      0.197    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1445.616 ±    693.765  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      2160.549 ±   1061.174    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                    thrpt    5        22.000               counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                     thrpt    5        25.000                   ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                             thrpt    5    757795.566 ±   7950.063   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       647.083 ±      6.705  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1344.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.050 ±      0.122  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.104 ±      0.252    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       660.707 ±      5.109  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1372.305 ±     15.553    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        10.000               counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                   ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                    thrpt    5    297371.327 ±   2177.047   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1012.569 ±      7.396  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5      5360.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±      0.044  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.397 ±      0.233    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1051.281 ±    576.579  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5565.315 ±   3067.254    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                          thrpt    5        16.000               counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                           thrpt    5        15.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                             thrpt    5    303233.178 ±   2611.213   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                              thrpt    5       320.569 ±      2.818  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                         thrpt    5      1664.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.783 ±      6.694  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.065 ±     34.769    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       283.092 ±    144.183  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1469.235 ±    739.298    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                   thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                    thrpt    5        13.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                            thrpt    5   1073975.428 ±  14657.260   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5       906.129 ±     12.726  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1328.000 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.079 ±      0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.116 ±      0.152    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       856.851 ±    691.795  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1255.719 ±   1012.450    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        13.000               counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        11.000                   ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    921647.921 ±  19828.868   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻³                 B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                 thrpt    5    334600.250 ±   1440.202   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5       357.162 ±      1.629  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5      1680.001 ±      0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.780 ±      6.480  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         3.672 ±     30.496    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5       298.431 ±    150.046  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1403.717 ±    704.739    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                       thrpt    5         5.000               counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                        thrpt    5        12.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                  thrpt    5   1118345.642 ±  18059.891   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                   thrpt    5      1671.285 ±     27.017  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                              thrpt    5      2352.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±      0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.123 ±      0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                      thrpt    5      1667.647 ±     63.935  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      2346.875 ±     78.731    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                        thrpt    5        25.000               counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                         thrpt    5        23.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                           thrpt    5   1299802.015 ±  26108.396   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                            thrpt    5       852.183 ±     17.076  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                       thrpt    5      1032.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.067 ±      0.183  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.081 ±      0.222    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space               thrpt    5       843.439 ±    692.191  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1022.291 ±    856.170    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                 thrpt    5        13.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                  thrpt    5        14.000                   ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                          thrpt    5   2331437.891 ±  13841.114   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                           thrpt    5       568.809 ±      3.430  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                      thrpt    5       384.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.671 ±      5.241  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.453 ±      3.539    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space              thrpt    5       595.373 ±    570.450  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       401.829 ±    383.760    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                thrpt    5         9.000               counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                 thrpt    5        10.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                 thrpt    5   1954261.233 ±  40423.096   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                  thrpt    5      1350.999 ±     28.172  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                             thrpt    5      1088.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.092 ±      0.134  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.074 ±      0.109    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1323.390 ±     47.094  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1065.822 ±     56.282    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                       thrpt    5        20.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                        thrpt    5        18.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                          thrpt    5   3012067.166 ± 124260.638   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                           thrpt    5      1102.387 ±     45.518  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                      thrpt    5       576.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.096 ±      0.146  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.050 ±      0.077    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5      1042.603 ±    558.315  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5       544.796 ±    291.554    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                thrpt    5        16.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                 thrpt    5        16.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                         thrpt    5   3180921.091 ±  83005.614   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                          thrpt    5       630.542 ±     16.102  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       312.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.701 ±      5.412  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.345 ±      2.663    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       657.714 ±      6.486  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       325.454 ±      7.416    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                               thrpt    5        10.000               counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                thrpt    5        11.000                   ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                 thrpt    5   3478827.116 ±   9391.285   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                  thrpt    5        ≈ 10⁻⁴               MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm             thrpt    5        ≈ 10⁻⁴                 B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                       thrpt    5           ≈ 0               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                              thrpt    5   2861626.056 ±  34820.761   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                               thrpt    5      1207.243 ±     14.789  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                          thrpt    5       664.000 ±      0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.071 ±      0.044  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.039 ±      0.024    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1184.745 ±    684.768  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5       651.611 ±    376.111    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                    thrpt    5        18.000               counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                     thrpt    5        17.000                   ms
[info] TwitterAPIBenchmark.readCirce                                                             thrpt    5     12034.695 ±   3162.977   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      1761.861 ±    452.879  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5    230437.498 ±   1317.476    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.133 ±      0.263  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5        17.305 ±     35.137    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      1793.181 ±    754.230  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5    234406.304 ±  67717.999    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                   thrpt    5        27.000               counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                    thrpt    5        36.000                   ms
[info] TwitterAPIBenchmark.readJacksonScala                                                      thrpt    5     16100.553 ±    363.137   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       221.605 ±      5.085  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5     21662.769 ±     10.834    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.125 ±      0.943  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5        12.278 ±     92.847    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5       217.948 ±    482.120  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     21300.281 ±  47232.915    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                            thrpt    5         4.000               counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                             thrpt    5         6.000                   ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                     thrpt    5     37564.183 ±   2507.136   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5       344.818 ±     23.083  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5     14448.012 ±      0.005    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.666 ±      5.662  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        27.702 ±    235.308    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5       350.902 ±    366.713  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     14759.547 ±  16632.105    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                           thrpt    5         6.000               counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.readPlayJson                                                          thrpt    5      3455.511 ±    474.258   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1094.224 ±    150.877  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5    498413.674 ±    227.718    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.046 ±      0.132  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5        20.833 ±     58.695    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1121.464 ±    709.998  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5    510313.829 ± 297625.612    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                thrpt    5        17.000               counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                 thrpt    5        33.000                   ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                     thrpt    5     51679.839 ±   1561.753   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5       676.507 ±     20.465  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     20604.013 ±      0.092    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.062 ±      0.150  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         1.902 ±      4.566    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       652.030 ±     16.648  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     19859.434 ±    753.163    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        10.000               counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        12.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                    thrpt    5     93433.073 ±   1637.772   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       612.642 ±     10.402  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     10320.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.720 ±      5.754  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        12.133 ±     96.917    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       656.403 ±      6.838  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     11057.354 ±    238.151    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        10.000               counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        11.000                   ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                            thrpt    5    107900.588 ±    884.969   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                             thrpt    5         4.936 ±      0.042  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                        thrpt    5        72.004 ±      0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                  thrpt    5           ≈ 0               counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 2420 s, completed Jan 26, 2018, 8:34:31 PM
