[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[info] Setting Scala version to 2.12.5 on 4 projects.
[info] Reapplying settings...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Apr 15, 2018 1:04:26 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:985:79: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble(pos: Int): Double = java.lang.Double.parseDouble(new String(buf, 0, mark, pos - mark))
[warn]                                                                               ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:444:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:452:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:954:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.24.2-SNAPSHOT.jar ...
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.24.2-SNAPSHOT.jar ...
[info] Compiling 53 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:48: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:57: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig()) // don't define implicit for supported types
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bd = in.readBigDecimal(_bd)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _os = d1(in, _os)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:66: Generated JSON codec for type 'scala.collection.immutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.BitSet] {
[info]       def nullValue: scala.collection.immutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.+=(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetCodec: JsonValueCodec[BitSet] = make[BitSet](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:122: Generated JSON codec for type 'scala.collection.mutable.ArrayBuffer[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.ArrayBuffer[Boolean]] {
[info]       def nullValue: scala.collection.mutable.ArrayBuffer[Boolean] = ArrayBuffer.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[Boolean]): scala.collection.mutable.ArrayBuffer[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.ArrayBuffer[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayBufferCodec: JsonValueCodec[mutable.ArrayBuffer[Boolean]] = make[mutable.ArrayBuffer[Boolean]](CodecMakerConfig())
[info]                                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:85: Generated JSON codec for type 'List[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[List[Boolean]] {
[info]       def nullValue: List[Boolean] = List.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: List[Boolean]): List[Boolean] = d0(in, default);
[info]       def encodeValue(x: List[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: List[Boolean]): List[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: List[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         var l = x;
[info]         while (l.isEmpty.`unary_!`) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(l.head);
[info]             l = l.tail
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanListCodec: JsonValueCodec[List[Boolean]] = make[List[Boolean]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:91: Generated JSON codec for type 'scala.collection.immutable.Vector[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Vector[Boolean]] {
[info]       def nullValue: scala.collection.immutable.Vector[Boolean] = Vector.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Vector[Boolean]): scala.collection.immutable.Vector[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[Boolean];
[info]             do 
[info]               x.+=(in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Vector[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanVectorCodec: JsonValueCodec[Vector[Boolean]] = make[Vector[Boolean]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:79: Generated JSON codec for type 'Array[Char]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Char]] {
[info]       def nullValue: Array[Char] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Char]): Array[Char] = d0(in, default);
[info]       def encodeValue(x: Array[Char], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Char] = new Array[Char](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Char]): Array[Char] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Char](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readChar());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Char], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val charArrayCodec: JsonValueCodec[Array[Char]] = make[Array[Char]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val v = in.readString(null);
[info]           try {
[info]             Suit.valueOf(v)
[info]           } catch {
[info]             case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]           }
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInt());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   x = java.util.Arrays.copyOf(x, i.<<(1))
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 java.util.Arrays.copyOf(x, i)
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:94: Generated JSON codec for type 'scala.collection.immutable.IntMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.IntMap[Boolean]] {
[info]       def nullValue: scala.collection.immutable.IntMap[Boolean] = IntMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.IntMap[Boolean]): scala.collection.immutable.IntMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.IntMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intMapOfBooleansCodec: JsonValueCodec[IntMap[Boolean]] = make[IntMap[Boolean]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:101: Generated JSON codec for type 'scala.collection.immutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.immutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Map[Int,Boolean]): scala.collection.immutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, Boolean];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.immutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapOfIntsToBooleansCodec: JsonValueCodec[Map[Int, Boolean]] = make[Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'scala.collection.mutable.BitSet':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.BitSet] {
[info]       def nullValue: scala.collection.mutable.BitSet = BitSet.empty;
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               {
[info]                 val v = in.readInt();
[info]                 if (v.<(0).||(v.>=(8192)))
[info]                   in.decodeError("illegal value for bit set")
[info]                 else
[info]                   ();
[info]                 x.add(v)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableBitSetCodec: JsonValueCodec[mutable.BitSet] = make[mutable.BitSet](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:120: Generated JSON codec for type 'scala.collection.mutable.LongMap[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.LongMap[Boolean]] {
[info]       def nullValue: scala.collection.mutable.LongMap[Boolean] = LongMap.empty[Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.LongMap[Boolean]): scala.collection.mutable.LongMap[Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[Boolean];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.LongMap[Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableLongMapOfBooleansCodec: JsonValueCodec[mutable.LongMap[Boolean]] = make[mutable.LongMap[Boolean]](CodecMakerConfig())
[info]                                                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:53:124: Generated JSON codec for type 'scala.collection.mutable.Map[Int,Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Map[Int,Boolean]] {
[info]       def nullValue: scala.collection.mutable.Map[Int,Boolean] = Map.empty[Int, Boolean];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Map[Int,Boolean]): scala.collection.mutable.Map[Int,Boolean] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, Boolean];
[info]             do 
[info]               x.update(in.readKeyAsInt(), in.readBoolean())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: scala.collection.mutable.Map[Int,Boolean], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapOfIntsToBooleansCodec: JsonValueCodec[mutable.Map[Int, Boolean]] = make[mutable.Map[Int, Boolean]](CodecMakerConfig())
[info]                                                                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:54:96: Generated JSON codec for type 'scala.collection.mutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.mutable.Set[Int]] {
[info]       def nullValue: scala.collection.mutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.mutable.Set[Int]): scala.collection.mutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.mutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableSetOfIntsCodec: JsonValueCodec[mutable.Set[Int]] = make[mutable.Set[Int]](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:55:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var p0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readByte()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readShort()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _i = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _bl = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _ch = in.readChar()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _dbl = in.readDouble()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _f = in.readFloat()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(255).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           out.writeVal(x.i)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:56:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _s = in.readString(_s)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:57:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _a = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var p0 = 1;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _b = in.readString(_b)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(1).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var p0 = 3;
[info]           var pd = true;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => if (pd)
[info]                       {
[info]                         pd = pd.`unary_!`;
[info]                         in.skip()
[info]                       }
[info]                     else
[info]                       in.duplicatedKeyError(l)
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           out.writeVal(x.a)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:58:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: IndexedSeq[String]): IndexedSeq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _value = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var p0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _distance = d6(in, _distance)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _duration = d6(in, _duration)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _elements = d4(in, _elements)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = IndexedSeq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _origin_addresses: IndexedSeq[String] = IndexedSeq.empty[String];
[info]           var _rows: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = IndexedSeq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _destination_addresses = d1(in, _destination_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _origin_addresses = d1(in, _origin_addresses)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _rows = d2(in, _rows)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _status = in.readString(_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(8).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: IndexedSeq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           out.writeVal(x.value)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e5(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: IndexedSeq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.size;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e3(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           out.writeVal(x.status)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:59:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(in.readString(null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 31;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(15).!=(0))
[info]             in.requiredFieldError(r1(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _expanded_url = in.readString(_expanded_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _display_url = in.readString(_display_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _indices = d6(in, _indices)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(7).!=(0))
[info]             in.requiredFieldError(r2(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _hashtags = d3(in, _hashtags)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _symbols = d3(in, _symbols)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user_mentions = d4(in, _user_mentions)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(in.readString(null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           var p0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _urls = d7(in, _urls)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var p0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = d12(in, _url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = d12(in, _description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(3).!=(0))
[info]             in.requiredFieldError(r4(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var p0 = -1;
[info]           var p1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _name = in.readString(_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _screen_name = in.readString(_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _location = in.readString(_location)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _description = in.readString(_description)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _url = in.readString(_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d11(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _protected = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _followers_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _friends_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _listed_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favourites_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _utc_offset = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _time_zone = in.readString(_time_zone)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _verified = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _statuses_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translator = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_translation_enabled = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_color = in.readString(_profile_background_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url = in.readString(_profile_background_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         if (p0.&(33554432).!=(0))
[info]                           p0.^=(33554432)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_image_url_https = in.readString(_profile_background_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         if (p0.&(67108864).!=(0))
[info]                           p0.^=(67108864)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_background_tile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         if (p0.&(134217728).!=(0))
[info]                           p0.^=(134217728)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url = in.readString(_profile_image_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         if (p0.&(268435456).!=(0))
[info]                           p0.^=(268435456)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_image_url_https = in.readString(_profile_image_url_https)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         if (p0.&(536870912).!=(0))
[info]                           p0.^=(536870912)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_banner_url = in.readString(_profile_banner_url)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         if (p0.&(1073741824).!=(0))
[info]                           p0.^=(1073741824)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_link_color = in.readString(_profile_link_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         if (p0.&(-2147483648).!=(0))
[info]                           p0.^=(-2147483648)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_border_color = in.readString(_profile_sidebar_border_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         if (p1.&(1).!=(0))
[info]                           p1.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_sidebar_fill_color = in.readString(_profile_sidebar_fill_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         if (p1.&(2).!=(0))
[info]                           p1.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_text_color = in.readString(_profile_text_color)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         if (p1.&(4).!=(0))
[info]                           p1.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _profile_use_background_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         if (p1.&(8).!=(0))
[info]                           p1.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _has_extended_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         if (p1.&(16).!=(0))
[info]                           p1.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         if (p1.&(32).!=(0))
[info]                           p1.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _default_profile_image = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         if (p1.&(64).!=(0))
[info]                           p1.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _following = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         if (p1.&(128).!=(0))
[info]                           p1.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _follow_request_sent = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         if (p1.&(256).!=(0))
[info]                           p1.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _notifications = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         if (p1.&(512).!=(0))
[info]                           p1.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _translator_type = in.readString(_translator_type)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(-1).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           if (p1.&(1023).!=(0))
[info]             in.requiredFieldError(r3(Integer.numberOfTrailingZeros(p1).+(32)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 16777215;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(16650367).!=(0))
[info]             in.requiredFieldError(r5(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var p0 = 33554431;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         if (p0.&(1).!=(0))
[info]                           p0.^=(1)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _created_at = in.readString(_created_at)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         if (p0.&(2).!=(0))
[info]                           p0.^=(2)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id = in.readLong()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         if (p0.&(4).!=(0))
[info]                           p0.^=(4)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _id_str = in.readString(_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         if (p0.&(8).!=(0))
[info]                           p0.^=(8)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _text = in.readString(_text)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         if (p0.&(16).!=(0))
[info]                           p0.^=(16)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _truncated = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         if (p0.&(32).!=(0))
[info]                           p0.^=(32)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _entities = d2(in, _entities)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         if (p0.&(64).!=(0))
[info]                           p0.^=(64)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _source = in.readString(_source)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       {
[info]                         if (p0.&(128).!=(0))
[info]                           p0.^=(128)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       {
[info]                         if (p0.&(256).!=(0))
[info]                           p0.^=(256)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       {
[info]                         if (p0.&(512).!=(0))
[info]                           p0.^=(512)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       {
[info]                         if (p0.&(1024).!=(0))
[info]                           p0.^=(1024)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       {
[info]                         if (p0.&(2048).!=(0))
[info]                           p0.^=(2048)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         if (p0.&(4096).!=(0))
[info]                           p0.^=(4096)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _user = d10(in, _user)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       {
[info]                         if (p0.&(8192).!=(0))
[info]                           p0.^=(8192)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _geo = d9(in, _geo)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       {
[info]                         if (p0.&(16384).!=(0))
[info]                           p0.^=(16384)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _coordinates = d9(in, _coordinates)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       {
[info]                         if (p0.&(32768).!=(0))
[info]                           p0.^=(32768)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _place = d9(in, _place)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       {
[info]                         if (p0.&(65536).!=(0))
[info]                           p0.^=(65536)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _contributors = d9(in, _contributors)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         if (p0.&(131072).!=(0))
[info]                           p0.^=(131072)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted_status = d13(in, _retweeted_status)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         if (p0.&(262144).!=(0))
[info]                           p0.^=(262144)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _is_quote_status = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         if (p0.&(524288).!=(0))
[info]                           p0.^=(524288)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweet_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         if (p0.&(1048576).!=(0))
[info]                           p0.^=(1048576)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorite_count = in.readInt()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         if (p0.&(2097152).!=(0))
[info]                           p0.^=(2097152)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _favorited = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         if (p0.&(4194304).!=(0))
[info]                           p0.^=(4194304)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _retweeted = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         if (p0.&(8388608).!=(0))
[info]                           p0.^=(8388608)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _possibly_sensitive = in.readBoolean()
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         if (p0.&(16777216).!=(0))
[info]                           p0.^=(16777216)
[info]                         else
[info]                           in.duplicatedKeyError(l);
[info]                         _lang = in.readString(_lang)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (p0.&(33427583).!=(0))
[info]             in.requiredFieldError(r0(Integer.numberOfTrailingZeros(p0)))
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           out.writeVal(x.expanded_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           out.writeVal(x.display_url)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           out.writeVal(x.name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           out.writeVal(x.screen_name)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           out.writeVal(x.location)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           out.writeVal(x.description)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           out.writeVal(x.url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           out.writeVal(x.followers_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           out.writeVal(x.friends_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           out.writeVal(x.listed_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           out.writeVal(x.favourites_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           out.writeVal(x.utc_offset)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           out.writeVal(x.time_zone)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           out.writeVal(x.statuses_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           out.writeVal(x.profile_background_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           out.writeVal(x.profile_background_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           out.writeVal(x.profile_background_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           out.writeVal(x.profile_image_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           out.writeVal(x.profile_image_url_https)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           out.writeVal(x.profile_banner_url)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           out.writeVal(x.profile_link_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           out.writeVal(x.profile_sidebar_border_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           out.writeVal(x.profile_sidebar_fill_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           out.writeVal(x.profile_text_color)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           out.writeVal(x.translator_type)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           out.writeVal(x.created_at)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           out.writeVal(x.id_str)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           out.writeVal(x.text)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           out.writeVal(x.source)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               out.writeVal(v.get)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           out.writeVal(x.retweet_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           out.writeVal(x.favorite_count)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           out.writeVal(x.lang)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:60:73: Generated JSON codec for type 'scala.collection.immutable.Set[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[scala.collection.immutable.Set[Int]] {
[info]       def nullValue: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]       def decodeValue(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = d0(in, default);
[info]       def encodeValue(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d0(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val setOfIntsCodec: JsonValueCodec[Set[Int]] = make[Set[Int]](CodecMakerConfig())
[info]                                                                         ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:35:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:42:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:43:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:49:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:50:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:51:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:55:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:56:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:57:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:58:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:59:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:60:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:61:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 14 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT.jar ...
Processing 303 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 46 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 582 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.24.2-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -p size=128 -jvm /usr/lib/jvm/java-9-oracle/bin/java -prof gc -rf json -rff jdk9.json .*Benchmark.*
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:53:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 359403.167 ops/s
[info] # Warmup Iteration   2: 685322.500 ops/s
[info] # Warmup Iteration   3: 713426.724 ops/s
[info] Iteration   1: 722691.654 ops/s
[info]                  ·gc.alloc.rate:                                  1909.682 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.257 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2031.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4426.202 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                7.254 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 702203.607 ops/s
[info]                  ·gc.alloc.rate:                                  1855.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4577.637 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 728699.995 ops/s
[info]                  ·gc.alloc.rate:                                  1925.726 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.616 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3675.872 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 703814.097 ops/s
[info]                  ·gc.alloc.rate:                                  1860.493 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4567.310 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 689169.094 ops/s
[info]                  ·gc.alloc.rate:                                  1821.966 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3886.973 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   709315.690 ±(99.9%) 62131.612 ops/s [Average]
[info]   (min, avg, max) = (689169.094, 709315.690, 728699.995), stdev = 16135.382
[info]   CI (99.9%): [647184.077, 771447.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1874.754 ±(99.9%) 162.953 MB/sec [Average]
[info]   (min, avg, max) = (1821.966, 1874.754, 1925.726), stdev = 42.319
[info]   CI (99.9%): [1711.800, 2037.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.026, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.056, 0.257), stdev = 0.112
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1904.153 ±(99.9%) 710.784 MB/sec [Average]
[info]   (min, avg, max) = (1701.616, 1904.153, 2042.655), stdev = 184.588
[info]   CI (99.9%): [1193.369, 2614.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4226.799 ±(99.9%) 1608.305 B/op [Average]
[info]   (min, avg, max) = (3675.872, 4226.799, 4577.637), stdev = 417.672
[info]   CI (99.9%): [2618.494, 5835.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.451 ±(99.9%) 12.491 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.451, 7.254), stdev = 3.244
[info]   CI (99.9%): [≈ 0, 13.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 14.000), stdev = 4.278
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.25% complete, ETA 01:25:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 340603.522 ops/s
[info] # Warmup Iteration   2: 1478228.183 ops/s
[info] # Warmup Iteration   3: 1494710.534 ops/s
[info] Iteration   1: 1488912.456 ops/s
[info]                  ·gc.alloc.rate:                   1059.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1065.371 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 1487079.356 ops/s
[info]                  ·gc.alloc.rate:                   1058.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1066.704 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.705 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1499471.559 ops/s
[info]                  ·gc.alloc.rate:                                  1066.790 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1062.758 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.894 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 1493397.125 ops/s
[info]                  ·gc.alloc.rate:                                  1062.589 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.180 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.049 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1076.216 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1496079.711 ops/s
[info]                  ·gc.alloc.rate:                                  1064.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1074.281 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1492988.042 ±(99.9%) 19566.872 ops/s [Average]
[info]   (min, avg, max) = (1487079.356, 1492988.042, 1499471.559), stdev = 5081.455
[info]   CI (99.9%): [1473421.169, 1512554.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1062.291 ±(99.9%) 13.967 MB/sec [Average]
[info]   (min, avg, max) = (1058.049, 1062.291, 1066.790), stdev = 3.627
[info]   CI (99.9%): [1048.325, 1076.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.041 ±(99.9%) 0.303 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.180), stdev = 0.079
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.319 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.190), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.983 ±(99.9%) 26.139 MB/sec [Average]
[info]   (min, avg, max) = (1007.684, 1013.983, 1021.214), stdev = 6.788
[info]   CI (99.9%): [987.844, 1040.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1069.066 ±(99.9%) 22.565 B/op [Average]
[info]   (min, avg, max) = (1062.758, 1069.066, 1076.216), stdev = 5.860
[info]   CI (99.9%): [1046.501, 1091.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.564 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 8.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.261 ±(99.9%) 7.938 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.261, 4.894), stdev = 2.062
[info]   CI (99.9%): [≈ 0, 9.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 15.000), stdev = 5.788
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.50% complete, ETA 01:24:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2323917.270 ops/s
[info] # Warmup Iteration   2: 3153958.446 ops/s
[info] # Warmup Iteration   3: 3129032.159 ops/s
[info] Iteration   1: 3119655.503 ops/s
[info]                  ·gc.alloc.rate:                   206.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        169.708 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.336 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3127571.496 ops/s
[info]                  ·gc.alloc.rate:      206.620 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 3197429.905 ops/s
[info]                  ·gc.alloc.rate:            211.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165.912 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   4: 3149145.995 ops/s
[info]                  ·gc.alloc.rate:            208.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 168.461 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3258048.286 ops/s
[info]                  ·gc.alloc.rate:      215.274 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3170370.237 ±(99.9%) 221820.578 ops/s [Average]
[info]   (min, avg, max) = (3119655.503, 3170370.237, 3258048.286), stdev = 57606.100
[info]   CI (99.9%): [2948549.659, 3392190.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.481 ±(99.9%) 14.685 MB/sec [Average]
[info]   (min, avg, max) = (206.141, 209.481, 215.274), stdev = 3.814
[info]   CI (99.9%): [194.796, 224.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.102 ±(99.9%) 710.417 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.102, 337.084), stdev = 184.493
[info]   CI (99.9%): [≈ 0, 912.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   100.816 ±(99.9%) 354.422 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 100.816, 169.708), stdev = 92.042
[info]   CI (99.9%): [≈ 0, 455.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.067 ±(99.9%) 0.579 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.336), stdev = 0.150
[info]   CI (99.9%): [≈ 0, 0.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.517
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.75% complete, ETA 01:24:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25733.501 ops/s
[info] # Warmup Iteration   2: 158896.941 ops/s
[info] # Warmup Iteration   3: 159416.818 ops/s
[info] Iteration   1: 161100.904 ops/s
[info]                  ·gc.alloc.rate:                   1364.809 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13132.906 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 162143.901 ops/s
[info]                  ·gc.alloc.rate:                   1373.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13093.379 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 45.261 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 160731.012 ops/s
[info]                  ·gc.alloc.rate:                                  1362.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13332.728 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 160294.475 ops/s
[info]                  ·gc.alloc.rate:                                  1358.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13336.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13369.321 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 161132.042 ops/s
[info]                  ·gc.alloc.rate:            1365.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       13336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13299.717 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   161080.467 ±(99.9%) 2635.563 ops/s [Average]
[info]   (min, avg, max) = (160294.475, 161080.467, 162143.901), stdev = 684.447
[info]   CI (99.9%): [158444.904, 163716.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1364.814 ±(99.9%) 22.518 MB/sec [Average]
[info]   (min, avg, max) = (1358.042, 1364.814, 1373.968), stdev = 5.848
[info]   CI (99.9%): [1342.296, 1387.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13336.003, 13336.003, 13336.003), stdev = 0.001
[info]   CI (99.9%): [13336.002, 13336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.231 ±(99.9%) 1.965 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.231, 1.144), stdev = 0.510
[info]   CI (99.9%): [≈ 0, 2.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.527 ±(99.9%) 32.451 MB/sec [Average]
[info]   (min, avg, max) = (1344.025, 1355.527, 1361.824), stdev = 8.428
[info]   CI (99.9%): [1323.076, 1387.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   13245.610 ±(99.9%) 478.232 B/op [Average]
[info]   (min, avg, max) = (13093.379, 13245.610, 13369.321), stdev = 124.195
[info]   CI (99.9%): [12767.378, 13723.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   10.354 ±(99.9%) 75.920 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.354, 45.261), stdev = 19.716
[info]   CI (99.9%): [≈ 0, 86.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 10.000, 23.000), stdev = 9.028
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce
[info] # Run progress: 1.00% complete, ETA 01:24:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146167.804 ops/s
[info] # Warmup Iteration   2: 502139.290 ops/s
[info] # Warmup Iteration   3: 491295.250 ops/s
[info] Iteration   1: 490739.139 ops/s
[info]                  ·gc.alloc.rate:                   1625.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              5216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1684.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5405.306 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.682 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 506897.809 ops/s
[info]                  ·gc.alloc.rate:                                  1679.715 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.181 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.561 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5284.640 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 508279.011 ops/s
[info]                  ·gc.alloc.rate:            1684.809 MB/sec
[info]                  ·gc.alloc.rate.norm:       5216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.319 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5270.211 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 509118.542 ops/s
[info]                  ·gc.alloc.rate:                                  1687.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5216.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5261.455 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 505452.608 ops/s
[info]                  ·gc.alloc.rate:            1674.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       5216.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4239.772 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce":
[info]   504097.422 ±(99.9%) 29250.941 ops/s [Average]
[info]   (min, avg, max) = (490739.139, 504097.422, 509118.542), stdev = 7596.377
[info]   CI (99.9%): [474846.480, 533348.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate":
[info]   1670.490 ±(99.9%) 97.694 MB/sec [Average]
[info]   (min, avg, max) = (1625.900, 1670.490, 1687.132), stdev = 25.371
[info]   CI (99.9%): [1572.796, 1768.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   5216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5216.001, 5216.001, 5216.001), stdev = 0.001
[info]   CI (99.9%): [5216.001, 5216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.311 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.181), stdev = 0.081
[info]   CI (99.9%): [≈ 0, 0.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.113 ±(99.9%) 0.964 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.113, 0.561), stdev = 0.250
[info]   CI (99.9%): [≈ 0, 1.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1630.460 ±(99.9%) 579.829 MB/sec [Average]
[info]   (min, avg, max) = (1361.420, 1630.460, 1702.319), stdev = 150.580
[info]   CI (99.9%): [1050.631, 2210.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5092.277 ±(99.9%) 1848.748 B/op [Average]
[info]   (min, avg, max) = (4239.772, 5092.277, 5405.306), stdev = 480.114
[info]   CI (99.9%): [3243.529, 6941.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.136 ±(99.9%) 18.396 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.136, 10.682), stdev = 4.777
[info]   CI (99.9%): [≈ 0, 20.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 18.000), stdev = 6.229
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.24% complete, ETA 01:24:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_cbecb3a0/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 400916.697 ops/s
[info] # Warmup Iteration   2: 1727685.632 ops/s
[info] # Warmup Iteration   3: 1791658.409 ops/s
[info] Iteration   1: 1743410.560 ops/s
[info]                  ·gc.alloc.rate:            620.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 606.185 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1767484.702 ops/s
[info]                  ·gc.alloc.rate:            628.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.639 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 298.955 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1725693.120 ops/s
[info]                  ·gc.alloc.rate:            614.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.593 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 612.394 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1806383.074 ops/s
[info]                  ·gc.alloc.rate:            642.657 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 585.034 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 1786309.337 ops/s
[info]                  ·gc.alloc.rate:            635.728 MB/sec
[info]                  ·gc.alloc.rate.norm:       560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 591.610 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   1765856.159 ±(99.9%) 124482.006 ops/s [Average]
[info]   (min, avg, max) = (1725693.120, 1765856.159, 1806383.074), stdev = 32327.582
[info]   CI (99.9%): [1641374.153, 1890338.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   628.284 ±(99.9%) 44.238 MB/sec [Average]
[info]   (min, avg, max) = (614.134, 628.284, 642.657), stdev = 11.488
[info]   CI (99.9%): [584.046, 672.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (560.000, 560.000, 560.000), stdev = 0.001
[info]   CI (99.9%): [560.000, 560.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   604.313 ±(99.9%) 578.342 MB/sec [Average]
[info]   (min, avg, max) = (335.639, 604.313, 671.612), stdev = 150.194
[info]   CI (99.9%): [25.971, 1182.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   538.836 ±(99.9%) 518.083 B/op [Average]
[info]   (min, avg, max) = (298.955, 538.836, 612.394), stdev = 134.545
[info]   CI (99.9%): [20.753, 1056.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 10.000), stdev = 2.387
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.49% complete, ETA 01:23:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4976355.211 ops/s
[info] # Warmup Iteration   2: 7524685.405 ops/s
[info] # Warmup Iteration   3: 7537612.097 ops/s
[info] Iteration   1: 7639922.169 ops/s
[info]                  ·gc.alloc.rate:            388.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7613665.085 ops/s
[info]                  ·gc.alloc.rate:            386.883 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69.539 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7898416.261 ops/s
[info]                  ·gc.alloc.rate:            401.468 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 67.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7996659.632 ops/s
[info]                  ·gc.alloc.rate:            406.426 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 7933852.751 ops/s
[info]                  ·gc.alloc.rate:            403.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 133.469 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   7816503.180 ±(99.9%) 681414.849 ops/s [Average]
[info]   (min, avg, max) = (7613665.085, 7816503.180, 7996659.632), stdev = 176961.272
[info]   CI (99.9%): [7135088.330, 8497918.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   397.293 ±(99.9%) 34.837 MB/sec [Average]
[info]   (min, avg, max) = (386.883, 397.293, 406.426), stdev = 9.047
[info]   CI (99.9%): [362.456, 432.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.680 ±(99.9%) 579.747 MB/sec [Average]
[info]   (min, avg, max) = (336.294, 403.680, 673.007), stdev = 150.558
[info]   CI (99.9%): [≈ 0, 983.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   81.109 ±(99.9%) 112.844 B/op [Average]
[info]   (min, avg, max) = (66.208, 81.109, 133.469), stdev = 29.305
[info]   CI (99.9%): [≈ 0, 193.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 1.74% complete, ETA 01:23:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8730012.332 ops/s
[info] # Warmup Iteration   2: 8246949.805 ops/s
[info] # Warmup Iteration   3: 8271546.352 ops/s
[info] Iteration   1: 8270993.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8272604.404 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8254321.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 7768352.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7798687.664 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc":
[info]   8072992.018 ±(99.9%) 1018744.583 ops/s [Average]
[info]   (min, avg, max) = (7768352.892, 8072992.018, 8272604.404), stdev = 264564.733
[info]   CI (99.9%): [7054247.435, 9091736.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.99% complete, ETA 01:23:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56431.670 ops/s
[info] # Warmup Iteration   2: 298205.524 ops/s
[info] # Warmup Iteration   3: 306948.627 ops/s
[info] Iteration   1: 306744.165 ops/s
[info]                  ·gc.alloc.rate:            978.978 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5174.693 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 306535.937 ops/s
[info]                  ·gc.alloc.rate:            978.316 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5171.313 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 305212.208 ops/s
[info]                  ·gc.alloc.rate:                   974.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5197.415 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 313235.269 ops/s
[info]                  ·gc.alloc.rate:                                  1000.160 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5024.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.930 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5127.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.347 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 314248.351 ops/s
[info]                  ·gc.alloc.rate:            1003.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       5024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.843 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3409.689 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   309195.186 ±(99.9%) 16200.182 ops/s [Average]
[info]   (min, avg, max) = (305212.208, 309195.186, 314248.351), stdev = 4207.136
[info]   CI (99.9%): [292995.004, 325395.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   986.942 ±(99.9%) 52.454 MB/sec [Average]
[info]   (min, avg, max) = (974.066, 986.942, 1003.187), stdev = 13.622
[info]   CI (99.9%): [934.487, 1039.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5024.001, 5024.001, 5024.001), stdev = 0.001
[info]   CI (99.9%): [5024.001, 5024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.186 ±(99.9%) 1.602 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.186, 0.930), stdev = 0.416
[info]   CI (99.9%): [≈ 0, 1.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.939 ±(99.9%) 568.913 MB/sec [Average]
[info]   (min, avg, max) = (680.843, 944.939, 1020.822), stdev = 147.745
[info]   CI (99.9%): [376.027, 1513.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4816.180 ±(99.9%) 3029.132 B/op [Average]
[info]   (min, avg, max) = (3409.689, 4816.180, 5197.415), stdev = 786.656
[info]   CI (99.9%): [1787.048, 7845.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.479 ±(99.9%) 40.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.479, 24.046), stdev = 10.480
[info]   CI (99.9%): [≈ 0, 45.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 9.400, 14.000), stdev = 6.387
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.24% complete, ETA 01:23:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 888754.315 ops/s
[info] # Warmup Iteration   2: 1487506.392 ops/s
[info] # Warmup Iteration   3: 1496500.257 ops/s
[info] Iteration   1: 1474570.834 ops/s
[info]                  ·gc.alloc.rate:                                  2315.719 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2179.902 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 1513400.660 ops/s
[info]                  ·gc.alloc.rate:                                  2377.376 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2477.984 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1530452.658 ops/s
[info]                  ·gc.alloc.rate:                                  2403.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.901 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2800.353 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 1525671.446 ops/s
[info]                  ·gc.alloc.rate:                                  2396.231 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.656 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2457.996 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 1535109.608 ops/s
[info]                  ·gc.alloc.rate:                                  2410.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2472.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.402 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2442.880 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1515841.041 ±(99.9%) 94136.221 ops/s [Average]
[info]   (min, avg, max) = (1474570.834, 1515841.041, 1535109.608), stdev = 24446.878
[info]   CI (99.9%): [1421704.820, 1609977.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2380.752 ±(99.9%) 147.970 MB/sec [Average]
[info]   (min, avg, max) = (2315.719, 2380.752, 2410.802), stdev = 38.427
[info]   CI (99.9%): [2232.782, 2528.722] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2472.000, 2472.000, 2472.000), stdev = 0.001
[info]   CI (99.9%): [2472.000, 2472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2382.635 ±(99.9%) 926.867 MB/sec [Average]
[info]   (min, avg, max) = (2042.087, 2382.635, 2722.901), stdev = 240.704
[info]   CI (99.9%): [1455.769, 3309.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2471.823 ±(99.9%) 848.490 B/op [Average]
[info]   (min, avg, max) = (2179.902, 2471.823, 2800.353), stdev = 220.350
[info]   CI (99.9%): [1623.332, 3320.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.800, 13.000), stdev = 2.950
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava
[info] # Run progress: 2.49% complete, ETA 01:23:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.881 ops/s
[info] # Warmup Iteration   2: 8477618.779 ops/s
[info] # Warmup Iteration   3: 9492646.315 ops/s
[info] Iteration   1: 9607599.438 ops/s
[info]                  ·gc.alloc.rate:            1172.115 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1335.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 218.686 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  21.000 ms
[info] Iteration   2: 9515883.460 ops/s
[info]                  ·gc.alloc.rate:                   1160.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        165.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 9440571.416 ops/s
[info]                  ·gc.alloc.rate:                                  1151.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.481 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1345.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       224.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.111 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   4: 9540142.928 ops/s
[info]                  ·gc.alloc.rate:                                  1163.688 MB/sec
[info]                  ·gc.alloc.rate.norm:                             192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       168.473 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 9668268.969 ops/s
[info]                  ·gc.alloc.rate:            1179.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 221.645 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava":
[info]   9554493.242 ±(99.9%) 335912.206 ops/s [Average]
[info]   (min, avg, max) = (9440571.416, 9554493.242, 9668268.969), stdev = 87235.333
[info]   CI (99.9%): [9218581.037, 9890405.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   1165.539 ±(99.9%) 40.590 MB/sec [Average]
[info]   (min, avg, max) = (1151.923, 1165.539, 1179.282), stdev = 10.541
[info]   CI (99.9%): [1124.949, 1206.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (192.000, 192.000, 192.000), stdev = 0.001
[info]   CI (99.9%): [192.000, 192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.116 ±(99.9%) 0.802 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.481), stdev = 0.208
[info]   CI (99.9%): [≈ 0, 0.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.080), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1212.747 ±(99.9%) 711.525 MB/sec [Average]
[info]   (min, avg, max) = (1000.403, 1212.747, 1361.365), stdev = 184.781
[info]   CI (99.9%): [501.222, 1924.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   199.723 ±(99.9%) 115.424 B/op [Average]
[info]   (min, avg, max) = (165.486, 199.723, 224.323), stdev = 29.975
[info]   CI (99.9%): [84.298, 315.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 11.242 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 6.663), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 12.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.244 ±(99.9%) 1.874 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.244, 1.111), stdev = 0.487
[info]   CI (99.9%): [≈ 0, 2.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readDslJsonJava:·gc.time":
[info]   57.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 11.400, 21.000), stdev = 7.701
[info]   CI (99.9%): [57.000, 57.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.74% complete, ETA 01:22:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 742039.180 ops/s
[info] # Warmup Iteration   2: 2134669.746 ops/s
[info] # Warmup Iteration   3: 2239407.316 ops/s
[info] Iteration   1: 2224026.816 ops/s
[info]                  ·gc.alloc.rate:                   1560.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1680.897 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1189.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.771 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 2235901.247 ops/s
[info]                  ·gc.alloc.rate:                                  1568.355 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.085 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1700.911 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1197.309 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 2259519.547 ops/s
[info]                  ·gc.alloc.rate:                                  1584.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       948.434 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2268316.215 ops/s
[info]                  ·gc.alloc.rate:                                  1591.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1180.895 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2266376.976 ops/s
[info]                  ·gc.alloc.rate:                                  1589.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1104.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.200 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1181.963 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2250828.160 ±(99.9%) 76147.950 ops/s [Average]
[info]   (min, avg, max) = (2224026.816, 2250828.160, 2268316.215), stdev = 19775.381
[info]   CI (99.9%): [2174680.210, 2326976.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1578.874 ±(99.9%) 53.164 MB/sec [Average]
[info]   (min, avg, max) = (1560.289, 1578.874, 1591.172), stdev = 13.807
[info]   CI (99.9%): [1525.710, 1632.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.085), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.012 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.060), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1629.470 ±(99.9%) 578.211 MB/sec [Average]
[info]   (min, avg, max) = (1361.341, 1629.470, 1702.200), stdev = 150.160
[info]   CI (99.9%): [1051.259, 2207.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1139.588 ±(99.9%) 412.254 B/op [Average]
[info]   (min, avg, max) = (948.434, 1139.588, 1197.309), stdev = 107.061
[info]   CI (99.9%): [727.334, 1551.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.330), stdev = 2.384
[info]   CI (99.9%): [≈ 0, 10.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.754 ±(99.9%) 6.494 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.754, 3.771), stdev = 1.687
[info]   CI (99.9%): [≈ 0, 7.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 23.000), stdev = 8.204
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.99% complete, ETA 01:22:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8852836.926 ops/s
[info] # Warmup Iteration   2: 10073013.105 ops/s
[info] # Warmup Iteration   3: 10200394.086 ops/s
[info] Iteration   1: 10105728.910 ops/s
[info]                  ·gc.alloc.rate:            1284.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.487 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 9695451.158 ops/s
[info]                  ·gc.alloc.rate:                                  1232.171 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       219.951 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.541 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9380957.445 ops/s
[info]                  ·gc.alloc.rate:                                  1191.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             200.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       228.442 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 9486789.074 ops/s
[info]                  ·gc.alloc.rate:            1205.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 169.410 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 9429619.028 ops/s
[info]                  ·gc.alloc.rate:            1198.396 MB/sec
[info]                  ·gc.alloc.rate.norm:       200.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 227.249 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   9619709.123 ±(99.9%) 1143512.296 ops/s [Average]
[info]   (min, avg, max) = (9380957.445, 9619709.123, 10105728.910), stdev = 296966.512
[info]   CI (99.9%): [8476196.827, 10763221.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1222.488 ±(99.9%) 145.793 MB/sec [Average]
[info]   (min, avg, max) = (1191.917, 1222.488, 1284.435), stdev = 37.862
[info]   CI (99.9%): [1076.696, 1368.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.033 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.020), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1222.145 ±(99.9%) 723.856 MB/sec [Average]
[info]   (min, avg, max) = (1011.409, 1222.145, 1361.670), stdev = 187.983
[info]   CI (99.9%): [498.289, 1946.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   200.508 ±(99.9%) 131.871 B/op [Average]
[info]   (min, avg, max) = (157.487, 200.508, 228.442), stdev = 34.246
[info]   CI (99.9%): [68.637, 332.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.108 ±(99.9%) 0.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.541), stdev = 0.242
[info]   CI (99.9%): [≈ 0, 1.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.800, 8.000), stdev = 2.950
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.23% complete, ETA 01:22:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104556.685 ops/s
[info] # Warmup Iteration   2: 547260.776 ops/s
[info] # Warmup Iteration   3: 550387.002 ops/s
[info] Iteration   1: 553314.296 ops/s
[info]                  ·gc.alloc.rate:                   1456.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3823.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 543167.499 ops/s
[info]                  ·gc.alloc.rate:                                  1429.785 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.195 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.566 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4906.635 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                13.512 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 539407.871 ops/s
[info]                  ·gc.alloc.rate:                                  1420.753 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3972.799 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 543055.022 ops/s
[info]                  ·gc.alloc.rate:                                  1430.188 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.921 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3946.196 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 558173.405 ops/s
[info]                  ·gc.alloc.rate:            1469.821 MB/sec
[info]                  ·gc.alloc.rate.norm:       4144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3839.176 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   547423.619 ±(99.9%) 30545.909 ops/s [Average]
[info]   (min, avg, max) = (539407.871, 547423.619, 558173.405), stdev = 7932.676
[info]   CI (99.9%): [516877.709, 577969.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1441.438 ±(99.9%) 80.012 MB/sec [Average]
[info]   (min, avg, max) = (1420.753, 1441.438, 1469.821), stdev = 20.779
[info]   CI (99.9%): [1361.427, 1521.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4144.001, 4144.001, 4144.001), stdev = 0.001
[info]   CI (99.9%): [4144.001, 4144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.195), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.117 ±(99.9%) 0.968 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.117, 0.566), stdev = 0.251
[info]   CI (99.9%): [≈ 0, 1.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.523 ±(99.9%) 578.498 MB/sec [Average]
[info]   (min, avg, max) = (1344.021, 1424.523, 1692.913), stdev = 150.234
[info]   CI (99.9%): [846.025, 2003.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4097.681 ±(99.9%) 1759.216 B/op [Average]
[info]   (min, avg, max) = (3823.600, 4097.681, 4906.635), stdev = 456.863
[info]   CI (99.9%): [2338.466, 5856.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.778 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 2.020
[info]   CI (99.9%): [≈ 0, 8.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   3.460 ±(99.9%) 22.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.460, 13.512), stdev = 5.854
[info]   CI (99.9%): [≈ 0, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 19.000), stdev = 7.259
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.48% complete, ETA 01:22:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029774.370 ops/s
[info] # Warmup Iteration   2: 1825862.159 ops/s
[info] # Warmup Iteration   3: 1783004.191 ops/s
[info] Iteration   1: 1827359.904 ops/s
[info]                  ·gc.alloc.rate:                                  1653.235 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1424.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.515 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1454.388 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.869 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 1878178.193 ops/s
[info]                  ·gc.alloc.rate:                                  1699.039 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1424.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1426.216 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 1877957.725 ops/s
[info]                  ·gc.alloc.rate:                                  1699.153 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1424.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.038 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1426.418 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1880975.928 ops/s
[info]                  ·gc.alloc.rate:            1701.764 MB/sec
[info]                  ·gc.alloc.rate.norm:       1424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1424.158 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1863024.053 ops/s
[info]                  ·gc.alloc.rate:                                  1685.483 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1424.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1437.864 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   1865499.160 ±(99.9%) 86451.739 ops/s [Average]
[info]   (min, avg, max) = (1827359.904, 1865499.160, 1880975.928), stdev = 22451.242
[info]   CI (99.9%): [1779047.422, 1951950.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1687.735 ±(99.9%) 78.214 MB/sec [Average]
[info]   (min, avg, max) = (1653.235, 1687.735, 1701.764), stdev = 20.312
[info]   CI (99.9%): [1609.521, 1765.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1424.000, 1424.000, 1424.000), stdev = 0.001
[info]   CI (99.9%): [1424.000, 1424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.101 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.062), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1699.216 ±(99.9%) 23.041 MB/sec [Average]
[info]   (min, avg, max) = (1688.515, 1699.216, 1702.038), stdev = 5.984
[info]   CI (99.9%): [1676.175, 1722.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1433.809 ±(99.9%) 48.911 B/op [Average]
[info]   (min, avg, max) = (1424.158, 1433.809, 1454.388), stdev = 12.702
[info]   CI (99.9%): [1384.898, 1482.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.574 ±(99.9%) 4.940 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.574, 2.869), stdev = 1.283
[info]   CI (99.9%): [≈ 0, 5.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava
[info] # Run progress: 3.73% complete, ETA 01:22:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.917 ops/s
[info] # Warmup Iteration   2: 16645362.586 ops/s
[info] # Warmup Iteration   3: 17241877.236 ops/s
[info] Iteration   1: 18133602.323 ops/s
[info]                  ·gc.alloc.rate:            553.022 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28.966 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 17080216.159 ops/s
[info]                  ·gc.alloc.rate:            521.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.506 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17181959.038 ops/s
[info]                  ·gc.alloc.rate:            523.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 16882067.685 ops/s
[info]                  ·gc.alloc.rate:            514.839 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.460 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.229 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   5: 17137098.891 ops/s
[info]                  ·gc.alloc.rate:            522.586 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61.302 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava":
[info]   17282988.819 ±(99.9%) 1883363.219 ops/s [Average]
[info]   (min, avg, max) = (16882067.685, 17282988.819, 18133602.323), stdev = 489103.447
[info]   CI (99.9%): [15399625.600, 19166352.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   527.099 ±(99.9%) 57.398 MB/sec [Average]
[info]   (min, avg, max) = (514.839, 527.099, 553.022), stdev = 14.906
[info]   CI (99.9%): [469.701, 584.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   534.002 ±(99.9%) 704.007 MB/sec [Average]
[info]   (min, avg, max) = (333.723, 534.002, 667.693), stdev = 182.828
[info]   CI (99.9%): [≈ 0, 1238.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   48.915 ±(99.9%) 67.351 B/op [Average]
[info]   (min, avg, max) = (28.966, 48.915, 62.229), stdev = 17.491
[info]   CI (99.9%): [≈ 0, 116.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeDslJsonJava:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.400, 13.000), stdev = 3.782
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.98% complete, ETA 01:21:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_cbecb3a0/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1427658.829 ops/s
[info] # Warmup Iteration   2: 4727874.096 ops/s
[info] # Warmup Iteration   3: 4890424.077 ops/s
[info] Iteration   1: 4946899.883 ops/s
[info]                  ·gc.alloc.rate:            1357.873 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.925 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 427.244 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 4799006.883 ops/s
[info]                  ·gc.alloc.rate:                                  1317.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       443.266 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.529 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 4901170.722 ops/s
[info]                  ·gc.alloc.rate:                                  1345.205 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.507 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       437.235 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 4934378.701 ops/s
[info]                  ·gc.alloc.rate:            1354.717 MB/sec
[info]                  ·gc.alloc.rate.norm:       432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1360.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 433.796 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4970473.250 ops/s
[info]                  ·gc.alloc.rate:                                  1364.382 MB/sec
[info]                  ·gc.alloc.rate.norm:                             432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       431.138 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   4910385.888 ±(99.9%) 258378.064 ops/s [Average]
[info]   (min, avg, max) = (4799006.883, 4910385.888, 4970473.250), stdev = 67099.963
[info]   CI (99.9%): [4652007.824, 5168763.952] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1347.886 ±(99.9%) 71.109 MB/sec [Average]
[info]   (min, avg, max) = (1317.253, 1347.886, 1364.382), stdev = 18.467
[info]   CI (99.9%): [1276.777, 1418.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.036), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.004 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.012), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1355.609 ±(99.9%) 31.681 MB/sec [Average]
[info]   (min, avg, max) = (1342.925, 1355.609, 1361.659), stdev = 8.228
[info]   CI (99.9%): [1323.928, 1387.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   434.536 ±(99.9%) 23.483 B/op [Average]
[info]   (min, avg, max) = (427.244, 434.536, 443.266), stdev = 6.099
[info]   CI (99.9%): [411.053, 458.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.306 ±(99.9%) 2.633 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.306, 1.529), stdev = 0.684
[info]   CI (99.9%): [≈ 0, 2.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.23% complete, ETA 01:21:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15694789.063 ops/s
[info] # Warmup Iteration   2: 20992105.992 ops/s
[info] # Warmup Iteration   3: 20652518.605 ops/s
[info] Iteration   1: 20747805.825 ops/s
[info]                  ·gc.alloc.rate:            632.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 21128936.386 ops/s
[info]                  ·gc.alloc.rate:            644.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 21657564.313 ops/s
[info]                  ·gc.alloc.rate:            660.434 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.893 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 21250216.788 ops/s
[info]                  ·gc.alloc.rate:            648.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 21618818.115 ops/s
[info]                  ·gc.alloc.rate:            659.214 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48.980 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   21280668.285 ±(99.9%) 1446284.877 ops/s [Average]
[info]   (min, avg, max) = (20747805.825, 21280668.285, 21657564.313), stdev = 375595.590
[info]   CI (99.9%): [19834383.408, 22726953.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   648.969 ±(99.9%) 43.940 MB/sec [Average]
[info]   (min, avg, max) = (632.803, 648.969, 660.434), stdev = 11.411
[info]   CI (99.9%): [605.029, 692.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.728 ±(99.9%) 579.657 MB/sec [Average]
[info]   (min, avg, max) = (336.445, 605.728, 674.152), stdev = 150.535
[info]   CI (99.9%): [26.071, 1185.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   44.809 ±(99.9%) 42.967 B/op [Average]
[info]   (min, avg, max) = (24.916, 44.809, 51.137), stdev = 11.158
[info]   CI (99.9%): [1.841, 87.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 7.000), stdev = 1.643
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.48% complete, ETA 01:21:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15864228.630 ops/s
[info] # Warmup Iteration   2: 20574934.717 ops/s
[info] # Warmup Iteration   3: 20494341.654 ops/s
[info] Iteration   1: 20497851.869 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 20426939.138 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 19484490.373 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 20485221.281 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 20467894.488 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   20272479.430 ±(99.9%) 1699333.527 ops/s [Average]
[info]   (min, avg, max) = (19484490.373, 20272479.430, 20497851.869), stdev = 441311.520
[info]   CI (99.9%): [18573145.903, 21971812.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.73% complete, ETA 01:21:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 250169.381 ops/s
[info] # Warmup Iteration   2: 1250395.712 ops/s
[info] # Warmup Iteration   3: 1247789.376 ops/s
[info] Iteration   1: 1264390.112 ops/s
[info]                  ·gc.alloc.rate:                                  1844.237 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2102.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.634 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        17.000 ms
[info] Iteration   2: 1293554.176 ops/s
[info]                  ·gc.alloc.rate:                                  1887.567 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2484.952 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 1243008.154 ops/s
[info]                  ·gc.alloc.rate:            1813.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2155.070 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 1293996.957 ops/s
[info]                  ·gc.alloc.rate:            1887.436 MB/sec
[info]                  ·gc.alloc.rate.norm:       2296.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2070.133 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1281692.627 ops/s
[info]                  ·gc.alloc.rate:                                  1869.415 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2296.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2507.974 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1275328.405 ±(99.9%) 83600.703 ops/s [Average]
[info]   (min, avg, max) = (1243008.154, 1275328.405, 1293996.957), stdev = 21710.837
[info]   CI (99.9%): [1191727.702, 1358929.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1860.487 ±(99.9%) 121.534 MB/sec [Average]
[info]   (min, avg, max) = (1813.782, 1860.487, 1887.567), stdev = 31.562
[info]   CI (99.9%): [1738.953, 1982.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.110), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1835.511 ±(99.9%) 727.756 MB/sec [Average]
[info]   (min, avg, max) = (1688.436, 1835.511, 2042.906), stdev = 188.996
[info]   CI (99.9%): [1107.756, 2563.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2264.033 ±(99.9%) 825.930 B/op [Average]
[info]   (min, avg, max) = (2070.133, 2264.033, 2507.974), stdev = 214.491
[info]   CI (99.9%): [1438.102, 3089.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.327 ±(99.9%) 11.424 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.327, 6.634), stdev = 2.967
[info]   CI (99.9%): [≈ 0, 12.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 17.000), stdev = 5.495
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 4.98% complete, ETA 01:21:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 273665.805 ops/s
[info] # Warmup Iteration   2: 314090.061 ops/s
[info] # Warmup Iteration   3: 317298.814 ops/s
[info] Iteration   1: 321969.626 ops/s
[info]                  ·gc.alloc.rate:                                  1772.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.136 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.665 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2036.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9951.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.281 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 330330.117 ops/s
[info]                  ·gc.alloc.rate:            1818.089 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8109.452 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 332367.908 ops/s
[info]                  ·gc.alloc.rate:            1829.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       8664.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8059.612 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 321430.424 ops/s
[info]                  ·gc.alloc.rate:                                  1769.151 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10000.106 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 320606.430 ops/s
[info]                  ·gc.alloc.rate:                                  1764.630 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8664.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8355.044 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce":
[info]   325340.901 ±(99.9%) 21382.660 ops/s [Average]
[info]   (min, avg, max) = (320606.430, 325340.901, 332367.908), stdev = 5553.009
[info]   CI (99.9%): [303958.240, 346723.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1790.758 ±(99.9%) 117.064 MB/sec [Average]
[info]   (min, avg, max) = (1764.630, 1790.758, 1829.175), stdev = 30.401
[info]   CI (99.9%): [1673.693, 1907.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8664.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8664.001, 8664.001, 8664.001), stdev = 0.001
[info]   CI (99.9%): [8664.001, 8664.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.136), stdev = 0.060
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.141 ±(99.9%) 1.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.665), stdev = 0.293
[info]   CI (99.9%): [≈ 0, 1.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1836.612 ±(99.9%) 711.578 MB/sec [Average]
[info]   (min, avg, max) = (1701.574, 1836.612, 2041.978), stdev = 184.795
[info]   CI (99.9%): [1125.034, 2548.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8895.054 ±(99.9%) 3823.119 B/op [Average]
[info]   (min, avg, max) = (8059.612, 8895.054, 10000.106), stdev = 992.852
[info]   CI (99.9%): [5071.935, 12718.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.256 ±(99.9%) 28.037 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.256, 16.281), stdev = 7.281
[info]   CI (99.9%): [≈ 0, 31.293] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 11.000), stdev = 3.050
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.22% complete, ETA 01:20:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 200231.204 ops/s
[info] # Warmup Iteration   2: 402458.411 ops/s
[info] # Warmup Iteration   3: 406922.111 ops/s
[info] Iteration   1: 409661.039 ops/s
[info]                  ·gc.alloc.rate:            557.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1292.368 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 408275.630 ops/s
[info]                  ·gc.alloc.rate:            556.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2588.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 408497.765 ops/s
[info]                  ·gc.alloc.rate:            556.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2587.112 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 410583.825 ops/s
[info]                  ·gc.alloc.rate:                   559.266 MB/sec
[info]                  ·gc.alloc.rate.norm:              2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1286.957 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.553 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 408799.238 ops/s
[info]                  ·gc.alloc.rate:            556.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       2144.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2587.652 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala":
[info]   409163.499 ±(99.9%) 3667.762 ops/s [Average]
[info]   (min, avg, max) = (408275.630, 409163.499, 410583.825), stdev = 952.506
[info]   CI (99.9%): [405495.737, 412831.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   557.291 ±(99.9%) 5.091 MB/sec [Average]
[info]   (min, avg, max) = (556.049, 557.291, 559.266), stdev = 1.322
[info]   CI (99.9%): [552.200, 562.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2144.001, 2144.001, 2144.001), stdev = 0.001
[info]   CI (99.9%): [2144.001, 2144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.349 ±(99.9%) 707.697 MB/sec [Average]
[info]   (min, avg, max) = (335.704, 537.349, 672.004), stdev = 183.787
[info]   CI (99.9%): [≈ 0, 1245.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2068.518 ±(99.9%) 2737.797 B/op [Average]
[info]   (min, avg, max) = (1286.957, 2068.518, 2588.500), stdev = 710.997
[info]   CI (99.9%): [≈ 0, 4806.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.511 ±(99.9%) 4.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.511, 2.553), stdev = 1.142
[info]   CI (99.9%): [≈ 0, 4.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 5.47% complete, ETA 01:20:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 874837.257 ops/s
[info] # Warmup Iteration   2: 945050.776 ops/s
[info] # Warmup Iteration   3: 952519.231 ops/s
[info] Iteration   1: 953933.880 ops/s
[info]                  ·gc.alloc.rate:            635.108 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1112.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 953301.430 ops/s
[info]                  ·gc.alloc.rate:            634.847 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.199 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1112.962 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 944385.912 ops/s
[info]                  ·gc.alloc.rate:            628.751 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1123.476 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 947684.904 ops/s
[info]                  ·gc.alloc.rate:            631.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1119.517 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 951266.733 ops/s
[info]                  ·gc.alloc.rate:            633.455 MB/sec
[info]                  ·gc.alloc.rate.norm:       1048.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 557.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala":
[info]   950114.572 ±(99.9%) 15497.524 ops/s [Average]
[info]   (min, avg, max) = (944385.912, 950114.572, 953933.880), stdev = 4024.658
[info]   CI (99.9%): [934617.048, 965612.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.635 ±(99.9%) 10.440 MB/sec [Average]
[info]   (min, avg, max) = (628.751, 632.635, 635.108), stdev = 2.711
[info]   CI (99.9%): [622.194, 643.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1048.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1048.000, 1048.000, 1048.000), stdev = 0.001
[info]   CI (99.9%): [1048.000, 1048.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.683 ±(99.9%) 580.343 MB/sec [Average]
[info]   (min, avg, max) = (337.079, 606.683, 674.199), stdev = 150.713
[info]   CI (99.9%): [26.340, 1187.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1005.171 ±(99.9%) 963.448 B/op [Average]
[info]   (min, avg, max) = (557.670, 1005.171, 1123.476), stdev = 250.204
[info]   CI (99.9%): [41.723, 1968.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 5.72% complete, ETA 01:20:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56049.475 ops/s
[info] # Warmup Iteration   2: 94172.292 ops/s
[info] # Warmup Iteration   3: 101710.589 ops/s
[info] Iteration   1: 100307.232 ops/s
[info]                  ·gc.alloc.rate:                                  3474.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.900 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       58749.521 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 97799.459 ops/s
[info]                  ·gc.alloc.rate:                                  3386.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54779.718 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 97577.870 ops/s
[info]                  ·gc.alloc.rate:                                  3379.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54901.517 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 98552.179 ops/s
[info]                  ·gc.alloc.rate:                                  3412.994 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54359.576 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 101882.742 ops/s
[info]                  ·gc.alloc.rate:                                  3528.386 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54512.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52584.702 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson":
[info]   99223.897 ±(99.9%) 7056.430 ops/s [Average]
[info]   (min, avg, max) = (97577.870, 99223.897, 101882.742), stdev = 1832.533
[info]   CI (99.9%): [92167.466, 106280.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3436.414 ±(99.9%) 245.241 MB/sec [Average]
[info]   (min, avg, max) = (3379.159, 3436.414, 3528.386), stdev = 63.688
[info]   CI (99.9%): [3191.173, 3681.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54512.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54512.004, 54512.004, 54512.005), stdev = 0.001
[info]   CI (99.9%): [54512.003, 54512.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.044 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.044, 0.061), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3471.734 ±(99.9%) 588.010 MB/sec [Average]
[info]   (min, avg, max) = (3403.304, 3471.734, 3744.900), stdev = 152.704
[info]   CI (99.9%): [2883.724, 4059.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55075.007 ±(99.9%) 8681.646 B/op [Average]
[info]   (min, avg, max) = (52584.702, 55075.007, 58749.521), stdev = 2254.596
[info]   CI (99.9%): [46393.361, 63756.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.200, 11.000), stdev = 1.095
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 5.97% complete, ETA 01:20:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240202.880 ops/s
[info] # Warmup Iteration   2: 308644.022 ops/s
[info] # Warmup Iteration   3: 317138.643 ops/s
[info] Iteration   1: 319225.320 ops/s
[info]                  ·gc.alloc.rate:            778.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3323.621 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 318002.982 ops/s
[info]                  ·gc.alloc.rate:            776.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.288 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4990.824 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 307195.123 ops/s
[info]                  ·gc.alloc.rate:            749.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.233 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3453.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 303347.193 ops/s
[info]                  ·gc.alloc.rate:            740.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       3840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3497.408 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 319020.752 ops/s
[info]                  ·gc.alloc.rate:                                  778.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.214 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.369 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3342.345 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.432 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce":
[info]   313358.274 ±(99.9%) 28960.924 ops/s [Average]
[info]   (min, avg, max) = (303347.193, 313358.274, 319225.320), stdev = 7521.060
[info]   CI (99.9%): [284397.350, 342319.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   764.632 ±(99.9%) 70.824 MB/sec [Average]
[info]   (min, avg, max) = (740.062, 764.632, 778.683), stdev = 18.393
[info]   CI (99.9%): [693.808, 835.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3840.001, 3840.001, 3840.001), stdev = 0.001
[info]   CI (99.9%): [3840.001, 3840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.043 ±(99.9%) 0.368 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.214), stdev = 0.096
[info]   CI (99.9%): [≈ 0, 0.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   741.779 ±(99.9%) 575.858 MB/sec [Average]
[info]   (min, avg, max) = (673.971, 741.779, 1009.288), stdev = 149.548
[info]   CI (99.9%): [165.921, 1317.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3721.595 ±(99.9%) 2746.634 B/op [Average]
[info]   (min, avg, max) = (3323.621, 3721.595, 4990.824), stdev = 713.292
[info]   CI (99.9%): [974.960, 6468.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.286 ±(99.9%) 28.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.286, 16.432), stdev = 7.349
[info]   CI (99.9%): [≈ 0, 31.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 10.000), stdev = 2.121
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.22% complete, ETA 01:20:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 369450.646 ops/s
[info] # Warmup Iteration   2: 612677.127 ops/s
[info] # Warmup Iteration   3: 643213.202 ops/s
[info] Iteration   1: 619337.629 ops/s
[info]                  ·gc.alloc.rate:            456.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.626 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 853.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 615050.768 ops/s
[info]                  ·gc.alloc.rate:            453.224 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1718.200 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 618450.660 ops/s
[info]                  ·gc.alloc.rate:            455.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 854.386 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 637991.288 ops/s
[info]                  ·gc.alloc.rate:                   470.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1658.068 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.643 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 630079.965 ops/s
[info]                  ·gc.alloc.rate:            464.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.695 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 838.624 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala":
[info]   624182.062 ±(99.9%) 36792.193 ops/s [Average]
[info]   (min, avg, max) = (615050.768, 624182.062, 637991.288), stdev = 9554.816
[info]   CI (99.9%): [587389.869, 660974.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   460.014 ±(99.9%) 27.196 MB/sec [Average]
[info]   (min, avg, max) = (453.224, 460.014, 470.237), stdev = 7.063
[info]   CI (99.9%): [432.818, 487.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.001, 1160.001, 1160.001), stdev = 0.001
[info]   CI (99.9%): [1160.001, 1160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.116 ±(99.9%) 708.701 MB/sec [Average]
[info]   (min, avg, max) = (335.626, 470.116, 672.141), stdev = 184.047
[info]   CI (99.9%): [≈ 0, 1178.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1184.481 ±(99.9%) 1772.464 B/op [Average]
[info]   (min, avg, max) = (838.624, 1184.481, 1718.200), stdev = 460.303
[info]   CI (99.9%): [≈ 0, 2956.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.329 ±(99.9%) 2.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.329, 1.643), stdev = 0.735
[info]   CI (99.9%): [≈ 0, 3.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 6.47% complete, ETA 01:20:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2114298.896 ops/s
[info] # Warmup Iteration   2: 2343979.163 ops/s
[info] # Warmup Iteration   3: 2400357.274 ops/s
[info] Iteration   1: 2401150.495 ops/s
[info]                  ·gc.alloc.rate:            1110.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 661.473 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2388258.751 ops/s
[info]                  ·gc.alloc.rate:                   1104.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.272 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        886.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 2393343.577 ops/s
[info]                  ·gc.alloc.rate:                                  1107.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.150 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       671.543 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 2407228.267 ops/s
[info]                  ·gc.alloc.rate:                                  1113.262 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       667.659 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2405178.754 ops/s
[info]                  ·gc.alloc.rate:            1112.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 668.238 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala":
[info]   2399031.969 ±(99.9%) 30917.485 ops/s [Average]
[info]   (min, avg, max) = (2388258.751, 2399031.969, 2407228.267), stdev = 8029.173
[info]   CI (99.9%): [2368114.484, 2429949.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1109.612 ±(99.9%) 14.376 MB/sec [Average]
[info]   (min, avg, max) = (1104.432, 1109.612, 1113.262), stdev = 3.733
[info]   CI (99.9%): [1095.236, 1123.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.259 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.150), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1083.588 ±(99.9%) 563.668 MB/sec [Average]
[info]   (min, avg, max) = (1008.936, 1083.588, 1345.272), stdev = 146.383
[info]   CI (99.9%): [519.920, 1647.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   711.133 ±(99.9%) 378.294 B/op [Average]
[info]   (min, avg, max) = (661.473, 711.133, 886.753), stdev = 98.242
[info]   CI (99.9%): [332.839, 1089.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.527 ±(99.9%) 4.536 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.527, 2.634), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 4.919
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 6.72% complete, ETA 01:19:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2273395.685 ops/s
[info] # Warmup Iteration   2: 2519075.316 ops/s
[info] # Warmup Iteration   3: 2490986.159 ops/s
[info] Iteration   1: 2524030.688 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2492395.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2514119.847 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2522807.493 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2431553.470 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2496981.333 ±(99.9%) 149063.010 ops/s [Average]
[info]   (min, avg, max) = (2431553.470, 2496981.333, 2524030.688), stdev = 38711.190
[info]   CI (99.9%): [2347918.323, 2646044.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 6.97% complete, ETA 01:19:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 324568.628 ops/s
[info] # Warmup Iteration   2: 424653.747 ops/s
[info] # Warmup Iteration   3: 422235.333 ops/s
[info] Iteration   1: 444330.491 ops/s
[info]                  ·gc.alloc.rate:            639.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2383.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 437155.964 ops/s
[info]                  ·gc.alloc.rate:            628.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.306 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1211.109 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 440639.907 ops/s
[info]                  ·gc.alloc.rate:            633.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2403.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 439960.334 ops/s
[info]                  ·gc.alloc.rate:            633.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.974 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2406.794 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 437078.434 ops/s
[info]                  ·gc.alloc.rate:            628.807 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.904 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2422.773 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson":
[info]   439833.026 ±(99.9%) 11495.461 ops/s [Average]
[info]   (min, avg, max) = (437078.434, 439833.026, 444330.491), stdev = 2985.335
[info]   CI (99.9%): [428337.565, 451328.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   632.677 ±(99.9%) 16.484 MB/sec [Average]
[info]   (min, avg, max) = (628.677, 632.677, 639.079), stdev = 4.281
[info]   CI (99.9%): [616.193, 649.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.519 ±(99.9%) 579.502 MB/sec [Average]
[info]   (min, avg, max) = (336.306, 605.519, 672.974), stdev = 150.495
[info]   CI (99.9%): [26.017, 1185.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2165.375 ±(99.9%) 2054.847 B/op [Average]
[info]   (min, avg, max) = (1211.109, 2165.375, 2422.773), stdev = 533.637
[info]   CI (99.9%): [110.528, 4220.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 7.21% complete, ETA 01:19:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15487.897 ops/s
[info] # Warmup Iteration   2: 19569.612 ops/s
[info] # Warmup Iteration   3: 19769.646 ops/s
[info] Iteration   1: 19500.611 ops/s
[info]                  ·gc.alloc.rate:            1220.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       98480.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81615.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 20034.229 ops/s
[info]                  ·gc.alloc.rate:                                  1253.470 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.463 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106181.599 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                261.660 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 19571.127 ops/s
[info]                  ·gc.alloc.rate:                                  1224.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.749 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109491.154 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 19796.535 ops/s
[info]                  ·gc.alloc.rate:                                  1238.709 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.511 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81185.202 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 19850.259 ops/s
[info]                  ·gc.alloc.rate:                                  1241.984 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98480.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107941.647 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   19750.552 ±(99.9%) 833.005 ops/s [Average]
[info]   (min, avg, max) = (19500.611, 19750.552, 20034.229), stdev = 216.329
[info]   CI (99.9%): [18917.547, 20583.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1235.778 ±(99.9%) 51.976 MB/sec [Average]
[info]   (min, avg, max) = (1220.263, 1235.778, 1253.470), stdev = 13.498
[info]   CI (99.9%): [1183.803, 1287.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.030 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (98480.021, 98480.030, 98480.056), stdev = 0.015
[info]   CI (99.9%): [98479.972, 98480.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.054 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.947 ±(99.9%) 4.260 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.947, 2.463), stdev = 1.106
[info]   CI (99.9%): [≈ 0, 5.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.328 ±(99.9%) 721.241 MB/sec [Average]
[info]   (min, avg, max) = (1011.290, 1221.328, 1361.374), stdev = 187.304
[info]   CI (99.9%): [500.087, 1942.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   97282.931 ±(99.9%) 56015.108 B/op [Average]
[info]   (min, avg, max) = (81185.202, 97282.931, 109491.154), stdev = 14546.946
[info]   CI (99.9%): [41267.823, 153298.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.332 ±(99.9%) 450.594 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.332, 261.660), stdev = 117.018
[info]   CI (99.9%): [≈ 0, 502.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 11.000), stdev = 3.742
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.46% complete, ETA 01:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19054.527 ops/s
[info] # Warmup Iteration   2: 31392.175 ops/s
[info] # Warmup Iteration   3: 30987.558 ops/s
[info] Iteration   1: 30967.129 ops/s
[info]                  ·gc.alloc.rate:            776.149 MB/sec
[info]                  ·gc.alloc.rate.norm:       39454.960 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 34193.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 31155.077 ops/s
[info]                  ·gc.alloc.rate:            781.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 33987.861 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 31054.630 ops/s
[info]                  ·gc.alloc.rate:            778.357 MB/sec
[info]                  ·gc.alloc.rate.norm:       39456.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 51147.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 31396.004 ops/s
[info]                  ·gc.alloc.rate:                   786.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              39456.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        33727.007 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 200.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 32713.949 ops/s
[info]                  ·gc.alloc.rate:                                  820.157 MB/sec
[info]                  ·gc.alloc.rate.norm:                             39456.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.824 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32752.978 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31457.358 ±(99.9%) 2774.517 ops/s [Average]
[info]   (min, avg, max) = (30967.129, 31457.358, 32713.949), stdev = 720.533
[info]   CI (99.9%): [28682.841, 34231.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   788.535 ±(99.9%) 69.830 MB/sec [Average]
[info]   (min, avg, max) = (776.149, 788.535, 820.157), stdev = 18.135
[info]   CI (99.9%): [718.705, 858.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39455.803 ±(99.9%) 1.815 B/op [Average]
[info]   (min, avg, max) = (39454.960, 39455.803, 39456.014), stdev = 0.471
[info]   CI (99.9%): [39453.988, 39457.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.198 ±(99.9%) 10.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.198, 5.989), stdev = 2.679
[info]   CI (99.9%): [≈ 0, 11.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.593 ±(99.9%) 575.771 MB/sec [Average]
[info]   (min, avg, max) = (672.638, 741.593, 1008.999), stdev = 149.526
[info]   CI (99.9%): [165.821, 1317.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   37161.698 ±(99.9%) 30180.599 B/op [Average]
[info]   (min, avg, max) = (32752.978, 37161.698, 51147.578), stdev = 7837.806
[info]   CI (99.9%): [6981.098, 67342.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.072 ±(99.9%) 345.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.072, 200.358), stdev = 89.603
[info]   CI (99.9%): [≈ 0, 385.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 3.962
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 7.71% complete, ETA 01:19:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35119.329 ops/s
[info] # Warmup Iteration   2: 38490.938 ops/s
[info] # Warmup Iteration   3: 38757.122 ops/s
[info] Iteration   1: 39313.640 ops/s
[info]                  ·gc.alloc.rate:            528.064 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26987.078 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 39688.347 ops/s
[info]                  ·gc.alloc.rate:            533.344 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13366.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 39552.290 ops/s
[info]                  ·gc.alloc.rate:            531.242 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26825.393 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 39545.883 ops/s
[info]                  ·gc.alloc.rate:            531.235 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13414.731 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 39401.340 ops/s
[info]                  ·gc.alloc.rate:            529.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       21144.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26928.183 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   39500.300 ±(99.9%) 560.588 ops/s [Average]
[info]   (min, avg, max) = (39313.640, 39500.300, 39688.347), stdev = 145.583
[info]   CI (99.9%): [38939.712, 40060.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   530.630 ±(99.9%) 7.833 MB/sec [Average]
[info]   (min, avg, max) = (528.064, 530.630, 533.344), stdev = 2.034
[info]   CI (99.9%): [522.797, 538.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21144.010, 21144.011, 21144.011), stdev = 0.001
[info]   CI (99.9%): [21144.009, 21144.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.246 ±(99.9%) 710.573 MB/sec [Average]
[info]   (min, avg, max) = (337.040, 539.246, 674.051), stdev = 184.534
[info]   CI (99.9%): [≈ 0, 1249.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   21504.358 ±(99.9%) 28522.061 B/op [Average]
[info]   (min, avg, max) = (13366.405, 21504.358, 26987.078), stdev = 7407.089
[info]   CI (99.9%): [≈ 0, 50026.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.643
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 7.96% complete, ETA 01:18:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14261.663 ops/s
[info] # Warmup Iteration   2: 25221.132 ops/s
[info] # Warmup Iteration   3: 24676.568 ops/s
[info] Iteration   1: 24871.672 ops/s
[info]                  ·gc.alloc.rate:                   1317.979 MB/sec
[info]                  ·gc.alloc.rate.norm:              83400.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.313 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        85066.387 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.154 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 25399.848 ops/s
[info]                  ·gc.alloc.rate:                                  1345.739 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.943 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63028.482 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                247.656 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 25051.830 ops/s
[info]                  ·gc.alloc.rate:                                  1327.700 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85536.550 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 25654.286 ops/s
[info]                  ·gc.alloc.rate:                                  1359.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.644 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83529.730 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25630.853 ops/s
[info]                  ·gc.alloc.rate:                                  1357.995 MB/sec
[info]                  ·gc.alloc.rate.norm:                             83400.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.816 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83607.932 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   25321.698 ±(99.9%) 1344.490 ops/s [Average]
[info]   (min, avg, max) = (24871.672, 25321.698, 25654.286), stdev = 349.160
[info]   CI (99.9%): [23977.207, 26666.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1341.736 ±(99.9%) 70.719 MB/sec [Average]
[info]   (min, avg, max) = (1317.979, 1341.736, 1359.269), stdev = 18.365
[info]   CI (99.9%): [1271.018, 1412.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   83400.018 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (83400.016, 83400.018, 83400.021), stdev = 0.002
[info]   CI (99.9%): [83400.009, 83400.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.148 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.096), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.775 ±(99.9%) 9.196 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.775, 5.943), stdev = 2.388
[info]   CI (99.9%): [≈ 0, 10.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1289.163 ±(99.9%) 586.497 MB/sec [Average]
[info]   (min, avg, max) = (1017.025, 1289.163, 1361.713), stdev = 152.312
[info]   CI (99.9%): [702.665, 1875.660] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80153.816 ±(99.9%) 37019.890 B/op [Average]
[info]   (min, avg, max) = (63028.482, 80153.816, 85536.550), stdev = 9613.948
[info]   CI (99.9%): [43133.927, 117173.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   57.962 ±(99.9%) 414.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 57.962, 247.656), stdev = 107.602
[info]   CI (99.9%): [≈ 0, 472.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 8.21% complete, ETA 01:18:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17854.065 ops/s
[info] # Warmup Iteration   2: 26582.624 ops/s
[info] # Warmup Iteration   3: 27188.261 ops/s
[info] Iteration   1: 27629.308 ops/s
[info]                  ·gc.alloc.rate:                                  1676.941 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.286 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.868 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76990.689 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                189.726 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 27452.415 ops/s
[info]                  ·gc.alloc.rate:                                  1665.619 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.072 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97574.814 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 27802.272 ops/s
[info]                  ·gc.alloc.rate:                                  1686.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.326 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96343.199 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 26887.704 ops/s
[info]                  ·gc.alloc.rate:                                  1632.078 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.500 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99624.858 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27061.214 ops/s
[info]                  ·gc.alloc.rate:                                  1642.701 MB/sec
[info]                  ·gc.alloc.rate.norm:                             95504.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.413 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98980.740 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   27366.583 ±(99.9%) 1477.354 ops/s [Average]
[info]   (min, avg, max) = (26887.704, 27366.583, 27802.272), stdev = 383.664
[info]   CI (99.9%): [25889.228, 28843.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1660.833 ±(99.9%) 88.515 MB/sec [Average]
[info]   (min, avg, max) = (1632.078, 1660.833, 1686.826), stdev = 22.987
[info]   CI (99.9%): [1572.318, 1749.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   95504.027 ±(99.9%) 0.097 B/op [Average]
[info]   (min, avg, max) = (95504.015, 95504.027, 95504.072), stdev = 0.025
[info]   CI (99.9%): [95503.930, 95504.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.126 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.030, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.731 ±(99.9%) 7.193 B/op [Average]
[info]   (min, avg, max) = (0.326, 1.731, 4.205), stdev = 1.868
[info]   CI (99.9%): [≈ 0, 8.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1632.050 ±(99.9%) 603.115 MB/sec [Average]
[info]   (min, avg, max) = (1351.868, 1632.050, 1702.501), stdev = 156.627
[info]   CI (99.9%): [1028.935, 2235.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   93902.860 ±(99.9%) 36732.103 B/op [Average]
[info]   (min, avg, max) = (76990.689, 93902.860, 99624.858), stdev = 9539.211
[info]   CI (99.9%): [57170.757, 130634.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   37.945 ±(99.9%) 326.719 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.945, 189.726), stdev = 84.848
[info]   CI (99.9%): [≈ 0, 364.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.271
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.46% complete, ETA 01:18:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11842.260 ops/s
[info] # Warmup Iteration   2: 26970.486 ops/s
[info] # Warmup Iteration   3: 27118.657 ops/s
[info] Iteration   1: 27169.523 ops/s
[info]                  ·gc.alloc.rate:                   1488.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              86208.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1679.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97279.020 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.329 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 308.700 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         22.000 ms
[info] Iteration   2: 27773.958 ops/s
[info]                  ·gc.alloc.rate:                                  1521.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.071 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77155.022 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 27352.484 ops/s
[info]                  ·gc.alloc.rate:                                  1497.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97931.487 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 27964.415 ops/s
[info]                  ·gc.alloc.rate:                                  1531.978 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.221 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76630.889 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 27863.070 ops/s
[info]                  ·gc.alloc.rate:                                  1526.580 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86208.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96135.771 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   27624.690 ±(99.9%) 1328.043 ops/s [Average]
[info]   (min, avg, max) = (27169.523, 27624.690, 27964.415), stdev = 344.888
[info]   CI (99.9%): [26296.647, 28952.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1513.192 ±(99.9%) 73.190 MB/sec [Average]
[info]   (min, avg, max) = (1488.302, 1513.192, 1531.978), stdev = 19.007
[info]   CI (99.9%): [1440.002, 1586.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86208.027 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (86208.015, 86208.027, 86208.071), stdev = 0.025
[info]   CI (99.9%): [86207.930, 86208.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.205 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.122), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.505 ±(99.9%) 11.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.505, 6.895), stdev = 3.015
[info]   CI (99.9%): [≈ 0, 13.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1561.336 ±(99.9%) 703.083 MB/sec [Average]
[info]   (min, avg, max) = (1361.366, 1561.336, 1702.381), stdev = 182.588
[info]   CI (99.9%): [858.253, 2264.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   89026.438 ±(99.9%) 42728.607 B/op [Average]
[info]   (min, avg, max) = (76630.889, 89026.438, 97931.487), stdev = 11096.483
[info]   CI (99.9%): [46297.831, 131755.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.329), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   61.740 ±(99.9%) 531.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.740, 308.700), stdev = 138.055
[info]   CI (99.9%): [≈ 0, 593.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 22.000), stdev = 7.842
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 8.71% complete, ETA 01:18:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23226.461 ops/s
[info] # Warmup Iteration   2: 30551.572 ops/s
[info] # Warmup Iteration   3: 30827.213 ops/s
[info] Iteration   1: 31086.586 ops/s
[info]                  ·gc.alloc.rate:                                  1604.239 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.439 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68326.739 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                202.350 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   2: 31186.568 ops/s
[info]                  ·gc.alloc.rate:                                  1609.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.993 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.100 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85888.234 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 30674.995 ops/s
[info]                  ·gc.alloc.rate:                                  1583.129 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.158 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87324.370 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 31236.631 ops/s
[info]                  ·gc.alloc.rate:                                  1612.601 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68602.821 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 31329.466 ops/s
[info]                  ·gc.alloc.rate:                                  1616.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81224.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.263 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.858 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85496.288 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   31102.849 ±(99.9%) 980.942 ops/s [Average]
[info]   (min, avg, max) = (30674.995, 31102.849, 31329.466), stdev = 254.747
[info]   CI (99.9%): [30121.907, 32083.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1605.290 ±(99.9%) 50.855 MB/sec [Average]
[info]   (min, avg, max) = (1583.129, 1605.290, 1616.816), stdev = 13.207
[info]   CI (99.9%): [1554.436, 1656.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   81224.014 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (81224.013, 81224.014, 81224.016), stdev = 0.001
[info]   CI (99.9%): [81224.009, 81224.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.028, 0.079), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.394 ±(99.9%) 6.749 B/op [Average]
[info]   (min, avg, max) = (0.116, 1.394, 3.993), stdev = 1.753
[info]   CI (99.9%): [≈ 0, 8.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1563.504 ±(99.9%) 730.428 MB/sec [Average]
[info]   (min, avg, max) = (1349.508, 1563.504, 1702.100), stdev = 189.690
[info]   CI (99.9%): [833.076, 2293.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   79127.691 ±(99.9%) 37575.013 B/op [Average]
[info]   (min, avg, max) = (68326.739, 79127.691, 87324.370), stdev = 9758.111
[info]   CI (99.9%): [41552.678, 116702.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   40.470 ±(99.9%) 348.458 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.470, 202.350), stdev = 90.494
[info]   CI (99.9%): [≈ 0, 388.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 11.000), stdev = 3.130
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 8.96% complete, ETA 01:18:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22503.522 ops/s
[info] # Warmup Iteration   2: 30087.477 ops/s
[info] # Warmup Iteration   3: 30447.000 ops/s
[info] Iteration   1: 30980.228 ops/s
[info]                  ·gc.alloc.rate:                   1538.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              78168.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        68357.436 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 203.042 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 31049.899 ops/s
[info]                  ·gc.alloc.rate:                                  1541.953 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.533 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       86269.898 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 30634.910 ops/s
[info]                  ·gc.alloc.rate:                                  1521.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69948.414 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 31383.509 ops/s
[info]                  ·gc.alloc.rate:                                  1558.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.592 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85354.648 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 31434.784 ops/s
[info]                  ·gc.alloc.rate:                                  1561.120 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78168.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.451 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.882 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85216.186 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   31096.666 ±(99.9%) 1255.992 ops/s [Average]
[info]   (min, avg, max) = (30634.910, 31096.666, 31434.784), stdev = 326.177
[info]   CI (99.9%): [29840.674, 32352.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1544.256 ±(99.9%) 62.506 MB/sec [Average]
[info]   (min, avg, max) = (1521.270, 1544.256, 1561.120), stdev = 16.233
[info]   CI (99.9%): [1481.751, 1606.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   78168.023 ±(99.9%) 0.087 B/op [Average]
[info]   (min, avg, max) = (78168.013, 78168.023, 78168.064), stdev = 0.023
[info]   CI (99.9%): [78167.936, 78168.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.109), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.345 ±(99.9%) 9.060 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.345, 5.533), stdev = 2.353
[info]   CI (99.9%): [≈ 0, 10.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1562.419 ±(99.9%) 735.268 MB/sec [Average]
[info]   (min, avg, max) = (1345.372, 1562.419, 1701.882), stdev = 190.947
[info]   CI (99.9%): [827.150, 2297.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   79029.316 ±(99.9%) 34819.330 B/op [Average]
[info]   (min, avg, max) = (68357.436, 79029.316, 86269.898), stdev = 9042.469
[info]   CI (99.9%): [44209.986, 113848.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   40.608 ±(99.9%) 349.650 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.608, 203.042), stdev = 90.803
[info]   CI (99.9%): [≈ 0, 390.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 14.000), stdev = 4.438
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 9.20% complete, ETA 01:17:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4292.956 ops/s
[info] # Warmup Iteration   2: 7631.811 ops/s
[info] # Warmup Iteration   3: 8020.715 ops/s
[info] Iteration   1: 8028.581 ops/s
[info]                  ·gc.alloc.rate:            1044.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197807.576 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 7781.719 ops/s
[info]                  ·gc.alloc.rate:            1012.248 MB/sec
[info]                  ·gc.alloc.rate.norm:       204776.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.959 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 204110.579 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 7726.009 ops/s
[info]                  ·gc.alloc.rate:                   1005.063 MB/sec
[info]                  ·gc.alloc.rate.norm:              204776.053 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.926 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        205563.230 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 814.112 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 7766.588 ops/s
[info]                  ·gc.alloc.rate:                                  1010.409 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.053 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.946 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       206934.476 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7801.824 ops/s
[info]                  ·gc.alloc.rate:                                  1015.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             204776.052 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       205979.883 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   7820.944 ±(99.9%) 459.602 ops/s [Average]
[info]   (min, avg, max) = (7726.009, 7820.944, 8028.581), stdev = 119.357
[info]   CI (99.9%): [7361.342, 8280.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1017.463 ±(99.9%) 59.979 MB/sec [Average]
[info]   (min, avg, max) = (1005.063, 1017.463, 1044.553), stdev = 15.576
[info]   CI (99.9%): [957.484, 1077.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   204776.053 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (204776.051, 204776.053, 204776.057), stdev = 0.002
[info]   CI (99.9%): [204776.045, 204776.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.027 ±(99.9%) 34.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.027, 19.946), stdev = 8.900
[info]   CI (99.9%): [≈ 0, 38.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.792 ±(99.9%) 25.455 MB/sec [Average]
[info]   (min, avg, max) = (1008.926, 1013.792, 1021.059), stdev = 6.611
[info]   CI (99.9%): [988.337, 1039.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   204079.149 ±(99.9%) 14056.406 B/op [Average]
[info]   (min, avg, max) = (197807.576, 204079.149, 206934.476), stdev = 3650.404
[info]   CI (99.9%): [190022.743, 218135.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   162.822 ±(99.9%) 1401.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 162.822, 814.112), stdev = 364.082
[info]   CI (99.9%): [≈ 0, 1564.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 5.128
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 9.45% complete, ETA 01:17:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13637.683 ops/s
[info] # Warmup Iteration   2: 19966.770 ops/s
[info] # Warmup Iteration   3: 19685.471 ops/s
[info] Iteration   1: 20021.073 ops/s
[info]                  ·gc.alloc.rate:                   1529.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              120233.518 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105983.412 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 261.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 20202.547 ops/s
[info]                  ·gc.alloc.rate:                                  1543.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.641 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132589.908 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 20211.366 ops/s
[info]                  ·gc.alloc.rate:                                  1543.848 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120239.217 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106024.702 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 20014.359 ops/s
[info]                  ·gc.alloc.rate:                                  1528.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.914 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       133835.132 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20285.369 ops/s
[info]                  ·gc.alloc.rate:                                  1549.624 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120240.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.509 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.504 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       105643.205 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   20146.943 ±(99.9%) 470.921 ops/s [Average]
[info]   (min, avg, max) = (20014.359, 20146.943, 20285.369), stdev = 122.297
[info]   CI (99.9%): [19676.022, 20617.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1539.140 ±(99.9%) 36.045 MB/sec [Average]
[info]   (min, avg, max) = (1528.898, 1539.140, 1549.624), stdev = 9.361
[info]   CI (99.9%): [1503.094, 1575.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120238.559 ±(99.9%) 10.934 B/op [Average]
[info]   (min, avg, max) = (120233.518, 120238.559, 120240.020), stdev = 2.839
[info]   CI (99.9%): [120227.626, 120249.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.219 ±(99.9%) 6.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.219, 3.641), stdev = 1.561
[info]   CI (99.9%): [≈ 0, 7.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.043 ±(99.9%) 727.965 MB/sec [Average]
[info]   (min, avg, max) = (1348.266, 1495.043, 1702.342), stdev = 189.050
[info]   CI (99.9%): [767.077, 2223.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   116815.272 ±(99.9%) 57666.381 B/op [Average]
[info]   (min, avg, max) = (105643.205, 116815.272, 133835.132), stdev = 14975.776
[info]   CI (99.9%): [59148.891, 174481.653] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   52.363 ±(99.9%) 450.864 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.363, 261.817), stdev = 117.088
[info]   CI (99.9%): [≈ 0, 503.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 13.000), stdev = 4.087
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.70% complete, ETA 01:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24672.287 ops/s
[info] # Warmup Iteration   2: 39206.297 ops/s
[info] # Warmup Iteration   3: 37617.766 ops/s
[info] Iteration   1: 37824.095 ops/s
[info]                  ·gc.alloc.rate:                   932.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              38823.146 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        41962.996 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.717 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 37499.458 ops/s
[info]                  ·gc.alloc.rate:            925.049 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42354.564 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 38579.211 ops/s
[info]                  ·gc.alloc.rate:                   951.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              38824.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27419.613 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 190.225 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 39459.227 ops/s
[info]                  ·gc.alloc.rate:                                  973.564 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38824.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.197 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.863 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40730.426 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 39541.109 ops/s
[info]                  ·gc.alloc.rate:            975.283 MB/sec
[info]                  ·gc.alloc.rate.norm:       38824.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40647.003 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   38580.620 ±(99.9%) 3568.725 ops/s [Average]
[info]   (min, avg, max) = (37499.458, 38580.620, 39541.109), stdev = 926.787
[info]   CI (99.9%): [35011.895, 42149.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   951.661 ±(99.9%) 88.227 MB/sec [Average]
[info]   (min, avg, max) = (925.049, 951.661, 975.283), stdev = 22.912
[info]   CI (99.9%): [863.434, 1039.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38823.838 ±(99.9%) 1.488 B/op [Average]
[info]   (min, avg, max) = (38823.146, 38823.838, 38824.011), stdev = 0.386
[info]   CI (99.9%): [38822.349, 38825.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.340 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.197), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.573 ±(99.9%) 13.541 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.573, 7.863), stdev = 3.516
[info]   CI (99.9%): [≈ 0, 15.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.391 ±(99.9%) 591.045 MB/sec [Average]
[info]   (min, avg, max) = (672.043, 946.391, 1021.370), stdev = 153.492
[info]   CI (99.9%): [355.346, 1537.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   38622.920 ±(99.9%) 24287.603 B/op [Average]
[info]   (min, avg, max) = (27419.613, 38622.920, 42354.564), stdev = 6307.413
[info]   CI (99.9%): [14335.317, 62910.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   43.588 ±(99.9%) 319.012 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.588, 190.225), stdev = 82.846
[info]   CI (99.9%): [≈ 0, 362.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 9.95% complete, ETA 01:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51492.188 ops/s
[info] # Warmup Iteration   2: 57493.125 ops/s
[info] # Warmup Iteration   3: 58069.386 ops/s
[info] Iteration   1: 58968.901 ops/s
[info]                  ·gc.alloc.rate:            761.822 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17992.453 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 58817.821 ops/s
[info]                  ·gc.alloc.rate:            760.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.256 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18038.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 58188.589 ops/s
[info]                  ·gc.alloc.rate:            751.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27350.396 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 58716.804 ops/s
[info]                  ·gc.alloc.rate:            758.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       20336.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18069.046 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 58513.939 ops/s
[info]                  ·gc.alloc.rate:                                  756.093 MB/sec
[info]                  ·gc.alloc.rate.norm:                             20336.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18221.615 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.585 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   58641.211 ±(99.9%) 1163.748 ops/s [Average]
[info]   (min, avg, max) = (58188.589, 58641.211, 58968.901), stdev = 302.222
[info]   CI (99.9%): [57477.463, 59804.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   757.686 ±(99.9%) 15.086 MB/sec [Average]
[info]   (min, avg, max) = (751.774, 757.686, 761.822), stdev = 3.918
[info]   CI (99.9%): [742.601, 772.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.008), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.026 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.015), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.080 ±(99.9%) 0.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.080, 0.402), stdev = 0.180
[info]   CI (99.9%): [≈ 0, 0.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   742.181 ±(99.9%) 578.851 MB/sec [Average]
[info]   (min, avg, max) = (674.029, 742.181, 1011.079), stdev = 150.326
[info]   CI (99.9%): [163.330, 1321.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   19934.491 ±(99.9%) 15966.723 B/op [Average]
[info]   (min, avg, max) = (17992.453, 19934.491, 27350.396), stdev = 4146.507
[info]   CI (99.9%): [3967.767, 35901.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.917 ±(99.9%) 154.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.917, 89.585), stdev = 40.064
[info]   CI (99.9%): [≈ 0, 172.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 14.000), stdev = 3.899
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 10.20% complete, ETA 01:17:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11449.599 ops/s
[info] # Warmup Iteration   2: 29650.940 ops/s
[info] # Warmup Iteration   3: 29012.191 ops/s
[info] Iteration   1: 29013.779 ops/s
[info]                  ·gc.alloc.rate:                                  1937.857 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.208 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92072.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                252.948 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 30253.347 ops/s
[info]                  ·gc.alloc.rate:                                  2020.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.330 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       106247.200 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 29384.165 ops/s
[info]                  ·gc.alloc.rate:                                  1962.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       109388.704 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 29931.435 ops/s
[info]                  ·gc.alloc.rate:                                  1999.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.758 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107389.986 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 29837.370 ops/s
[info]                  ·gc.alloc.rate:                                  1992.791 MB/sec
[info]                  ·gc.alloc.rate.norm:                             105128.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.277 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107728.245 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson":
[info]   29684.019 ±(99.9%) 1874.594 ops/s [Average]
[info]   (min, avg, max) = (29013.779, 29684.019, 30253.347), stdev = 486.826
[info]   CI (99.9%): [27809.425, 31558.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1982.679 ±(99.9%) 125.573 MB/sec [Average]
[info]   (min, avg, max) = (1937.857, 1982.679, 2020.862), stdev = 32.611
[info]   CI (99.9%): [1857.106, 2108.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   105128.015 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (105128.014, 105128.015, 105128.017), stdev = 0.001
[info]   CI (99.9%): [105128.010, 105128.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.010, 0.020), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.521 ±(99.9%) 1.525 B/op [Average]
[info]   (min, avg, max) = (0.144, 0.521, 1.098), stdev = 0.396
[info]   CI (99.9%): [≈ 0, 2.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1973.221 ±(99.9%) 594.139 MB/sec [Average]
[info]   (min, avg, max) = (1697.208, 1973.221, 2042.382), stdev = 154.296
[info]   CI (99.9%): [1379.082, 2567.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   104565.409 ±(99.9%) 27237.484 B/op [Average]
[info]   (min, avg, max) = (92072.908, 104565.409, 109388.704), stdev = 7073.488
[info]   CI (99.9%): [77327.924, 131802.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   50.590 ±(99.9%) 435.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 50.590, 252.948), stdev = 113.122
[info]   CI (99.9%): [≈ 0, 486.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.45% complete, ETA 01:16:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17155.536 ops/s
[info] # Warmup Iteration   2: 33501.577 ops/s
[info] # Warmup Iteration   3: 33691.124 ops/s
[info] Iteration   1: 33298.193 ops/s
[info]                  ·gc.alloc.rate:                                  1820.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.377 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.163 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96155.150 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                188.910 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 34147.421 ops/s
[info]                  ·gc.alloc.rate:                                  1867.041 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78442.106 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 33746.264 ops/s
[info]                  ·gc.alloc.rate:                                  1845.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.893 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95254.482 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 33830.523 ops/s
[info]                  ·gc.alloc.rate:                                  1850.552 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.409 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79181.666 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 34319.145 ops/s
[info]                  ·gc.alloc.rate:                                  1876.687 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86072.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       93664.317 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   33868.309 ±(99.9%) 1519.067 ops/s [Average]
[info]   (min, avg, max) = (33298.193, 33868.309, 34319.145), stdev = 394.497
[info]   CI (99.9%): [32349.242, 35387.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1852.219 ±(99.9%) 82.679 MB/sec [Average]
[info]   (min, avg, max) = (1820.854, 1852.219, 1876.687), stdev = 21.472
[info]   CI (99.9%): [1769.540, 1934.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   86072.013 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (86072.012, 86072.013, 86072.016), stdev = 0.002
[info]   CI (99.9%): [86072.006, 86072.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.016, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.763 ±(99.9%) 5.632 B/op [Average]
[info]   (min, avg, max) = (0.061, 0.763, 3.377), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1904.646 ±(99.9%) 712.548 MB/sec [Average]
[info]   (min, avg, max) = (1701.536, 1904.646, 2042.893), stdev = 185.046
[info]   CI (99.9%): [1192.098, 2617.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   88539.544 ±(99.9%) 34380.842 B/op [Average]
[info]   (min, avg, max) = (78442.106, 88539.544, 96155.150), stdev = 8928.596
[info]   CI (99.9%): [54158.702, 122920.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   37.782 ±(99.9%) 325.314 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.782, 188.910), stdev = 84.483
[info]   CI (99.9%): [≈ 0, 363.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 14.000), stdev = 3.937
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 10.70% complete, ETA 01:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37183.014 ops/s
[info] # Warmup Iteration   2: 44713.970 ops/s
[info] # Warmup Iteration   3: 44162.248 ops/s
[info] Iteration   1: 45260.224 ops/s
[info]                  ·gc.alloc.rate:                                  1886.639 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.456 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70879.466 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                138.979 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 45231.847 ops/s
[info]                  ·gc.alloc.rate:                                  1884.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59222.593 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 44296.032 ops/s
[info]                  ·gc.alloc.rate:                                  1846.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72566.960 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 43979.292 ops/s
[info]                  ·gc.alloc.rate:                                  1832.750 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60909.666 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 43844.409 ops/s
[info]                  ·gc.alloc.rate:                                  1827.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65600.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73316.625 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   44522.361 ±(99.9%) 2621.253 ops/s [Average]
[info]   (min, avg, max) = (43844.409, 44522.361, 45260.224), stdev = 680.731
[info]   CI (99.9%): [41901.108, 47143.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1855.611 ±(99.9%) 109.225 MB/sec [Average]
[info]   (min, avg, max) = (1827.641, 1855.611, 1886.639), stdev = 28.365
[info]   CI (99.9%): [1746.387, 1964.836] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   65600.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (65600.009, 65600.009, 65600.010), stdev = 0.001
[info]   CI (99.9%): [65600.008, 65600.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.218 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.027, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.932 ±(99.9%) 7.586 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.932, 4.456), stdev = 1.970
[info]   CI (99.9%): [≈ 0, 8.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1905.331 ±(99.9%) 715.818 MB/sec [Average]
[info]   (min, avg, max) = (1701.690, 1905.331, 2042.629), stdev = 185.896
[info]   CI (99.9%): [1189.513, 2621.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   67379.062 ±(99.9%) 26031.238 B/op [Average]
[info]   (min, avg, max) = (59222.593, 67379.062, 73316.625), stdev = 6760.230
[info]   CI (99.9%): [41347.824, 93410.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   27.796 ±(99.9%) 239.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.796, 138.979), stdev = 62.153
[info]   CI (99.9%): [≈ 0, 267.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 10.95% complete, ETA 01:16:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35486.799 ops/s
[info] # Warmup Iteration   2: 44143.228 ops/s
[info] # Warmup Iteration   3: 43377.285 ops/s
[info] Iteration   1: 44029.423 ops/s
[info]                  ·gc.alloc.rate:                                  1758.707 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.155 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.531 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60553.383 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                142.871 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 45125.092 ops/s
[info]                  ·gc.alloc.rate:                                  1801.998 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71234.025 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 43636.990 ops/s
[info]                  ·gc.alloc.rate:                                  1742.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61386.973 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 43349.274 ops/s
[info]                  ·gc.alloc.rate:                                  1731.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.054 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61793.331 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 44758.178 ops/s
[info]                  ·gc.alloc.rate:                                  1787.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                             62856.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.976 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59847.020 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   44179.791 ±(99.9%) 2878.423 ops/s [Average]
[info]   (min, avg, max) = (43349.274, 44179.791, 45125.092), stdev = 747.517
[info]   CI (99.9%): [41301.369, 47058.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1764.561 ±(99.9%) 114.198 MB/sec [Average]
[info]   (min, avg, max) = (1731.575, 1764.561, 1801.998), stdev = 29.657
[info]   CI (99.9%): [1650.363, 1878.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.009, 62856.009, 62856.009), stdev = 0.001
[info]   CI (99.9%): [62856.009, 62856.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.264 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.032, 0.155), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.149 ±(99.9%) 9.434 B/op [Average]
[info]   (min, avg, max) = (0.014, 1.149, 5.531), stdev = 2.450
[info]   CI (99.9%): [≈ 0, 10.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1768.596 ±(99.9%) 589.066 MB/sec [Average]
[info]   (min, avg, max) = (1694.280, 1768.596, 2042.184), stdev = 152.979
[info]   CI (99.9%): [1179.530, 2357.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   62962.946 ±(99.9%) 18038.266 B/op [Average]
[info]   (min, avg, max) = (59847.020, 62962.946, 71234.025), stdev = 4684.480
[info]   CI (99.9%): [44924.680, 81001.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   28.574 ±(99.9%) 246.032 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.574, 142.871), stdev = 63.894
[info]   CI (99.9%): [≈ 0, 274.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 11.19% complete, ETA 01:16:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 288128.251 ops/s
[info] # Warmup Iteration   2: 347294.537 ops/s
[info] # Warmup Iteration   3: 357287.620 ops/s
[info] Iteration   1: 358506.380 ops/s
[info]                  ·gc.alloc.rate:                                  1812.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.446 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7457.159 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.622 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 364406.272 ops/s
[info]                  ·gc.alloc.rate:            1843.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.244 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7350.968 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 364128.835 ops/s
[info]                  ·gc.alloc.rate:                                  1841.368 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.159 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8827.992 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 363411.567 ops/s
[info]                  ·gc.alloc.rate:                                  1837.605 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7960.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.661 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7371.132 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 362326.086 ops/s
[info]                  ·gc.alloc.rate:            1832.116 MB/sec
[info]                  ·gc.alloc.rate.norm:       7960.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.658 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7393.202 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   362555.828 ±(99.9%) 9249.884 ops/s [Average]
[info]   (min, avg, max) = (358506.380, 362555.828, 364406.272), stdev = 2402.166
[info]   CI (99.9%): [353305.944, 371805.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1833.444 ±(99.9%) 47.258 MB/sec [Average]
[info]   (min, avg, max) = (1812.854, 1833.444, 1843.276), stdev = 12.273
[info]   CI (99.9%): [1786.186, 1880.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.102), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.093 ±(99.9%) 0.759 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.093, 0.446), stdev = 0.197
[info]   CI (99.9%): [≈ 0, 0.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1769.211 ±(99.9%) 587.570 MB/sec [Average]
[info]   (min, avg, max) = (1698.334, 1769.211, 2042.159), stdev = 152.590
[info]   CI (99.9%): [1181.641, 2356.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   7680.091 ±(99.9%) 2475.711 B/op [Average]
[info]   (min, avg, max) = (7350.968, 7680.091, 8827.992), stdev = 642.934
[info]   CI (99.9%): [5204.379, 10155.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   2.924 ±(99.9%) 25.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.924, 14.622), stdev = 6.539
[info]   CI (99.9%): [≈ 0, 28.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 11.44% complete, ETA 01:16:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67170.041 ops/s
[info] # Warmup Iteration   2: 1499346.541 ops/s
[info] # Warmup Iteration   3: 1542886.687 ops/s
[info] Iteration   1: 1559382.356 ops/s
[info]                  ·gc.alloc.rate:                   491.428 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        336.174 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1539715.125 ops/s
[info]                  ·gc.alloc.rate:            485.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 341.146 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1491951.140 ops/s
[info]                  ·gc.alloc.rate:            470.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 704.158 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 1510154.978 ops/s
[info]                  ·gc.alloc.rate:                   475.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        347.140 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.694 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 1552242.755 ops/s
[info]                  ·gc.alloc.rate:            489.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       496.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 676.807 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava":
[info]   1530689.271 ±(99.9%) 110460.669 ops/s [Average]
[info]   (min, avg, max) = (1491951.140, 1530689.271, 1559382.356), stdev = 28686.285
[info]   CI (99.9%): [1420228.602, 1641149.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   482.354 ±(99.9%) 34.880 MB/sec [Average]
[info]   (min, avg, max) = (470.140, 482.354, 491.428), stdev = 9.058
[info]   CI (99.9%): [447.474, 517.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   496.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (496.000, 496.000, 496.000), stdev = 0.001
[info]   CI (99.9%): [496.000, 496.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   466.945 ±(99.9%) 704.782 MB/sec [Average]
[info]   (min, avg, max) = (333.031, 466.945, 667.444), stdev = 183.030
[info]   CI (99.9%): [≈ 0, 1171.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   481.085 ±(99.9%) 737.154 B/op [Average]
[info]   (min, avg, max) = (336.174, 481.085, 704.158), stdev = 191.437
[info]   CI (99.9%): [≈ 0, 1218.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.273 ±(99.9%) 1.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.273, 0.694), stdev = 0.374
[info]   CI (99.9%): [≈ 0, 1.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.69% complete, ETA 01:15:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 391405.586 ops/s
[info] # Warmup Iteration   2: 626886.929 ops/s
[info] # Warmup Iteration   3: 618382.511 ops/s
[info] Iteration   1: 624573.665 ops/s
[info]                  ·gc.alloc.rate:            530.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 847.708 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 620622.221 ops/s
[info]                  ·gc.alloc.rate:            526.744 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1706.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 628193.489 ops/s
[info]                  ·gc.alloc.rate:            533.231 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 842.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 620868.553 ops/s
[info]                  ·gc.alloc.rate:            526.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1705.551 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 622569.086 ops/s
[info]                  ·gc.alloc.rate:            528.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1700.840 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   623365.403 ±(99.9%) 12048.846 ops/s [Average]
[info]   (min, avg, max) = (620622.221, 623365.403, 628193.489), stdev = 3129.047
[info]   CI (99.9%): [611316.557, 635414.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   529.112 ±(99.9%) 10.243 MB/sec [Average]
[info]   (min, avg, max) = (526.744, 529.112, 533.231), stdev = 2.660
[info]   CI (99.9%): [518.869, 539.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.217 ±(99.9%) 709.590 MB/sec [Average]
[info]   (min, avg, max) = (336.308, 538.217, 672.942), stdev = 184.278
[info]   CI (99.9%): [≈ 0, 1247.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1360.632 ±(99.9%) 1811.611 B/op [Average]
[info]   (min, avg, max) = (842.825, 1360.632, 1706.235), stdev = 470.470
[info]   CI (99.9%): [≈ 0, 3172.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 8.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 11.94% complete, ETA 01:15:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1625352.360 ops/s
[info] # Warmup Iteration   2: 1608401.413 ops/s
[info] # Warmup Iteration   3: 1727891.049 ops/s
[info] Iteration   1: 1713088.515 ops/s
[info]                  ·gc.alloc.rate:            330.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 309.664 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1712790.726 ops/s
[info]                  ·gc.alloc.rate:            330.735 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 309.725 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1701570.306 ops/s
[info]                  ·gc.alloc.rate:            328.618 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 311.767 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1710004.815 ops/s
[info]                  ·gc.alloc.rate:            330.269 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 310.228 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1718871.769 ops/s
[info]                  ·gc.alloc.rate:            332.088 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 308.220 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1711265.226 ±(99.9%) 24284.343 ops/s [Average]
[info]   (min, avg, max) = (1701570.306, 1711265.226, 1718871.769), stdev = 6306.567
[info]   CI (99.9%): [1686980.883, 1735549.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   330.514 ±(99.9%) 4.833 MB/sec [Average]
[info]   (min, avg, max) = (328.618, 330.514, 332.088), stdev = 1.255
[info]   CI (99.9%): [325.682, 335.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.947 ±(99.9%) 0.548 MB/sec [Average]
[info]   (min, avg, max) = (336.697, 336.947, 337.035), stdev = 0.142
[info]   CI (99.9%): [336.399, 337.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   309.921 ±(99.9%) 4.908 B/op [Average]
[info]   (min, avg, max) = (308.220, 309.921, 311.767), stdev = 1.275
[info]   CI (99.9%): [305.013, 314.829] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 12.19% complete, ETA 01:15:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52178.127 ops/s
[info] # Warmup Iteration   2: 88744.917 ops/s
[info] # Warmup Iteration   3: 91915.097 ops/s
[info] Iteration   1: 94687.147 ops/s
[info]                  ·gc.alloc.rate:                                  3439.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56581.626 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 94145.030 ops/s
[info]                  ·gc.alloc.rate:                                  3420.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56905.516 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 94647.653 ops/s
[info]                  ·gc.alloc.rate:                                  3439.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56604.339 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 94047.864 ops/s
[info]                  ·gc.alloc.rate:                                  3416.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56965.409 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 92647.976 ops/s
[info]                  ·gc.alloc.rate:                                  3366.804 MB/sec
[info]                  ·gc.alloc.rate.norm:                             57176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3405.195 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57827.963 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   94035.134 ±(99.9%) 3185.082 ops/s [Average]
[info]   (min, avg, max) = (92647.976, 94035.134, 94687.147), stdev = 827.156
[info]   CI (99.9%): [90850.052, 97220.216] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3416.372 ±(99.9%) 114.222 MB/sec [Average]
[info]   (min, avg, max) = (3366.804, 3416.372, 3439.365), stdev = 29.663
[info]   CI (99.9%): [3302.150, 3530.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.005), stdev = 0.001
[info]   CI (99.9%): [57176.004, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.128 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.045, 0.088), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3404.270 ±(99.9%) 3.086 MB/sec [Average]
[info]   (min, avg, max) = (3403.382, 3404.270, 3405.195), stdev = 0.802
[info]   CI (99.9%): [3401.183, 3407.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   56976.970 ±(99.9%) 1948.839 B/op [Average]
[info]   (min, avg, max) = (56581.626, 56976.970, 57827.963), stdev = 506.107
[info]   CI (99.9%): [55028.131, 58925.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 12.44% complete, ETA 01:15:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 232258.855 ops/s
[info] # Warmup Iteration   2: 313862.620 ops/s
[info] # Warmup Iteration   3: 331102.978 ops/s
[info] Iteration   1: 329798.942 ops/s
[info]                  ·gc.alloc.rate:            814.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       3888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3217.154 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 325297.881 ops/s
[info]                  ·gc.alloc.rate:            803.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       3888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4892.508 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 323072.807 ops/s
[info]                  ·gc.alloc.rate:            798.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       3888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3284.091 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 327336.239 ops/s
[info]                  ·gc.alloc.rate:                   808.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4862.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.015 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 335165.511 ops/s
[info]                  ·gc.alloc.rate:                                  828.114 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3888.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.649 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3196.745 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   328134.276 ±(99.9%) 17907.548 ops/s [Average]
[info]   (min, avg, max) = (323072.807, 328134.276, 335165.511), stdev = 4650.533
[info]   CI (99.9%): [310226.728, 346041.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   810.602 ±(99.9%) 44.427 MB/sec [Average]
[info]   (min, avg, max) = (798.017, 810.602, 828.114), stdev = 11.538
[info]   CI (99.9%): [766.176, 855.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3888.001, 3888.001, 3888.001), stdev = 0.001
[info]   CI (99.9%): [3888.001, 3888.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.238 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.130 ±(99.9%) 1.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.130, 0.649), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 1.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.304 ±(99.9%) 706.596 MB/sec [Average]
[info]   (min, avg, max) = (673.982, 810.304, 1011.325), stdev = 183.501
[info]   CI (99.9%): [103.708, 1516.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3890.507 ±(99.9%) 3471.098 B/op [Average]
[info]   (min, avg, max) = (3196.745, 3890.507, 4892.508), stdev = 901.433
[info]   CI (99.9%): [419.409, 7361.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.203 ±(99.9%) 27.578 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.203, 16.015), stdev = 7.162
[info]   CI (99.9%): [≈ 0, 30.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 11.000), stdev = 3.564
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 12.69% complete, ETA 01:15:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82223.720 ops/s
[info] # Warmup Iteration   2: 1221133.903 ops/s
[info] # Warmup Iteration   3: 1112657.247 ops/s
[info] Iteration   1: 1110630.423 ops/s
[info]                  ·gc.alloc.rate:            513.681 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 472.916 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1099065.343 ops/s
[info]                  ·gc.alloc.rate:            508.293 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 955.767 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   3: 1160327.444 ops/s
[info]                  ·gc.alloc.rate:            536.646 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 905.360 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1119699.983 ops/s
[info]                  ·gc.alloc.rate:            517.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 469.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1191447.062 ops/s
[info]                  ·gc.alloc.rate:            551.131 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 881.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava":
[info]   1136234.051 ±(99.9%) 148379.784 ops/s [Average]
[info]   (min, avg, max) = (1099065.343, 1136234.051, 1191447.062), stdev = 38533.759
[info]   CI (99.9%): [987854.267, 1284613.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   525.543 ±(99.9%) 68.714 MB/sec [Average]
[info]   (min, avg, max) = (508.293, 525.543, 551.131), stdev = 17.845
[info]   CI (99.9%): [456.829, 594.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.930 ±(99.9%) 703.761 MB/sec [Average]
[info]   (min, avg, max) = (333.692, 533.930, 667.498), stdev = 182.764
[info]   CI (99.9%): [≈ 0, 1237.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   736.968 ±(99.9%) 940.582 B/op [Average]
[info]   (min, avg, max) = (469.087, 736.968, 955.767), stdev = 244.266
[info]   CI (99.9%): [≈ 0, 1677.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 15.000), stdev = 4.147
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 12.94% complete, ETA 01:14:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 664078.125 ops/s
[info] # Warmup Iteration   2: 1019208.694 ops/s
[info] # Warmup Iteration   3: 1025979.892 ops/s
[info] Iteration   1: 1010270.594 ops/s
[info]                  ·gc.alloc.rate:            713.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1048.098 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1017441.437 ops/s
[info]                  ·gc.alloc.rate:                   718.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.321 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1560.090 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.030 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 1019073.726 ops/s
[info]                  ·gc.alloc.rate:            720.110 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1039.069 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1016924.295 ops/s
[info]                  ·gc.alloc.rate:            718.441 MB/sec
[info]                  ·gc.alloc.rate.norm:       1112.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1041.272 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 976768.792 ops/s
[info]                  ·gc.alloc.rate:                                  690.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1112.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.090 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1090.496 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.440 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1008095.769 ±(99.9%) 68664.369 ops/s [Average]
[info]   (min, avg, max) = (976768.792, 1008095.769, 1019073.726), stdev = 17831.919
[info]   CI (99.9%): [939431.400, 1076760.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   712.217 ±(99.9%) 48.654 MB/sec [Average]
[info]   (min, avg, max) = (690.016, 712.217, 720.110), stdev = 12.635
[info]   CI (99.9%): [663.563, 760.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.090), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.029 ±(99.9%) 0.249 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.144), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.681 ±(99.9%) 576.151 MB/sec [Average]
[info]   (min, avg, max) = (672.745, 740.681, 1008.321), stdev = 149.625
[info]   CI (99.9%): [164.530, 1316.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1155.805 ±(99.9%) 873.972 B/op [Average]
[info]   (min, avg, max) = (1039.069, 1155.805, 1560.090), stdev = 226.968
[info]   CI (99.9%): [281.833, 2029.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.494 ±(99.9%) 10.784 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.494, 6.440), stdev = 2.801
[info]   CI (99.9%): [≈ 0, 12.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 12.000), stdev = 2.510
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 13.18% complete, ETA 01:14:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1892822.290 ops/s
[info] # Warmup Iteration   2: 2108200.506 ops/s
[info] # Warmup Iteration   3: 2119421.153 ops/s
[info] Iteration   1: 2127230.777 ops/s
[info]                  ·gc.alloc.rate:                   984.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        746.669 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.493 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 2121218.499 ops/s
[info]                  ·gc.alloc.rate:            980.939 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 750.266 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2088264.063 ops/s
[info]                  ·gc.alloc.rate:                                  965.731 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.064 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       763.639 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.012 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 2133177.281 ops/s
[info]                  ·gc.alloc.rate:                                  986.759 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       753.445 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2133297.862 ops/s
[info]                  ·gc.alloc.rate:            986.689 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 753.399 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2120637.696 ±(99.9%) 72279.857 ops/s [Average]
[info]   (min, avg, max) = (2088264.063, 2120637.696, 2133297.862), stdev = 18770.849
[info]   CI (99.9%): [2048357.839, 2192917.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   980.839 ±(99.9%) 33.791 MB/sec [Average]
[info]   (min, avg, max) = (965.731, 980.839, 986.759), stdev = 8.775
[info]   CI (99.9%): [947.048, 1014.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.110 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.064), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.083 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.048), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1015.125 ±(99.9%) 21.878 MB/sec [Average]
[info]   (min, avg, max) = (1009.314, 1015.125, 1021.249), stdev = 5.682
[info]   CI (99.9%): [993.247, 1037.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   753.484 ±(99.9%) 24.348 B/op [Average]
[info]   (min, avg, max) = (746.669, 753.484, 763.639), stdev = 6.323
[info]   CI (99.9%): [729.135, 777.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.701 ±(99.9%) 5.043 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.701, 3.012), stdev = 1.310
[info]   CI (99.9%): [≈ 0, 5.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.647
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 13.43% complete, ETA 01:14:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1870498.545 ops/s
[info] # Warmup Iteration   2: 2030667.361 ops/s
[info] # Warmup Iteration   3: 2040008.297 ops/s
[info] Iteration   1: 2036944.544 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2046458.188 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2044662.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2046898.606 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2046002.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2044193.290 ±(99.9%) 15933.289 ops/s [Average]
[info]   (min, avg, max) = (2036944.544, 2044193.290, 2046898.606), stdev = 4137.825
[info]   CI (99.9%): [2028260.000, 2060126.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 13.68% complete, ETA 01:14:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316454.282 ops/s
[info] # Warmup Iteration   2: 429695.497 ops/s
[info] # Warmup Iteration   3: 423032.743 ops/s
[info] Iteration   1: 420988.094 ops/s
[info]                  ·gc.alloc.rate:            492.124 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1257.641 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 420684.609 ops/s
[info]                  ·gc.alloc.rate:            491.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2517.147 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 441221.004 ops/s
[info]                  ·gc.alloc.rate:            515.817 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.388 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1199.948 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 440754.535 ops/s
[info]                  ·gc.alloc.rate:            515.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2402.448 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 438667.846 ops/s
[info]                  ·gc.alloc.rate:            512.771 MB/sec
[info]                  ·gc.alloc.rate.norm:       1840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1206.966 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   432463.217 ±(99.9%) 41039.459 ops/s [Average]
[info]   (min, avg, max) = (420684.609, 432463.217, 441221.004), stdev = 10657.817
[info]   CI (99.9%): [391423.759, 473502.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   505.539 ±(99.9%) 48.116 MB/sec [Average]
[info]   (min, avg, max) = (491.696, 505.539, 515.817), stdev = 12.495
[info]   CI (99.9%): [457.423, 553.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1840.001, 1840.001, 1840.001), stdev = 0.001
[info]   CI (99.9%): [1840.001, 1840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   470.911 ±(99.9%) 709.394 MB/sec [Average]
[info]   (min, avg, max) = (336.357, 470.911, 672.798), stdev = 184.227
[info]   CI (99.9%): [≈ 0, 1180.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1716.830 ±(99.9%) 2617.704 B/op [Average]
[info]   (min, avg, max) = (1199.948, 1716.830, 2517.147), stdev = 679.809
[info]   CI (99.9%): [≈ 0, 4334.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.949
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 13.93% complete, ETA 01:14:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138773.375 ops/s
[info] # Warmup Iteration   2: 170024.853 ops/s
[info] # Warmup Iteration   3: 173954.289 ops/s
[info] Iteration   1: 173521.039 ops/s
[info]                  ·gc.alloc.rate:                                  2086.085 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.675 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.541 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18525.074 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 171439.711 ops/s
[info]                  ·gc.alloc.rate:                                  2060.393 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18750.016 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 176524.906 ops/s
[info]                  ·gc.alloc.rate:                                  2121.745 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18209.456 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 176319.125 ops/s
[info]                  ·gc.alloc.rate:                                  2119.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18920.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.121 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21269.302 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 176076.606 ops/s
[info]                  ·gc.alloc.rate:            2116.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       18920.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2042.140 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18255.779 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   174776.278 ±(99.9%) 8575.193 ops/s [Average]
[info]   (min, avg, max) = (171439.711, 174776.278, 176524.906), stdev = 2226.950
[info]   CI (99.9%): [166201.084, 183351.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2100.837 ±(99.9%) 103.378 MB/sec [Average]
[info]   (min, avg, max) = (2060.393, 2100.837, 2121.745), stdev = 26.847
[info]   CI (99.9%): [1997.459, 2204.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.002, 18920.002, 18920.002), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.123 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.074), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.163 ±(99.9%) 1.118 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.163, 0.675), stdev = 0.290
[info]   CI (99.9%): [≈ 0, 1.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2110.265 ±(99.9%) 586.436 MB/sec [Average]
[info]   (min, avg, max) = (2041.881, 2110.265, 2382.699), stdev = 152.296
[info]   CI (99.9%): [1523.829, 2696.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19001.925 ±(99.9%) 4952.452 B/op [Average]
[info]   (min, avg, max) = (18209.456, 19001.925, 21269.302), stdev = 1286.136
[info]   CI (99.9%): [14049.473, 23954.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.18% complete, ETA 01:13:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 240259.791 ops/s
[info] # Warmup Iteration   2: 386256.223 ops/s
[info] # Warmup Iteration   3: 386527.922 ops/s
[info] Iteration   1: 366141.559 ops/s
[info]                  ·gc.alloc.rate:            310.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1445.980 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 366012.813 ops/s
[info]                  ·gc.alloc.rate:            310.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1446.525 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 365449.081 ops/s
[info]                  ·gc.alloc.rate:            310.183 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1448.749 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 366771.469 ops/s
[info]                  ·gc.alloc.rate:            311.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.332 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1443.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 367459.853 ops/s
[info]                  ·gc.alloc.rate:            311.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       1336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1440.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   366366.955 ±(99.9%) 2968.225 ops/s [Average]
[info]   (min, avg, max) = (365449.081, 366366.955, 367459.853), stdev = 770.839
[info]   CI (99.9%): [363398.730, 369335.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   310.994 ±(99.9%) 2.556 MB/sec [Average]
[info]   (min, avg, max) = (310.183, 310.994, 311.958), stdev = 0.664
[info]   CI (99.9%): [308.439, 313.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1336.001, 1336.001, 1336.001), stdev = 0.001
[info]   CI (99.9%): [1336.001, 1336.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.395 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (336.332, 336.395, 336.479), stdev = 0.061
[info]   CI (99.9%): [336.161, 336.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1445.124 ±(99.9%) 11.676 B/op [Average]
[info]   (min, avg, max) = (1440.834, 1445.124, 1448.749), stdev = 3.032
[info]   CI (99.9%): [1433.448, 1456.800] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 14.43% complete, ETA 01:13:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 985110.931 ops/s
[info] # Warmup Iteration   2: 1009470.426 ops/s
[info] # Warmup Iteration   3: 1056172.875 ops/s
[info] Iteration   1: 1055035.292 ops/s
[info]                  ·gc.alloc.rate:                   203.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        499.830 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.981 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1052896.545 ops/s
[info]                  ·gc.alloc.rate:            203.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 503.860 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1056822.611 ops/s
[info]                  ·gc.alloc.rate:      204.105 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1053580.782 ops/s
[info]                  ·gc.alloc.rate:            203.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       304.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 503.510 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1058162.693 ops/s
[info]                  ·gc.alloc.rate:      204.353 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1055299.585 ±(99.9%) 8461.727 ops/s [Average]
[info]   (min, avg, max) = (1052896.545, 1055299.585, 1058162.693), stdev = 2197.484
[info]   CI (99.9%): [1046837.857, 1063761.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   203.822 ±(99.9%) 1.594 MB/sec [Average]
[info]   (min, avg, max) = (203.362, 203.822, 204.353), stdev = 0.414
[info]   CI (99.9%): [202.227, 205.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.835 ±(99.9%) 709.485 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.835, 337.058), stdev = 184.251
[info]   CI (99.9%): [≈ 0, 911.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   301.440 ±(99.9%) 1059.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 301.440, 503.860), stdev = 275.180
[info]   CI (99.9%): [≈ 0, 1361.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.596 ±(99.9%) 5.134 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.596, 2.981), stdev = 1.333
[info]   CI (99.9%): [≈ 0, 5.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 14.68% complete, ETA 01:13:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41931.108 ops/s
[info] # Warmup Iteration   2: 76457.462 ops/s
[info] # Warmup Iteration   3: 78408.320 ops/s
[info] Iteration   1: 80214.973 ops/s
[info]                  ·gc.alloc.rate:                                  3416.899 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.536 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66785.783 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 79340.936 ops/s
[info]                  ·gc.alloc.rate:                                  3379.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.267 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.414 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67524.742 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 77176.124 ops/s
[info]                  ·gc.alloc.rate:                                  3287.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.241 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.554 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69418.728 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 77535.286 ops/s
[info]                  ·gc.alloc.rate:                                  3302.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.183 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69097.353 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 79332.467 ops/s
[info]                  ·gc.alloc.rate:                                  3379.805 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67048.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.306 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67529.849 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   78719.957 ±(99.9%) 5014.243 ops/s [Average]
[info]   (min, avg, max) = (77176.124, 78719.957, 80214.973), stdev = 1302.183
[info]   CI (99.9%): [73705.714, 83734.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3353.160 ±(99.9%) 214.161 MB/sec [Average]
[info]   (min, avg, max) = (3287.319, 3353.160, 3416.899), stdev = 55.617
[info]   CI (99.9%): [3138.999, 3567.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67048.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67048.005, 67048.005, 67048.006), stdev = 0.001
[info]   CI (99.9%): [67048.004, 67048.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.011, 0.015), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.222 ±(99.9%) 0.293 B/op [Average]
[info]   (min, avg, max) = (0.112, 0.222, 0.306), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3403.586 ±(99.9%) 1.150 MB/sec [Average]
[info]   (min, avg, max) = (3403.330, 3403.586, 3404.094), stdev = 0.299
[info]   CI (99.9%): [3402.436, 3404.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   68071.291 ±(99.9%) 4353.441 B/op [Average]
[info]   (min, avg, max) = (66785.783, 68071.291, 69418.728), stdev = 1130.575
[info]   CI (99.9%): [63717.850, 72424.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 11.000), stdev = 1.140
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 14.93% complete, ETA 01:13:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229832.268 ops/s
[info] # Warmup Iteration   2: 305884.423 ops/s
[info] # Warmup Iteration   3: 307852.546 ops/s
[info] Iteration   1: 304521.880 ops/s
[info]                  ·gc.alloc.rate:                                  1513.402 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8727.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.215 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 311312.882 ops/s
[info]                  ·gc.alloc.rate:                                  1547.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6883.748 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 301772.216 ops/s
[info]                  ·gc.alloc.rate:                                  1500.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.946 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8876.757 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 304999.542 ops/s
[info]                  ·gc.alloc.rate:                                  1516.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7026.072 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 311019.769 ops/s
[info]                  ·gc.alloc.rate:                                  1546.436 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7824.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8612.624 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   306725.258 ±(99.9%) 16320.408 ops/s [Average]
[info]   (min, avg, max) = (301772.216, 306725.258, 311312.882), stdev = 4238.358
[info]   CI (99.9%): [290404.850, 323045.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1524.680 ±(99.9%) 81.534 MB/sec [Average]
[info]   (min, avg, max) = (1500.101, 1524.680, 1547.372), stdev = 21.174
[info]   CI (99.9%): [1443.146, 1606.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7824.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7824.001, 7824.001, 7824.001), stdev = 0.001
[info]   CI (99.9%): [7824.001, 7824.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.022, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.112 ±(99.9%) 0.529 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.112, 0.312), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.076 ±(99.9%) 709.103 MB/sec [Average]
[info]   (min, avg, max) = (1361.415, 1563.076, 1702.309), stdev = 184.152
[info]   CI (99.9%): [853.973, 2272.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8025.413 ±(99.9%) 3785.164 B/op [Average]
[info]   (min, avg, max) = (6883.748, 8025.413, 8876.757), stdev = 982.995
[info]   CI (99.9%): [4240.248, 11810.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.443 ±(99.9%) 29.645 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.443, 17.215), stdev = 7.699
[info]   CI (99.9%): [≈ 0, 33.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 15.000), stdev = 5.050
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.17% complete, ETA 01:13:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 966946.957 ops/s
[info] # Warmup Iteration   2: 1526165.635 ops/s
[info] # Warmup Iteration   3: 1487337.373 ops/s
[info] Iteration   1: 1509354.419 ops/s
[info]                  ·gc.alloc.rate:            774.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 701.540 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1501206.799 ops/s
[info]                  ·gc.alloc.rate:            770.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 705.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1494481.814 ops/s
[info]                  ·gc.alloc.rate:                   767.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1061.401 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 1483153.835 ops/s
[info]                  ·gc.alloc.rate:                   761.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              808.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        713.960 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.241 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1430264.772 ops/s
[info]                  ·gc.alloc.rate:                                  734.221 MB/sec
[info]                  ·gc.alloc.rate.norm:                             808.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.074 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       749.181 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala":
[info]   1483692.328 ±(99.9%) 120797.748 ops/s [Average]
[info]   (min, avg, max) = (1430264.772, 1483692.328, 1509354.419), stdev = 31370.792
[info]   CI (99.9%): [1362894.579, 1604490.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   761.666 ±(99.9%) 62.036 MB/sec [Average]
[info]   (min, avg, max) = (734.221, 761.666, 774.701), stdev = 16.111
[info]   CI (99.9%): [699.629, 823.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   808.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (808.000, 808.000, 808.000), stdev = 0.001
[info]   CI (99.9%): [808.000, 808.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.016 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   741.381 ±(99.9%) 573.803 MB/sec [Average]
[info]   (min, avg, max) = (672.628, 741.381, 1007.874), stdev = 149.015
[info]   CI (99.9%): [167.578, 1315.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   786.289 ±(99.9%) 596.623 B/op [Average]
[info]   (min, avg, max) = (701.540, 786.289, 1061.401), stdev = 154.941
[info]   CI (99.9%): [189.666, 1382.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.989 ±(99.9%) 7.099 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.989, 4.241), stdev = 1.844
[info]   CI (99.9%): [≈ 0, 8.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 3.633
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 15.42% complete, ETA 01:12:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1723109.846 ops/s
[info] # Warmup Iteration   2: 1967992.875 ops/s
[info] # Warmup Iteration   3: 1963648.597 ops/s
[info] Iteration   1: 1963316.482 ops/s
[info]                  ·gc.alloc.rate:            528.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.814 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 539.327 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1971348.468 ops/s
[info]                  ·gc.alloc.rate:            530.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 268.572 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1960263.687 ops/s
[info]                  ·gc.alloc.rate:            527.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.617 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 540.182 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2007588.986 ops/s
[info]                  ·gc.alloc.rate:            540.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 263.723 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1956976.066 ops/s
[info]                  ·gc.alloc.rate:            527.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 541.089 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1971898.738 ±(99.9%) 79518.647 ops/s [Average]
[info]   (min, avg, max) = (1956976.066, 1971898.738, 2007588.986), stdev = 20650.740
[info]   CI (99.9%): [1892380.091, 2051417.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   531.200 ±(99.9%) 21.548 MB/sec [Average]
[info]   (min, avg, max) = (527.275, 531.200, 540.902), stdev = 5.596
[info]   CI (99.9%): [509.652, 552.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.210 ±(99.9%) 709.502 MB/sec [Average]
[info]   (min, avg, max) = (336.303, 538.210, 672.883), stdev = 184.255
[info]   CI (99.9%): [≈ 0, 1247.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   430.579 ±(99.9%) 578.042 B/op [Average]
[info]   (min, avg, max) = (263.723, 430.579, 541.089), stdev = 150.116
[info]   CI (99.9%): [≈ 0, 1008.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 6.000), stdev = 1.414
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 15.67% complete, ETA 01:12:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1926586.368 ops/s
[info] # Warmup Iteration   2: 2070226.025 ops/s
[info] # Warmup Iteration   3: 2075390.644 ops/s
[info] Iteration   1: 2074567.141 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2074953.263 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2071724.180 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2072121.436 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2070432.893 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   2072759.783 ±(99.9%) 7449.845 ops/s [Average]
[info]   (min, avg, max) = (2070432.893, 2072759.783, 2074953.263), stdev = 1934.701
[info]   CI (99.9%): [2065309.938, 2080209.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 15.92% complete, ETA 01:12:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26763.516 ops/s
[info] # Warmup Iteration   2: 40626.225 ops/s
[info] # Warmup Iteration   3: 39212.443 ops/s
[info] Iteration   1: 40449.629 ops/s
[info]                  ·gc.alloc.rate:                                  1704.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66321.582 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.190 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.404 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65754.686 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                155.510 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 40997.863 ops/s
[info]                  ·gc.alloc.rate:                                  1727.152 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.055 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65336.219 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 41362.450 ops/s
[info]                  ·gc.alloc.rate:                                  1742.606 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.650 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64761.335 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 41365.905 ops/s
[info]                  ·gc.alloc.rate:            1743.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       66320.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64756.639 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 41326.079 ops/s
[info]                  ·gc.alloc.rate:                                  1741.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66320.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77783.171 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   41100.385 ±(99.9%) 1521.018 ops/s [Average]
[info]   (min, avg, max) = (40449.629, 41100.385, 41365.905), stdev = 395.004
[info]   CI (99.9%): [39579.367, 42621.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1731.828 ±(99.9%) 64.625 MB/sec [Average]
[info]   (min, avg, max) = (1704.306, 1731.828, 1743.491), stdev = 16.783
[info]   CI (99.9%): [1667.203, 1796.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66320.324 ±(99.9%) 2.706 B/op [Average]
[info]   (min, avg, max) = (66320.010, 66320.324, 66321.582), stdev = 0.703
[info]   CI (99.9%): [66317.618, 66323.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.326 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.190), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.503 ±(99.9%) 12.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.503, 7.404), stdev = 3.299
[info]   CI (99.9%): [≈ 0, 14.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.584 ±(99.9%) 592.358 MB/sec [Average]
[info]   (min, avg, max) = (1689.739, 1767.584, 2042.609), stdev = 153.834
[info]   CI (99.9%): [1175.226, 2359.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67678.410 ±(99.9%) 21811.343 B/op [Average]
[info]   (min, avg, max) = (64756.639, 67678.410, 77783.171), stdev = 5664.337
[info]   CI (99.9%): [45867.067, 89489.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.102 ±(99.9%) 267.797 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.102, 155.510), stdev = 69.546
[info]   CI (99.9%): [≈ 0, 298.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 14.000), stdev = 4.087
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 16.17% complete, ETA 01:12:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 187798.275 ops/s
[info] # Warmup Iteration   2: 226664.795 ops/s
[info] # Warmup Iteration   3: 236164.502 ops/s
[info] Iteration   1: 238949.526 ops/s
[info]                  ·gc.alloc.rate:                                  2459.006 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17936.451 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 232861.070 ops/s
[info]                  ·gc.alloc.rate:            2396.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       16200.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16105.132 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 236317.326 ops/s
[info]                  ·gc.alloc.rate:                                  2432.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.613 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15869.836 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 235522.082 ops/s
[info]                  ·gc.alloc.rate:                                  2423.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.569 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15923.195 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 234829.375 ops/s
[info]                  ·gc.alloc.rate:                                  2416.880 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16200.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.583 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15970.111 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce":
[info]   235695.876 ±(99.9%) 8564.890 ops/s [Average]
[info]   (min, avg, max) = (232861.070, 235695.876, 238949.526), stdev = 2224.275
[info]   CI (99.9%): [227130.986, 244260.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2425.675 ±(99.9%) 88.133 MB/sec [Average]
[info]   (min, avg, max) = (2396.317, 2425.675, 2459.006), stdev = 22.888
[info]   CI (99.9%): [2337.542, 2513.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   16200.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16200.002, 16200.002, 16200.002), stdev = 0.001
[info]   CI (99.9%): [16200.002, 16200.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.048 ±(99.9%) 0.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.048, 0.122), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2450.526 ±(99.9%) 585.622 MB/sec [Average]
[info]   (min, avg, max) = (2382.284, 2450.526, 2722.583), stdev = 152.084
[info]   CI (99.9%): [1864.904, 3036.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   16360.945 ±(99.9%) 3407.996 B/op [Average]
[info]   (min, avg, max) = (15869.836, 16360.945, 17936.451), stdev = 885.046
[info]   CI (99.9%): [12952.949, 19768.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.42% complete, ETA 01:11:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 201963.695 ops/s
[info] # Warmup Iteration   2: 313462.993 ops/s
[info] # Warmup Iteration   3: 305770.072 ops/s
[info] Iteration   1: 299136.141 ops/s
[info]                  ·gc.alloc.rate:                                  1447.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.436 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8867.109 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.534 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        19.000 ms
[info] Iteration   2: 305882.808 ops/s
[info]                  ·gc.alloc.rate:                                  1479.962 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.313 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.420 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7005.976 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 317233.210 ops/s
[info]                  ·gc.alloc.rate:                                  1534.879 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8444.184 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 318473.333 ops/s
[info]                  ·gc.alloc.rate:                                  1540.980 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6729.048 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 320722.834 ops/s
[info]                  ·gc.alloc.rate:                                  1552.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7616.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8352.309 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala":
[info]   312289.665 ±(99.9%) 35909.074 ops/s [Average]
[info]   (min, avg, max) = (299136.141, 312289.665, 320722.834), stdev = 9325.472
[info]   CI (99.9%): [276380.592, 348198.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1511.045 ±(99.9%) 174.133 MB/sec [Average]
[info]   (min, avg, max) = (1447.297, 1511.045, 1552.105), stdev = 45.222
[info]   CI (99.9%): [1336.912, 1685.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   7616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7616.001, 7616.001, 7616.001), stdev = 0.001
[info]   CI (99.9%): [7616.001, 7616.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.151 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.030, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.155 ±(99.9%) 0.790 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.155, 0.436), stdev = 0.205
[info]   CI (99.9%): [≈ 0, 0.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1562.387 ±(99.9%) 706.755 MB/sec [Average]
[info]   (min, avg, max) = (1361.420, 1562.387, 1702.161), stdev = 183.542
[info]   CI (99.9%): [855.632, 2269.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7879.725 ±(99.9%) 3655.259 B/op [Average]
[info]   (min, avg, max) = (6729.048, 7879.725, 8867.109), stdev = 949.259
[info]   CI (99.9%): [4224.467, 11534.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.907 ±(99.9%) 42.248 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.907, 24.534), stdev = 10.972
[info]   CI (99.9%): [≈ 0, 47.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 19.000), stdev = 6.708
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 16.67% complete, ETA 01:11:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1224305.984 ops/s
[info] # Warmup Iteration   2: 1287921.371 ops/s
[info] # Warmup Iteration   3: 1255050.615 ops/s
[info] Iteration   1: 1249563.206 ops/s
[info]                  ·gc.alloc.rate:            431.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 849.076 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 1281894.014 ops/s
[info]                  ·gc.alloc.rate:            442.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.969 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 413.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1318306.175 ops/s
[info]                  ·gc.alloc.rate:            455.596 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.014 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 402.408 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1317696.130 ops/s
[info]                  ·gc.alloc.rate:            455.408 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 805.190 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1291710.037 ops/s
[info]                  ·gc.alloc.rate:            446.399 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 410.694 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala":
[info]   1291833.912 ±(99.9%) 109849.102 ops/s [Average]
[info]   (min, avg, max) = (1249563.206, 1291833.912, 1318306.175), stdev = 28527.463
[info]   CI (99.9%): [1181984.811, 1401683.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   446.438 ±(99.9%) 37.998 MB/sec [Average]
[info]   (min, avg, max) = (431.845, 446.438, 455.596), stdev = 9.868
[info]   CI (99.9%): [408.440, 484.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.816 ±(99.9%) 710.856 MB/sec [Average]
[info]   (min, avg, max) = (336.969, 471.816, 674.061), stdev = 184.607
[info]   CI (99.9%): [≈ 0, 1182.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   576.244 ±(99.9%) 884.079 B/op [Average]
[info]   (min, avg, max) = (402.408, 576.244, 849.076), stdev = 229.593
[info]   CI (99.9%): [≈ 0, 1460.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 6.000), stdev = 1.643
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 16.92% complete, ETA 01:11:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30924.267 ops/s
[info] # Warmup Iteration   2: 70353.125 ops/s
[info] # Warmup Iteration   3: 71815.422 ops/s
[info] Iteration   1: 74390.900 ops/s
[info]                  ·gc.alloc.rate:                                  3125.861 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64816.347 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 73415.254 ops/s
[info]                  ·gc.alloc.rate:                                  3084.890 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65677.022 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 74242.208 ops/s
[info]                  ·gc.alloc.rate:                                  3119.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72161.709 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 74745.240 ops/s
[info]                  ·gc.alloc.rate:                                  3140.684 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.248 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64506.822 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 74443.874 ops/s
[info]                  ·gc.alloc.rate:                                  3128.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66144.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.163 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64768.468 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson":
[info]   74247.495 ±(99.9%) 1924.872 ops/s [Average]
[info]   (min, avg, max) = (73415.254, 74247.495, 74745.240), stdev = 499.883
[info]   CI (99.9%): [72322.623, 76172.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3119.891 ±(99.9%) 80.887 MB/sec [Average]
[info]   (min, avg, max) = (3084.890, 3119.891, 3140.684), stdev = 21.006
[info]   CI (99.9%): [3039.004, 3200.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66144.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66144.005, 66144.006, 66144.006), stdev = 0.001
[info]   CI (99.9%): [66144.005, 66144.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.018 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.007, 0.012), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.145 ±(99.9%) 0.387 B/op [Average]
[info]   (min, avg, max) = (0.028, 0.145, 0.248), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3131.192 ±(99.9%) 586.107 MB/sec [Average]
[info]   (min, avg, max) = (3062.947, 3131.192, 3403.474), stdev = 152.210
[info]   CI (99.9%): [2545.085, 3717.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66386.074 ±(99.9%) 12547.575 B/op [Average]
[info]   (min, avg, max) = (64506.822, 66386.074, 72161.709), stdev = 3258.565
[info]   CI (99.9%): [53838.499, 78933.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.count":
[info]   46.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 17.16% complete, ETA 01:11:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161528.539 ops/s
[info] # Warmup Iteration   2: 213655.802 ops/s
[info] # Warmup Iteration   3: 215681.363 ops/s
[info] Iteration   1: 209518.374 ops/s
[info]                  ·gc.alloc.rate:                                  1917.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.597 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12785.071 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 206819.369 ops/s
[info]                  ·gc.alloc.rate:                                  1893.908 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15542.194 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 211425.834 ops/s
[info]                  ·gc.alloc.rate:                                  1935.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15203.509 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 214597.168 ops/s
[info]                  ·gc.alloc.rate:                                  1964.932 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12482.350 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 213014.866 ops/s
[info]                  ·gc.alloc.rate:                                  1950.042 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14408.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15090.115 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce":
[info]   211075.122 ±(99.9%) 11683.597 ops/s [Average]
[info]   (min, avg, max) = (206819.369, 211075.122, 214597.168), stdev = 3034.193
[info]   CI (99.9%): [199391.526, 222758.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1932.369 ±(99.9%) 106.808 MB/sec [Average]
[info]   (min, avg, max) = (1893.908, 1932.369, 1964.932), stdev = 27.738
[info]   CI (99.9%): [1825.561, 2039.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   14408.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14408.002, 14408.002, 14408.002), stdev = 0.001
[info]   CI (99.9%): [14408.002, 14408.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.138 ±(99.9%) 0.989 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.138, 0.597), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1906.297 ±(99.9%) 718.219 MB/sec [Average]
[info]   (min, avg, max) = (1701.636, 1906.297, 2042.996), stdev = 186.519
[info]   CI (99.9%): [1188.078, 2624.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   14220.648 ±(99.9%) 5630.056 B/op [Average]
[info]   (min, avg, max) = (12482.350, 14220.648, 15542.194), stdev = 1462.108
[info]   CI (99.9%): [8590.592, 19850.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.41% complete, ETA 01:11:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 716109.305 ops/s
[info] # Warmup Iteration   2: 1150810.925 ops/s
[info] # Warmup Iteration   3: 1158219.111 ops/s
[info] Iteration   1: 1151323.376 ops/s
[info]                  ·gc.alloc.rate:            672.884 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 919.763 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1154342.575 ops/s
[info]                  ·gc.alloc.rate:                   674.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.300 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        916.447 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.908 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 1155752.496 ops/s
[info]                  ·gc.alloc.rate:            675.510 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 916.239 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1155889.009 ops/s
[info]                  ·gc.alloc.rate:            675.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 916.129 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1152501.428 ops/s
[info]                  ·gc.alloc.rate:                   673.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        918.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.458 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala":
[info]   1153961.777 ±(99.9%) 7739.622 ops/s [Average]
[info]   (min, avg, max) = (1151323.376, 1153961.777, 1155889.009), stdev = 2009.955
[info]   CI (99.9%): [1146222.154, 1161701.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   674.535 ±(99.9%) 4.768 MB/sec [Average]
[info]   (min, avg, max) = (672.884, 674.535, 675.752), stdev = 1.238
[info]   CI (99.9%): [669.767, 679.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.683 ±(99.9%) 0.875 MB/sec [Average]
[info]   (min, avg, max) = (672.300, 672.683, 672.909), stdev = 0.227
[info]   CI (99.9%): [671.808, 673.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   917.477 ±(99.9%) 6.500 B/op [Average]
[info]   (min, avg, max) = (916.129, 917.477, 919.763), stdev = 1.688
[info]   CI (99.9%): [910.976, 923.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.273 ±(99.9%) 9.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.273, 5.458), stdev = 2.372
[info]   CI (99.9%): [≈ 0, 10.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 10.000), stdev = 0.894
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 17.66% complete, ETA 01:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2596207.182 ops/s
[info] # Warmup Iteration   2: 2837448.977 ops/s
[info] # Warmup Iteration   3: 2832656.911 ops/s
[info] Iteration   1: 2845321.927 ops/s
[info]                  ·gc.alloc.rate:            968.846 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 558.217 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2853515.325 ops/s
[info]                  ·gc.alloc.rate:            971.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.627 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 2921675.695 ops/s
[info]                  ·gc.alloc.rate:                                  995.059 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       546.180 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.153 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 2919558.886 ops/s
[info]                  ·gc.alloc.rate:                                  994.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             536.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       550.530 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2848995.984 ops/s
[info]                  ·gc.alloc.rate:            970.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      681.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 376.110 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala":
[info]   2877813.563 ±(99.9%) 150903.025 ops/s [Average]
[info]   (min, avg, max) = (2845321.927, 2877813.563, 2921675.695), stdev = 39189.036
[info]   CI (99.9%): [2726910.538, 3028716.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   980.080 ±(99.9%) 51.685 MB/sec [Average]
[info]   (min, avg, max) = (968.846, 980.080, 995.059), stdev = 13.423
[info]   CI (99.9%): [928.394, 1031.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.080), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.014 ±(99.9%) 0.077 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.043), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.856 ±(99.9%) 572.525 MB/sec [Average]
[info]   (min, avg, max) = (681.040, 946.856, 1021.387), stdev = 148.683
[info]   CI (99.9%): [374.331, 1519.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   517.533 ±(99.9%) 304.989 B/op [Average]
[info]   (min, avg, max) = (376.110, 517.533, 558.217), stdev = 79.205
[info]   CI (99.9%): [212.544, 822.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.431 ±(99.9%) 3.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.431, 2.153), stdev = 0.963
[info]   CI (99.9%): [≈ 0, 4.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 4.037
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 17.91% complete, ETA 01:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2293874.011 ops/s
[info] # Warmup Iteration   2: 2437988.859 ops/s
[info] # Warmup Iteration   3: 2412746.324 ops/s
[info] Iteration   1: 2445358.026 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2446176.967 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2440034.641 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2446169.101 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2444427.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2444433.231 ±(99.9%) 9865.605 ops/s [Average]
[info]   (min, avg, max) = (2440034.641, 2444433.231, 2446176.967), stdev = 2562.066
[info]   CI (99.9%): [2434567.626, 2454298.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 18.16% complete, ETA 01:10:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 168691.368 ops/s
[info] # Warmup Iteration   2: 299255.059 ops/s
[info] # Warmup Iteration   3: 299416.430 ops/s
[info] Iteration   1: 304105.290 ops/s
[info]                  ·gc.alloc.rate:                                  2486.133 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14093.541 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 306335.506 ops/s
[info]                  ·gc.alloc.rate:                                  2503.345 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12242.251 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 304580.730 ops/s
[info]                  ·gc.alloc.rate:                                  2489.881 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.089 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12312.256 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 308396.048 ops/s
[info]                  ·gc.alloc.rate:                                  2521.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13897.384 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 303532.693 ops/s
[info]                  ·gc.alloc.rate:                                  2480.547 MB/sec
[info]                  ·gc.alloc.rate.norm:                             12864.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12355.206 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson":
[info]   305390.053 ±(99.9%) 7625.173 ops/s [Average]
[info]   (min, avg, max) = (303532.693, 305390.053, 308396.048), stdev = 1980.233
[info]   CI (99.9%): [297764.880, 313015.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2496.202 ±(99.9%) 62.611 MB/sec [Average]
[info]   (min, avg, max) = (2480.547, 2496.202, 2521.104), stdev = 16.260
[info]   CI (99.9%): [2433.591, 2558.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   12864.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12864.001, 12864.001, 12864.001), stdev = 0.001
[info]   CI (99.9%): [12864.001, 12864.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.006, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.033 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.020, 0.033, 0.056), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   2519.052 ±(99.9%) 719.339 MB/sec [Average]
[info]   (min, avg, max) = (2382.352, 2519.052, 2723.757), stdev = 186.810
[info]   CI (99.9%): [1799.713, 3238.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   12980.128 ±(99.9%) 3582.388 B/op [Average]
[info]   (min, avg, max) = (12242.251, 12980.128, 14093.541), stdev = 930.335
[info]   CI (99.9%): [9397.740, 16562.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfCharsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 18.41% complete, ETA 01:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18837.829 ops/s
[info] # Warmup Iteration   2: 25665.714 ops/s
[info] # Warmup Iteration   3: 25471.474 ops/s
[info] Iteration   1: 25571.065 ops/s
[info]                  ·gc.alloc.rate:                   1464.983 MB/sec
[info]                  ·gc.alloc.rate.norm:              90144.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        82984.079 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 205.000 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 26429.941 ops/s
[info]                  ·gc.alloc.rate:                                  1513.474 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.140 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.255 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81077.713 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 26431.522 ops/s
[info]                  ·gc.alloc.rate:                                  1513.695 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101343.308 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26574.802 ops/s
[info]                  ·gc.alloc.rate:                                  1521.958 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.702 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80638.449 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 26498.007 ops/s
[info]                  ·gc.alloc.rate:                                  1517.575 MB/sec
[info]                  ·gc.alloc.rate.norm:                             90144.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.802 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101087.110 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   26301.068 ±(99.9%) 1587.948 ops/s [Average]
[info]   (min, avg, max) = (25571.065, 26301.068, 26574.802), stdev = 412.385
[info]   CI (99.9%): [24713.119, 27889.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1506.337 ±(99.9%) 90.009 MB/sec [Average]
[info]   (min, avg, max) = (1464.983, 1506.337, 1521.958), stdev = 23.375
[info]   CI (99.9%): [1416.328, 1596.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   90144.017 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (90144.015, 90144.017, 90144.019), stdev = 0.002
[info]   CI (99.9%): [90144.010, 90144.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.221 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.140), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.307 ±(99.9%) 13.152 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.307, 8.348), stdev = 3.416
[info]   CI (99.9%): [≈ 0, 15.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.980 ±(99.9%) 727.197 MB/sec [Average]
[info]   (min, avg, max) = (1348.622, 1494.980, 1701.802), stdev = 188.851
[info]   CI (99.9%): [767.783, 2222.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   89426.132 ±(99.9%) 41580.581 B/op [Average]
[info]   (min, avg, max) = (80638.449, 89426.132, 101343.308), stdev = 10798.345
[info]   CI (99.9%): [47845.551, 131006.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   41.000 ±(99.9%) 353.023 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.000, 205.000), stdev = 91.679
[info]   CI (99.9%): [≈ 0, 394.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 13.000), stdev = 4.025
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 18.66% complete, ETA 01:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 811.634 ops/s
[info] # Warmup Iteration   2: 98172.907 ops/s
[info] # Warmup Iteration   3: 101766.428 ops/s
[info] Iteration   1: 100546.743 ops/s
[info]                  ·gc.alloc.rate:            905.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15672.176 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 101499.086 ops/s
[info]                  ·gc.alloc.rate:                   913.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10339.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 10.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 97735.907 ops/s
[info]                  ·gc.alloc.rate:            880.260 MB/sec
[info]                  ·gc.alloc.rate.norm:       14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16122.532 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   4: 101652.322 ops/s
[info]                  ·gc.alloc.rate:                   915.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              14176.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.139 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        15563.720 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 103.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   5: 102791.420 ops/s
[info]                  ·gc.alloc.rate:                                  925.764 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14176.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.547 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.379 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15636.078 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava":
[info]   100845.096 ±(99.9%) 7362.580 ops/s [Average]
[info]   (min, avg, max) = (97735.907, 100845.096, 102791.420), stdev = 1912.039
[info]   CI (99.9%): [93482.515, 108207.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   908.200 ±(99.9%) 66.229 MB/sec [Average]
[info]   (min, avg, max) = (880.260, 908.200, 925.764), stdev = 17.199
[info]   CI (99.9%): [841.972, 974.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   14176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14176.004, 14176.004, 14176.004), stdev = 0.001
[info]   CI (99.9%): [14176.003, 14176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.109 ±(99.9%) 0.942 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.109, 0.547), stdev = 0.245
[info]   CI (99.9%): [≈ 0, 1.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.676 ±(99.9%) 14.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.676, 8.379), stdev = 3.747
[info]   CI (99.9%): [≈ 0, 16.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   939.016 ±(99.9%) 587.179 MB/sec [Average]
[info]   (min, avg, max) = (666.636, 939.016, 1021.114), stdev = 152.488
[info]   CI (99.9%): [351.837, 1526.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   14666.862 ±(99.9%) 9352.546 B/op [Average]
[info]   (min, avg, max) = (10339.805, 14666.862, 16122.532), stdev = 2428.826
[info]   CI (99.9%): [5314.316, 24019.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.661), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 12.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   22.694 ±(99.9%) 174.020 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.694, 103.139), stdev = 45.192
[info]   CI (99.9%): [≈ 0, 196.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time":
[info]   62.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 12.400, 17.000), stdev = 5.413
[info]   CI (99.9%): [62.000, 62.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 18.91% complete, ETA 01:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36434.142 ops/s
[info] # Warmup Iteration   2: 58322.826 ops/s
[info] # Warmup Iteration   3: 59540.117 ops/s
[info] Iteration   1: 59326.324 ops/s
[info]                  ·gc.alloc.rate:                   980.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26756.511 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 17.673 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 59533.129 ops/s
[info]                  ·gc.alloc.rate:            983.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26679.307 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 59665.051 ops/s
[info]                  ·gc.alloc.rate:                                  985.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.105 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.767 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26727.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                105.432 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 60078.567 ops/s
[info]                  ·gc.alloc.rate:                                  992.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             26008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.067 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.759 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26752.771 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 60284.908 ops/s
[info]                  ·gc.alloc.rate:            996.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       26008.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.511 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26661.365 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   59777.596 ±(99.9%) 1520.914 ops/s [Average]
[info]   (min, avg, max) = (59326.324, 59777.596, 60284.908), stdev = 394.977
[info]   CI (99.9%): [58256.682, 61298.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   987.758 ±(99.9%) 25.794 MB/sec [Average]
[info]   (min, avg, max) = (980.118, 987.758, 996.478), stdev = 6.699
[info]   CI (99.9%): [961.964, 1013.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   26008.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26008.007, 26008.007, 26008.007), stdev = 0.001
[info]   CI (99.9%): [26008.006, 26008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.105), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.905 ±(99.9%) 4.967 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 2.767), stdev = 1.290
[info]   CI (99.9%): [≈ 0, 5.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.621 ±(99.9%) 24.586 MB/sec [Average]
[info]   (min, avg, max) = (1008.325, 1014.621, 1021.511), stdev = 6.385
[info]   CI (99.9%): [990.035, 1039.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   26715.404 ±(99.9%) 166.129 B/op [Average]
[info]   (min, avg, max) = (26661.365, 26715.404, 26756.511), stdev = 43.143
[info]   CI (99.9%): [26549.275, 26881.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   24.621 ±(99.9%) 176.430 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 24.621, 105.432), stdev = 45.818
[info]   CI (99.9%): [≈ 0, 201.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 13.000), stdev = 4.207
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.15% complete, ETA 01:09:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 107692.468 ops/s
[info] # Warmup Iteration   2: 128984.556 ops/s
[info] # Warmup Iteration   3: 127795.666 ops/s
[info] Iteration   1: 128978.120 ops/s
[info]                  ·gc.alloc.rate:            831.287 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8226.102 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 129184.584 ops/s
[info]                  ·gc.alloc.rate:            832.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8212.986 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 128219.976 ops/s
[info]                  ·gc.alloc.rate:            826.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12412.086 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 127366.175 ops/s
[info]                  ·gc.alloc.rate:                   820.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8329.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 128727.534 ops/s
[info]                  ·gc.alloc.rate:                                  829.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10144.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12485.375 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   128495.278 ±(99.9%) 2798.605 ops/s [Average]
[info]   (min, avg, max) = (127366.175, 128495.278, 129184.584), stdev = 726.789
[info]   CI (99.9%): [125696.673, 131293.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   828.154 ±(99.9%) 17.830 MB/sec [Average]
[info]   (min, avg, max) = (820.880, 828.154, 832.466), stdev = 4.630
[info]   CI (99.9%): [810.325, 845.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.003, 10144.003, 10144.003), stdev = 0.001
[info]   CI (99.9%): [10144.003, 10144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.045), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.111 ±(99.9%) 0.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.111, 0.553), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   810.920 ±(99.9%) 721.750 MB/sec [Average]
[info]   (min, avg, max) = (673.997, 810.920, 1021.030), stdev = 187.436
[info]   CI (99.9%): [89.170, 1532.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9933.245 ±(99.9%) 8844.562 B/op [Average]
[info]   (min, avg, max) = (8212.986, 9933.245, 12485.375), stdev = 2296.905
[info]   CI (99.9%): [1088.683, 18777.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.231 ±(99.9%) 70.871 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.231, 41.155), stdev = 18.405
[info]   CI (99.9%): [≈ 0, 79.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.121
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 19.40% complete, ETA 01:09:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16728.150 ops/s
[info] # Warmup Iteration   2: 33400.842 ops/s
[info] # Warmup Iteration   3: 33587.073 ops/s
[info] Iteration   1: 32733.882 ops/s
[info]                  ·gc.alloc.rate:                                  1709.668 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.936 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2030.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97622.397 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                192.170 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 33842.627 ops/s
[info]                  ·gc.alloc.rate:                                  1768.048 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.565 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79151.255 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 33650.412 ops/s
[info]                  ·gc.alloc.rate:                                  1757.957 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.237 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79602.795 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 33958.634 ops/s
[info]                  ·gc.alloc.rate:                                  1773.697 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78880.923 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 34043.114 ops/s
[info]                  ·gc.alloc.rate:                                  1778.134 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82216.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.424 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78684.005 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   33645.734 ±(99.9%) 2043.092 ops/s [Average]
[info]   (min, avg, max) = (32733.882, 33645.734, 34043.114), stdev = 530.585
[info]   CI (99.9%): [31602.642, 35688.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1757.501 ±(99.9%) 106.981 MB/sec [Average]
[info]   (min, avg, max) = (1709.668, 1757.501, 1778.134), stdev = 27.783
[info]   CI (99.9%): [1650.520, 1864.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   82216.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82216.012, 82216.013, 82216.017), stdev = 0.002
[info]   CI (99.9%): [82216.006, 82216.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.202 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.030, 0.123), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.434 ±(99.9%) 9.724 B/op [Average]
[info]   (min, avg, max) = (0.008, 1.434, 5.936), stdev = 2.525
[info]   CI (99.9%): [≈ 0, 11.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1767.551 ±(99.9%) 565.030 MB/sec [Average]
[info]   (min, avg, max) = (1701.745, 1767.551, 2030.041), stdev = 146.736
[info]   CI (99.9%): [1202.521, 2332.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82788.275 ±(99.9%) 31959.115 B/op [Average]
[info]   (min, avg, max) = (78684.005, 82788.275, 97622.397), stdev = 8299.681
[info]   CI (99.9%): [50829.160, 114747.390] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   38.434 ±(99.9%) 330.928 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.434, 192.170), stdev = 85.941
[info]   CI (99.9%): [≈ 0, 369.362] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 19.65% complete, ETA 01:09:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26897.199 ops/s
[info] # Warmup Iteration   2: 37415.473 ops/s
[info] # Warmup Iteration   3: 37866.543 ops/s
[info] Iteration   1: 38929.724 ops/s
[info]                  ·gc.alloc.rate:            524.428 MB/sec
[info]                  ·gc.alloc.rate.norm:       21206.960 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13626.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 38773.504 ops/s
[info]                  ·gc.alloc.rate:            522.563 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27363.561 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 38704.379 ops/s
[info]                  ·gc.alloc.rate:            521.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.151 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13706.168 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 38883.054 ops/s
[info]                  ·gc.alloc.rate:            523.918 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27286.164 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 37777.248 ops/s
[info]                  ·gc.alloc.rate:            508.991 MB/sec
[info]                  ·gc.alloc.rate.norm:       21208.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14042.437 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   38613.582 ±(99.9%) 1832.433 ops/s [Average]
[info]   (min, avg, max) = (37777.248, 38613.582, 38929.724), stdev = 475.877
[info]   CI (99.9%): [36781.149, 40446.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   520.317 ±(99.9%) 24.736 MB/sec [Average]
[info]   (min, avg, max) = (508.991, 520.317, 524.428), stdev = 6.424
[info]   CI (99.9%): [495.581, 545.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21207.801 ±(99.9%) 1.809 B/op [Average]
[info]   (min, avg, max) = (21206.960, 21207.801, 21208.011), stdev = 0.470
[info]   CI (99.9%): [21205.992, 21209.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   471.891 ±(99.9%) 710.979 MB/sec [Average]
[info]   (min, avg, max) = (336.982, 471.891, 674.235), stdev = 184.639
[info]   CI (99.9%): [≈ 0, 1182.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19205.059 ±(99.9%) 28548.768 B/op [Average]
[info]   (min, avg, max) = (13626.964, 19205.059, 27363.561), stdev = 7414.024
[info]   CI (99.9%): [≈ 0, 47753.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 7.000), stdev = 2.049
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 19.90% complete, ETA 01:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26796.082 ops/s
[info] # Warmup Iteration   2: 40951.306 ops/s
[info] # Warmup Iteration   3: 40413.956 ops/s
[info] Iteration   1: 40835.206 ops/s
[info]                  ·gc.alloc.rate:            368.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12965.034 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 40834.706 ops/s
[info]                  ·gc.alloc.rate:            368.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.473 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12965.351 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 40794.566 ops/s
[info]                  ·gc.alloc.rate:            368.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12978.062 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 40788.367 ops/s
[info]                  ·gc.alloc.rate:            368.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12980.607 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 40980.287 ops/s
[info]                  ·gc.alloc.rate:            370.153 MB/sec
[info]                  ·gc.alloc.rate.norm:       14216.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12919.169 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   40846.627 ±(99.9%) 299.770 ops/s [Average]
[info]   (min, avg, max) = (40788.367, 40846.627, 40980.287), stdev = 77.849
[info]   CI (99.9%): [40546.857, 41146.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   368.928 ±(99.9%) 2.792 MB/sec [Average]
[info]   (min, avg, max) = (368.361, 368.928, 370.153), stdev = 0.725
[info]   CI (99.9%): [366.136, 371.720] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.011), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.375 ±(99.9%) 0.228 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 336.375, 336.473), stdev = 0.059
[info]   CI (99.9%): [336.146, 336.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   12961.645 ±(99.9%) 95.465 B/op [Average]
[info]   (min, avg, max) = (12919.169, 12961.645, 12980.607), stdev = 24.792
[info]   CI (99.9%): [12866.180, 13057.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.15% complete, ETA 01:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37464.052 ops/s
[info] # Warmup Iteration   2: 46082.911 ops/s
[info] # Warmup Iteration   3: 45828.790 ops/s
[info] Iteration   1: 45963.590 ops/s
[info]                  ·gc.alloc.rate:            404.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.146 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11541.612 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 45991.936 ops/s
[info]                  ·gc.alloc.rate:                   404.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.327 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11511.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.795 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 45868.301 ops/s
[info]                  ·gc.alloc.rate:            403.184 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23108.672 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 44687.601 ops/s
[info]                  ·gc.alloc.rate:            392.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11847.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 45190.348 ops/s
[info]                  ·gc.alloc.rate:            397.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       13832.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11716.322 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   45540.355 ±(99.9%) 2228.967 ops/s [Average]
[info]   (min, avg, max) = (44687.601, 45540.355, 45991.936), stdev = 578.856
[info]   CI (99.9%): [43311.388, 47769.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   400.259 ±(99.9%) 19.581 MB/sec [Average]
[info]   (min, avg, max) = (392.778, 400.259, 404.123), stdev = 5.085
[info]   CI (99.9%): [380.678, 419.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.010), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.982 ±(99.9%) 580.345 MB/sec [Average]
[info]   (min, avg, max) = (336.327, 403.982, 673.586), stdev = 150.714
[info]   CI (99.9%): [≈ 0, 984.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   13945.213 ±(99.9%) 19732.027 B/op [Average]
[info]   (min, avg, max) = (11511.541, 13945.213, 23108.672), stdev = 5124.345
[info]   CI (99.9%): [≈ 0, 33677.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.559 ±(99.9%) 39.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.559, 22.795), stdev = 10.194
[info]   CI (99.9%): [≈ 0, 43.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 20.40% complete, ETA 01:08:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38370.863 ops/s
[info] # Warmup Iteration   2: 43361.589 ops/s
[info] # Warmup Iteration   3: 44392.929 ops/s
[info] Iteration   1: 44737.866 ops/s
[info]                  ·gc.alloc.rate:            341.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11834.150 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 45737.024 ops/s
[info]                  ·gc.alloc.rate:            349.589 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11575.458 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 44078.128 ops/s
[info]                  ·gc.alloc.rate:                   336.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        12011.316 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.785 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 44785.365 ops/s
[info]                  ·gc.alloc.rate:            342.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.627 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23668.460 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 45877.584 ops/s
[info]                  ·gc.alloc.rate:            350.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       12032.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11540.392 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45043.193 ±(99.9%) 2899.933 ops/s [Average]
[info]   (min, avg, max) = (44078.128, 45043.193, 45877.584), stdev = 753.103
[info]   CI (99.9%): [42143.260, 47943.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   344.342 ±(99.9%) 22.215 MB/sec [Average]
[info]   (min, avg, max) = (336.935, 344.342, 350.781), stdev = 5.769
[info]   CI (99.9%): [322.126, 366.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.008, 12032.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.818 ±(99.9%) 580.783 MB/sec [Average]
[info]   (min, avg, max) = (336.324, 403.818, 673.627), stdev = 150.827
[info]   CI (99.9%): [≈ 0, 984.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   14125.955 ±(99.9%) 20554.437 B/op [Average]
[info]   (min, avg, max) = (11540.392, 14125.955, 23668.460), stdev = 5337.922
[info]   CI (99.9%): [≈ 0, 34680.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   4.757 ±(99.9%) 40.959 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.757, 23.785), stdev = 10.637
[info]   CI (99.9%): [≈ 0, 45.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 7.000), stdev = 1.732
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 20.65% complete, ETA 01:08:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14593.183 ops/s
[info] # Warmup Iteration   2: 18927.358 ops/s
[info] # Warmup Iteration   3: 19277.735 ops/s
[info] Iteration   1: 19776.698 ops/s
[info]                  ·gc.alloc.rate:            741.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 80468.043 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 19868.687 ops/s
[info]                  ·gc.alloc.rate:            745.176 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.987 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53399.704 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 19406.082 ops/s
[info]                  ·gc.alloc.rate:                   727.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        54670.732 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 54.022 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19997.887 ops/s
[info]                  ·gc.alloc.rate:            750.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53105.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 19950.734 ops/s
[info]                  ·gc.alloc.rate:                   748.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53177.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 262.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19800.018 ±(99.9%) 907.789 ops/s [Average]
[info]   (min, avg, max) = (19406.082, 19800.018, 19997.887), stdev = 235.750
[info]   CI (99.9%): [18892.229, 20707.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   742.656 ±(99.9%) 34.037 MB/sec [Average]
[info]   (min, avg, max) = (727.916, 742.656, 750.086), stdev = 8.839
[info]   CI (99.9%): [708.619, 776.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59040.028 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (59040.020, 59040.028, 59040.050), stdev = 0.013
[info]   CI (99.9%): [59039.978, 59040.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   741.542 ±(99.9%) 579.853 MB/sec [Average]
[info]   (min, avg, max) = (673.987, 741.542, 1010.917), stdev = 150.586
[info]   CI (99.9%): [161.689, 1321.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   58964.228 ±(99.9%) 46352.983 B/op [Average]
[info]   (min, avg, max) = (53105.064, 58964.228, 80468.043), stdev = 12037.722
[info]   CI (99.9%): [12611.245, 105317.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   63.352 ±(99.9%) 438.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 63.352, 262.735), stdev = 113.887
[info]   CI (99.9%): [≈ 0, 501.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 20.90% complete, ETA 01:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12674.442 ops/s
[info] # Warmup Iteration   2: 19061.997 ops/s
[info] # Warmup Iteration   3: 19754.335 ops/s
[info] Iteration   1: 19607.132 ops/s
[info]                  ·gc.alloc.rate:                   556.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              44663.996 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        53895.022 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 53.414 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 18935.563 ops/s
[info]                  ·gc.alloc.rate:            537.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27959.812 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 19567.071 ops/s
[info]                  ·gc.alloc.rate:            555.389 MB/sec
[info]                  ·gc.alloc.rate.norm:       44679.910 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54116.595 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 19532.344 ops/s
[info]                  ·gc.alloc.rate:            554.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27105.389 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 19270.024 ops/s
[info]                  ·gc.alloc.rate:            547.008 MB/sec
[info]                  ·gc.alloc.rate.norm:       44680.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54950.540 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   19382.427 ±(99.9%) 1088.075 ops/s [Average]
[info]   (min, avg, max) = (18935.563, 19382.427, 19607.132), stdev = 282.570
[info]   CI (99.9%): [18294.352, 20470.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   550.190 ±(99.9%) 30.590 MB/sec [Average]
[info]   (min, avg, max) = (537.633, 550.190, 556.477), stdev = 7.944
[info]   CI (99.9%): [519.600, 580.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44676.794 ±(99.9%) 27.550 B/op [Average]
[info]   (min, avg, max) = (44663.996, 44676.794, 44680.023), stdev = 7.155
[info]   CI (99.9%): [44649.244, 44704.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.944 ±(99.9%) 708.469 MB/sec [Average]
[info]   (min, avg, max) = (336.355, 537.944, 672.748), stdev = 183.987
[info]   CI (99.9%): [≈ 0, 1246.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   43605.472 ±(99.9%) 56530.697 B/op [Average]
[info]   (min, avg, max) = (27105.389, 43605.472, 54950.540), stdev = 14680.842
[info]   CI (99.9%): [≈ 0, 100136.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.683 ±(99.9%) 91.983 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.683, 53.414), stdev = 23.888
[info]   CI (99.9%): [≈ 0, 102.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.588
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.14% complete, ETA 01:07:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69182.438 ops/s
[info] # Warmup Iteration   2: 72816.914 ops/s
[info] # Warmup Iteration   3: 76845.280 ops/s
[info] Iteration   1: 76615.563 ops/s
[info]                  ·gc.alloc.rate:                   199.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6896.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 41.052 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 76910.169 ops/s
[info]                  ·gc.alloc.rate:      200.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 76543.455 ops/s
[info]                  ·gc.alloc.rate:            199.168 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6944.303 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 76561.912 ops/s
[info]                  ·gc.alloc.rate:            199.237 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6942.670 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 76963.120 ops/s
[info]                  ·gc.alloc.rate:      200.267 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   76718.844 ±(99.9%) 775.720 ops/s [Average]
[info]   (min, avg, max) = (76543.455, 76718.844, 76963.120), stdev = 201.452
[info]   CI (99.9%): [75943.123, 77494.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   199.632 ±(99.9%) 2.008 MB/sec [Average]
[info]   (min, avg, max) = (199.168, 199.632, 200.267), stdev = 0.522
[info]   CI (99.9%): [197.624, 201.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.006), stdev = 0.001
[info]   CI (99.9%): [4096.005, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.211 ±(99.9%) 710.808 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.211, 337.703), stdev = 184.594
[info]   CI (99.9%): [≈ 0, 913.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4156.740 ±(99.9%) 14611.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4156.740, 6944.303), stdev = 3794.615
[info]   CI (99.9%): [≈ 0, 18768.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.210 ±(99.9%) 70.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.210, 41.052), stdev = 18.359
[info]   CI (99.9%): [≈ 0, 78.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 21.39% complete, ETA 01:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8137.256 ops/s
[info] # Warmup Iteration   2: 15948.887 ops/s
[info] # Warmup Iteration   3: 16206.764 ops/s
[info] Iteration   1: 16187.086 ops/s
[info]                  ·gc.alloc.rate:            1049.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       102080.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 98115.783 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 16000.040 ops/s
[info]                  ·gc.alloc.rate:            1037.524 MB/sec
[info]                  ·gc.alloc.rate.norm:       102080.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.948 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 99268.427 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 16156.440 ops/s
[info]                  ·gc.alloc.rate:                                  1047.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102080.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.112 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.912 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98699.430 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                389.347 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 16250.666 ops/s
[info]                  ·gc.alloc.rate:                                  1053.904 MB/sec
[info]                  ·gc.alloc.rate.norm:                             102080.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.348 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       131870.384 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 16057.255 ops/s
[info]                  ·gc.alloc.rate:            1041.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       102080.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 100091.345 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16130.297 ±(99.9%) 388.415 ops/s [Average]
[info]   (min, avg, max) = (16000.040, 16130.297, 16250.666), stdev = 100.870
[info]   CI (99.9%): [15741.883, 16518.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1046.076 ±(99.9%) 25.356 MB/sec [Average]
[info]   (min, avg, max) = (1037.524, 1046.076, 1053.904), stdev = 6.585
[info]   CI (99.9%): [1020.720, 1071.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   102080.027 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (102080.025, 102080.027, 102080.032), stdev = 0.002
[info]   CI (99.9%): [102080.018, 102080.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.198 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.112), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.452 ±(99.9%) 19.232 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.452, 10.912), stdev = 4.995
[info]   CI (99.9%): [≈ 0, 22.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.722 ±(99.9%) 600.322 MB/sec [Average]
[info]   (min, avg, max) = (1008.948, 1082.722, 1361.468), stdev = 155.902
[info]   CI (99.9%): [482.400, 1683.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   105609.074 ±(99.9%) 56599.164 B/op [Average]
[info]   (min, avg, max) = (98115.783, 105609.074, 131870.384), stdev = 14698.623
[info]   CI (99.9%): [49009.910, 162208.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   77.869 ±(99.9%) 670.479 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.869, 389.347), stdev = 174.121
[info]   CI (99.9%): [≈ 0, 748.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 9.600, 13.000), stdev = 3.050
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 21.64% complete, ETA 01:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40788.558 ops/s
[info] # Warmup Iteration   2: 54273.819 ops/s
[info] # Warmup Iteration   3: 54687.579 ops/s
[info] Iteration   1: 56222.791 ops/s
[info]                  ·gc.alloc.rate:            1029.781 MB/sec
[info]                  ·gc.alloc.rate.norm:       28824.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28306.629 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56401.827 ops/s
[info]                  ·gc.alloc.rate:            1032.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       28824.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28217.308 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 56571.339 ops/s
[info]                  ·gc.alloc.rate:                                  1035.920 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28824.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.207 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28224.192 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                92.660 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 56955.984 ops/s
[info]                  ·gc.alloc.rate:                                  1042.938 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28824.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.024 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.658 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28217.512 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 56900.089 ops/s
[info]                  ·gc.alloc.rate:            1041.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       28824.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28245.774 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   56610.406 ±(99.9%) 1215.573 ops/s [Average]
[info]   (min, avg, max) = (56222.791, 56610.406, 56955.984), stdev = 315.681
[info]   CI (99.9%): [55394.833, 57825.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1036.669 ±(99.9%) 22.049 MB/sec [Average]
[info]   (min, avg, max) = (1029.781, 1036.669, 1042.938), stdev = 5.726
[info]   CI (99.9%): [1014.620, 1058.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28824.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28824.007, 28824.007, 28824.008), stdev = 0.001
[info]   CI (99.9%): [28824.006, 28824.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.043), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.373 ±(99.9%) 2.104 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.373, 1.207), stdev = 0.546
[info]   CI (99.9%): [≈ 0, 2.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.743 ±(99.9%) 19.291 MB/sec [Average]
[info]   (min, avg, max) = (1010.983, 1015.743, 1021.081), stdev = 5.010
[info]   CI (99.9%): [996.453, 1035.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   28242.283 ±(99.9%) 145.578 B/op [Average]
[info]   (min, avg, max) = (28217.308, 28242.283, 28306.629), stdev = 37.806
[info]   CI (99.9%): [28096.705, 28387.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   18.532 ±(99.9%) 159.566 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.532, 92.660), stdev = 41.439
[info]   CI (99.9%): [≈ 0, 178.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 3.564
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 21.89% complete, ETA 01:07:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49737.082 ops/s
[info] # Warmup Iteration   2: 84702.286 ops/s
[info] # Warmup Iteration   3: 85672.763 ops/s
[info] Iteration   1: 84895.208 ops/s
[info]                  ·gc.alloc.rate:            1006.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18709.135 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 83929.375 ops/s
[info]                  ·gc.alloc.rate:            995.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18924.208 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 85648.684 ops/s
[info]                  ·gc.alloc.rate:                                  1015.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.190 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.229 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18618.990 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                73.448 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 86740.387 ops/s
[info]                  ·gc.alloc.rate:                                  1028.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             18664.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.648 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       18529.238 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 86892.759 ops/s
[info]                  ·gc.alloc.rate:            1030.353 MB/sec
[info]                  ·gc.alloc.rate.norm:       18664.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18496.830 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala":
[info]   85621.282 ±(99.9%) 4816.974 ops/s [Average]
[info]   (min, avg, max) = (83929.375, 85621.282, 86892.759), stdev = 1250.953
[info]   CI (99.9%): [80804.309, 90438.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1015.218 ±(99.9%) 57.306 MB/sec [Average]
[info]   (min, avg, max) = (995.126, 1015.218, 1030.353), stdev = 14.882
[info]   CI (99.9%): [957.911, 1072.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   18664.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18664.005, 18664.005, 18664.005), stdev = 0.001
[info]   CI (99.9%): [18664.004, 18664.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.368 ±(99.9%) 2.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.190), stdev = 0.539
[info]   CI (99.9%): [≈ 0, 2.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.658 ±(99.9%) 23.598 MB/sec [Average]
[info]   (min, avg, max) = (1008.879, 1014.658, 1021.124), stdev = 6.128
[info]   CI (99.9%): [991.060, 1038.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18655.680 ±(99.9%) 660.056 B/op [Average]
[info]   (min, avg, max) = (18496.830, 18655.680, 18924.208), stdev = 171.414
[info]   CI (99.9%): [17995.624, 19315.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.690 ±(99.9%) 126.481 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.690, 73.448), stdev = 32.847
[info]   CI (99.9%): [≈ 0, 141.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 13.000), stdev = 4.868
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 22.14% complete, ETA 01:07:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 188096.941 ops/s
[info] # Warmup Iteration   2: 207825.656 ops/s
[info] # Warmup Iteration   3: 211808.900 ops/s
[info] Iteration   1: 212985.203 ops/s
[info]                  ·gc.alloc.rate:            337.805 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2485.804 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 213782.872 ops/s
[info]                  ·gc.alloc.rate:            338.966 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2476.561 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 211646.672 ops/s
[info]                  ·gc.alloc.rate:            335.671 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2501.634 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 213664.187 ops/s
[info]                  ·gc.alloc.rate:                   338.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2477.929 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 212993.714 ops/s
[info]                  ·gc.alloc.rate:            337.754 MB/sec
[info]                  ·gc.alloc.rate.norm:       2496.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2490.644 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   213014.529 ±(99.9%) 3270.062 ops/s [Average]
[info]   (min, avg, max) = (211646.672, 213014.529, 213782.872), stdev = 849.225
[info]   CI (99.9%): [209744.467, 216284.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   337.809 ±(99.9%) 5.091 MB/sec [Average]
[info]   (min, avg, max) = (335.671, 337.809, 338.966), stdev = 1.322
[info]   CI (99.9%): [332.718, 342.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.002, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.520 ±(99.9%) 1.107 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 336.520, 337.029), stdev = 0.287
[info]   CI (99.9%): [335.414, 337.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2486.514 ±(99.9%) 39.408 B/op [Average]
[info]   (min, avg, max) = (2476.561, 2486.514, 2501.634), stdev = 10.234
[info]   CI (99.9%): [2447.107, 2525.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.981 ±(99.9%) 8.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.981, 4.907), stdev = 2.194
[info]   CI (99.9%): [≈ 0, 9.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 22.39% complete, ETA 01:06:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 221628.346 ops/s
[info] # Warmup Iteration   2: 246773.303 ops/s
[info] # Warmup Iteration   3: 250071.284 ops/s
[info] Iteration   1: 249657.927 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 249712.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 250025.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 249766.318 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 249368.833 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   249706.273 ±(99.9%) 906.763 ops/s [Average]
[info]   (min, avg, max) = (249368.833, 249706.273, 250025.585), stdev = 235.483
[info]   CI (99.9%): [248799.510, 250613.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.002, 0.002), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 22.64% complete, ETA 01:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51320.621 ops/s
[info] # Warmup Iteration   2: 76247.370 ops/s
[info] # Warmup Iteration   3: 76911.282 ops/s
[info] Iteration   1: 77244.279 ops/s
[info]                  ·gc.alloc.rate:            1053.627 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20562.177 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 76774.585 ops/s
[info]                  ·gc.alloc.rate:            1047.217 MB/sec
[info]                  ·gc.alloc.rate.norm:       21472.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20687.763 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 78832.518 ops/s
[info]                  ·gc.alloc.rate:                                  1075.628 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20228.094 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.795 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 78691.016 ops/s
[info]                  ·gc.alloc.rate:                                  1073.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.332 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.576 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27223.978 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 80340.801 ops/s
[info]                  ·gc.alloc.rate:                                  1095.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.119 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20004.567 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   78376.640 ±(99.9%) 5450.194 ops/s [Average]
[info]   (min, avg, max) = (76774.585, 78376.640, 80340.801), stdev = 1415.398
[info]   CI (99.9%): [72926.445, 83826.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1069.269 ±(99.9%) 74.716 MB/sec [Average]
[info]   (min, avg, max) = (1047.217, 1069.269, 1095.974), stdev = 19.404
[info]   CI (99.9%): [994.553, 1143.985] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   21472.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (21472.005, 21472.005, 21472.006), stdev = 0.001
[info]   CI (99.9%): [21472.004, 21472.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.054), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.307 ±(99.9%) 1.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.307, 1.082), stdev = 0.454
[info]   CI (99.9%): [≈ 0, 2.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.783 ±(99.9%) 600.425 MB/sec [Average]
[info]   (min, avg, max) = (1008.968, 1082.783, 1361.576), stdev = 155.928
[info]   CI (99.9%): [482.358, 1683.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   21741.316 ±(99.9%) 11847.547 B/op [Average]
[info]   (min, avg, max) = (20004.567, 21741.316, 27223.978), stdev = 3076.770
[info]   CI (99.9%): [9893.769, 33588.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   15.959 ±(99.9%) 137.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.959, 79.795), stdev = 35.686
[info]   CI (99.9%): [≈ 0, 153.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 12.000), stdev = 4.301
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 22.89% complete, ETA 01:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19698.954 ops/s
[info] # Warmup Iteration   2: 27145.052 ops/s
[info] # Warmup Iteration   3: 27545.094 ops/s
[info] Iteration   1: 27218.608 ops/s
[info]                  ·gc.alloc.rate:            566.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38980.234 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 27472.442 ops/s
[info]                  ·gc.alloc.rate:            571.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38619.897 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 27275.769 ops/s
[info]                  ·gc.alloc.rate:            567.215 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19450.107 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 27381.192 ops/s
[info]                  ·gc.alloc.rate:            569.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38749.641 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 27637.977 ops/s
[info]                  ·gc.alloc.rate:            574.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       32736.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38387.979 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27397.198 ±(99.9%) 640.098 ops/s [Average]
[info]   (min, avg, max) = (27218.608, 27397.198, 27637.977), stdev = 166.231
[info]   CI (99.9%): [26757.100, 28037.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   569.812 ±(99.9%) 13.555 MB/sec [Average]
[info]   (min, avg, max) = (566.027, 569.812, 574.927), stdev = 3.520
[info]   CI (99.9%): [556.257, 583.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.016, 32736.020), stdev = 0.002
[info]   CI (99.9%): [32736.008, 32736.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   606.681 ±(99.9%) 580.485 MB/sec [Average]
[info]   (min, avg, max) = (337.011, 606.681, 674.202), stdev = 150.750
[info]   CI (99.9%): [26.196, 1187.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34837.572 ±(99.9%) 33132.962 B/op [Average]
[info]   (min, avg, max) = (19450.107, 34837.572, 38980.234), stdev = 8604.525
[info]   CI (99.9%): [1704.610, 67970.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 7.000), stdev = 1.789
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.13% complete, ETA 01:06:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17140.553 ops/s
[info] # Warmup Iteration   2: 27657.764 ops/s
[info] # Warmup Iteration   3: 27464.878 ops/s
[info] Iteration   1: 28346.245 ops/s
[info]                  ·gc.alloc.rate:            372.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18677.679 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 27821.296 ops/s
[info]                  ·gc.alloc.rate:            365.608 MB/sec
[info]                  ·gc.alloc.rate.norm:       20686.843 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.654 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38060.151 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 28273.796 ops/s
[info]                  ·gc.alloc.rate:            371.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18725.234 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 28083.163 ops/s
[info]                  ·gc.alloc.rate:            369.085 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18852.566 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 28149.471 ops/s
[info]                  ·gc.alloc.rate:            369.982 MB/sec
[info]                  ·gc.alloc.rate.norm:       20688.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18771.127 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala":
[info]   28134.794 ±(99.9%) 782.532 ops/s [Average]
[info]   (min, avg, max) = (27821.296, 28134.794, 28346.245), stdev = 203.221
[info]   CI (99.9%): [27352.262, 28917.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   369.775 ±(99.9%) 10.395 MB/sec [Average]
[info]   (min, avg, max) = (365.608, 369.775, 372.582), stdev = 2.699
[info]   CI (99.9%): [359.380, 380.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   20687.780 ±(99.9%) 2.018 B/op [Average]
[info]   (min, avg, max) = (20686.843, 20687.780, 20688.016), stdev = 0.524
[info]   CI (99.9%): [20685.763, 20689.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.486 ±(99.9%) 579.406 MB/sec [Average]
[info]   (min, avg, max) = (335.701, 403.486, 672.654), stdev = 150.470
[info]   CI (99.9%): [≈ 0, 982.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22617.351 ±(99.9%) 33242.718 B/op [Average]
[info]   (min, avg, max) = (18677.679, 22617.351, 38060.151), stdev = 8633.028
[info]   CI (99.9%): [≈ 0, 55860.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 8.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 23.38% complete, ETA 01:06:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 100691.099 ops/s
[info] # Warmup Iteration   2: 121041.121 ops/s
[info] # Warmup Iteration   3: 122267.177 ops/s
[info] Iteration   1: 122099.022 ops/s
[info]                  ·gc.alloc.rate:            476.638 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4344.845 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 121930.385 ops/s
[info]                  ·gc.alloc.rate:            475.921 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.009 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4350.688 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 121404.849 ops/s
[info]                  ·gc.alloc.rate:            473.867 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8739.501 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 121482.955 ops/s
[info]                  ·gc.alloc.rate:            474.212 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4367.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 120173.819 ops/s
[info]                  ·gc.alloc.rate:            469.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       6144.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8829.159 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   121418.206 ±(99.9%) 2906.348 ops/s [Average]
[info]   (min, avg, max) = (120173.819, 121418.206, 122099.022), stdev = 754.769
[info]   CI (99.9%): [118511.858, 124324.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   473.975 ±(99.9%) 11.127 MB/sec [Average]
[info]   (min, avg, max) = (469.236, 473.975, 476.638), stdev = 2.890
[info]   CI (99.9%): [462.848, 485.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.004), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.899 ±(99.9%) 711.047 MB/sec [Average]
[info]   (min, avg, max) = (337.009, 471.899, 674.310), stdev = 184.657
[info]   CI (99.9%): [≈ 0, 1182.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6126.249 ±(99.9%) 9344.378 B/op [Average]
[info]   (min, avg, max) = (4344.845, 6126.249, 8829.159), stdev = 2426.705
[info]   CI (99.9%): [≈ 0, 15470.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 23.63% complete, ETA 01:05:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8677.253 ops/s
[info] # Warmup Iteration   2: 20572.864 ops/s
[info] # Warmup Iteration   3: 20416.407 ops/s
[info] Iteration   1: 20700.510 ops/s
[info]                  ·gc.alloc.rate:                   1142.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.143 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76576.841 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 50.646 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 20735.059 ops/s
[info]                  ·gc.alloc.rate:                   1144.731 MB/sec
[info]                  ·gc.alloc.rate.norm:              86904.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        102081.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 353.924 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   3: 21437.198 ops/s
[info]                  ·gc.alloc.rate:                                  1183.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.024 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.791 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74968.147 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 21715.971 ops/s
[info]                  ·gc.alloc.rate:                                  1199.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             86904.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.735 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.825 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       98682.690 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21642.975 ops/s
[info]                  ·gc.alloc.rate:            1195.343 MB/sec
[info]                  ·gc.alloc.rate.norm:       86904.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 74254.758 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   21246.343 ±(99.9%) 1899.776 ops/s [Average]
[info]   (min, avg, max) = (20700.510, 21246.343, 21715.971), stdev = 493.366
[info]   CI (99.9%): [19346.567, 23146.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1173.149 ±(99.9%) 105.674 MB/sec [Average]
[info]   (min, avg, max) = (1142.805, 1173.149, 1199.279), stdev = 27.443
[info]   CI (99.9%): [1067.474, 1278.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86904.045 ±(99.9%) 0.211 B/op [Average]
[info]   (min, avg, max) = (86904.019, 86904.045, 86904.143), stdev = 0.055
[info]   CI (99.9%): [86903.834, 86904.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.086 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.052), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.905 ±(99.9%) 6.331 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.905, 3.791), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.173 ±(99.9%) 711.036 MB/sec [Average]
[info]   (min, avg, max) = (1006.999, 1151.173, 1361.825), stdev = 184.654
[info]   CI (99.9%): [440.137, 1862.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   85312.852 ±(99.9%) 53271.374 B/op [Average]
[info]   (min, avg, max) = (74254.758, 85312.852, 102081.824), stdev = 13834.407
[info]   CI (99.9%): [32041.478, 138584.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   80.914 ±(99.9%) 593.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 80.914, 353.924), stdev = 154.185
[info]   CI (99.9%): [≈ 0, 674.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 19.000), stdev = 7.259
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 23.88% complete, ETA 01:05:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 129352.458 ops/s
[info] # Warmup Iteration   2: 162532.539 ops/s
[info] # Warmup Iteration   3: 165807.361 ops/s
[info] Iteration   1: 164675.722 ops/s
[info]                  ·gc.alloc.rate:            825.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9664.236 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 162112.820 ops/s
[info]                  ·gc.alloc.rate:            812.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6544.708 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 163899.439 ops/s
[info]                  ·gc.alloc.rate:            821.432 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9710.044 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 165121.203 ops/s
[info]                  ·gc.alloc.rate:                   827.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.342 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6425.464 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.746 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 166574.606 ops/s
[info]                  ·gc.alloc.rate:                                  834.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9648.430 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   164476.758 ±(99.9%) 6320.618 ops/s [Average]
[info]   (min, avg, max) = (162112.820, 164476.758, 166574.606), stdev = 1641.444
[info]   CI (99.9%): [158156.140, 170797.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   824.303 ±(99.9%) 31.904 MB/sec [Average]
[info]   (min, avg, max) = (812.312, 824.303, 834.760), stdev = 8.285
[info]   CI (99.9%): [792.398, 856.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.051 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.486 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.056, 0.282), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.309 ±(99.9%) 717.782 MB/sec [Average]
[info]   (min, avg, max) = (673.979, 878.309, 1021.060), stdev = 186.406
[info]   CI (99.9%): [160.527, 1596.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8398.576 ±(99.9%) 6728.712 B/op [Average]
[info]   (min, avg, max) = (6425.464, 8398.576, 9710.044), stdev = 1747.425
[info]   CI (99.9%): [1669.864, 15127.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.349 ±(99.9%) 54.669 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.349, 31.746), stdev = 14.197
[info]   CI (99.9%): [≈ 0, 61.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 10.000), stdev = 2.881
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.13% complete, ETA 01:05:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 185892.268 ops/s
[info] # Warmup Iteration   2: 274761.548 ops/s
[info] # Warmup Iteration   3: 275077.808 ops/s
[info] Iteration   1: 282623.522 ops/s
[info]                  ·gc.alloc.rate:            285.905 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1873.305 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 285906.769 ops/s
[info]                  ·gc.alloc.rate:      289.178 MB/sec
[info]                  ·gc.alloc.rate.norm: 1592.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 284667.078 ops/s
[info]                  ·gc.alloc.rate:                   287.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.697 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1856.206 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.683 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 283072.520 ops/s
[info]                  ·gc.alloc.rate:            286.419 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.497 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1870.347 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 279940.100 ops/s
[info]                  ·gc.alloc.rate:            283.119 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1891.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala":
[info]   283241.998 ±(99.9%) 8705.697 ops/s [Average]
[info]   (min, avg, max) = (279940.100, 283241.998, 285906.769), stdev = 2260.842
[info]   CI (99.9%): [274536.300, 291947.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   286.507 ±(99.9%) 8.815 MB/sec [Average]
[info]   (min, avg, max) = (283.119, 286.507, 289.178), stdev = 2.289
[info]   CI (99.9%): [277.692, 295.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.002), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.991 ±(99.9%) 579.024 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.991, 336.497), stdev = 150.371
[info]   CI (99.9%): [≈ 0, 848.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1498.220 ±(99.9%) 3225.389 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1498.220, 1891.243), stdev = 837.623
[info]   CI (99.9%): [≈ 0, 4723.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.737 ±(99.9%) 6.342 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.737, 3.683), stdev = 1.647
[info]   CI (99.9%): [≈ 0, 7.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 24.38% complete, ETA 01:05:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471535.389 ops/s
[info] # Warmup Iteration   2: 561988.906 ops/s
[info] # Warmup Iteration   3: 568717.709 ops/s
[info] Iteration   1: 549148.404 ops/s
[info]                  ·gc.alloc.rate:            421.442 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 964.100 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 545339.934 ops/s
[info]                  ·gc.alloc.rate:            418.443 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.586 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1941.686 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 548841.845 ops/s
[info]                  ·gc.alloc.rate:            421.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 964.646 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 551518.666 ops/s
[info]                  ·gc.alloc.rate:            423.319 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 960.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 549182.038 ops/s
[info]                  ·gc.alloc.rate:            421.438 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1928.140 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   548806.178 ±(99.9%) 8530.742 ops/s [Average]
[info]   (min, avg, max) = (545339.934, 548806.178, 551518.666), stdev = 2215.406
[info]   CI (99.9%): [540275.436, 557336.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   421.167 ±(99.9%) 6.725 MB/sec [Average]
[info]   (min, avg, max) = (418.443, 421.167, 423.319), stdev = 1.746
[info]   CI (99.9%): [414.442, 427.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.874 ±(99.9%) 709.204 MB/sec [Average]
[info]   (min, avg, max) = (336.344, 470.874, 672.675), stdev = 184.178
[info]   CI (99.9%): [≈ 0, 1180.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1351.715 ±(99.9%) 2050.118 B/op [Average]
[info]   (min, avg, max) = (960.003, 1351.715, 1941.686), stdev = 532.409
[info]   CI (99.9%): [≈ 0, 3401.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 8.000), stdev = 2.302
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 24.63% complete, ETA 01:04:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 489509.824 ops/s
[info] # Warmup Iteration   2: 540333.342 ops/s
[info] # Warmup Iteration   3: 533123.072 ops/s
[info] Iteration   1: 540408.451 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 540616.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 540492.044 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 541098.313 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 551056.006 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   542734.294 ±(99.9%) 17942.610 ops/s [Average]
[info]   (min, avg, max) = (540408.451, 542734.294, 551056.006), stdev = 4659.639
[info]   CI (99.9%): [524791.684, 560676.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 24.88% complete, ETA 01:04:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 150725.412 ops/s
[info] # Warmup Iteration   2: 270855.436 ops/s
[info] # Warmup Iteration   3: 278044.414 ops/s
[info] Iteration   1: 278174.663 ops/s
[info]                  ·gc.alloc.rate:                   766.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.532 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5705.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.769 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 278458.658 ops/s
[info]                  ·gc.alloc.rate:                   767.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3795.232 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 278684.208 ops/s
[info]                  ·gc.alloc.rate:            767.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.631 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3799.625 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 277832.086 ops/s
[info]                  ·gc.alloc.rate:            765.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       4336.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3811.343 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 277832.573 ops/s
[info]                  ·gc.alloc.rate:                                  765.320 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4336.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.304 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.383 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5758.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                26.415 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   278196.437 ±(99.9%) 1456.520 ops/s [Average]
[info]   (min, avg, max) = (277832.086, 278196.437, 278684.208), stdev = 378.254
[info]   CI (99.9%): [276739.918, 279652.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   766.362 ±(99.9%) 4.021 MB/sec [Average]
[info]   (min, avg, max) = (765.317, 766.362, 767.583), stdev = 1.044
[info]   CI (99.9%): [762.341, 770.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.002, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.523 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.304), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   808.354 ±(99.9%) 717.533 MB/sec [Average]
[info]   (min, avg, max) = (671.513, 808.354, 1016.383), stdev = 186.341
[info]   CI (99.9%): [90.821, 1525.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4574.110 ±(99.9%) 4071.454 B/op [Average]
[info]   (min, avg, max) = (3795.232, 4574.110, 5758.421), stdev = 1057.344
[info]   CI (99.9%): [502.656, 8645.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.662), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.790 ±(99.9%) 42.862 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.790, 26.415), stdev = 11.131
[info]   CI (99.9%): [≈ 0, 49.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.600, 14.000), stdev = 2.510
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 25.12% complete, ETA 01:04:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28515.401 ops/s
[info] # Warmup Iteration   2: 36798.469 ops/s
[info] # Warmup Iteration   3: 37127.932 ops/s
[info] Iteration   1: 37130.718 ops/s
[info]                  ·gc.alloc.rate:                                  1656.286 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70199.130 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1692.117 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71717.776 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                141.177 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 37552.333 ops/s
[info]                  ·gc.alloc.rate:                                  1674.680 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71330.751 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 37504.553 ops/s
[info]                  ·gc.alloc.rate:                                  1672.638 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.811 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71418.220 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 37443.932 ops/s
[info]                  ·gc.alloc.rate:            1669.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       70200.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.706 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71538.363 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 37821.385 ops/s
[info]                  ·gc.alloc.rate:                                  1686.737 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70200.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70823.509 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   37490.584 ±(99.9%) 953.214 ops/s [Average]
[info]   (min, avg, max) = (37130.718, 37490.584, 37821.385), stdev = 247.547
[info]   CI (99.9%): [36537.370, 38443.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1672.042 ±(99.9%) 42.016 MB/sec [Average]
[info]   (min, avg, max) = (1656.286, 1672.042, 1686.737), stdev = 10.912
[info]   CI (99.9%): [1630.026, 1714.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70199.835 ±(99.9%) 1.517 B/op [Average]
[info]   (min, avg, max) = (70199.130, 70199.835, 70200.012), stdev = 0.394
[info]   CI (99.9%): [70198.318, 70201.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.079 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.053), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.818 ±(99.9%) 3.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.818, 2.254), stdev = 0.874
[info]   CI (99.9%): [≈ 0, 4.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1699.772 ±(99.9%) 16.479 MB/sec [Average]
[info]   (min, avg, max) = (1692.117, 1699.772, 1701.718), stdev = 4.279
[info]   CI (99.9%): [1683.293, 1716.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   71365.724 ±(99.9%) 1294.013 B/op [Average]
[info]   (min, avg, max) = (70823.509, 71365.724, 71717.776), stdev = 336.051
[info]   CI (99.9%): [70071.711, 72659.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   28.235 ±(99.9%) 243.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.235, 141.177), stdev = 63.136
[info]   CI (99.9%): [≈ 0, 271.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 25.37% complete, ETA 01:04:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6582.768 ops/s
[info] # Warmup Iteration   2: 305886.239 ops/s
[info] # Warmup Iteration   3: 308034.264 ops/s
[info] Iteration   1: 310185.883 ops/s
[info]                  ·gc.alloc.rate:                   321.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             332.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1685.104 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.370 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 309193.634 ops/s
[info]                  ·gc.alloc.rate:      320.531 MB/sec
[info]                  ·gc.alloc.rate.norm: 1632.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 309340.667 ops/s
[info]                  ·gc.alloc.rate:            320.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.789 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1698.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 308012.225 ops/s
[info]                  ·gc.alloc.rate:            319.367 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1705.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 307937.198 ops/s
[info]                  ·gc.alloc.rate:            319.275 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1705.727 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava":
[info]   308933.922 ±(99.9%) 3674.937 ops/s [Average]
[info]   (min, avg, max) = (307937.198, 308933.922, 310185.883), stdev = 954.369
[info]   CI (99.9%): [305258.985, 312608.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   320.385 ±(99.9%) 4.258 MB/sec [Average]
[info]   (min, avg, max) = (319.275, 320.385, 321.941), stdev = 1.106
[info]   CI (99.9%): [316.128, 324.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   266.722 ±(99.9%) 574.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 266.722, 333.789), stdev = 149.103
[info]   CI (99.9%): [≈ 0, 840.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1358.825 ±(99.9%) 2925.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1358.825, 1705.727), stdev = 759.652
[info]   CI (99.9%): [≈ 0, 4283.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.665), stdev = 0.297
[info]   CI (99.9%): [≈ 0, 1.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.674 ±(99.9%) 5.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.674, 3.370), stdev = 1.507
[info]   CI (99.9%): [≈ 0, 6.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.62% complete, ETA 01:04:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60055.002 ops/s
[info] # Warmup Iteration   2: 96084.004 ops/s
[info] # Warmup Iteration   3: 97668.782 ops/s
[info] Iteration   1: 97297.547 ops/s
[info]                  ·gc.alloc.rate:            1075.036 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16324.064 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 98326.877 ops/s
[info]                  ·gc.alloc.rate:            1086.595 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.223 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16153.591 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 98235.753 ops/s
[info]                  ·gc.alloc.rate:                                  1085.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17392.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.183 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.933 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.481 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21750.393 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.035 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 97310.794 ops/s
[info]                  ·gc.alloc.rate:            1075.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16517.165 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 94574.681 ops/s
[info]                  ·gc.alloc.rate:            1045.440 MB/sec
[info]                  ·gc.alloc.rate.norm:       17392.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16994.048 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   97149.130 ±(99.9%) 5853.670 ops/s [Average]
[info]   (min, avg, max) = (94574.681, 97149.130, 98326.877), stdev = 1520.180
[info]   CI (99.9%): [91295.460, 103002.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1073.617 ±(99.9%) 64.104 MB/sec [Average]
[info]   (min, avg, max) = (1045.440, 1073.617, 1086.595), stdev = 16.648
[info]   CI (99.9%): [1009.514, 1137.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17392.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17392.004, 17392.004, 17392.005), stdev = 0.001
[info]   CI (99.9%): [17392.004, 17392.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.183), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.587 ±(99.9%) 5.050 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.933), stdev = 1.311
[info]   CI (99.9%): [≈ 0, 5.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.739 ±(99.9%) 589.731 MB/sec [Average]
[info]   (min, avg, max) = (1009.025, 1083.739, 1357.481), stdev = 153.151
[info]   CI (99.9%): [494.009, 1673.470] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17547.852 ±(99.9%) 9126.917 B/op [Average]
[info]   (min, avg, max) = (16153.591, 17547.852, 21750.393), stdev = 2370.231
[info]   CI (99.9%): [8420.935, 26674.769] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.807 ±(99.9%) 110.271 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.807, 64.035), stdev = 28.637
[info]   CI (99.9%): [≈ 0, 123.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.600, 13.000), stdev = 5.273
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 25.87% complete, ETA 01:03:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 400982.985 ops/s
[info] # Warmup Iteration   2: 400281.606 ops/s
[info] # Warmup Iteration   3: 405404.537 ops/s
[info] Iteration   1: 420277.507 ops/s
[info]                  ·gc.alloc.rate:            273.435 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1262.248 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 419298.171 ops/s
[info]                  ·gc.alloc.rate:            272.683 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.922 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1265.240 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 420958.823 ops/s
[info]                  ·gc.alloc.rate:      273.840 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 419686.144 ops/s
[info]                  ·gc.alloc.rate:            273.018 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1264.004 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 419828.267 ops/s
[info]                  ·gc.alloc.rate:            273.195 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1263.600 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   420009.782 ±(99.9%) 2447.837 ops/s [Average]
[info]   (min, avg, max) = (419298.171, 420009.782, 420958.823), stdev = 635.695
[info]   CI (99.9%): [417561.946, 422457.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   273.234 ±(99.9%) 1.678 MB/sec [Average]
[info]   (min, avg, max) = (272.683, 273.234, 273.840), stdev = 0.436
[info]   CI (99.9%): [271.556, 274.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   269.620 ±(99.9%) 580.378 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.620, 337.118), stdev = 150.722
[info]   CI (99.9%): [≈ 0, 849.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1011.018 ±(99.9%) 2176.297 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1011.018, 1265.240), stdev = 565.177
[info]   CI (99.9%): [≈ 0, 3187.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 26.12% complete, ETA 01:03:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19178.380 ops/s
[info] # Warmup Iteration   2: 38023.469 ops/s
[info] # Warmup Iteration   3: 37314.040 ops/s
[info] Iteration   1: 37955.438 ops/s
[info]                  ·gc.alloc.rate:                                  2025.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.508 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70573.512 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 37791.362 ops/s
[info]                  ·gc.alloc.rate:                                  2017.561 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.527 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85055.665 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 37752.969 ops/s
[info]                  ·gc.alloc.rate:                                  2015.104 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85139.006 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 38690.873 ops/s
[info]                  ·gc.alloc.rate:                                  2065.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.020 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.800 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       83079.671 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 39018.056 ops/s
[info]                  ·gc.alloc.rate:                                  2082.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             84016.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96111.630 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   38241.740 ±(99.9%) 2218.798 ops/s [Average]
[info]   (min, avg, max) = (37752.969, 38241.740, 39018.056), stdev = 576.215
[info]   CI (99.9%): [36022.942, 40460.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2041.398 ±(99.9%) 118.818 MB/sec [Average]
[info]   (min, avg, max) = (2015.104, 2041.398, 2082.760), stdev = 30.857
[info]   CI (99.9%): [1922.580, 2160.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   84016.011 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (84016.010, 84016.011, 84016.013), stdev = 0.001
[info]   CI (99.9%): [84016.007, 84016.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.259 MB/sec [Average]
[info]   (min, avg, max) = (0.002, 0.037, 0.157), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.547 ±(99.9%) 10.736 B/op [Average]
[info]   (min, avg, max) = (0.069, 1.547, 6.508), stdev = 2.788
[info]   CI (99.9%): [≈ 0, 12.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2042.319 ±(99.9%) 927.051 MB/sec [Average]
[info]   (min, avg, max) = (1701.662, 2042.319, 2382.611), stdev = 240.752
[info]   CI (99.9%): [1115.268, 2969.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83991.897 ±(99.9%) 34986.898 B/op [Average]
[info]   (min, avg, max) = (70573.512, 83991.897, 96111.630), stdev = 9085.986
[info]   CI (99.9%): [49004.999, 118978.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 26.37% complete, ETA 01:03:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64903.709 ops/s
[info] # Warmup Iteration   2: 88028.040 ops/s
[info] # Warmup Iteration   3: 87499.529 ops/s
[info] Iteration   1: 87014.176 ops/s
[info]                  ·gc.alloc.rate:            556.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12193.445 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 88070.656 ops/s
[info]                  ·gc.alloc.rate:            563.219 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6023.631 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 87567.268 ops/s
[info]                  ·gc.alloc.rate:            559.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12116.453 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 87845.903 ops/s
[info]                  ·gc.alloc.rate:            561.662 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.067 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12078.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 88440.337 ops/s
[info]                  ·gc.alloc.rate:            565.449 MB/sec
[info]                  ·gc.alloc.rate.norm:       10064.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5998.434 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   87787.668 ±(99.9%) 2070.341 ops/s [Average]
[info]   (min, avg, max) = (87014.176, 87787.668, 88440.337), stdev = 537.661
[info]   CI (99.9%): [85717.327, 89858.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   561.313 ±(99.9%) 13.316 MB/sec [Average]
[info]   (min, avg, max) = (556.308, 561.313, 565.449), stdev = 3.458
[info]   CI (99.9%): [547.997, 574.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10064.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10064.005, 10064.005, 10064.005), stdev = 0.001
[info]   CI (99.9%): [10064.004, 10064.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   539.266 ±(99.9%) 710.767 MB/sec [Average]
[info]   (min, avg, max) = (337.024, 539.266, 674.116), stdev = 184.584
[info]   CI (99.9%): [≈ 0, 1250.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9682.015 ±(99.9%) 12905.059 B/op [Average]
[info]   (min, avg, max) = (5998.434, 9682.015, 12193.445), stdev = 3351.403
[info]   CI (99.9%): [≈ 0, 22587.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 7.000), stdev = 2.191
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 26.62% complete, ETA 01:03:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4664.520 ops/s
[info] # Warmup Iteration   2: 112341.326 ops/s
[info] # Warmup Iteration   3: 110893.285 ops/s
[info] Iteration   1: 114871.750 ops/s
[info]                  ·gc.alloc.rate:            351.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.700 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4572.637 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 113799.425 ops/s
[info]                  ·gc.alloc.rate:            348.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4606.493 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 111963.835 ops/s
[info]                  ·gc.alloc.rate:                   342.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4682.063 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.364 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 112148.661 ops/s
[info]                  ·gc.alloc.rate:            343.174 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4683.689 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 114066.440 ops/s
[info]                  ·gc.alloc.rate:            349.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4605.065 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava":
[info]   113370.022 ±(99.9%) 4868.308 ops/s [Average]
[info]   (min, avg, max) = (111963.835, 113370.022, 114871.750), stdev = 1264.284
[info]   CI (99.9%): [108501.714, 118238.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   346.879 ±(99.9%) 14.847 MB/sec [Average]
[info]   (min, avg, max) = (342.579, 346.879, 351.460), stdev = 3.856
[info]   CI (99.9%): [332.032, 361.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.449 ±(99.9%) 1.487 MB/sec [Average]
[info]   (min, avg, max) = (333.004, 333.449, 333.747), stdev = 0.386
[info]   CI (99.9%): [331.963, 334.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   4629.989 ±(99.9%) 193.088 B/op [Average]
[info]   (min, avg, max) = (4572.637, 4629.989, 4683.689), stdev = 50.144
[info]   CI (99.9%): [4436.901, 4823.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   1.873 ±(99.9%) 16.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.873, 9.364), stdev = 4.188
[info]   CI (99.9%): [≈ 0, 17.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 26.87% complete, ETA 01:03:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69505.941 ops/s
[info] # Warmup Iteration   2: 98204.182 ops/s
[info] # Warmup Iteration   3: 100505.432 ops/s
[info] Iteration   1: 100325.482 ops/s
[info]                  ·gc.alloc.rate:            331.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.379 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5277.208 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 99705.484 ops/s
[info]                  ·gc.alloc.rate:            329.470 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5310.177 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 100621.995 ops/s
[info]                  ·gc.alloc.rate:            332.447 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5261.582 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 98680.935 ops/s
[info]                  ·gc.alloc.rate:            326.020 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5365.218 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 99572.977 ops/s
[info]                  ·gc.alloc.rate:            328.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       5200.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5317.162 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   99781.375 ±(99.9%) 2896.220 ops/s [Average]
[info]   (min, avg, max) = (98680.935, 99781.375, 100621.995), stdev = 752.139
[info]   CI (99.9%): [96885.155, 102677.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   329.675 ±(99.9%) 9.578 MB/sec [Average]
[info]   (min, avg, max) = (326.020, 329.675, 332.447), stdev = 2.487
[info]   CI (99.9%): [320.097, 339.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.397 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (336.378, 336.397, 336.451), stdev = 0.031
[info]   CI (99.9%): [336.278, 336.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   5306.269 ±(99.9%) 154.630 B/op [Average]
[info]   (min, avg, max) = (5261.582, 5306.269, 5365.218), stdev = 40.157
[info]   CI (99.9%): [5151.639, 5460.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.11% complete, ETA 01:02:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99499.763 ops/s
[info] # Warmup Iteration   2: 107279.493 ops/s
[info] # Warmup Iteration   3: 115170.057 ops/s
[info] Iteration   1: 107601.855 ops/s
[info]                  ·gc.alloc.rate:            329.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4920.422 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 114810.803 ops/s
[info]                  ·gc.alloc.rate:            351.209 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9222.947 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 114913.824 ops/s
[info]                  ·gc.alloc.rate:            351.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.360 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4607.341 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 114726.861 ops/s
[info]                  ·gc.alloc.rate:            351.002 MB/sec
[info]                  ·gc.alloc.rate.norm:       4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4614.849 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 114900.314 ops/s
[info]                  ·gc.alloc.rate:                   351.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4607.902 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.125 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   113390.731 ±(99.9%) 12464.373 ops/s [Average]
[info]   (min, avg, max) = (107601.855, 113390.731, 114913.824), stdev = 3236.958
[info]   CI (99.9%): [100926.358, 125855.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   346.918 ±(99.9%) 38.081 MB/sec [Average]
[info]   (min, avg, max) = (329.233, 346.918, 351.593), stdev = 9.889
[info]   CI (99.9%): [308.837, 384.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.004, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.604 ±(99.9%) 579.007 MB/sec [Average]
[info]   (min, avg, max) = (336.341, 403.604, 672.588), stdev = 150.366
[info]   CI (99.9%): [≈ 0, 982.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5594.692 ±(99.9%) 7827.229 B/op [Average]
[info]   (min, avg, max) = (4607.341, 5594.692, 9222.947), stdev = 2032.706
[info]   CI (99.9%): [≈ 0, 13421.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.825 ±(99.9%) 15.713 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.825, 9.125), stdev = 4.081
[info]   CI (99.9%): [≈ 0, 17.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 27.36% complete, ETA 01:02:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99922.009 ops/s
[info] # Warmup Iteration   2: 110438.503 ops/s
[info] # Warmup Iteration   3: 112781.212 ops/s
[info] Iteration   1: 113634.235 ops/s
[info]                  ·gc.alloc.rate:            258.189 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4659.190 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 115364.710 ops/s
[info]                  ·gc.alloc.rate:      262.070 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 114027.196 ops/s
[info]                  ·gc.alloc.rate:            259.046 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4643.297 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115493.811 ops/s
[info]                  ·gc.alloc.rate:            262.373 MB/sec
[info]                  ·gc.alloc.rate.norm:       3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4584.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115516.072 ops/s
[info]                  ·gc.alloc.rate:                   262.410 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4583.334 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.076 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   114807.205 ±(99.9%) 3481.058 ops/s [Average]
[info]   (min, avg, max) = (113634.235, 114807.205, 115516.072), stdev = 904.020
[info]   CI (99.9%): [111326.147, 118288.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   260.818 ±(99.9%) 7.838 MB/sec [Average]
[info]   (min, avg, max) = (258.189, 260.818, 262.410), stdev = 2.036
[info]   CI (99.9%): [252.979, 268.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.004, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   269.086 ±(99.9%) 579.228 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.086, 336.395), stdev = 150.424
[info]   CI (99.9%): [≈ 0, 848.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   3694.005 ±(99.9%) 7952.716 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3694.005, 4659.190), stdev = 2065.295
[info]   CI (99.9%): [≈ 0, 11646.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   1.815 ±(99.9%) 15.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.815, 9.076), stdev = 4.059
[info]   CI (99.9%): [≈ 0, 17.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 27.61% complete, ETA 01:02:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5578.006 ops/s
[info] # Warmup Iteration   2: 8612.104 ops/s
[info] # Warmup Iteration   3: 9057.478 ops/s
[info] Iteration   1: 8929.839 ops/s
[info]                  ·gc.alloc.rate:            1468.891 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237608.355 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 9074.413 ops/s
[info]                  ·gc.alloc.rate:                                  1492.898 MB/sec
[info]                  ·gc.alloc.rate.norm:                             258856.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1699.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294608.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                577.664 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9113.620 ops/s
[info]                  ·gc.alloc.rate:            1498.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 235112.916 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 9086.155 ops/s
[info]                  ·gc.alloc.rate:                                  1494.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             258856.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       294796.620 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 9069.798 ops/s
[info]                  ·gc.alloc.rate:            1491.686 MB/sec
[info]                  ·gc.alloc.rate.norm:       258856.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236253.235 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9054.765 ±(99.9%) 276.789 ops/s [Average]
[info]   (min, avg, max) = (8929.839, 9054.765, 9113.620), stdev = 71.881
[info]   CI (99.9%): [8777.976, 9331.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1489.348 ±(99.9%) 45.309 MB/sec [Average]
[info]   (min, avg, max) = (1468.891, 1489.348, 1498.994), stdev = 11.767
[info]   CI (99.9%): [1444.038, 1534.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258856.053 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (258856.045, 258856.053, 258856.077), stdev = 0.014
[info]   CI (99.9%): [258856.001, 258856.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.078), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.191 ±(99.9%) 22.489 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.191, 13.458), stdev = 5.840
[info]   CI (99.9%): [≈ 0, 25.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1494.418 ±(99.9%) 724.419 MB/sec [Average]
[info]   (min, avg, max) = (1348.320, 1494.418, 1701.740), stdev = 188.129
[info]   CI (99.9%): [769.999, 2218.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   259675.970 ±(99.9%) 123171.038 B/op [Average]
[info]   (min, avg, max) = (235112.916, 259675.970, 294796.620), stdev = 31987.127
[info]   CI (99.9%): [136504.932, 382847.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   115.533 ±(99.9%) 994.773 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 115.533, 577.664), stdev = 258.339
[info]   CI (99.9%): [≈ 0, 1110.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.615
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 27.86% complete, ETA 01:02:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4372.403 ops/s
[info] # Warmup Iteration   2: 8982.386 ops/s
[info] # Warmup Iteration   3: 9138.123 ops/s
[info] Iteration   1: 9085.048 ops/s
[info]                  ·gc.alloc.rate:                   1417.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              245560.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        232952.789 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 115.380 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 9122.423 ops/s
[info]                  ·gc.alloc.rate:                                  1423.008 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.387 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       234217.217 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                689.550 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 9210.925 ops/s
[info]                  ·gc.alloc.rate:                                  1437.038 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.663 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       290796.883 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 9184.549 ops/s
[info]                  ·gc.alloc.rate:            1433.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       245560.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.502 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 233295.890 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 9283.328 ops/s
[info]                  ·gc.alloc.rate:                                  1448.338 MB/sec
[info]                  ·gc.alloc.rate.norm:                             245560.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.222 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       230808.674 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   9177.255 ±(99.9%) 297.941 ops/s [Average]
[info]   (min, avg, max) = (9085.048, 9177.255, 9283.328), stdev = 77.374
[info]   CI (99.9%): [8879.313, 9475.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1431.751 ±(99.9%) 46.777 MB/sec [Average]
[info]   (min, avg, max) = (1417.294, 1431.751, 1448.338), stdev = 12.148
[info]   CI (99.9%): [1384.973, 1478.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   245560.045 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (245560.044, 245560.045, 245560.048), stdev = 0.002
[info]   CI (99.9%): [245560.039, 245560.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.254 ±(99.9%) 34.741 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.254, 20.387), stdev = 9.022
[info]   CI (99.9%): [≈ 0, 38.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1425.282 ±(99.9%) 595.754 MB/sec [Average]
[info]   (min, avg, max) = (1344.529, 1425.282, 1701.768), stdev = 154.716
[info]   CI (99.9%): [829.527, 2021.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   244414.290 ±(99.9%) 99957.829 B/op [Average]
[info]   (min, avg, max) = (230808.674, 244414.290, 290796.883), stdev = 25958.731
[info]   CI (99.9%): [144456.461, 344372.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   160.986 ±(99.9%) 1153.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 160.986, 689.550), stdev = 299.670
[info]   CI (99.9%): [≈ 0, 1314.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.683
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.11% complete, ETA 01:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115570.016 ops/s
[info] # Warmup Iteration   2: 111006.905 ops/s
[info] # Warmup Iteration   3: 115809.728 ops/s
[info] Iteration   1: 115887.317 ops/s
[info]                  ·gc.alloc.rate:            301.588 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4586.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 115268.467 ops/s
[info]                  ·gc.alloc.rate:            299.893 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4611.464 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 114454.549 ops/s
[info]                  ·gc.alloc.rate:            297.818 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4644.175 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 115455.969 ops/s
[info]                  ·gc.alloc.rate:            300.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4603.996 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 115389.160 ops/s
[info]                  ·gc.alloc.rate:            300.303 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4606.629 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   115291.092 ±(99.9%) 2012.492 ops/s [Average]
[info]   (min, avg, max) = (114454.549, 115291.092, 115887.317), stdev = 522.638
[info]   CI (99.9%): [113278.600, 117303.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   300.012 ±(99.9%) 5.307 MB/sec [Average]
[info]   (min, avg, max) = (297.818, 300.012, 301.588), stdev = 1.378
[info]   CI (99.9%): [294.705, 305.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.700 ±(99.9%) 0.172 MB/sec [Average]
[info]   (min, avg, max) = (337.633, 337.700, 337.740), stdev = 0.045
[info]   CI (99.9%): [337.528, 337.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4610.620 ±(99.9%) 80.592 B/op [Average]
[info]   (min, avg, max) = (4586.836, 4610.620, 4644.175), stdev = 20.929
[info]   CI (99.9%): [4530.028, 4691.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 28.36% complete, ETA 01:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1774.015 ops/s
[info] # Warmup Iteration   2: 4622.542 ops/s
[info] # Warmup Iteration   3: 4648.932 ops/s
[info] Iteration   1: 4853.948 ops/s
[info]                  ·gc.alloc.rate:            1289.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 436276.729 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 4892.660 ops/s
[info]                  ·gc.alloc.rate:                                  1299.230 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418024.090 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       434085.610 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1285.545 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 4812.682 ops/s
[info]                  ·gc.alloc.rate:                                  1278.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418024.085 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.762 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.182 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       445220.055 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 4981.665 ops/s
[info]                  ·gc.alloc.rate:            1323.340 MB/sec
[info]                  ·gc.alloc.rate.norm:       418024.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430120.278 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 4965.504 ops/s
[info]                  ·gc.alloc.rate:                                  1318.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             418024.082 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.982 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       323629.355 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   4901.292 ±(99.9%) 277.345 ops/s [Average]
[info]   (min, avg, max) = (4812.682, 4901.292, 4981.665), stdev = 72.026
[info]   CI (99.9%): [4623.947, 5178.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1301.679 ±(99.9%) 74.244 MB/sec [Average]
[info]   (min, avg, max) = (1278.035, 1301.679, 1323.340), stdev = 19.281
[info]   CI (99.9%): [1227.434, 1375.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   418024.086 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (418024.082, 418024.086, 418024.091), stdev = 0.004
[info]   CI (99.9%): [418024.070, 418024.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.076), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   7.101 ±(99.9%) 41.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.101, 24.428), stdev = 10.730
[info]   CI (99.9%): [≈ 0, 48.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1287.648 ±(99.9%) 574.694 MB/sec [Average]
[info]   (min, avg, max) = (1020.982, 1287.648, 1361.633), stdev = 149.246
[info]   CI (99.9%): [712.955, 1862.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   413866.405 ±(99.9%) 195408.359 B/op [Average]
[info]   (min, avg, max) = (323629.355, 413866.405, 445220.055), stdev = 50746.930
[info]   CI (99.9%): [218458.046, 609274.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   257.109 ±(99.9%) 2213.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 257.109, 1285.545), stdev = 574.913
[info]   CI (99.9%): [≈ 0, 2470.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 17.000), stdev = 6.797
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 28.61% complete, ETA 01:01:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16531.297 ops/s
[info] # Warmup Iteration   2: 24093.695 ops/s
[info] # Warmup Iteration   3: 24032.943 ops/s
[info] Iteration   1: 24060.442 ops/s
[info]                  ·gc.alloc.rate:            1353.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       88528.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1685.190 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110247.986 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 24304.265 ops/s
[info]                  ·gc.alloc.rate:                                  1366.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88522.909 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.056 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.602 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87956.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                215.685 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 25436.403 ops/s
[info]                  ·gc.alloc.rate:                                  1430.478 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88504.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.594 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84242.172 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 24993.137 ops/s
[info]                  ·gc.alloc.rate:                                  1405.378 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88504.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85738.433 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 25348.694 ops/s
[info]                  ·gc.alloc.rate:                                  1425.556 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88504.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.244 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84537.899 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24828.588 ±(99.9%) 2383.039 ops/s [Average]
[info]   (min, avg, max) = (24060.442, 24828.588, 25436.403), stdev = 618.868
[info]   CI (99.9%): [22445.550, 27211.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1396.294 ±(99.9%) 133.823 MB/sec [Average]
[info]   (min, avg, max) = (1353.191, 1396.294, 1430.478), stdev = 34.753
[info]   CI (99.9%): [1262.471, 1530.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88512.595 ±(99.9%) 45.766 B/op [Average]
[info]   (min, avg, max) = (88504.016, 88512.595, 88528.018), stdev = 11.885
[info]   CI (99.9%): [88466.829, 88558.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.056), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.889 ±(99.9%) 5.889 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.889, 3.602), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 6.778] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1425.608 ±(99.9%) 558.800 MB/sec [Average]
[info]   (min, avg, max) = (1358.120, 1425.608, 1685.190), stdev = 145.119
[info]   CI (99.9%): [866.808, 1984.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   90544.597 ±(99.9%) 42784.709 B/op [Average]
[info]   (min, avg, max) = (84242.172, 90544.597, 110247.986), stdev = 11111.053
[info]   CI (99.9%): [47759.888, 133329.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.137 ±(99.9%) 371.423 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.137, 215.685), stdev = 96.457
[info]   CI (99.9%): [≈ 0, 414.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 28.86% complete, ETA 01:01:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14517.206 ops/s
[info] # Warmup Iteration   2: 28498.238 ops/s
[info] # Warmup Iteration   3: 27337.759 ops/s
[info] Iteration   1: 27613.463 ops/s
[info]                  ·gc.alloc.rate:            1403.629 MB/sec
[info]                  ·gc.alloc.rate.norm:       80016.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.299 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76690.811 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 28789.743 ops/s
[info]                  ·gc.alloc.rate:                                  1463.369 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.145 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.922 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92822.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                218.491 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 28610.712 ops/s
[info]                  ·gc.alloc.rate:                                  1454.467 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74895.668 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 29174.569 ops/s
[info]                  ·gc.alloc.rate:                                  1483.307 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73453.146 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28970.652 ops/s
[info]                  ·gc.alloc.rate:                                  1473.168 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80016.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       92459.680 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala":
[info]   28631.828 ±(99.9%) 2335.774 ops/s [Average]
[info]   (min, avg, max) = (27613.463, 28631.828, 29174.569), stdev = 606.593
[info]   CI (99.9%): [26296.054, 30967.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1455.588 ±(99.9%) 119.291 MB/sec [Average]
[info]   (min, avg, max) = (1403.629, 1455.588, 1483.307), stdev = 30.979
[info]   CI (99.9%): [1336.297, 1574.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   80016.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (80016.014, 80016.015, 80016.018), stdev = 0.002
[info]   CI (99.9%): [80016.009, 80016.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.248 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.145), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.624 ±(99.9%) 13.558 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.624, 7.922), stdev = 3.521
[info]   CI (99.9%): [≈ 0, 15.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.637 ±(99.9%) 725.599 MB/sec [Average]
[info]   (min, avg, max) = (1345.299, 1493.637, 1702.267), stdev = 188.436
[info]   CI (99.9%): [768.037, 2219.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   82064.336 ±(99.9%) 37443.215 B/op [Average]
[info]   (min, avg, max) = (73453.146, 82064.336, 92822.373), stdev = 9723.884
[info]   CI (99.9%): [44621.121, 119507.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   43.698 ±(99.9%) 376.255 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.698, 218.491), stdev = 97.712
[info]   CI (99.9%): [≈ 0, 419.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 16.000), stdev = 5.273
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 29.10% complete, ETA 01:01:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 314800.516 ops/s
[info] # Warmup Iteration   2: 339541.060 ops/s
[info] # Warmup Iteration   3: 368720.414 ops/s
[info] Iteration   1: 369520.040 ops/s
[info]                  ·gc.alloc.rate:            816.934 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4298.361 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 370617.787 ops/s
[info]                  ·gc.alloc.rate:            819.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2857.109 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 370223.527 ops/s
[info]                  ·gc.alloc.rate:                   818.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4290.340 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.832 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 371513.919 ops/s
[info]                  ·gc.alloc.rate:                   821.415 MB/sec
[info]                  ·gc.alloc.rate.norm:              3480.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2853.034 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.932 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 374519.938 ops/s
[info]                  ·gc.alloc.rate:                                  827.987 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3480.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.128 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.538 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4291.534 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   371279.042 ±(99.9%) 7507.282 ops/s [Average]
[info]   (min, avg, max) = (369520.040, 371279.042, 374519.938), stdev = 1949.617
[info]   CI (99.9%): [363771.760, 378786.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   820.873 ±(99.9%) 16.548 MB/sec [Average]
[info]   (min, avg, max) = (816.934, 820.873, 827.987), stdev = 4.298
[info]   CI (99.9%): [804.325, 837.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3480.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3480.001, 3480.001, 3480.001), stdev = 0.001
[info]   CI (99.9%): [3480.001, 3480.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.128), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.108 ±(99.9%) 0.926 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.108, 0.538), stdev = 0.241
[info]   CI (99.9%): [≈ 0, 1.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.095 ±(99.9%) 717.186 MB/sec [Average]
[info]   (min, avg, max) = (672.849, 877.095, 1021.073), stdev = 186.251
[info]   CI (99.9%): [159.908, 1594.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3718.076 ±(99.9%) 3033.609 B/op [Average]
[info]   (min, avg, max) = (2853.034, 3718.076, 4298.361), stdev = 787.819
[info]   CI (99.9%): [684.467, 6751.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.953 ±(99.9%) 28.335 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.953, 16.932), stdev = 7.358
[info]   CI (99.9%): [≈ 0, 32.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 10.000), stdev = 2.168
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 29.35% complete, ETA 01:00:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 350951.474 ops/s
[info] # Warmup Iteration   2: 392751.865 ops/s
[info] # Warmup Iteration   3: 404743.044 ops/s
[info] Iteration   1: 404833.399 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 403475.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 403960.962 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 404509.184 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 404206.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   404197.190 ±(99.9%) 1999.222 ops/s [Average]
[info]   (min, avg, max) = (403475.909, 404197.190, 404833.399), stdev = 519.192
[info]   CI (99.9%): [402197.968, 406196.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 29.60% complete, ETA 01:00:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17498.903 ops/s
[info] # Warmup Iteration   2: 27846.347 ops/s
[info] # Warmup Iteration   3: 28169.078 ops/s
[info] Iteration   1: 27964.866 ops/s
[info]                  ·gc.alloc.rate:                   1471.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              82824.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        94660.508 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 224.936 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 28431.832 ops/s
[info]                  ·gc.alloc.rate:                                  1495.865 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.109 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.049 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75369.742 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 28343.345 ops/s
[info]                  ·gc.alloc.rate:                                  1491.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75603.702 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 28051.838 ops/s
[info]                  ·gc.alloc.rate:                                  1475.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.719 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       95491.577 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 28430.223 ops/s
[info]                  ·gc.alloc.rate:                                  1496.211 MB/sec
[info]                  ·gc.alloc.rate.norm:                             82824.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75375.043 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28244.421 ±(99.9%) 849.481 ops/s [Average]
[info]   (min, avg, max) = (27964.866, 28244.421, 28431.832), stdev = 220.607
[info]   CI (99.9%): [27394.940, 29093.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1486.178 ±(99.9%) 44.940 MB/sec [Average]
[info]   (min, avg, max) = (1471.396, 1486.178, 1496.211), stdev = 11.671
[info]   CI (99.9%): [1441.238, 1531.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82824.016 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (82824.014, 82824.016, 82824.021), stdev = 0.003
[info]   CI (99.9%): [82824.006, 82824.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.109), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.262 ±(99.9%) 10.308 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.262, 6.049), stdev = 2.677
[info]   CI (99.9%): [≈ 0, 11.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1493.540 ±(99.9%) 697.084 MB/sec [Average]
[info]   (min, avg, max) = (1361.235, 1493.540, 1701.719), stdev = 181.031
[info]   CI (99.9%): [796.456, 2190.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   83300.114 ±(99.9%) 41411.103 B/op [Average]
[info]   (min, avg, max) = (75369.742, 83300.114, 95491.577), stdev = 10754.332
[info]   CI (99.9%): [41889.011, 124711.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.987 ±(99.9%) 387.353 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.987, 224.936), stdev = 100.594
[info]   CI (99.9%): [≈ 0, 432.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 20.000), stdev = 7.155
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 29.85% complete, ETA 01:00:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106145.743 ops/s
[info] # Warmup Iteration   2: 131870.977 ops/s
[info] # Warmup Iteration   3: 132198.883 ops/s
[info] Iteration   1: 132783.198 ops/s
[info]                  ·gc.alloc.rate:                                  2162.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.076 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.906 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.059 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28242.584 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 132639.046 ops/s
[info]                  ·gc.alloc.rate:                                  2160.448 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24234.571 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 133361.814 ops/s
[info]                  ·gc.alloc.rate:                                  2172.557 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28120.620 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 132829.660 ops/s
[info]                  ·gc.alloc.rate:                                  2164.566 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.120 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24199.365 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 132713.030 ops/s
[info]                  ·gc.alloc.rate:                                  2162.477 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25640.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.773 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24220.695 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   132865.349 ±(99.9%) 1104.191 ops/s [Average]
[info]   (min, avg, max) = (132639.046, 132865.349, 133361.814), stdev = 286.755
[info]   CI (99.9%): [131761.158, 133969.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2164.519 ±(99.9%) 18.187 MB/sec [Average]
[info]   (min, avg, max) = (2160.448, 2164.519, 2172.557), stdev = 4.723
[info]   CI (99.9%): [2146.332, 2182.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.020, 0.076), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.239 ±(99.9%) 1.444 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.239, 0.906), stdev = 0.375
[info]   CI (99.9%): [≈ 0, 1.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2178.510 ±(99.9%) 716.715 MB/sec [Average]
[info]   (min, avg, max) = (2042.025, 2178.510, 2382.747), stdev = 186.129
[info]   CI (99.9%): [1461.794, 2895.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   25803.567 ±(99.9%) 8360.915 B/op [Average]
[info]   (min, avg, max) = (24199.365, 25803.567, 28242.584), stdev = 2171.303
[info]   CI (99.9%): [17442.652, 34164.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 30.10% complete, ETA 01:00:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16685.331 ops/s
[info] # Warmup Iteration   2: 468410.004 ops/s
[info] # Warmup Iteration   3: 464667.276 ops/s
[info] Iteration   1: 479585.458 ops/s
[info]                  ·gc.alloc.rate:            497.233 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1095.229 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 475605.489 ops/s
[info]                  ·gc.alloc.rate:                   493.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2206.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.204 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 479609.155 ops/s
[info]                  ·gc.alloc.rate:            497.347 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1095.174 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 479154.141 ops/s
[info]                  ·gc.alloc.rate:            496.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2192.442 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 473355.993 ops/s
[info]                  ·gc.alloc.rate:            490.856 MB/sec
[info]                  ·gc.alloc.rate.norm:       1632.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1109.607 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava":
[info]   477462.047 ±(99.9%) 10940.271 ops/s [Average]
[info]   (min, avg, max) = (473355.993, 477462.047, 479609.155), stdev = 2841.154
[info]   CI (99.9%): [466521.776, 488402.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   495.068 ±(99.9%) 11.325 MB/sec [Average]
[info]   (min, avg, max) = (490.856, 495.068, 497.347), stdev = 2.941
[info]   CI (99.9%): [483.743, 506.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   1632.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1632.001, 1632.001, 1632.001), stdev = 0.001
[info]   CI (99.9%): [1632.001, 1632.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.059 ±(99.9%) 703.028 MB/sec [Average]
[info]   (min, avg, max) = (333.691, 467.059, 667.426), stdev = 182.574
[info]   CI (99.9%): [≈ 0, 1170.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1539.808 ±(99.9%) 2319.152 B/op [Average]
[info]   (min, avg, max) = (1095.174, 1539.808, 2206.586), stdev = 602.276
[info]   CI (99.9%): [≈ 0, 3858.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.441 ±(99.9%) 3.796 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.441, 2.204), stdev = 0.986
[info]   CI (99.9%): [≈ 0, 4.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readDslJsonJava:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.35% complete, ETA 01:00:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169720.575 ops/s
[info] # Warmup Iteration   2: 275020.095 ops/s
[info] # Warmup Iteration   3: 268792.752 ops/s
[info] Iteration   1: 278964.010 ops/s
[info]                  ·gc.alloc.rate:            399.861 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1897.851 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 277244.556 ops/s
[info]                  ·gc.alloc.rate:            397.477 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1909.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 277262.874 ops/s
[info]                  ·gc.alloc.rate:            397.377 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1909.554 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 277859.396 ops/s
[info]                  ·gc.alloc.rate:            398.203 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1905.452 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 277975.614 ops/s
[info]                  ·gc.alloc.rate:            398.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       2256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1904.643 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   277861.290 ±(99.9%) 2700.622 ops/s [Average]
[info]   (min, avg, max) = (277244.556, 277861.290, 278964.010), stdev = 701.343
[info]   CI (99.9%): [275160.668, 280561.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   398.266 ±(99.9%) 3.842 MB/sec [Average]
[info]   (min, avg, max) = (397.377, 398.266, 399.861), stdev = 0.998
[info]   CI (99.9%): [394.424, 402.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2256.001, 2256.002, 2256.002), stdev = 0.001
[info]   CI (99.9%): [2256.001, 2256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   336.377 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 336.377, 336.459), stdev = 0.050
[info]   CI (99.9%): [336.185, 336.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1905.436 ±(99.9%) 18.579 B/op [Average]
[info]   (min, avg, max) = (1897.851, 1905.436, 1909.678), stdev = 4.825
[info]   CI (99.9%): [1886.857, 1924.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 30.60% complete, ETA 00:59:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 658362.376 ops/s
[info] # Warmup Iteration   2: 702539.810 ops/s
[info] # Warmup Iteration   3: 702895.589 ops/s
[info] Iteration   1: 708857.542 ops/s
[info]                  ·gc.alloc.rate:            461.105 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.983 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 748.356 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 709264.736 ops/s
[info]                  ·gc.alloc.rate:            461.362 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.989 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 747.952 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 706851.303 ops/s
[info]                  ·gc.alloc.rate:            459.804 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1501.019 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 700890.561 ops/s
[info]                  ·gc.alloc.rate:            456.017 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.064 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 756.888 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 686625.829 ops/s
[info]                  ·gc.alloc.rate:            446.652 MB/sec
[info]                  ·gc.alloc.rate.norm:       1024.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 772.620 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   702497.995 ±(99.9%) 36514.857 ops/s [Average]
[info]   (min, avg, max) = (686625.829, 702497.995, 709264.736), stdev = 9482.792
[info]   CI (99.9%): [665983.138, 739012.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   456.988 ±(99.9%) 23.721 MB/sec [Average]
[info]   (min, avg, max) = (446.652, 456.988, 461.362), stdev = 6.160
[info]   CI (99.9%): [433.267, 480.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.000, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.408 ±(99.9%) 580.315 MB/sec [Average]
[info]   (min, avg, max) = (336.983, 404.408, 673.999), stdev = 150.706
[info]   CI (99.9%): [≈ 0, 984.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   905.367 ±(99.9%) 1282.763 B/op [Average]
[info]   (min, avg, max) = (747.952, 905.367, 1501.019), stdev = 333.129
[info]   CI (99.9%): [≈ 0, 2188.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 6.000), stdev = 1.342
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 30.85% complete, ETA 00:59:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36895.139 ops/s
[info] # Warmup Iteration   2: 67509.705 ops/s
[info] # Warmup Iteration   3: 69531.579 ops/s
[info] Iteration   1: 69366.981 ops/s
[info]                  ·gc.alloc.rate:                                  3038.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.234 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69508.079 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 70827.816 ops/s
[info]                  ·gc.alloc.rate:                                  3102.458 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.240 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68074.549 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 69981.145 ops/s
[info]                  ·gc.alloc.rate:                                  3065.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.027 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       68898.333 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 69578.863 ops/s
[info]                  ·gc.alloc.rate:                                  3048.361 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.208 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69296.332 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 69569.766 ops/s
[info]                  ·gc.alloc.rate:                                  3047.722 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68952.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.294 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69304.299 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   69864.914 ±(99.9%) 2243.280 ops/s [Average]
[info]   (min, avg, max) = (69366.981, 69864.914, 70827.816), stdev = 582.573
[info]   CI (99.9%): [67621.634, 72108.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3060.488 ±(99.9%) 97.789 MB/sec [Average]
[info]   (min, avg, max) = (3038.488, 3060.488, 3102.458), stdev = 25.396
[info]   CI (99.9%): [2962.699, 3158.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68952.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (68952.006, 68952.006, 68952.006), stdev = 0.001
[info]   CI (99.9%): [68952.005, 68952.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.006, 0.010, 0.012), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.217 ±(99.9%) 0.216 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.217, 0.276), stdev = 0.056
[info]   CI (99.9%): [0.001, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.175 ±(99.9%) 1.012 MB/sec [Average]
[info]   (min, avg, max) = (3062.977, 3063.175, 3063.584), stdev = 0.263
[info]   CI (99.9%): [3062.163, 3064.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   69016.318 ±(99.9%) 2198.596 B/op [Average]
[info]   (min, avg, max) = (68074.549, 69016.318, 69508.079), stdev = 570.968
[info]   CI (99.9%): [66817.722, 71214.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 31.09% complete, ETA 00:59:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 171615.196 ops/s
[info] # Warmup Iteration   2: 218828.605 ops/s
[info] # Warmup Iteration   3: 219224.133 ops/s
[info] Iteration   1: 218312.145 ops/s
[info]                  ·gc.alloc.rate:                                  1535.475 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11072.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12173.814 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.011 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        20.000 ms
[info] Iteration   2: 222810.697 ops/s
[info]                  ·gc.alloc.rate:                                  1567.225 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11072.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.382 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12022.580 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 220836.211 ops/s
[info]                  ·gc.alloc.rate:                                  1553.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11072.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9704.201 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 214910.985 ops/s
[info]                  ·gc.alloc.rate:                                  1511.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11072.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.823 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       12463.999 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 214796.208 ops/s
[info]                  ·gc.alloc.rate:                                  1511.089 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11072.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.588 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9976.583 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   218333.249 ±(99.9%) 13686.772 ops/s [Average]
[info]   (min, avg, max) = (214796.208, 218333.249, 222810.697), stdev = 3554.411
[info]   CI (99.9%): [204646.477, 232020.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1535.879 ±(99.9%) 96.299 MB/sec [Average]
[info]   (min, avg, max) = (1511.089, 1535.879, 1567.225), stdev = 25.009
[info]   CI (99.9%): [1439.580, 1632.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11072.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11072.002, 11072.002, 11072.002), stdev = 0.001
[info]   CI (99.9%): [11072.002, 11072.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.021, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.148 ±(99.9%) 0.664 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.148, 0.382), stdev = 0.172
[info]   CI (99.9%): [≈ 0, 0.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.070 ±(99.9%) 708.030 MB/sec [Average]
[info]   (min, avg, max) = (1361.588, 1563.070, 1701.823), stdev = 183.873
[info]   CI (99.9%): [855.040, 2271.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   11268.236 ±(99.9%) 5069.679 B/op [Average]
[info]   (min, avg, max) = (9704.201, 11268.236, 12463.999), stdev = 1316.580
[info]   CI (99.9%): [6198.557, 16337.915] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.802 ±(99.9%) 41.349 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.802, 24.011), stdev = 10.738
[info]   CI (99.9%): [≈ 0, 46.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 20.000), stdev = 7.057
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 31.34% complete, ETA 00:59:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27152.889 ops/s
[info] # Warmup Iteration   2: 945770.807 ops/s
[info] # Warmup Iteration   3: 934633.176 ops/s
[info] Iteration   1: 950525.056 ops/s
[info]                  ·gc.alloc.rate:            516.920 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 552.616 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 936718.313 ops/s
[info]                  ·gc.alloc.rate:            509.391 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1121.537 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 949876.468 ops/s
[info]                  ·gc.alloc.rate:            516.579 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 552.999 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 950100.637 ops/s
[info]                  ·gc.alloc.rate:            516.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.489 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1105.741 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 946960.140 ops/s
[info]                  ·gc.alloc.rate:            515.003 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 554.703 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava":
[info]   946836.123 ±(99.9%) 22444.204 ops/s [Average]
[info]   (min, avg, max) = (936718.313, 946836.123, 950525.056), stdev = 5828.688
[info]   CI (99.9%): [924391.919, 969280.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   514.925 ±(99.9%) 12.270 MB/sec [Average]
[info]   (min, avg, max) = (509.391, 514.925, 516.920), stdev = 3.186
[info]   CI (99.9%): [502.655, 527.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.213 ±(99.9%) 703.856 MB/sec [Average]
[info]   (min, avg, max) = (333.713, 467.213, 667.489), stdev = 182.789
[info]   CI (99.9%): [≈ 0, 1171.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   777.519 ±(99.9%) 1181.709 B/op [Average]
[info]   (min, avg, max) = (552.616, 777.519, 1121.537), stdev = 306.886
[info]   CI (99.9%): [≈ 0, 1959.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 10.000), stdev = 2.950
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.59% complete, ETA 00:58:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 550572.176 ops/s
[info] # Warmup Iteration   2: 828237.056 ops/s
[info] # Warmup Iteration   3: 830546.468 ops/s
[info] Iteration   1: 823468.011 ops/s
[info]                  ·gc.alloc.rate:            648.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1285.882 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 826974.550 ops/s
[info]                  ·gc.alloc.rate:                   651.368 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1279.173 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.268 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 828641.891 ops/s
[info]                  ·gc.alloc.rate:            652.731 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1277.867 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 826956.042 ops/s
[info]                  ·gc.alloc.rate:            651.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1280.469 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 801864.226 ops/s
[info]                  ·gc.alloc.rate:            631.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       1240.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 660.256 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   821580.944 ±(99.9%) 43057.949 ops/s [Average]
[info]   (min, avg, max) = (801864.226, 821580.944, 828641.891), stdev = 11182.013
[info]   CI (99.9%): [778522.995, 864638.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   647.201 ±(99.9%) 33.840 MB/sec [Average]
[info]   (min, avg, max) = (631.709, 647.201, 652.731), stdev = 8.788
[info]   CI (99.9%): [613.361, 681.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.001, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.287 ±(99.9%) 578.881 MB/sec [Average]
[info]   (min, avg, max) = (336.363, 605.287, 672.808), stdev = 150.334
[info]   CI (99.9%): [26.406, 1184.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1156.730 ±(99.9%) 1068.761 B/op [Average]
[info]   (min, avg, max) = (660.256, 1156.730, 1285.882), stdev = 277.554
[info]   CI (99.9%): [87.969, 2225.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.254 ±(99.9%) 2.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.254, 1.268), stdev = 0.567
[info]   CI (99.9%): [≈ 0, 2.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 9.000), stdev = 1.643
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 31.84% complete, ETA 00:58:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 941732.444 ops/s
[info] # Warmup Iteration   2: 1056956.489 ops/s
[info] # Warmup Iteration   3: 1061066.134 ops/s
[info] Iteration   1: 1071681.115 ops/s
[info]                  ·gc.alloc.rate:            582.975 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 494.022 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 1059014.711 ops/s
[info]                  ·gc.alloc.rate:                   575.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.601 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        999.887 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1068152.470 ops/s
[info]                  ·gc.alloc.rate:            581.059 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.608 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 992.341 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1069610.408 ops/s
[info]                  ·gc.alloc.rate:            581.704 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 494.992 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 1068027.287 ops/s
[info]                  ·gc.alloc.rate:            580.762 MB/sec
[info]                  ·gc.alloc.rate.norm:       856.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 991.454 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1067297.198 ±(99.9%) 18709.709 ops/s [Average]
[info]   (min, avg, max) = (1059014.711, 1067297.198, 1071681.115), stdev = 4858.852
[info]   CI (99.9%): [1048587.489, 1086006.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   580.462 ±(99.9%) 10.533 MB/sec [Average]
[info]   (min, avg, max) = (575.812, 580.462, 582.975), stdev = 2.735
[info]   CI (99.9%): [569.929, 590.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.340 ±(99.9%) 709.799 MB/sec [Average]
[info]   (min, avg, max) = (336.377, 538.340, 673.608), stdev = 184.332
[info]   CI (99.9%): [≈ 0, 1248.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   794.539 ±(99.9%) 1054.732 B/op [Average]
[info]   (min, avg, max) = (494.022, 794.539, 999.887), stdev = 273.910
[info]   CI (99.9%): [≈ 0, 1849.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.198 ±(99.9%) 1.705 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.198, 0.990), stdev = 0.443
[info]   CI (99.9%): [≈ 0, 1.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 32.09% complete, ETA 00:58:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1029874.028 ops/s
[info] # Warmup Iteration   2: 1123745.231 ops/s
[info] # Warmup Iteration   3: 1122930.073 ops/s
[info] Iteration   1: 1121458.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1119983.308 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1121388.003 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1104726.186 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1103862.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1114283.689 ±(99.9%) 35206.451 ops/s [Average]
[info]   (min, avg, max) = (1103862.588, 1114283.689, 1121458.360), stdev = 9143.004
[info]   CI (99.9%): [1079077.238, 1149490.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 32.34% complete, ETA 00:58:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17920.411 ops/s
[info] # Warmup Iteration   2: 26072.463 ops/s
[info] # Warmup Iteration   3: 26512.775 ops/s
[info] Iteration   1: 26589.921 ops/s
[info]                  ·gc.alloc.rate:                                  1640.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             97144.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 7.352 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79883.243 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                236.574 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 26916.562 ops/s
[info]                  ·gc.alloc.rate:                                  1660.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             97136.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.939 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.535 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99517.539 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 26256.075 ops/s
[info]                  ·gc.alloc.rate:                                  1620.073 MB/sec
[info]                  ·gc.alloc.rate.norm:                             97128.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102018.647 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 26367.709 ops/s
[info]                  ·gc.alloc.rate:                                  1627.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             97128.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       101581.545 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 26038.725 ops/s
[info]                  ·gc.alloc.rate:                                  1607.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             97128.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       102872.621 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   26433.798 ±(99.9%) 1290.786 ops/s [Average]
[info]   (min, avg, max) = (26038.725, 26433.798, 26916.562), stdev = 335.213
[info]   CI (99.9%): [25143.012, 27724.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1631.264 ±(99.9%) 79.038 MB/sec [Average]
[info]   (min, avg, max) = (1607.270, 1631.264, 1660.816), stdev = 20.526
[info]   CI (99.9%): [1552.225, 1710.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   97132.819 ±(99.9%) 27.560 B/op [Average]
[info]   (min, avg, max) = (97128.016, 97132.819, 97144.017), stdev = 7.157
[info]   CI (99.9%): [97105.259, 97160.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.046, 0.124), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.719 ±(99.9%) 13.935 B/op [Average]
[info]   (min, avg, max) = (0.079, 2.719, 7.352), stdev = 3.619
[info]   CI (99.9%): [≈ 0, 16.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1631.342 ±(99.9%) 606.895 MB/sec [Average]
[info]   (min, avg, max) = (1349.404, 1631.342, 1702.331), stdev = 157.609
[info]   CI (99.9%): [1024.447, 2238.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97174.719 ±(99.9%) 37523.225 B/op [Average]
[info]   (min, avg, max) = (79883.243, 97174.719, 102872.621), stdev = 9744.662
[info]   CI (99.9%): [59651.494, 134697.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   47.315 ±(99.9%) 407.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.315, 236.574), stdev = 105.799
[info]   CI (99.9%): [≈ 0, 454.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 13.000), stdev = 3.834
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 32.59% complete, ETA 00:58:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 89566.990 ops/s
[info] # Warmup Iteration   2: 123243.158 ops/s
[info] # Warmup Iteration   3: 122688.611 ops/s
[info] Iteration   1: 123011.445 ops/s
[info]                  ·gc.alloc.rate:                   1517.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              19424.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        17250.549 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 42.615 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 123977.547 ops/s
[info]                  ·gc.alloc.rate:                                  1530.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.022 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.275 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21605.739 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 123456.383 ops/s
[info]                  ·gc.alloc.rate:                                  1523.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17357.943 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 122179.913 ops/s
[info]                  ·gc.alloc.rate:                                  1507.798 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21924.529 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 122106.378 ops/s
[info]                  ·gc.alloc.rate:                                  1506.850 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19424.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       17549.820 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce":
[info]   122946.333 ±(99.9%) 3116.832 ops/s [Average]
[info]   (min, avg, max) = (122106.378, 122946.333, 123977.547), stdev = 809.431
[info]   CI (99.9%): [119829.501, 126063.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   1517.296 ±(99.9%) 39.040 MB/sec [Average]
[info]   (min, avg, max) = (1506.850, 1517.296, 1530.479), stdev = 10.139
[info]   CI (99.9%): [1478.256, 1556.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19424.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19424.003, 19424.003, 19424.004), stdev = 0.001
[info]   CI (99.9%): [19424.003, 19424.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.022), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.120 ±(99.9%) 0.407 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.120, 0.275), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1495.042 ±(99.9%) 728.295 MB/sec [Average]
[info]   (min, avg, max) = (1348.076, 1495.042, 1702.385), stdev = 189.136
[info]   CI (99.9%): [766.747, 2223.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19137.716 ±(99.9%) 9255.147 B/op [Average]
[info]   (min, avg, max) = (17250.549, 19137.716, 21924.529), stdev = 2403.532
[info]   CI (99.9%): [9882.569, 28392.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.523 ±(99.9%) 73.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.523, 42.615), stdev = 19.058
[info]   CI (99.9%): [≈ 0, 81.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 14.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 32.84% complete, ETA 00:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93844.086 ops/s
[info] # Warmup Iteration   2: 169712.457 ops/s
[info] # Warmup Iteration   3: 173278.129 ops/s
[info] Iteration   1: 172552.726 ops/s
[info]                  ·gc.alloc.rate:                   920.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.267 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9198.835 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.076 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 169672.325 ops/s
[info]                  ·gc.alloc.rate:            905.397 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9361.182 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 171104.096 ops/s
[info]                  ·gc.alloc.rate:                   913.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              8400.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9282.904 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 36.764 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 173198.116 ops/s
[info]                  ·gc.alloc.rate:                                  924.259 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.102 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.927 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6186.396 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 172659.809 ops/s
[info]                  ·gc.alloc.rate:                                  921.569 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9308.720 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   171837.415 ±(99.9%) 5535.052 ops/s [Average]
[info]   (min, avg, max) = (169672.325, 171837.415, 173198.116), stdev = 1437.435
[info]   CI (99.9%): [166302.363, 177372.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   916.995 ±(99.9%) 29.680 MB/sec [Average]
[info]   (min, avg, max) = (905.397, 916.995, 924.259), stdev = 7.708
[info]   CI (99.9%): [887.315, 946.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.002, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.102), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.239 ±(99.9%) 1.548 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.239, 0.927), stdev = 0.402
[info]   CI (99.9%): [≈ 0, 1.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.646 ±(99.9%) 570.712 MB/sec [Average]
[info]   (min, avg, max) = (680.694, 945.646, 1021.265), stdev = 148.212
[info]   CI (99.9%): [374.934, 1516.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8667.607 ±(99.9%) 5345.768 B/op [Average]
[info]   (min, avg, max) = (6186.396, 8667.607, 9361.182), stdev = 1388.279
[info]   CI (99.9%): [3321.840, 14013.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.568 ±(99.9%) 61.534 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.568, 36.764), stdev = 15.980
[info]   CI (99.9%): [≈ 0, 70.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 16.000), stdev = 6.148
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.08% complete, ETA 00:57:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 246033.567 ops/s
[info] # Warmup Iteration   2: 265128.600 ops/s
[info] # Warmup Iteration   3: 271222.673 ops/s
[info] Iteration   1: 269782.300 ops/s
[info]                  ·gc.alloc.rate:            701.943 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3932.665 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 271776.283 ops/s
[info]                  ·gc.alloc.rate:            707.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3903.903 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 271525.363 ops/s
[info]                  ·gc.alloc.rate:            706.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3907.526 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 271766.142 ops/s
[info]                  ·gc.alloc.rate:            707.218 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3904.047 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 270388.813 ops/s
[info]                  ·gc.alloc.rate:                   703.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3923.940 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.387 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   271047.780 ±(99.9%) 3503.093 ops/s [Average]
[info]   (min, avg, max) = (269782.300, 271047.780, 271776.283), stdev = 909.742
[info]   CI (99.9%): [267544.687, 274550.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   705.290 ±(99.9%) 9.188 MB/sec [Average]
[info]   (min, avg, max) = (701.943, 705.290, 707.218), stdev = 2.386
[info]   CI (99.9%): [696.102, 714.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.017 ±(99.9%) 0.194 MB/sec [Average]
[info]   (min, avg, max) = (673.952, 674.017, 674.075), stdev = 0.050
[info]   CI (99.9%): [673.823, 674.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3914.416 ±(99.9%) 50.547 B/op [Average]
[info]   (min, avg, max) = (3903.903, 3914.416, 3932.665), stdev = 13.127
[info]   CI (99.9%): [3863.869, 3964.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.877 ±(99.9%) 33.386 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.877, 19.387), stdev = 8.670
[info]   CI (99.9%): [≈ 0, 37.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 33.33% complete, ETA 00:57:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24129.871 ops/s
[info] # Warmup Iteration   2: 61405.776 ops/s
[info] # Warmup Iteration   3: 62100.998 ops/s
[info] Iteration   1: 65935.491 ops/s
[info]                  ·gc.alloc.rate:                                  2783.431 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65000.359 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 65140.499 ops/s
[info]                  ·gc.alloc.rate:                                  2749.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.636 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65794.519 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 65700.587 ops/s
[info]                  ·gc.alloc.rate:                                  2772.786 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.126 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73385.799 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 64836.815 ops/s
[info]                  ·gc.alloc.rate:                                  2736.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.167 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66104.999 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 64033.362 ops/s
[info]                  ·gc.alloc.rate:                                  2702.645 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.258 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66931.776 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   65129.351 ±(99.9%) 2896.355 ops/s [Average]
[info]   (min, avg, max) = (64033.362, 65129.351, 65935.491), stdev = 752.174
[info]   CI (99.9%): [62232.995, 68025.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2748.796 ±(99.9%) 122.772 MB/sec [Average]
[info]   (min, avg, max) = (2702.645, 2748.796, 2783.431), stdev = 31.884
[info]   CI (99.9%): [2626.024, 2871.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.006, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.007, 0.010), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.176 ±(99.9%) 0.209 B/op [Average]
[info]   (min, avg, max) = (0.126, 0.176, 0.258), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2790.944 ±(99.9%) 585.684 MB/sec [Average]
[info]   (min, avg, max) = (2722.633, 2790.944, 3063.029), stdev = 152.100
[info]   CI (99.9%): [2205.260, 3376.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67443.491 ±(99.9%) 13065.610 B/op [Average]
[info]   (min, avg, max) = (65000.359, 67443.491, 73385.799), stdev = 3393.097
[info]   CI (99.9%): [54377.881, 80509.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 33.58% complete, ETA 00:57:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 127232.436 ops/s
[info] # Warmup Iteration   2: 159927.024 ops/s
[info] # Warmup Iteration   3: 163054.035 ops/s
[info] Iteration   1: 161777.860 ops/s
[info]                  ·gc.alloc.rate:            810.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9837.326 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 166825.786 ops/s
[info]                  ·gc.alloc.rate:            835.926 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6359.958 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 166077.985 ops/s
[info]                  ·gc.alloc.rate:            832.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       7888.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.075 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9582.897 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 165713.282 ops/s
[info]                  ·gc.alloc.rate:                   830.487 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.112 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6402.745 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.634 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 167099.535 ops/s
[info]                  ·gc.alloc.rate:                                  837.390 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7888.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.124 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9618.294 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce":
[info]   165498.890 ±(99.9%) 8292.328 ops/s [Average]
[info]   (min, avg, max) = (161777.860, 165498.890, 167099.535), stdev = 2153.491
[info]   CI (99.9%): [157206.562, 173791.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   829.330 ±(99.9%) 41.705 MB/sec [Average]
[info]   (min, avg, max) = (810.598, 829.330, 837.390), stdev = 10.831
[info]   CI (99.9%): [787.625, 871.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.003, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.214 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.124), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.234 ±(99.9%) 2.019 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.234, 1.172), stdev = 0.524
[info]   CI (99.9%): [≈ 0, 2.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.235 ±(99.9%) 717.907 MB/sec [Average]
[info]   (min, avg, max) = (673.992, 878.235, 1021.078), stdev = 186.438
[info]   CI (99.9%): [160.328, 1596.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8360.244 ±(99.9%) 6966.445 B/op [Average]
[info]   (min, avg, max) = (6359.958, 8360.244, 9837.326), stdev = 1809.164
[info]   CI (99.9%): [1393.799, 15326.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.327 ±(99.9%) 54.476 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.327, 31.634), stdev = 14.147
[info]   CI (99.9%): [≈ 0, 60.803] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 33.83% complete, ETA 00:57:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 332095.220 ops/s
[info] # Warmup Iteration   2: 556938.875 ops/s
[info] # Warmup Iteration   3: 555093.412 ops/s
[info] Iteration   1: 548537.964 ops/s
[info]                  ·gc.alloc.rate:            554.740 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1930.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 550541.388 ops/s
[info]                  ·gc.alloc.rate:            556.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 961.678 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 548055.858 ops/s
[info]                  ·gc.alloc.rate:            554.288 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1932.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 547104.928 ops/s
[info]                  ·gc.alloc.rate:            553.370 MB/sec
[info]                  ·gc.alloc.rate.norm:       1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1933.500 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 545950.186 ops/s
[info]                  ·gc.alloc.rate:                   552.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        967.812 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.920 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   548038.065 ±(99.9%) 6598.780 ops/s [Average]
[info]   (min, avg, max) = (545950.186, 548038.065, 550541.388), stdev = 1713.682
[info]   CI (99.9%): [541439.285, 554636.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   554.275 ±(99.9%) 6.566 MB/sec [Average]
[info]   (min, avg, max) = (552.196, 554.275, 556.779), stdev = 1.705
[info]   CI (99.9%): [547.709, 560.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.888 ±(99.9%) 709.621 MB/sec [Average]
[info]   (min, avg, max) = (335.692, 537.888, 672.698), stdev = 184.286
[info]   CI (99.9%): [≈ 0, 1247.509] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1545.088 ±(99.9%) 2040.010 B/op [Average]
[info]   (min, avg, max) = (961.678, 1545.088, 1933.500), stdev = 529.784
[info]   CI (99.9%): [≈ 0, 3585.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.384 ±(99.9%) 3.307 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.384, 1.920), stdev = 0.859
[info]   CI (99.9%): [≈ 0, 3.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.000, 9.000), stdev = 1.871
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 34.08% complete, ETA 00:56:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 469713.720 ops/s
[info] # Warmup Iteration   2: 536473.893 ops/s
[info] # Warmup Iteration   3: 528155.876 ops/s
[info] Iteration   1: 523942.150 ops/s
[info]                  ·gc.alloc.rate:            402.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1010.507 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 520513.394 ops/s
[info]                  ·gc.alloc.rate:            399.379 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.176 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 519337.109 ops/s
[info]                  ·gc.alloc.rate:            398.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2038.998 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 520540.724 ops/s
[info]                  ·gc.alloc.rate:            399.480 MB/sec
[info]                  ·gc.alloc.rate.norm:       1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1017.120 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 540817.577 ops/s
[info]                  ·gc.alloc.rate:                   415.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        978.977 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.939 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   525030.191 ±(99.9%) 34623.336 ops/s [Average]
[info]   (min, avg, max) = (519337.109, 525030.191, 540817.577), stdev = 8991.570
[info]   CI (99.9%): [490406.854, 559653.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   402.923 ±(99.9%) 26.739 MB/sec [Average]
[info]   (min, avg, max) = (398.547, 402.923, 415.114), stdev = 6.944
[info]   CI (99.9%): [376.183, 429.662] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   403.626 ±(99.9%) 579.227 MB/sec [Average]
[info]   (min, avg, max) = (336.290, 403.626, 672.711), stdev = 150.424
[info]   CI (99.9%): [≈ 0, 982.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1212.556 ±(99.9%) 1780.020 B/op [Average]
[info]   (min, avg, max) = (978.977, 1212.556, 2038.998), stdev = 462.266
[info]   CI (99.9%): [≈ 0, 2992.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.388 ±(99.9%) 3.338 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.388, 1.939), stdev = 0.867
[info]   CI (99.9%): [≈ 0, 3.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 34.33% complete, ETA 00:56:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 461097.362 ops/s
[info] # Warmup Iteration   2: 537092.490 ops/s
[info] # Warmup Iteration   3: 539738.935 ops/s
[info] Iteration   1: 539058.793 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 537459.634 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 539192.407 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 539302.828 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 539324.098 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   538867.552 ±(99.9%) 3057.709 ops/s [Average]
[info]   (min, avg, max) = (537459.634, 538867.552, 539324.098), stdev = 794.077
[info]   CI (99.9%): [535809.843, 541925.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 34.58% complete, ETA 00:56:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 156788.447 ops/s
[info] # Warmup Iteration   2: 283039.363 ops/s
[info] # Warmup Iteration   3: 286836.351 ops/s
[info] Iteration   1: 291733.264 ops/s
[info]                  ·gc.alloc.rate:            800.587 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3629.646 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 288299.562 ops/s
[info]                  ·gc.alloc.rate:            791.297 MB/sec
[info]                  ·gc.alloc.rate.norm:       4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.759 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3672.860 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 289976.307 ops/s
[info]                  ·gc.alloc.rate:                   795.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5473.988 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.616 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 291709.641 ops/s
[info]                  ·gc.alloc.rate:                   800.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              4320.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3626.363 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 25.158 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 289108.944 ops/s
[info]                  ·gc.alloc.rate:                                  793.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4320.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3706.048 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   290165.544 ±(99.9%) 5926.767 ops/s [Average]
[info]   (min, avg, max) = (288299.562, 290165.544, 291733.264), stdev = 1539.162
[info]   CI (99.9%): [284238.777, 296092.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   796.334 ±(99.9%) 16.123 MB/sec [Average]
[info]   (min, avg, max) = (791.297, 796.334, 800.587), stdev = 4.187
[info]   CI (99.9%): [780.211, 812.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4320.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4320.001, 4320.001, 4320.002), stdev = 0.001
[info]   CI (99.9%): [4320.001, 4320.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.004, 0.018), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.170 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   741.296 ±(99.9%) 575.123 MB/sec [Average]
[info]   (min, avg, max) = (672.018, 741.296, 1008.399), stdev = 149.358
[info]   CI (99.9%): [166.172, 1316.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   4021.781 ±(99.9%) 3128.552 B/op [Average]
[info]   (min, avg, max) = (3626.363, 4021.781, 5473.988), stdev = 812.475
[info]   CI (99.9%): [893.229, 7150.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.755 ±(99.9%) 42.200 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.755, 25.158), stdev = 10.959
[info]   CI (99.9%): [≈ 0, 47.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 3.578
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 34.83% complete, ETA 00:56:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6033.940 ops/s
[info] # Warmup Iteration   2: 8791.815 ops/s
[info] # Warmup Iteration   3: 8796.504 ops/s
[info] Iteration   1: 8841.109 ops/s
[info]                  ·gc.alloc.rate:            1130.560 MB/sec
[info]                  ·gc.alloc.rate.norm:       201264.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 179999.815 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 8839.667 ops/s
[info]                  ·gc.alloc.rate:                   1130.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        180159.139 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 118.604 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 8601.116 ops/s
[info]                  ·gc.alloc.rate:                                  1099.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201264.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.973 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.611 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248645.245 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                487.540 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 8850.847 ops/s
[info]                  ·gc.alloc.rate:                                  1132.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201264.046 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.399 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.359 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       181573.140 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 8838.743 ops/s
[info]                  ·gc.alloc.rate:                                  1130.540 MB/sec
[info]                  ·gc.alloc.rate.norm:                             201275.230 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.324 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       181819.591 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   8794.296 ±(99.9%) 416.253 ops/s [Average]
[info]   (min, avg, max) = (8601.116, 8794.296, 8850.847), stdev = 108.100
[info]   CI (99.9%): [8378.043, 9210.550] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1124.646 ±(99.9%) 53.732 MB/sec [Average]
[info]   (min, avg, max) = (1099.718, 1124.646, 1132.122), stdev = 13.954
[info]   CI (99.9%): [1070.913, 1178.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201266.285 ±(99.9%) 19.256 B/op [Average]
[info]   (min, avg, max) = (201264.046, 201266.285, 201275.230), stdev = 5.001
[info]   CI (99.9%): [201247.028, 201285.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.087), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.539 ±(99.9%) 26.856 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.539, 15.973), stdev = 6.974
[info]   CI (99.9%): [≈ 0, 30.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1084.821 ±(99.9%) 589.660 MB/sec [Average]
[info]   (min, avg, max) = (1011.113, 1084.821, 1358.611), stdev = 153.133
[info]   CI (99.9%): [495.162, 1674.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   194439.386 ±(99.9%) 116724.401 B/op [Average]
[info]   (min, avg, max) = (179999.815, 194439.386, 248645.245), stdev = 30312.956
[info]   CI (99.9%): [77714.985, 311163.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.442 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.664), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   121.229 ±(99.9%) 812.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 121.229, 487.540), stdev = 211.116
[info]   CI (99.9%): [≈ 0, 934.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 10.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.07% complete, ETA 00:55:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4598.040 ops/s
[info] # Warmup Iteration   2: 8900.022 ops/s
[info] # Warmup Iteration   3: 9051.882 ops/s
[info] Iteration   1: 9152.064 ops/s
[info]                  ·gc.alloc.rate:            1084.948 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.037 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 173521.861 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 9145.843 ops/s
[info]                  ·gc.alloc.rate:            1084.355 MB/sec
[info]                  ·gc.alloc.rate.norm:       186576.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.591 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 173540.016 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 9017.378 ops/s
[info]                  ·gc.alloc.rate:                                  1068.940 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.045 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.320 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       177417.339 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                813.841 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 8761.078 ops/s
[info]                  ·gc.alloc.rate:                                  1038.492 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.047 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.285 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       183437.979 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 8991.551 ops/s
[info]                  ·gc.alloc.rate:                                  1065.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             186576.049 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.459 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       178726.596 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   9013.583 ±(99.9%) 611.660 ops/s [Average]
[info]   (min, avg, max) = (8761.078, 9013.583, 9152.064), stdev = 158.846
[info]   CI (99.9%): [8401.922, 9625.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1068.512 ±(99.9%) 72.799 MB/sec [Average]
[info]   (min, avg, max) = (1038.492, 1068.512, 1084.948), stdev = 18.906
[info]   CI (99.9%): [995.713, 1141.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   186576.047 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (186576.045, 186576.047, 186576.049), stdev = 0.002
[info]   CI (99.9%): [186576.040, 186576.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.094), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.813 ±(99.9%) 27.166 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.813, 16.320), stdev = 7.055
[info]   CI (99.9%): [≈ 0, 30.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1015.222 ±(99.9%) 23.633 MB/sec [Average]
[info]   (min, avg, max) = (1008.591, 1015.222, 1021.026), stdev = 6.137
[info]   CI (99.9%): [991.588, 1038.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   177328.758 ±(99.9%) 15891.945 B/op [Average]
[info]   (min, avg, max) = (173521.861, 177328.758, 183437.979), stdev = 4127.088
[info]   CI (99.9%): [161436.813, 193220.703] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   162.768 ±(99.9%) 1401.483 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 162.768, 813.841), stdev = 363.961
[info]   CI (99.9%): [≈ 0, 1564.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 13.000), stdev = 4.796
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 35.32% complete, ETA 00:55:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 138286.716 ops/s
[info] # Warmup Iteration   2: 151382.987 ops/s
[info] # Warmup Iteration   3: 154965.197 ops/s
[info] Iteration   1: 151775.834 ops/s
[info]                  ·gc.alloc.rate:            987.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10506.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 153592.598 ops/s
[info]                  ·gc.alloc.rate:            999.322 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.193 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10382.143 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 154600.321 ops/s
[info]                  ·gc.alloc.rate:                                  1005.652 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.031 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.315 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1015.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10341.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.126 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 154563.786 ops/s
[info]                  ·gc.alloc.rate:                                  1005.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10240.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.264 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10398.327 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 155392.894 ops/s
[info]                  ·gc.alloc.rate:            1011.074 MB/sec
[info]                  ·gc.alloc.rate.norm:       10240.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.236 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10342.929 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   153985.087 ±(99.9%) 5353.010 ops/s [Average]
[info]   (min, avg, max) = (151775.834, 153985.087, 155392.894), stdev = 1390.160
[info]   CI (99.9%): [148632.077, 159338.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1001.819 ±(99.9%) 35.155 MB/sec [Average]
[info]   (min, avg, max) = (987.284, 1001.819, 1011.074), stdev = 9.130
[info]   CI (99.9%): [966.664, 1036.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.060 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.031), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.116 ±(99.9%) 0.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.116, 0.315), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1016.876 ±(99.9%) 15.969 MB/sec [Average]
[info]   (min, avg, max) = (1013.003, 1016.876, 1021.312), stdev = 4.147
[info]   CI (99.9%): [1000.907, 1032.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   10394.363 ±(99.9%) 259.894 B/op [Average]
[info]   (min, avg, max) = (10341.655, 10394.363, 10506.760), stdev = 67.494
[info]   CI (99.9%): [10134.468, 10654.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.425 ±(99.9%) 46.712 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.425, 27.126), stdev = 12.131
[info]   CI (99.9%): [≈ 0, 52.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 9.000), stdev = 3.114
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 35.57% complete, ETA 00:55:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3326.257 ops/s
[info] # Warmup Iteration   2: 6720.339 ops/s
[info] # Warmup Iteration   3: 7104.778 ops/s
[info] Iteration   1: 7151.367 ops/s
[info]                  ·gc.alloc.rate:            1331.850 MB/sec
[info]                  ·gc.alloc.rate.norm:       293128.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.241 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 296075.415 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 7105.527 ops/s
[info]                  ·gc.alloc.rate:                                  1323.146 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293128.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       299803.916 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                885.248 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 7240.182 ops/s
[info]                  ·gc.alloc.rate:                                  1348.340 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293128.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.283 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.333 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       295952.685 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 7322.153 ops/s
[info]                  ·gc.alloc.rate:            1363.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       293128.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 292639.179 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7329.220 ops/s
[info]                  ·gc.alloc.rate:                                  1364.902 MB/sec
[info]                  ·gc.alloc.rate.norm:                             293128.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       292359.752 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   7229.690 ±(99.9%) 385.625 ops/s [Average]
[info]   (min, avg, max) = (7105.527, 7229.690, 7329.220), stdev = 100.145
[info]   CI (99.9%): [6844.065, 7615.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1346.362 ±(99.9%) 71.869 MB/sec [Average]
[info]   (min, avg, max) = (1323.146, 1346.362, 1364.902), stdev = 18.664
[info]   CI (99.9%): [1274.493, 1418.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   293128.058 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (293128.056, 293128.058, 293128.062), stdev = 0.003
[info]   CI (99.9%): [293128.049, 293128.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.211 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.123), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.513 ±(99.9%) 46.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.513, 27.184), stdev = 12.115
[info]   CI (99.9%): [≈ 0, 52.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.495 ±(99.9%) 27.686 MB/sec [Average]
[info]   (min, avg, max) = (1345.241, 1356.495, 1361.333), stdev = 7.190
[info]   CI (99.9%): [1328.810, 1384.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   295366.189 ±(99.9%) 11713.753 B/op [Average]
[info]   (min, avg, max) = (292359.752, 295366.189, 299803.916), stdev = 3042.024
[info]   CI (99.9%): [283652.437, 307079.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   177.050 ±(99.9%) 1524.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 177.050, 885.248), stdev = 395.895
[info]   CI (99.9%): [≈ 0, 1701.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 17.000), stdev = 6.058
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 35.82% complete, ETA 00:55:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15423.843 ops/s
[info] # Warmup Iteration   2: 21276.490 ops/s
[info] # Warmup Iteration   3: 22082.031 ops/s
[info] Iteration   1: 22121.285 ops/s
[info]                  ·gc.alloc.rate:            1008.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       71752.365 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71939.726 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 21999.667 ops/s
[info]                  ·gc.alloc.rate:            1002.902 MB/sec
[info]                  ·gc.alloc.rate.norm:       71760.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72338.592 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 21994.481 ops/s
[info]                  ·gc.alloc.rate:                                  1002.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71741.400 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.510 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72491.205 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                237.988 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   4: 22413.026 ops/s
[info]                  ·gc.alloc.rate:                                  1021.579 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71736.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.752 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.173 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71707.499 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 22338.260 ops/s
[info]                  ·gc.alloc.rate:                                  1018.034 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71736.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.045 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71948.214 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22173.344 ±(99.9%) 744.457 ops/s [Average]
[info]   (min, avg, max) = (21994.481, 22173.344, 22413.026), stdev = 193.333
[info]   CI (99.9%): [21428.887, 22917.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1010.744 ±(99.9%) 33.335 MB/sec [Average]
[info]   (min, avg, max) = (1002.876, 1010.744, 1021.579), stdev = 8.657
[info]   CI (99.9%): [977.409, 1044.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.165 ±(99.9%) 41.027 B/op [Average]
[info]   (min, avg, max) = (71736.018, 71745.165, 71760.023), stdev = 10.655
[info]   CI (99.9%): [71704.138, 71786.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.866 ±(99.9%) 4.564 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.866, 2.510), stdev = 1.185
[info]   CI (99.9%): [≈ 0, 5.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1015.505 ±(99.9%) 20.053 MB/sec [Average]
[info]   (min, avg, max) = (1010.962, 1015.505, 1021.173), stdev = 5.208
[info]   CI (99.9%): [995.452, 1035.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   72085.047 ±(99.9%) 1235.260 B/op [Average]
[info]   (min, avg, max) = (71707.499, 72085.047, 72491.205), stdev = 320.793
[info]   CI (99.9%): [70849.787, 73320.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.665 ±(99.9%) 5.729 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.665, 3.327), stdev = 1.488
[info]   CI (99.9%): [≈ 0, 6.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   47.598 ±(99.9%) 409.830 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.598, 237.988), stdev = 106.432
[info]   CI (99.9%): [≈ 0, 457.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 14.000), stdev = 5.244
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.07% complete, ETA 00:55:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15715.003 ops/s
[info] # Warmup Iteration   2: 25884.839 ops/s
[info] # Warmup Iteration   3: 26134.843 ops/s
[info] Iteration   1: 25900.524 ops/s
[info]                  ·gc.alloc.rate:            996.206 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.903 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61323.785 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 25762.548 ops/s
[info]                  ·gc.alloc.rate:            990.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 61652.216 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 25328.900 ops/s
[info]                  ·gc.alloc.rate:                                  974.355 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.685 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62956.780 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                248.350 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 26481.422 ops/s
[info]                  ·gc.alloc.rate:                                  1018.740 MB/sec
[info]                  ·gc.alloc.rate.norm:                             60552.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.280 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60691.196 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 26447.809 ops/s
[info]                  ·gc.alloc.rate:            1017.519 MB/sec
[info]                  ·gc.alloc.rate.norm:       60552.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60769.205 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala":
[info]   25984.241 ±(99.9%) 1874.311 ops/s [Average]
[info]   (min, avg, max) = (25328.900, 25984.241, 26481.422), stdev = 486.753
[info]   CI (99.9%): [24109.929, 27858.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   999.551 ±(99.9%) 72.330 MB/sec [Average]
[info]   (min, avg, max) = (974.355, 999.551, 1018.740), stdev = 18.784
[info]   CI (99.9%): [927.221, 1071.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   60552.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (60552.017, 60552.018, 60552.021), stdev = 0.002
[info]   CI (99.9%): [60552.010, 60552.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.186 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.993 ±(99.9%) 11.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.993, 6.685), stdev = 2.983
[info]   CI (99.9%): [≈ 0, 13.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1014.628 ±(99.9%) 23.740 MB/sec [Average]
[info]   (min, avg, max) = (1008.903, 1014.628, 1021.168), stdev = 6.165
[info]   CI (99.9%): [990.888, 1038.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   61478.636 ±(99.9%) 3530.419 B/op [Average]
[info]   (min, avg, max) = (60691.196, 61478.636, 62956.780), stdev = 916.839
[info]   CI (99.9%): [57948.217, 65009.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   49.670 ±(99.9%) 427.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 49.670, 248.350), stdev = 111.066
[info]   CI (99.9%): [≈ 0, 477.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 5.079
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 36.32% complete, ETA 00:54:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 597670.702 ops/s
[info] # Warmup Iteration   2: 701069.335 ops/s
[info] # Warmup Iteration   3: 716471.690 ops/s
[info] Iteration   1: 688434.749 ops/s
[info]                  ·gc.alloc.rate:            1242.278 MB/sec
[info]                  ·gc.alloc.rate.norm:       2840.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.555 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3076.106 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 701616.431 ops/s
[info]                  ·gc.alloc.rate:                                  1266.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.619 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3036.470 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.966 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 712455.922 ops/s
[info]                  ·gc.alloc.rate:                                  1285.416 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.016 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3007.851 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 718038.173 ops/s
[info]                  ·gc.alloc.rate:                                  1295.767 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.248 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2238.323 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 719685.424 ops/s
[info]                  ·gc.alloc.rate:                                  1298.525 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2840.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.447 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2977.618 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   708046.140 ±(99.9%) 50232.370 ops/s [Average]
[info]   (min, avg, max) = (688434.749, 708046.140, 719685.424), stdev = 13045.187
[info]   CI (99.9%): [657813.769, 758278.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1277.604 ±(99.9%) 90.519 MB/sec [Average]
[info]   (min, avg, max) = (1242.278, 1277.604, 1298.525), stdev = 23.507
[info]   CI (99.9%): [1187.086, 1368.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.130), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.068 ±(99.9%) 0.484 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.068, 0.291), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1288.651 ±(99.9%) 576.162 MB/sec [Average]
[info]   (min, avg, max) = (1021.248, 1288.651, 1361.447), stdev = 149.627
[info]   CI (99.9%): [712.490, 1864.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2867.274 ±(99.9%) 1361.076 B/op [Average]
[info]   (min, avg, max) = (2238.323, 2867.274, 3076.106), stdev = 353.467
[info]   CI (99.9%): [1506.198, 4228.349] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.793 ±(99.9%) 15.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.793, 8.966), stdev = 4.010
[info]   CI (99.9%): [≈ 0, 17.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 13.000), stdev = 4.528
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 36.57% complete, ETA 00:54:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 689338.611 ops/s
[info] # Warmup Iteration   2: 781596.697 ops/s
[info] # Warmup Iteration   3: 785403.993 ops/s
[info] Iteration   1: 786748.894 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 787374.714 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787033.522 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 786418.957 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 787887.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   787092.759 ±(99.9%) 2184.376 ops/s [Average]
[info]   (min, avg, max) = (786418.957, 787092.759, 787887.709), stdev = 567.275
[info]   CI (99.9%): [784908.383, 789277.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 36.82% complete, ETA 00:54:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16508.733 ops/s
[info] # Warmup Iteration   2: 23851.130 ops/s
[info] # Warmup Iteration   3: 24073.567 ops/s
[info] Iteration   1: 24164.894 ops/s
[info]                  ·gc.alloc.rate:            1051.794 MB/sec
[info]                  ·gc.alloc.rate.norm:       68480.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.491 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65725.802 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 24035.822 ops/s
[info]                  ·gc.alloc.rate:            1045.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       68477.901 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.902 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 66081.225 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 23907.320 ops/s
[info]                  ·gc.alloc.rate:                                  1039.961 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.091 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 5.993 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.136 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66698.064 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                263.109 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 24439.690 ops/s
[info]                  ·gc.alloc.rate:                                  1063.219 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65761.210 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 24293.848 ops/s
[info]                  ·gc.alloc.rate:                                  1056.724 MB/sec
[info]                  ·gc.alloc.rate.norm:                             68464.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁵ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88208.468 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24168.315 ±(99.9%) 805.621 ops/s [Average]
[info]   (min, avg, max) = (23907.320, 24168.315, 24439.690), stdev = 209.217
[info]   CI (99.9%): [23362.694, 24973.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1051.438 ±(99.9%) 35.182 MB/sec [Average]
[info]   (min, avg, max) = (1039.961, 1051.438, 1063.219), stdev = 9.137
[info]   CI (99.9%): [1016.256, 1086.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   68469.994 ±(99.9%) 31.647 B/op [Average]
[info]   (min, avg, max) = (68464.017, 68469.994, 68480.018), stdev = 8.219
[info]   CI (99.9%): [68438.347, 68501.641] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.159 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.835 ±(99.9%) 10.402 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.835, 5.993), stdev = 2.701
[info]   CI (99.9%): [≈ 0, 12.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.850 ±(99.9%) 600.060 MB/sec [Average]
[info]   (min, avg, max) = (1008.902, 1082.850, 1361.474), stdev = 155.834
[info]   CI (99.9%): [482.790, 1682.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70494.954 ±(99.9%) 38159.235 B/op [Average]
[info]   (min, avg, max) = (65725.802, 70494.954, 88208.468), stdev = 9909.832
[info]   CI (99.9%): [32335.719, 108654.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   52.622 ±(99.9%) 453.089 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 52.622, 263.109), stdev = 117.666
[info]   CI (99.9%): [≈ 0, 505.711] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 37.06% complete, ETA 00:54:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16283.110 ops/s
[info] # Warmup Iteration   2: 24000.178 ops/s
[info] # Warmup Iteration   3: 24041.534 ops/s
[info] Iteration   1: 24225.938 ops/s
[info]                  ·gc.alloc.rate:            1314.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 87586.886 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 24126.805 ops/s
[info]                  ·gc.alloc.rate:                                  1309.924 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.021 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.458 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1355.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       88384.385 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                217.267 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 23904.217 ops/s
[info]                  ·gc.alloc.rate:                                  1297.854 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.757 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.765 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89647.371 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 23608.435 ops/s
[info]                  ·gc.alloc.rate:            1281.527 MB/sec
[info]                  ·gc.alloc.rate.norm:       85440.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68075.510 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 24530.958 ops/s
[info]                  ·gc.alloc.rate:                                  1331.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             85440.017 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.670 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87349.282 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   24079.270 ±(99.9%) 1334.072 ops/s [Average]
[info]   (min, avg, max) = (23608.435, 24079.270, 24530.958), stdev = 346.454
[info]   CI (99.9%): [22745.198, 25413.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1307.227 ±(99.9%) 72.653 MB/sec [Average]
[info]   (min, avg, max) = (1281.527, 1307.227, 1331.907), stdev = 18.868
[info]   CI (99.9%): [1234.574, 1379.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85440.018 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (85440.017, 85440.018, 85440.021), stdev = 0.002
[info]   CI (99.9%): [85440.012, 85440.025] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.090 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.053), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.062 ±(99.9%) 5.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.062, 3.458), stdev = 1.535
[info]   CI (99.9%): [≈ 0, 6.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1289.508 ±(99.9%) 578.239 MB/sec [Average]
[info]   (min, avg, max) = (1021.074, 1289.508, 1361.765), stdev = 150.167
[info]   CI (99.9%): [711.269, 1867.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   84208.687 ±(99.9%) 34899.386 B/op [Average]
[info]   (min, avg, max) = (68075.510, 84208.687, 89647.371), stdev = 9063.260
[info]   CI (99.9%): [49309.300, 119108.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   43.453 ±(99.9%) 374.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.453, 217.267), stdev = 97.165
[info]   CI (99.9%): [≈ 0, 417.601] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 4.324
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.31% complete, ETA 00:54:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14492.471 ops/s
[info] # Warmup Iteration   2: 26983.504 ops/s
[info] # Warmup Iteration   3: 26793.168 ops/s
[info] Iteration   1: 27572.216 ops/s
[info]                  ·gc.alloc.rate:                   1259.379 MB/sec
[info]                  ·gc.alloc.rate.norm:              71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        76766.805 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 38.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 26765.031 ops/s
[info]                  ·gc.alloc.rate:                                  1222.252 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.084 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59579.517 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                235.028 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 27568.694 ops/s
[info]                  ·gc.alloc.rate:                                  1259.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71888.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.299 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77728.634 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 27786.591 ops/s
[info]                  ·gc.alloc.rate:            1269.031 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77121.706 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27439.723 ops/s
[info]                  ·gc.alloc.rate:            1253.216 MB/sec
[info]                  ·gc.alloc.rate.norm:       71888.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.053 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 58570.487 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   27426.451 ±(99.9%) 1502.286 ops/s [Average]
[info]   (min, avg, max) = (26765.031, 27426.451, 27786.591), stdev = 390.139
[info]   CI (99.9%): [25924.165, 28928.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1252.607 ±(99.9%) 68.892 MB/sec [Average]
[info]   (min, avg, max) = (1222.252, 1252.607, 1269.031), stdev = 17.891
[info]   CI (99.9%): [1183.716, 1321.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71888.029 ±(99.9%) 0.120 B/op [Average]
[info]   (min, avg, max) = (71888.015, 71888.029, 71888.084), stdev = 0.031
[info]   CI (99.9%): [71887.909, 71888.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.488 ±(99.9%) 10.245 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.488, 6.140), stdev = 2.661
[info]   CI (99.9%): [≈ 0, 11.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1220.353 ±(99.9%) 715.316 MB/sec [Average]
[info]   (min, avg, max) = (1012.980, 1220.353, 1361.461), stdev = 185.765
[info]   CI (99.9%): [505.037, 1935.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   69953.430 ±(99.9%) 38286.784 B/op [Average]
[info]   (min, avg, max) = (58570.487, 69953.430, 77728.634), stdev = 9942.956
[info]   CI (99.9%): [31666.645, 108240.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   54.610 ±(99.9%) 393.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.610, 235.028), stdev = 102.192
[info]   CI (99.9%): [≈ 0, 448.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 17.000), stdev = 6.229
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 37.56% complete, ETA 00:53:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 243224.321 ops/s
[info] # Warmup Iteration   2: 256572.676 ops/s
[info] # Warmup Iteration   3: 266830.209 ops/s
[info] Iteration   1: 266867.738 ops/s
[info]                  ·gc.alloc.rate:            694.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5975.340 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 267235.526 ops/s
[info]                  ·gc.alloc.rate:            695.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3978.090 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 260833.257 ops/s
[info]                  ·gc.alloc.rate:            678.837 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.501 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4075.871 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 267348.736 ops/s
[info]                  ·gc.alloc.rate:            695.942 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3976.424 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 264855.278 ops/s
[info]                  ·gc.alloc.rate:                   689.390 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.563 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4013.847 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.834 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   265428.107 ±(99.9%) 10627.514 ops/s [Average]
[info]   (min, avg, max) = (260833.257, 265428.107, 267348.736), stdev = 2759.932
[info]   CI (99.9%): [254800.593, 276055.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   690.835 ±(99.9%) 27.701 MB/sec [Average]
[info]   (min, avg, max) = (678.837, 690.835, 695.942), stdev = 7.194
[info]   CI (99.9%): [663.134, 718.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   743.088 ±(99.9%) 582.068 MB/sec [Average]
[info]   (min, avg, max) = (675.258, 743.088, 1013.493), stdev = 151.161
[info]   CI (99.9%): [161.019, 1325.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4403.915 ±(99.9%) 3386.170 B/op [Average]
[info]   (min, avg, max) = (3976.424, 4403.915, 5975.340), stdev = 879.377
[info]   CI (99.9%): [1017.745, 7790.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.167 ±(99.9%) 27.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.167, 15.834), stdev = 7.081
[info]   CI (99.9%): [≈ 0, 30.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 9.000), stdev = 1.517
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 37.81% complete, ETA 00:53:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7751.488 ops/s
[info] # Warmup Iteration   2: 15728.673 ops/s
[info] # Warmup Iteration   3: 15914.002 ops/s
[info] Iteration   1: 15928.604 ops/s
[info]                  ·gc.alloc.rate:                                  1639.795 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.045 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.495 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1686.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       166590.036 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                394.919 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        19.000 ms
[info] Iteration   2: 16084.534 ops/s
[info]                  ·gc.alloc.rate:                                  1656.119 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.329 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       166538.925 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 16011.596 ops/s
[info]                  ·gc.alloc.rate:                                  1648.186 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.516 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.731 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       167287.648 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 16183.513 ops/s
[info]                  ·gc.alloc.rate:                                  1665.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.032 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165520.306 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 16233.779 ops/s
[info]                  ·gc.alloc.rate:                                  1671.069 MB/sec
[info]                  ·gc.alloc.rate.norm:                             162024.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.763 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.871 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       165010.574 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   16088.405 ±(99.9%) 477.968 ops/s [Average]
[info]   (min, avg, max) = (15928.604, 16088.405, 16233.779), stdev = 124.127
[info]   CI (99.9%): [15610.437, 16566.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1656.191 ±(99.9%) 48.948 MB/sec [Average]
[info]   (min, avg, max) = (1639.795, 1656.191, 1671.069), stdev = 12.712
[info]   CI (99.9%): [1607.243, 1705.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   162024.027 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (162024.025, 162024.027, 162024.032), stdev = 0.003
[info]   CI (99.9%): [162024.018, 162024.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.064 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.016, 0.045), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.599 ±(99.9%) 6.337 B/op [Average]
[info]   (min, avg, max) = (0.516, 1.599, 4.495), stdev = 1.646
[info]   CI (99.9%): [≈ 0, 7.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.722 ±(99.9%) 27.384 MB/sec [Average]
[info]   (min, avg, max) = (1686.006, 1698.722, 1702.268), stdev = 7.112
[info]   CI (99.9%): [1671.338, 1726.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   166189.498 ±(99.9%) 3511.347 B/op [Average]
[info]   (min, avg, max) = (165010.574, 166189.498, 167287.648), stdev = 911.886
[info]   CI (99.9%): [162678.151, 169700.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   78.984 ±(99.9%) 680.074 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 78.984, 394.919), stdev = 176.613
[info]   CI (99.9%): [≈ 0, 759.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.400, 19.000), stdev = 6.504
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 38.06% complete, ETA 00:53:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39677.301 ops/s
[info] # Warmup Iteration   2: 52693.140 ops/s
[info] # Warmup Iteration   3: 51077.616 ops/s
[info] Iteration   1: 52221.609 ops/s
[info]                  ·gc.alloc.rate:            1377.647 MB/sec
[info]                  ·gc.alloc.rate.norm:       41528.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40633.299 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 53168.113 ops/s
[info]                  ·gc.alloc.rate:                                  1403.127 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.097 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.467 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40206.226 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                98.593 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 53209.543 ops/s
[info]                  ·gc.alloc.rate:                                  1403.876 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.294 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40272.254 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 53404.091 ops/s
[info]                  ·gc.alloc.rate:                                  1409.432 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41528.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40126.736 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 51740.783 ops/s
[info]                  ·gc.alloc.rate:            1365.585 MB/sec
[info]                  ·gc.alloc.rate.norm:       41528.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 41416.219 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52748.828 ±(99.9%) 2797.714 ops/s [Average]
[info]   (min, avg, max) = (51740.783, 52748.828, 53404.091), stdev = 726.557
[info]   CI (99.9%): [49951.114, 55546.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1391.933 ±(99.9%) 73.880 MB/sec [Average]
[info]   (min, avg, max) = (1365.585, 1391.933, 1409.432), stdev = 19.186
[info]   CI (99.9%): [1318.053, 1465.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.009), stdev = 0.001
[info]   CI (99.9%): [41528.006, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.097), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.636 ±(99.9%) 4.850 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.636, 2.878), stdev = 1.260
[info]   CI (99.9%): [≈ 0, 5.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.328 ±(99.9%) 22.973 MB/sec [Average]
[info]   (min, avg, max) = (1347.966, 1358.328, 1361.909), stdev = 5.966
[info]   CI (99.9%): [1335.355, 1381.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   40530.947 ±(99.9%) 2046.587 B/op [Average]
[info]   (min, avg, max) = (40126.736, 40530.947, 41416.219), stdev = 531.492
[info]   CI (99.9%): [38484.360, 42577.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.719 ±(99.9%) 169.783 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.719, 98.593), stdev = 44.092
[info]   CI (99.9%): [≈ 0, 189.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 14.000), stdev = 4.506
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.31% complete, ETA 00:53:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 99056.382 ops/s
[info] # Warmup Iteration   2: 157461.594 ops/s
[info] # Warmup Iteration   3: 163803.748 ops/s
[info] Iteration   1: 156119.640 ops/s
[info]                  ·gc.alloc.rate:                   1017.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              10264.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10167.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.715 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 162360.462 ops/s
[info]                  ·gc.alloc.rate:            1058.616 MB/sec
[info]                  ·gc.alloc.rate.norm:       10264.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9783.119 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 162766.354 ops/s
[info]                  ·gc.alloc.rate:                                  1061.424 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10264.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9829.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.088 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 165424.502 ops/s
[info]                  ·gc.alloc.rate:                                  1079.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10264.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9715.609 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 164784.357 ops/s
[info]                  ·gc.alloc.rate:            1074.493 MB/sec
[info]                  ·gc.alloc.rate.norm:       10264.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9753.337 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala":
[info]   162291.063 ±(99.9%) 14194.225 ops/s [Average]
[info]   (min, avg, max) = (156119.640, 162291.063, 165424.502), stdev = 3686.195
[info]   CI (99.9%): [148096.838, 176485.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1058.296 ±(99.9%) 92.918 MB/sec [Average]
[info]   (min, avg, max) = (1017.944, 1058.296, 1079.000), stdev = 24.131
[info]   CI (99.9%): [965.378, 1151.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10264.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10264.002, 10264.003, 10264.003), stdev = 0.001
[info]   CI (99.9%): [10264.002, 10264.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.051), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.103 ±(99.9%) 0.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.103, 0.493), stdev = 0.218
[info]   CI (99.9%): [≈ 0, 0.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1015.240 ±(99.9%) 24.268 MB/sec [Average]
[info]   (min, avg, max) = (1008.329, 1015.240, 1021.350), stdev = 6.302
[info]   CI (99.9%): [990.972, 1039.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   9849.678 ±(99.9%) 701.692 B/op [Average]
[info]   (min, avg, max) = (9715.609, 9849.678, 10167.049), stdev = 182.227
[info]   CI (99.9%): [9147.986, 10551.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.822 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.361 ±(99.9%) 75.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.361, 45.088), stdev = 19.630
[info]   CI (99.9%): [≈ 0, 85.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 13.000), stdev = 4.615
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 38.56% complete, ETA 00:53:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 956286.804 ops/s
[info] # Warmup Iteration   2: 1167359.076 ops/s
[info] # Warmup Iteration   3: 1158902.136 ops/s
[info] Iteration   1: 1175994.681 ops/s
[info]                  ·gc.alloc.rate:                   1261.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1802.579 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 1164574.220 ops/s
[info]                  ·gc.alloc.rate:                                  1248.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.090 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1369.288 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.402 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 1126582.332 ops/s
[info]                  ·gc.alloc.rate:                                  1208.102 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.072 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.101 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.395 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1902.187 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1117561.209 ops/s
[info]                  ·gc.alloc.rate:                                  1198.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1688.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1917.526 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1121743.891 ops/s
[info]                  ·gc.alloc.rate:            1202.929 MB/sec
[info]                  ·gc.alloc.rate.norm:       1688.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1432.806 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1141291.266 ±(99.9%) 103824.514 ops/s [Average]
[info]   (min, avg, max) = (1117561.209, 1141291.266, 1175994.681), stdev = 26962.897
[info]   CI (99.9%): [1037466.752, 1245115.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1223.920 ±(99.9%) 111.433 MB/sec [Average]
[info]   (min, avg, max) = (1198.529, 1223.920, 1261.336), stdev = 28.939
[info]   CI (99.9%): [1112.487, 1335.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.144 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.072), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.039 ±(99.9%) 0.199 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.101), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1220.771 ±(99.9%) 716.720 MB/sec [Average]
[info]   (min, avg, max) = (1012.937, 1220.771, 1361.499), stdev = 186.130
[info]   CI (99.9%): [504.050, 1937.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1684.877 ±(99.9%) 1015.758 B/op [Average]
[info]   (min, avg, max) = (1369.288, 1684.877, 1917.526), stdev = 263.789
[info]   CI (99.9%): [669.120, 2700.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.259 ±(99.9%) 9.041 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.259, 5.402), stdev = 2.348
[info]   CI (99.9%): [≈ 0, 10.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 12.000), stdev = 3.937
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 38.81% complete, ETA 00:52:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1035871.189 ops/s
[info] # Warmup Iteration   2: 1180475.413 ops/s
[info] # Warmup Iteration   3: 1175410.737 ops/s
[info] Iteration   1: 1175902.178 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1176182.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1179142.244 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1179055.382 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1179393.497 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   1177935.110 ±(99.9%) 6681.840 ops/s [Average]
[info]   (min, avg, max) = (1175902.178, 1177935.110, 1179393.497), stdev = 1735.253
[info]   CI (99.9%): [1171253.271, 1184616.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 39.05% complete, ETA 00:52:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41424.537 ops/s
[info] # Warmup Iteration   2: 59268.714 ops/s
[info] # Warmup Iteration   3: 59901.196 ops/s
[info] Iteration   1: 59774.373 ops/s
[info]                  ·gc.alloc.rate:            1389.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       36584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35429.013 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 60152.281 ops/s
[info]                  ·gc.alloc.rate:                                  1397.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36584.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.277 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35520.726 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                104.575 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 60769.351 ops/s
[info]                  ·gc.alloc.rate:                                  1412.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36584.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35263.069 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 60022.920 ops/s
[info]                  ·gc.alloc.rate:                                  1395.300 MB/sec
[info]                  ·gc.alloc.rate.norm:                             36584.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.052 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35701.853 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 60324.472 ops/s
[info]                  ·gc.alloc.rate:            1401.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       36584.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.316 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35522.563 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   60208.679 ±(99.9%) 1433.130 ops/s [Average]
[info]   (min, avg, max) = (59774.373, 60208.679, 60769.351), stdev = 372.179
[info]   CI (99.9%): [58775.549, 61641.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1399.364 ±(99.9%) 33.172 MB/sec [Average]
[info]   (min, avg, max) = (1389.254, 1399.364, 1412.367), stdev = 8.615
[info]   CI (99.9%): [1366.192, 1432.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36584.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36584.007, 36584.007, 36584.007), stdev = 0.001
[info]   CI (99.9%): [36584.006, 36584.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.145 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.482 ±(99.9%) 3.806 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.482, 2.249), stdev = 0.989
[info]   CI (99.9%): [≈ 0, 4.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1357.403 ±(99.9%) 26.773 MB/sec [Average]
[info]   (min, avg, max) = (1345.394, 1357.403, 1361.655), stdev = 6.953
[info]   CI (99.9%): [1330.630, 1384.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   35487.445 ±(99.9%) 615.111 B/op [Average]
[info]   (min, avg, max) = (35263.069, 35487.445, 35701.853), stdev = 159.742
[info]   CI (99.9%): [34872.334, 36102.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   20.915 ±(99.9%) 180.085 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.915, 104.575), stdev = 46.767
[info]   CI (99.9%): [≈ 0, 201.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 16.000), stdev = 5.357
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 39.30% complete, ETA 00:52:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9792.174 ops/s
[info] # Warmup Iteration   2: 14008.243 ops/s
[info] # Warmup Iteration   3: 13592.012 ops/s
[info] Iteration   1: 13541.301 ops/s
[info]                  ·gc.alloc.rate:            1208.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       140464.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 117532.184 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 14061.151 ops/s
[info]                  ·gc.alloc.rate:                                  1255.111 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140468.126 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.548 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151277.069 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                372.787 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 14287.701 ops/s
[info]                  ·gc.alloc.rate:                                  1275.358 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.556 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       149974.763 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 14199.835 ops/s
[info]                  ·gc.alloc.rate:                                  1267.369 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.291 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113185.960 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 14119.611 ops/s
[info]                  ·gc.alloc.rate:                                  1260.391 MB/sec
[info]                  ·gc.alloc.rate.norm:                             140480.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.676 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       151769.533 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   14041.920 ±(99.9%) 1126.553 ops/s [Average]
[info]   (min, avg, max) = (13541.301, 14041.920, 14287.701), stdev = 292.562
[info]   CI (99.9%): [12915.367, 15168.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1253.309 ±(99.9%) 101.174 MB/sec [Average]
[info]   (min, avg, max) = (1208.318, 1253.309, 1275.358), stdev = 26.275
[info]   CI (99.9%): [1152.136, 1354.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140474.451 ±(99.9%) 29.952 B/op [Average]
[info]   (min, avg, max) = (140464.032, 140474.451, 140480.039), stdev = 7.778
[info]   CI (99.9%): [140444.499, 140504.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.095 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.059), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.117 ±(99.9%) 10.622 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.117, 6.548), stdev = 2.758
[info]   CI (99.9%): [≈ 0, 12.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.422 ±(99.9%) 722.067 MB/sec [Average]
[info]   (min, avg, max) = (1011.051, 1221.422, 1361.680), stdev = 187.519
[info]   CI (99.9%): [499.355, 1943.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   136747.902 ±(99.9%) 75459.479 B/op [Average]
[info]   (min, avg, max) = (113185.960, 136747.902, 151769.533), stdev = 19596.587
[info]   CI (99.9%): [61288.423, 212207.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   74.557 ±(99.9%) 641.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 74.557, 372.787), stdev = 166.716
[info]   CI (99.9%): [≈ 0, 716.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 11.000), stdev = 3.962
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.55% complete, ETA 00:52:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7945.083 ops/s
[info] # Warmup Iteration   2: 13931.884 ops/s
[info] # Warmup Iteration   3: 14001.503 ops/s
[info] Iteration   1: 13998.911 ops/s
[info]                  ·gc.alloc.rate:            1112.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       125104.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 113454.695 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 13841.472 ops/s
[info]                  ·gc.alloc.rate:                   1099.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              125109.598 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        152912.600 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 530.158 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   3: 14177.600 ops/s
[info]                  ·gc.alloc.rate:                                  1127.430 MB/sec
[info]                  ·gc.alloc.rate.norm:                             125136.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.895 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113361.566 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 13871.056 ops/s
[info]                  ·gc.alloc.rate:                                  1102.986 MB/sec
[info]                  ·gc.alloc.rate.norm:                             125136.029 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.328 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.314 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115870.180 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 13525.499 ops/s
[info]                  ·gc.alloc.rate:            1075.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       125136.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 118825.178 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   13882.908 ±(99.9%) 923.148 ops/s [Average]
[info]   (min, avg, max) = (13525.499, 13882.908, 14177.600), stdev = 239.739
[info]   CI (99.9%): [12959.760, 14806.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1103.665 ±(99.9%) 73.571 MB/sec [Average]
[info]   (min, avg, max) = (1075.345, 1103.665, 1127.430), stdev = 19.106
[info]   CI (99.9%): [1030.094, 1177.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   125124.346 ±(99.9%) 62.085 B/op [Average]
[info]   (min, avg, max) = (125104.034, 125124.346, 125136.038), stdev = 16.123
[info]   CI (99.9%): [125062.261, 125186.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.168 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.245 ±(99.9%) 18.629 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.245, 10.895), stdev = 4.838
[info]   CI (99.9%): [≈ 0, 20.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.437 ±(99.9%) 562.198 MB/sec [Average]
[info]   (min, avg, max) = (1008.975, 1083.437, 1344.439), stdev = 146.001
[info]   CI (99.9%): [521.239, 1645.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   122884.844 ±(99.9%) 65204.861 B/op [Average]
[info]   (min, avg, max) = (113361.566, 122884.844, 152912.600), stdev = 16933.495
[info]   CI (99.9%): [57679.983, 188089.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.661), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   106.032 ±(99.9%) 912.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.032, 530.158), stdev = 237.094
[info]   CI (99.9%): [≈ 0, 1018.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 18.000), stdev = 7.106
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 39.80% complete, ETA 00:51:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 264822.791 ops/s
[info] # Warmup Iteration   2: 285029.867 ops/s
[info] # Warmup Iteration   3: 282718.536 ops/s
[info] Iteration   1: 281843.477 ops/s
[info]                  ·gc.alloc.rate:            733.523 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.474 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3771.856 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 285768.063 ops/s
[info]                  ·gc.alloc.rate:            743.718 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3720.098 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 275998.837 ops/s
[info]                  ·gc.alloc.rate:            718.177 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      675.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3851.861 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 268214.518 ops/s
[info]                  ·gc.alloc.rate:            697.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       4096.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1013.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5945.492 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 284568.994 ops/s
[info]                  ·gc.alloc.rate:                                  740.704 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4096.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            678.226 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3750.506 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                14.737 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   279278.778 ±(99.9%) 27890.649 ops/s [Average]
[info]   (min, avg, max) = (268214.518, 279278.778, 285768.063), stdev = 7243.113
[info]   CI (99.9%): [251388.129, 307169.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   726.816 ±(99.9%) 72.831 MB/sec [Average]
[info]   (min, avg, max) = (697.958, 726.816, 743.718), stdev = 18.914
[info]   CI (99.9%): [653.984, 799.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.047 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.027), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.262 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.152), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   743.529 ±(99.9%) 580.313 MB/sec [Average]
[info]   (min, avg, max) = (675.370, 743.529, 1013.110), stdev = 150.705
[info]   CI (99.9%): [163.216, 1323.842] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4207.963 ±(99.9%) 3744.879 B/op [Average]
[info]   (min, avg, max) = (3720.098, 4207.963, 5945.492), stdev = 972.533
[info]   CI (99.9%): [463.084, 7952.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.947 ±(99.9%) 25.378 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.947, 14.737), stdev = 6.590
[info]   CI (99.9%): [≈ 0, 28.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 10.000), stdev = 2.074
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 40.05% complete, ETA 00:51:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5115.442 ops/s
[info] # Warmup Iteration   2: 9458.067 ops/s
[info] # Warmup Iteration   3: 9569.101 ops/s
[info] Iteration   1: 9614.292 ops/s
[info]                  ·gc.alloc.rate:            1327.402 MB/sec
[info]                  ·gc.alloc.rate.norm:       217320.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 220270.749 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 9967.747 ops/s
[info]                  ·gc.alloc.rate:                                  1376.064 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.041 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 13.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.217 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213711.779 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                631.039 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 10087.887 ops/s
[info]                  ·gc.alloc.rate:                                  1393.209 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.044 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.777 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       212417.180 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 9940.303 ops/s
[info]                  ·gc.alloc.rate:            1372.458 MB/sec
[info]                  ·gc.alloc.rate.norm:       217324.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.799 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 269474.118 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 10040.196 ops/s
[info]                  ·gc.alloc.rate:                                  1386.174 MB/sec
[info]                  ·gc.alloc.rate.norm:                             217320.544 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.564 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       213432.518 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   9930.085 ±(99.9%) 715.936 ops/s [Average]
[info]   (min, avg, max) = (9614.292, 9930.085, 10087.887), stdev = 185.926
[info]   CI (99.9%): [9214.149, 10646.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1371.061 ±(99.9%) 99.149 MB/sec [Average]
[info]   (min, avg, max) = (1327.402, 1371.061, 1393.209), stdev = 25.749
[info]   CI (99.9%): [1271.913, 1470.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   217320.948 ±(99.9%) 6.766 B/op [Average]
[info]   (min, avg, max) = (217320.041, 217320.948, 217324.068), stdev = 1.757
[info]   CI (99.9%): [217314.182, 217327.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.083), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.153 ±(99.9%) 21.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.153, 13.050), stdev = 5.602
[info]   CI (99.9%): [≈ 0, 24.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.718 ±(99.9%) 596.998 MB/sec [Average]
[info]   (min, avg, max) = (1345.425, 1424.718, 1701.799), stdev = 155.038
[info]   CI (99.9%): [827.721, 2021.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   225861.269 ±(99.9%) 94638.183 B/op [Average]
[info]   (min, avg, max) = (212417.180, 225861.269, 269474.118), stdev = 24577.235
[info]   CI (99.9%): [131223.086, 320499.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   126.208 ±(99.9%) 1086.687 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.208, 631.039), stdev = 282.209
[info]   CI (99.9%): [≈ 0, 1212.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 16.000), stdev = 5.320
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 40.30% complete, ETA 00:51:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27280.200 ops/s
[info] # Warmup Iteration   2: 36931.077 ops/s
[info] # Warmup Iteration   3: 37369.487 ops/s
[info] Iteration   1: 37347.411 ops/s
[info]                  ·gc.alloc.rate:            1228.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       51773.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.980 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42613.401 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 37482.843 ops/s
[info]                  ·gc.alloc.rate:                                  1232.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.443 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56753.113 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                139.855 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 38004.750 ops/s
[info]                  ·gc.alloc.rate:                                  1250.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             51768.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.032 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.310 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.841 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56386.029 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 37079.984 ops/s
[info]                  ·gc.alloc.rate:            1219.577 MB/sec
[info]                  ·gc.alloc.rate.norm:       51768.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.127 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 43344.308 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37681.696 ops/s
[info]                  ·gc.alloc.rate:            1239.294 MB/sec
[info]                  ·gc.alloc.rate.norm:       51768.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56869.278 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   37519.337 ±(99.9%) 1342.086 ops/s [Average]
[info]   (min, avg, max) = (37079.984, 37519.337, 38004.750), stdev = 348.535
[info]   CI (99.9%): [36177.251, 38861.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1234.022 ±(99.9%) 44.590 MB/sec [Average]
[info]   (min, avg, max) = (1219.577, 1234.022, 1250.306), stdev = 11.580
[info]   CI (99.9%): [1189.431, 1278.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51769.035 ±(99.9%) 8.817 B/op [Average]
[info]   (min, avg, max) = (51768.011, 51769.035, 51773.131), stdev = 2.290
[info]   CI (99.9%): [51760.219, 51777.852] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.070 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.034), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.551 ±(99.9%) 2.909 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.551, 1.443), stdev = 0.755
[info]   CI (99.9%): [≈ 0, 3.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.341 ±(99.9%) 721.928 MB/sec [Average]
[info]   (min, avg, max) = (1010.980, 1221.341, 1361.841), stdev = 187.482
[info]   CI (99.9%): [499.413, 1943.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   51193.226 ±(99.9%) 28899.975 B/op [Average]
[info]   (min, avg, max) = (42613.401, 51193.226, 56869.278), stdev = 7505.232
[info]   CI (99.9%): [22293.250, 80093.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.971 ±(99.9%) 240.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.971, 139.855), stdev = 62.545
[info]   CI (99.9%): [≈ 0, 268.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 11.000), stdev = 4.219
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.55% complete, ETA 00:51:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28343.320 ops/s
[info] # Warmup Iteration   2: 44797.389 ops/s
[info] # Warmup Iteration   3: 44906.675 ops/s
[info] Iteration   1: 43562.981 ops/s
[info]                  ·gc.alloc.rate:            1155.375 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36459.025 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 44540.497 ops/s
[info]                  ·gc.alloc.rate:                                  1181.710 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47664.685 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                164.767 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 45580.347 ops/s
[info]                  ·gc.alloc.rate:                                  1209.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             41752.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.473 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.222 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35260.749 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 44361.043 ops/s
[info]                  ·gc.alloc.rate:            1176.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 48306.010 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 45678.204 ops/s
[info]                  ·gc.alloc.rate:            1211.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       41752.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35185.112 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala":
[info]   44744.614 ±(99.9%) 3419.866 ops/s [Average]
[info]   (min, avg, max) = (43562.981, 44744.614, 45678.204), stdev = 888.128
[info]   CI (99.9%): [41324.748, 48164.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1186.916 ±(99.9%) 91.041 MB/sec [Average]
[info]   (min, avg, max) = (1155.375, 1186.916, 1211.633), stdev = 23.643
[info]   CI (99.9%): [1095.876, 1277.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   41752.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41752.009, 41752.009, 41752.010), stdev = 0.001
[info]   CI (99.9%): [41752.008, 41752.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.195 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.101), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.278 ±(99.9%) 6.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 3.473), stdev = 1.761
[info]   CI (99.9%): [≈ 0, 8.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1152.319 ±(99.9%) 713.615 MB/sec [Average]
[info]   (min, avg, max) = (1008.906, 1152.319, 1361.344), stdev = 185.323
[info]   CI (99.9%): [438.704, 1865.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40575.116 ±(99.9%) 26135.178 B/op [Average]
[info]   (min, avg, max) = (35185.112, 40575.116, 48306.010), stdev = 6787.223
[info]   CI (99.9%): [14439.939, 66710.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   32.953 ±(99.9%) 283.738 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 32.953, 164.767), stdev = 73.686
[info]   CI (99.9%): [≈ 0, 316.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 14.000), stdev = 5.762
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 40.80% complete, ETA 00:51:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1176968.456 ops/s
[info] # Warmup Iteration   2: 1331934.955 ops/s
[info] # Warmup Iteration   3: 1336652.266 ops/s
[info] Iteration   1: 1335182.136 ops/s
[info]                  ·gc.alloc.rate:            1214.692 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1346.076 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1586.890 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1324423.177 ops/s
[info]                  ·gc.alloc.rate:                                  1204.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1204.052 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                4.750 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 1316206.373 ops/s
[info]                  ·gc.alloc.rate:                                  1197.401 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.068 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1628.175 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1335539.605 ops/s
[info]                  ·gc.alloc.rate:            1215.047 MB/sec
[info]                  ·gc.alloc.rate.norm:       1432.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1203.447 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 1330621.770 ops/s
[info]                  ·gc.alloc.rate:                                  1210.613 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1432.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.508 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1610.489 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1328394.612 ±(99.9%) 31425.071 ops/s [Average]
[info]   (min, avg, max) = (1316206.373, 1328394.612, 1335539.605), stdev = 8160.991
[info]   CI (99.9%): [1296969.541, 1359819.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1208.525 ±(99.9%) 28.689 MB/sec [Average]
[info]   (min, avg, max) = (1197.401, 1208.525, 1215.047), stdev = 7.450
[info]   CI (99.9%): [1179.836, 1237.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.130 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.068), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.030 ±(99.9%) 0.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.081), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1220.644 ±(99.9%) 715.982 MB/sec [Average]
[info]   (min, avg, max) = (1013.077, 1220.644, 1361.508), stdev = 185.938
[info]   CI (99.9%): [504.661, 1936.626] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1446.611 ±(99.9%) 855.552 B/op [Average]
[info]   (min, avg, max) = (1203.447, 1446.611, 1628.175), stdev = 222.184
[info]   CI (99.9%): [591.058, 2302.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.950 ±(99.9%) 8.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.950, 4.750), stdev = 2.124
[info]   CI (99.9%): [≈ 0, 9.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.800, 13.000), stdev = 4.438
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 41.04% complete, ETA 00:50:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1202521.076 ops/s
[info] # Warmup Iteration   2: 1326705.575 ops/s
[info] # Warmup Iteration   3: 1339102.754 ops/s
[info] Iteration   1: 1338417.767 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1337374.064 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1333807.223 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1334530.224 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1334257.028 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1335677.261 ±(99.9%) 7989.345 ops/s [Average]
[info]   (min, avg, max) = (1333807.223, 1335677.261, 1338417.767), stdev = 2074.808
[info]   CI (99.9%): [1327687.916, 1343666.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 41.29% complete, ETA 00:50:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24622.329 ops/s
[info] # Warmup Iteration   2: 33952.610 ops/s
[info] # Warmup Iteration   3: 34381.553 ops/s
[info] Iteration   1: 34158.927 ops/s
[info]                  ·gc.alloc.rate:            1033.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       47623.714 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46497.663 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 35147.249 ops/s
[info]                  ·gc.alloc.rate:            1063.222 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 45190.813 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 35676.678 ops/s
[info]                  ·gc.alloc.rate:                                  1079.136 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.100 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.391 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.956 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       44695.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                176.315 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 34410.085 ops/s
[info]                  ·gc.alloc.rate:                                  1041.234 MB/sec
[info]                  ·gc.alloc.rate.norm:                             47616.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       46705.611 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 35592.331 ops/s
[info]                  ·gc.alloc.rate:            1076.789 MB/sec
[info]                  ·gc.alloc.rate.norm:       47616.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 60206.448 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   34997.054 ±(99.9%) 2643.933 ops/s [Average]
[info]   (min, avg, max) = (34158.927, 34997.054, 35676.678), stdev = 686.621
[info]   CI (99.9%): [32353.121, 37640.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1058.757 ±(99.9%) 79.619 MB/sec [Average]
[info]   (min, avg, max) = (1033.406, 1058.757, 1079.136), stdev = 20.677
[info]   CI (99.9%): [979.138, 1138.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47617.552 ±(99.9%) 13.264 B/op [Average]
[info]   (min, avg, max) = (47616.011, 47617.552, 47623.714), stdev = 3.445
[info]   CI (99.9%): [47604.288, 47630.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.171 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.100), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.322 ±(99.9%) 7.571 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.322, 4.391), stdev = 1.966
[info]   CI (99.9%): [≈ 0, 8.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1082.766 ±(99.9%) 600.327 MB/sec [Average]
[info]   (min, avg, max) = (1008.971, 1082.766, 1361.509), stdev = 155.903
[info]   CI (99.9%): [482.440, 1683.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   48659.288 ±(99.9%) 25070.996 B/op [Average]
[info]   (min, avg, max) = (44695.908, 48659.288, 60206.448), stdev = 6510.858
[info]   CI (99.9%): [23588.293, 73730.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.263 ±(99.9%) 303.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.263, 176.315), stdev = 78.851
[info]   CI (99.9%): [≈ 0, 338.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.000, 12.000), stdev = 4.301
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 41.54% complete, ETA 00:50:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102032.419 ops/s
[info] # Warmup Iteration   2: 122560.576 ops/s
[info] # Warmup Iteration   3: 125890.235 ops/s
[info] Iteration   1: 124508.305 ops/s
[info]                  ·gc.alloc.rate:                                  2135.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.722 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.590 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30117.123 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 127686.275 ops/s
[info]                  ·gc.alloc.rate:                                  2190.874 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25174.100 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 128345.262 ops/s
[info]                  ·gc.alloc.rate:                                  2201.396 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.411 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29220.146 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 128474.252 ops/s
[info]                  ·gc.alloc.rate:                                  2203.653 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25020.499 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 126665.085 ops/s
[info]                  ·gc.alloc.rate:                                  2172.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27000.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29607.183 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   127135.836 ±(99.9%) 6292.764 ops/s [Average]
[info]   (min, avg, max) = (124508.305, 127135.836, 128474.252), stdev = 1634.211
[info]   CI (99.9%): [120843.072, 133428.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2180.960 ±(99.9%) 107.511 MB/sec [Average]
[info]   (min, avg, max) = (2135.992, 2180.960, 2203.653), stdev = 27.920
[info]   CI (99.9%): [2073.449, 2288.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.004), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.014, 0.057), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.181 ±(99.9%) 1.173 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.181, 0.722), stdev = 0.305
[info]   CI (99.9%): [≈ 0, 1.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.502 ±(99.9%) 717.438 MB/sec [Average]
[info]   (min, avg, max) = (2042.092, 2246.502, 2382.704), stdev = 186.316
[info]   CI (99.9%): [1529.064, 2963.940] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27827.810 ±(99.9%) 9678.241 B/op [Average]
[info]   (min, avg, max) = (25020.499, 27827.810, 30117.123), stdev = 2513.408
[info]   CI (99.9%): [18149.570, 37506.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 41.79% complete, ETA 00:50:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10284.131 ops/s
[info] # Warmup Iteration   2: 339659.232 ops/s
[info] # Warmup Iteration   3: 336535.479 ops/s
[info] Iteration   1: 332733.687 ops/s
[info]                  ·gc.alloc.rate:            666.261 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.381 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3157.298 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 330996.139 ops/s
[info]                  ·gc.alloc.rate:            662.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3173.769 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 332693.363 ops/s
[info]                  ·gc.alloc.rate:            666.198 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3157.669 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 332599.929 ops/s
[info]                  ·gc.alloc.rate:                   666.046 MB/sec
[info]                  ·gc.alloc.rate.norm:              3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3155.323 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.152 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 332226.214 ops/s
[info]                  ·gc.alloc.rate:            665.315 MB/sec
[info]                  ·gc.alloc.rate.norm:       3152.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3161.964 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava":
[info]   332249.866 ±(99.9%) 2807.081 ops/s [Average]
[info]   (min, avg, max) = (330996.139, 332249.866, 332733.687), stdev = 728.990
[info]   CI (99.9%): [329442.785, 335056.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   665.309 ±(99.9%) 5.752 MB/sec [Average]
[info]   (min, avg, max) = (662.724, 665.309, 666.261), stdev = 1.494
[info]   CI (99.9%): [659.557, 671.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   3152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3152.001, 3152.001, 3152.001), stdev = 0.001
[info]   CI (99.9%): [3152.001, 3152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.249 ±(99.9%) 1.091 MB/sec [Average]
[info]   (min, avg, max) = (666.748, 667.249, 667.418), stdev = 0.283
[info]   CI (99.9%): [666.158, 668.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   3161.205 ±(99.9%) 28.609 B/op [Average]
[info]   (min, avg, max) = (3155.323, 3161.205, 3173.769), stdev = 7.430
[info]   CI (99.9%): [3132.596, 3189.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.630 ±(99.9%) 5.428 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.630, 3.152), stdev = 1.410
[info]   CI (99.9%): [≈ 0, 6.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.04% complete, ETA 00:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149637.289 ops/s
[info] # Warmup Iteration   2: 233735.359 ops/s
[info] # Warmup Iteration   3: 235832.922 ops/s
[info] Iteration   1: 237841.263 ops/s
[info]                  ·gc.alloc.rate:            527.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2225.930 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 236374.560 ops/s
[info]                  ·gc.alloc.rate:            523.812 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4479.729 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 237864.873 ops/s
[info]                  ·gc.alloc.rate:            527.050 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.318 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2225.743 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 236927.181 ops/s
[info]                  ·gc.alloc.rate:            525.041 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4469.275 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 238084.454 ops/s
[info]                  ·gc.alloc.rate:            527.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       3488.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2223.770 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   237418.466 ±(99.9%) 2824.833 ops/s [Average]
[info]   (min, avg, max) = (236374.560, 237418.466, 238084.454), stdev = 733.600
[info]   CI (99.9%): [234593.633, 240243.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   526.132 ±(99.9%) 6.259 MB/sec [Average]
[info]   (min, avg, max) = (523.812, 526.132, 527.534), stdev = 1.625
[info]   CI (99.9%): [519.873, 532.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3488.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3488.002, 3488.002, 3488.002), stdev = 0.001
[info]   CI (99.9%): [3488.001, 3488.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.920 ±(99.9%) 709.454 MB/sec [Average]
[info]   (min, avg, max) = (336.318, 470.920, 672.750), stdev = 184.243
[info]   CI (99.9%): [≈ 0, 1180.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   3124.889 ±(99.9%) 4744.101 B/op [Average]
[info]   (min, avg, max) = (2223.770, 3124.889, 4479.729), stdev = 1232.028
[info]   CI (99.9%): [≈ 0, 7868.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.345
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 42.29% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 467400.337 ops/s
[info] # Warmup Iteration   2: 496880.431 ops/s
[info] # Warmup Iteration   3: 503424.316 ops/s
[info] Iteration   1: 498479.630 ops/s
[info]                  ·gc.alloc.rate:            628.277 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.021 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2128.452 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 502842.239 ops/s
[info]                  ·gc.alloc.rate:            633.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2110.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 502958.619 ops/s
[info]                  ·gc.alloc.rate:            634.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2109.559 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 502333.389 ops/s
[info]                  ·gc.alloc.rate:            633.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2112.112 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 504082.297 ops/s
[info]                  ·gc.alloc.rate:            635.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       1984.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1052.395 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   502139.235 ±(99.9%) 8252.313 ops/s [Average]
[info]   (min, avg, max) = (498479.630, 502139.235, 504082.297), stdev = 2143.100
[info]   CI (99.9%): [493886.922, 510391.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   632.949 ±(99.9%) 10.538 MB/sec [Average]
[info]   (min, avg, max) = (628.277, 632.949, 635.386), stdev = 2.737
[info]   CI (99.9%): [622.411, 643.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.683 ±(99.9%) 580.439 MB/sec [Average]
[info]   (min, avg, max) = (337.034, 606.683, 674.337), stdev = 150.738
[info]   CI (99.9%): [26.244, 1187.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1902.509 ±(99.9%) 1830.183 B/op [Average]
[info]   (min, avg, max) = (1052.395, 1902.509, 2128.452), stdev = 475.293
[info]   CI (99.9%): [72.326, 3732.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 42.54% complete, ETA 00:49:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36156.832 ops/s
[info] # Warmup Iteration   2: 65000.140 ops/s
[info] # Warmup Iteration   3: 65753.231 ops/s
[info] Iteration   1: 67671.672 ops/s
[info]                  ·gc.alloc.rate:                                  3021.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70264.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.528 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71249.812 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 66397.299 ops/s
[info]                  ·gc.alloc.rate:                                  2963.793 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70264.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.135 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64549.131 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 67704.201 ops/s
[info]                  ·gc.alloc.rate:                                  3023.196 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70264.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71215.090 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 67909.492 ops/s
[info]                  ·gc.alloc.rate:                                  3032.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70264.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70998.057 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 66083.902 ops/s
[info]                  ·gc.alloc.rate:                                  2950.996 MB/sec
[info]                  ·gc.alloc.rate.norm:                             70264.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72959.454 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   67153.313 ±(99.9%) 3255.547 ops/s [Average]
[info]   (min, avg, max) = (66083.902, 67153.313, 67909.492), stdev = 845.455
[info]   CI (99.9%): [63897.767, 70408.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2998.236 ±(99.9%) 145.476 MB/sec [Average]
[info]   (min, avg, max) = (2950.996, 2998.236, 3032.053), stdev = 37.780
[info]   CI (99.9%): [2852.760, 3143.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   70264.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (70264.006, 70264.006, 70264.007), stdev = 0.001
[info]   CI (99.9%): [70264.005, 70264.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.014 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.013), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.166 ±(99.9%) 0.336 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.166, 0.312), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.662 ±(99.9%) 587.497 MB/sec [Average]
[info]   (min, avg, max) = (2722.735, 2995.662, 3064.201), stdev = 152.571
[info]   CI (99.9%): [2408.165, 3583.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70194.309 ±(99.9%) 12524.386 B/op [Average]
[info]   (min, avg, max) = (64549.131, 70194.309, 72959.454), stdev = 3252.543
[info]   CI (99.9%): [57669.923, 82718.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 42.79% complete, ETA 00:49:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 143657.174 ops/s
[info] # Warmup Iteration   2: 186903.043 ops/s
[info] # Warmup Iteration   3: 186704.120 ops/s
[info] Iteration   1: 189751.247 ops/s
[info]                  ·gc.alloc.rate:                                  1632.641 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13544.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.784 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14033.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                27.626 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 196319.312 ops/s
[info]                  ·gc.alloc.rate:                                  1689.756 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13544.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.260 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13644.224 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 194401.956 ops/s
[info]                  ·gc.alloc.rate:                                  1673.031 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13544.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13779.029 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 196919.723 ops/s
[info]                  ·gc.alloc.rate:                                  1694.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             13544.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.914 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13603.142 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 195099.949 ops/s
[info]                  ·gc.alloc.rate:            1679.555 MB/sec
[info]                  ·gc.alloc.rate.norm:       13544.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1362.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10984.243 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   194498.437 ±(99.9%) 10905.747 ops/s [Average]
[info]   (min, avg, max) = (189751.247, 194498.437, 196919.723), stdev = 2832.188
[info]   CI (99.9%): [183592.691, 205404.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1673.900 ±(99.9%) 94.545 MB/sec [Average]
[info]   (min, avg, max) = (1632.641, 1673.900, 1694.515), stdev = 24.553
[info]   CI (99.9%): [1579.354, 1768.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13544.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13544.002, 13544.002, 13544.002), stdev = 0.001
[info]   CI (99.9%): [13544.002, 13544.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.165 ±(99.9%) 1.332 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.165, 0.784), stdev = 0.346
[info]   CI (99.9%): [≈ 0, 1.498] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1632.010 ±(99.9%) 581.204 MB/sec [Average]
[info]   (min, avg, max) = (1362.126, 1632.010, 1702.260), stdev = 150.937
[info]   CI (99.9%): [1050.806, 2213.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   13208.894 ±(99.9%) 4832.365 B/op [Average]
[info]   (min, avg, max) = (10984.243, 13208.894, 14033.834), stdev = 1254.950
[info]   CI (99.9%): [8376.529, 18041.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   5.525 ±(99.9%) 47.573 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.525, 27.626), stdev = 12.355
[info]   CI (99.9%): [≈ 0, 53.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 12.000), stdev = 3.493
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 43.03% complete, ETA 00:49:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26307.357 ops/s
[info] # Warmup Iteration   2: 713807.683 ops/s
[info] # Warmup Iteration   3: 724208.310 ops/s
[info] Iteration   1: 722942.608 ops/s
[info]                  ·gc.alloc.rate:                   565.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.725 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1451.695 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 721337.676 ops/s
[info]                  ·gc.alloc.rate:            564.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 728.166 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 721819.380 ops/s
[info]                  ·gc.alloc.rate:            564.965 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1455.361 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 718326.877 ops/s
[info]                  ·gc.alloc.rate:            562.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1462.447 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 723302.925 ops/s
[info]                  ·gc.alloc.rate:                   566.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             666.883 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1450.930 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.449 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava":
[info]   721545.893 ±(99.9%) 7584.446 ops/s [Average]
[info]   (min, avg, max) = (718326.877, 721545.893, 723302.925), stdev = 1969.657
[info]   CI (99.9%): [713961.447, 729130.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   564.774 ±(99.9%) 6.008 MB/sec [Average]
[info]   (min, avg, max) = (562.253, 564.774, 566.257), stdev = 1.560
[info]   CI (99.9%): [558.765, 570.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.000, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   600.421 ±(99.9%) 574.174 MB/sec [Average]
[info]   (min, avg, max) = (333.684, 600.421, 667.423), stdev = 149.111
[info]   CI (99.9%): [26.248, 1174.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   1309.720 ±(99.9%) 1251.962 B/op [Average]
[info]   (min, avg, max) = (728.166, 1309.720, 1462.447), stdev = 325.131
[info]   CI (99.9%): [57.758, 2561.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.580 ±(99.9%) 3.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.580, 1.450), stdev = 0.794
[info]   CI (99.9%): [≈ 0, 3.638] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.28% complete, ETA 00:48:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313321.734 ops/s
[info] # Warmup Iteration   2: 458655.077 ops/s
[info] # Warmup Iteration   3: 473793.419 ops/s
[info] Iteration   1: 467110.914 ops/s
[info]                  ·gc.alloc.rate:            479.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2266.944 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 467312.574 ops/s
[info]                  ·gc.alloc.rate:            479.713 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.326 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1132.977 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 467372.044 ops/s
[info]                  ·gc.alloc.rate:            479.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.633 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2265.683 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 472309.150 ops/s
[info]                  ·gc.alloc.rate:            484.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1121.018 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 474745.080 ops/s
[info]                  ·gc.alloc.rate:            487.405 MB/sec
[info]                  ·gc.alloc.rate.norm:       1616.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2230.472 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   469769.952 ±(99.9%) 13622.054 ops/s [Average]
[info]   (min, avg, max) = (467110.914, 469769.952, 474745.080), stdev = 3537.604
[info]   CI (99.9%): [456147.898, 483392.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   482.257 ±(99.9%) 14.148 MB/sec [Average]
[info]   (min, avg, max) = (479.489, 482.257, 487.405), stdev = 3.674
[info]   CI (99.9%): [468.110, 496.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.144 ±(99.9%) 709.304 MB/sec [Average]
[info]   (min, avg, max) = (336.326, 538.144, 672.737), stdev = 184.204
[info]   CI (99.9%): [≈ 0, 1247.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1803.419 ±(99.9%) 2378.440 B/op [Average]
[info]   (min, avg, max) = (1121.018, 1803.419, 2266.944), stdev = 617.673
[info]   CI (99.9%): [≈ 0, 4181.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 43.53% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 565924.976 ops/s
[info] # Warmup Iteration   2: 636534.310 ops/s
[info] # Warmup Iteration   3: 667532.772 ops/s
[info] Iteration   1: 667600.151 ops/s
[info]                  ·gc.alloc.rate:            522.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 794.604 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 698573.205 ops/s
[info]                  ·gc.alloc.rate:            546.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.685 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1515.828 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 699917.931 ops/s
[info]                  ·gc.alloc.rate:            547.838 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.775 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1512.963 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 698880.753 ops/s
[info]                  ·gc.alloc.rate:            547.014 MB/sec
[info]                  ·gc.alloc.rate.norm:       1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 757.583 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 699420.382 ops/s
[info]                  ·gc.alloc.rate:                   547.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1513.934 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   692878.484 ±(99.9%) 54449.571 ops/s [Average]
[info]   (min, avg, max) = (667600.151, 692878.484, 699917.931), stdev = 14140.381
[info]   CI (99.9%): [638428.913, 747328.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   542.307 ±(99.9%) 42.631 MB/sec [Average]
[info]   (min, avg, max) = (522.516, 542.307, 547.838), stdev = 11.071
[info]   CI (99.9%): [499.675, 584.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.000, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   538.310 ±(99.9%) 708.726 MB/sec [Average]
[info]   (min, avg, max) = (336.371, 538.310, 672.775), stdev = 184.054
[info]   CI (99.9%): [≈ 0, 1247.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1218.982 ±(99.9%) 1557.637 B/op [Average]
[info]   (min, avg, max) = (757.583, 1218.982, 1515.828), stdev = 404.513
[info]   CI (99.9%): [≈ 0, 2776.619] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.300 ±(99.9%) 2.581 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.300, 1.499), stdev = 0.670
[info]   CI (99.9%): [≈ 0, 2.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.000, 7.000), stdev = 1.871
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 43.78% complete, ETA 00:48:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 638067.103 ops/s
[info] # Warmup Iteration   2: 703241.227 ops/s
[info] # Warmup Iteration   3: 702987.184 ops/s
[info] Iteration   1: 706859.405 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 705041.037 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 698067.701 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 702526.685 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 702888.785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   703076.723 ±(99.9%) 12712.285 ops/s [Average]
[info]   (min, avg, max) = (698067.701, 703076.723, 706859.405), stdev = 3301.340
[info]   CI (99.9%): [690364.438, 715789.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 44.03% complete, ETA 00:48:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18027.836 ops/s
[info] # Warmup Iteration   2: 27884.899 ops/s
[info] # Warmup Iteration   3: 27960.955 ops/s
[info] Iteration   1: 27869.508 ops/s
[info]                  ·gc.alloc.rate:            1428.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       80704.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75986.494 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   2: 28154.557 ops/s
[info]                  ·gc.alloc.rate:                                  1443.175 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80693.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.890 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.281 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       75890.404 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                223.426 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 28301.992 ops/s
[info]                  ·gc.alloc.rate:                                  1450.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.847 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       94648.190 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 27564.898 ops/s
[info]                  ·gc.alloc.rate:            1413.011 MB/sec
[info]                  ·gc.alloc.rate.norm:       80688.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77742.731 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 27282.780 ops/s
[info]                  ·gc.alloc.rate:                                  1398.676 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80688.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78543.292 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   27834.747 ±(99.9%) 1610.024 ops/s [Average]
[info]   (min, avg, max) = (27282.780, 27834.747, 28301.992), stdev = 418.118
[info]   CI (99.9%): [26224.723, 29444.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1426.930 ±(99.9%) 82.393 MB/sec [Average]
[info]   (min, avg, max) = (1398.676, 1426.930, 1450.832), stdev = 21.397
[info]   CI (99.9%): [1344.537, 1509.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80692.219 ±(99.9%) 26.743 B/op [Average]
[info]   (min, avg, max) = (80688.015, 80692.219, 80704.020), stdev = 6.945
[info]   CI (99.9%): [80665.477, 80718.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.070), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.811 ±(99.9%) 6.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.811, 3.890), stdev = 1.722
[info]   CI (99.9%): [≈ 0, 7.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.498 ±(99.9%) 595.400 MB/sec [Average]
[info]   (min, avg, max) = (1345.428, 1425.498, 1701.847), stdev = 154.624
[info]   CI (99.9%): [830.097, 2020.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80562.222 ±(99.9%) 30636.422 B/op [Average]
[info]   (min, avg, max) = (75890.404, 80562.222, 94648.190), stdev = 7956.181
[info]   CI (99.9%): [49925.801, 111198.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   44.685 ±(99.9%) 384.753 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.685, 223.426), stdev = 99.919
[info]   CI (99.9%): [≈ 0, 429.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 17.000), stdev = 5.788
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 44.28% complete, ETA 00:48:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4261.676 ops/s
[info] # Warmup Iteration   2: 6704.970 ops/s
[info] # Warmup Iteration   3: 6870.863 ops/s
[info] Iteration   1: 6854.760 ops/s
[info]                  ·gc.alloc.rate:            1055.437 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.168 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 232133.348 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 6878.383 ops/s
[info]                  ·gc.alloc.rate:            1058.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       242296.059 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 231357.321 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 6906.542 ops/s
[info]                  ·gc.alloc.rate:                                  1063.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.064 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       231178.525 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                758.958 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6805.073 ops/s
[info]                  ·gc.alloc.rate:                                  1047.536 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       236149.112 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 6856.775 ops/s
[info]                  ·gc.alloc.rate:                                  1055.615 MB/sec
[info]                  ·gc.alloc.rate.norm:                             242296.069 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.131 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       234358.800 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   6860.307 ±(99.9%) 143.543 ops/s [Average]
[info]   (min, avg, max) = (6805.073, 6860.307, 6906.542), stdev = 37.278
[info]   CI (99.9%): [6716.764, 7003.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1056.102 ±(99.9%) 22.042 MB/sec [Average]
[info]   (min, avg, max) = (1047.536, 1056.102, 1063.172), stdev = 5.724
[info]   CI (99.9%): [1034.060, 1078.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   242296.062 ±(99.9%) 0.016 B/op [Average]
[info]   (min, avg, max) = (242296.059, 242296.062, 242296.069), stdev = 0.004
[info]   CI (99.9%): [242296.047, 242296.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.018), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.312 ±(99.9%) 6.625 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.312, 4.203), stdev = 1.720
[info]   CI (99.9%): [≈ 0, 7.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1015.701 ±(99.9%) 19.341 MB/sec [Average]
[info]   (min, avg, max) = (1010.953, 1015.701, 1021.034), stdev = 5.023
[info]   CI (99.9%): [996.361, 1035.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   233035.421 ±(99.9%) 8286.543 B/op [Average]
[info]   (min, avg, max) = (231178.525, 233035.421, 236149.112), stdev = 2151.989
[info]   CI (99.9%): [224748.878, 241321.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   151.792 ±(99.9%) 1306.971 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 151.792, 758.958), stdev = 339.416
[info]   CI (99.9%): [≈ 0, 1458.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 3.114
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.53% complete, ETA 00:47:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3151.631 ops/s
[info] # Warmup Iteration   2: 6299.182 ops/s
[info] # Warmup Iteration   3: 6438.113 ops/s
[info] Iteration   1: 6493.363 ops/s
[info]                  ·gc.alloc.rate:                   935.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.191 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        244425.568 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 161.444 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 6646.600 ops/s
[info]                  ·gc.alloc.rate:            957.810 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.870 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 238957.978 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 6622.071 ops/s
[info]                  ·gc.alloc.rate:                   954.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              226864.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        239701.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1108.264 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 6455.992 ops/s
[info]                  ·gc.alloc.rate:                                  930.497 MB/sec
[info]                  ·gc.alloc.rate.norm:                             226864.063 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 19.541 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248949.513 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 6477.478 ops/s
[info]                  ·gc.alloc.rate:            933.887 MB/sec
[info]                  ·gc.alloc.rate.norm:       226864.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 165377.264 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala":
[info]   6539.101 ±(99.9%) 340.278 ops/s [Average]
[info]   (min, avg, max) = (6455.992, 6539.101, 6646.600), stdev = 88.369
[info]   CI (99.9%): [6198.823, 6879.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   942.521 ±(99.9%) 48.932 MB/sec [Average]
[info]   (min, avg, max) = (930.497, 942.521, 957.810), stdev = 12.708
[info]   CI (99.9%): [893.588, 991.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   226864.063 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (226864.061, 226864.063, 226864.068), stdev = 0.003
[info]   CI (99.9%): [226864.053, 226864.073] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.080), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.908 ±(99.9%) 33.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.908, 19.541), stdev = 8.739
[info]   CI (99.9%): [≈ 0, 37.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.519 ±(99.9%) 570.261 MB/sec [Average]
[info]   (min, avg, max) = (680.776, 945.519, 1021.081), stdev = 148.095
[info]   CI (99.9%): [375.258, 1515.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   227482.396 ±(99.9%) 134579.246 B/op [Average]
[info]   (min, avg, max) = (165377.264, 227482.396, 248949.513), stdev = 34949.803
[info]   CI (99.9%): [92903.149, 362061.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   253.942 ±(99.9%) 1858.591 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 253.942, 1108.264), stdev = 482.670
[info]   CI (99.9%): [≈ 0, 2112.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.800, 13.000), stdev = 5.762
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 44.78% complete, ETA 00:47:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 84232.498 ops/s
[info] # Warmup Iteration   2: 91408.013 ops/s
[info] # Warmup Iteration   3: 92675.523 ops/s
[info] Iteration   1: 96952.486 ops/s
[info]                  ·gc.alloc.rate:            939.067 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16447.360 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 96925.820 ops/s
[info]                  ·gc.alloc.rate:            938.852 MB/sec
[info]                  ·gc.alloc.rate.norm:       15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1012.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16451.941 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 97179.695 ops/s
[info]                  ·gc.alloc.rate:                   941.314 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1012.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        16409.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 43.153 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 97728.315 ops/s
[info]                  ·gc.alloc.rate:                                  946.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.034 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.550 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.757 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10963.790 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 98493.396 ops/s
[info]                  ·gc.alloc.rate:                                  954.047 MB/sec
[info]                  ·gc.alloc.rate.norm:                             15248.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.287 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.035 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16318.634 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   97455.943 ±(99.9%) 2555.177 ops/s [Average]
[info]   (min, avg, max) = (96925.820, 97455.943, 98493.396), stdev = 663.571
[info]   CI (99.9%): [94900.766, 100011.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   944.010 ±(99.9%) 24.856 MB/sec [Average]
[info]   (min, avg, max) = (938.852, 944.010, 954.047), stdev = 6.455
[info]   CI (99.9%): [919.154, 968.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.005), stdev = 0.001
[info]   CI (99.9%): [15248.004, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.059 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.034), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.167 ±(99.9%) 0.952 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.167, 0.550), stdev = 0.247
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   948.139 ±(99.9%) 575.717 MB/sec [Average]
[info]   (min, avg, max) = (680.757, 948.139, 1021.035), stdev = 149.512
[info]   CI (99.9%): [372.422, 1523.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   15318.168 ±(99.9%) 9375.394 B/op [Average]
[info]   (min, avg, max) = (10963.790, 15318.168, 16451.941), stdev = 2434.760
[info]   CI (99.9%): [5942.774, 24693.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.588 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.664), stdev = 1.191
[info]   CI (99.9%): [≈ 0, 5.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   8.631 ±(99.9%) 74.313 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.631, 43.153), stdev = 19.299
[info]   CI (99.9%): [≈ 0, 82.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 9.000), stdev = 3.421
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 45.02% complete, ETA 00:47:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2828.503 ops/s
[info] # Warmup Iteration   2: 6333.032 ops/s
[info] # Warmup Iteration   3: 6334.198 ops/s
[info] Iteration   1: 6459.568 ops/s
[info]                  ·gc.alloc.rate:            1175.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       286312.068 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 245836.063 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 6349.384 ops/s
[info]                  ·gc.alloc.rate:                   1154.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              286312.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        333510.238 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 990.624 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   3: 6456.852 ops/s
[info]                  ·gc.alloc.rate:                                  1174.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286312.073 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 29.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       248910.964 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 6385.067 ops/s
[info]                  ·gc.alloc.rate:            1161.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       286312.069 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 335570.588 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 6247.756 ops/s
[info]                  ·gc.alloc.rate:                                  1136.843 MB/sec
[info]                  ·gc.alloc.rate.norm:                             286312.065 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.115 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       257235.879 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   6379.725 ±(99.9%) 337.279 ops/s [Average]
[info]   (min, avg, max) = (6247.756, 6379.725, 6459.568), stdev = 87.590
[info]   CI (99.9%): [6042.446, 6717.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1160.529 ±(99.9%) 60.981 MB/sec [Average]
[info]   (min, avg, max) = (1136.843, 1160.529, 1175.187), stdev = 15.837
[info]   CI (99.9%): [1099.548, 1221.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   286312.068 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (286312.064, 286312.068, 286312.073), stdev = 0.003
[info]   CI (99.9%): [286312.055, 286312.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.119), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.849 ±(99.9%) 50.112 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.849, 29.129), stdev = 13.014
[info]   CI (99.9%): [≈ 0, 55.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.564 ±(99.9%) 709.339 MB/sec [Average]
[info]   (min, avg, max) = (1009.050, 1151.564, 1361.285), stdev = 184.213
[info]   CI (99.9%): [442.226, 1860.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   284212.746 ±(99.9%) 177658.374 B/op [Average]
[info]   (min, avg, max) = (245836.063, 284212.746, 335570.588), stdev = 46137.316
[info]   CI (99.9%): [106554.373, 461871.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   198.125 ±(99.9%) 1705.915 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 198.125, 990.624), stdev = 443.021
[info]   CI (99.9%): [≈ 0, 1904.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.000, 17.000), stdev = 6.557
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 45.27% complete, ETA 00:47:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12471.236 ops/s
[info] # Warmup Iteration   2: 17488.642 ops/s
[info] # Warmup Iteration   3: 17808.832 ops/s
[info] Iteration   1: 17758.949 ops/s
[info]                  ·gc.alloc.rate:            885.651 MB/sec
[info]                  ·gc.alloc.rate.norm:       78502.801 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59739.848 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 17678.076 ops/s
[info]                  ·gc.alloc.rate:            882.141 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90025.359 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 17744.250 ops/s
[info]                  ·gc.alloc.rate:            885.484 MB/sec
[info]                  ·gc.alloc.rate.norm:       78552.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89690.560 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   4: 17170.798 ops/s
[info]                  ·gc.alloc.rate:                                  856.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78537.664 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       62093.967 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                305.280 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 17930.054 ops/s
[info]                  ·gc.alloc.rate:                                  894.500 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78528.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.121 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.660 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       89632.375 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   17656.425 ±(99.9%) 1105.007 ops/s [Average]
[info]   (min, avg, max) = (17170.798, 17656.425, 17930.054), stdev = 286.967
[info]   CI (99.9%): [16551.418, 18761.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   880.913 ±(99.9%) 54.847 MB/sec [Average]
[info]   (min, avg, max) = (856.787, 880.913, 894.500), stdev = 14.244
[info]   CI (99.9%): [826.065, 935.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78534.507 ±(99.9%) 78.703 B/op [Average]
[info]   (min, avg, max) = (78502.801, 78534.507, 78552.025), stdev = 20.439
[info]   CI (99.9%): [78455.804, 78613.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.121), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.075 ±(99.9%) 18.122 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.075, 10.660), stdev = 4.706
[info]   CI (99.9%): [≈ 0, 21.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.878 ±(99.9%) 714.438 MB/sec [Average]
[info]   (min, avg, max) = (673.972, 878.878, 1020.988), stdev = 185.537
[info]   CI (99.9%): [164.440, 1593.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   78236.422 ±(99.9%) 60967.568 B/op [Average]
[info]   (min, avg, max) = (59739.848, 78236.422, 90025.359), stdev = 15833.084
[info]   CI (99.9%): [17268.854, 139203.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   61.056 ±(99.9%) 525.711 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.056, 305.280), stdev = 136.525
[info]   CI (99.9%): [≈ 0, 586.767] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 11.000), stdev = 3.347
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.52% complete, ETA 00:47:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12070.547 ops/s
[info] # Warmup Iteration   2: 19546.245 ops/s
[info] # Warmup Iteration   3: 19749.143 ops/s
[info] Iteration   1: 20597.962 ops/s
[info]                  ·gc.alloc.rate:            872.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77112.404 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 20837.188 ops/s
[info]                  ·gc.alloc.rate:            882.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.762 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 50816.264 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 20433.441 ops/s
[info]                  ·gc.alloc.rate:            865.756 MB/sec
[info]                  ·gc.alloc.rate.norm:       66696.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 77731.205 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 20420.611 ops/s
[info]                  ·gc.alloc.rate:                                  865.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.831 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       52164.384 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                308.057 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 20874.228 ops/s
[info]                  ·gc.alloc.rate:                                  884.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66696.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.077 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76993.343 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala":
[info]   20632.686 ±(99.9%) 830.445 ops/s [Average]
[info]   (min, avg, max) = (20420.611, 20632.686, 20874.228), stdev = 215.664
[info]   CI (99.9%): [19802.241, 21463.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   874.252 ±(99.9%) 35.354 MB/sec [Average]
[info]   (min, avg, max) = (865.292, 874.252, 884.537), stdev = 9.181
[info]   CI (99.9%): [838.898, 909.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   66696.021 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (66696.020, 66696.021, 66696.025), stdev = 0.002
[info]   CI (99.9%): [66696.013, 66696.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.115), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.582 ±(99.9%) 15.072 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.582, 8.831), stdev = 3.914
[info]   CI (99.9%): [≈ 0, 17.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.719 ±(99.9%) 713.695 MB/sec [Average]
[info]   (min, avg, max) = (672.762, 877.719, 1021.103), stdev = 185.344
[info]   CI (99.9%): [164.024, 1591.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   66963.520 ±(99.9%) 54432.108 B/op [Average]
[info]   (min, avg, max) = (50816.264, 66963.520, 77731.205), stdev = 14135.846
[info]   CI (99.9%): [12531.412, 121395.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   61.611 ±(99.9%) 530.493 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 61.611, 308.057), stdev = 137.767
[info]   CI (99.9%): [≈ 0, 592.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 4.561
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 45.77% complete, ETA 00:46:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 430054.444 ops/s
[info] # Warmup Iteration   2: 479749.353 ops/s
[info] # Warmup Iteration   3: 497442.834 ops/s
[info] Iteration   1: 496907.892 ops/s
[info]                  ·gc.alloc.rate:                   1126.295 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3198.467 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.110 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 490402.171 ops/s
[info]                  ·gc.alloc.rate:                   1111.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        4320.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.965 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 485681.342 ops/s
[info]                  ·gc.alloc.rate:                                  1100.831 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3309.350 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 486223.221 ops/s
[info]                  ·gc.alloc.rate:            1102.299 MB/sec
[info]                  ·gc.alloc.rate.norm:       3568.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.203 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3305.505 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 499833.960 ops/s
[info]                  ·gc.alloc.rate:                                  1133.011 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3568.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4287.342 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   491809.717 ±(99.9%) 24439.227 ops/s [Average]
[info]   (min, avg, max) = (485681.342, 491809.717, 499833.960), stdev = 6346.790
[info]   CI (99.9%): [467370.490, 516248.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1114.801 ±(99.9%) 55.321 MB/sec [Average]
[info]   (min, avg, max) = (1100.831, 1114.801, 1133.011), stdev = 14.367
[info]   CI (99.9%): [1059.481, 1170.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.096 ±(99.9%) 0.814 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.474), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 0.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1151.876 ±(99.9%) 710.156 MB/sec [Average]
[info]   (min, avg, max) = (1009.646, 1151.876, 1361.436), stdev = 184.425
[info]   CI (99.9%): [441.720, 1862.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3684.272 ±(99.9%) 2185.700 B/op [Average]
[info]   (min, avg, max) = (3198.467, 3684.272, 4320.697), stdev = 567.619
[info]   CI (99.9%): [1498.571, 5869.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.415 ±(99.9%) 25.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.415, 14.965), stdev = 6.521
[info]   CI (99.9%): [≈ 0, 28.526] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 13.000), stdev = 4.506
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 46.02% complete, ETA 00:46:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 438900.921 ops/s
[info] # Warmup Iteration   2: 499489.753 ops/s
[info] # Warmup Iteration   3: 503042.815 ops/s
[info] Iteration   1: 501568.418 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 501904.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 503283.274 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 503423.968 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 503397.453 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   502715.541 ±(99.9%) 3477.714 ops/s [Average]
[info]   (min, avg, max) = (501568.418, 502715.541, 503423.968), stdev = 903.151
[info]   CI (99.9%): [499237.827, 506193.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 46.27% complete, ETA 00:46:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12661.382 ops/s
[info] # Warmup Iteration   2: 18593.337 ops/s
[info] # Warmup Iteration   3: 19228.667 ops/s
[info] Iteration   1: 19471.154 ops/s
[info]                  ·gc.alloc.rate:            922.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       74615.088 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.945 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81570.867 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 19661.348 ops/s
[info]                  ·gc.alloc.rate:            932.040 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.641 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 53855.162 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 19543.153 ops/s
[info]                  ·gc.alloc.rate:            926.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       74624.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.052 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81270.407 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 19010.331 ops/s
[info]                  ·gc.alloc.rate:                                  901.079 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74608.286 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.172 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.048 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       84210.348 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                330.885 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 18798.656 ops/s
[info]                  ·gc.alloc.rate:                                  891.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             74608.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.758 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56993.281 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19296.928 ±(99.9%) 1433.292 ops/s [Average]
[info]   (min, avg, max) = (18798.656, 19296.928, 19661.348), stdev = 372.221
[info]   CI (99.9%): [17863.636, 20730.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   914.744 ±(99.9%) 68.010 MB/sec [Average]
[info]   (min, avg, max) = (891.158, 914.744, 932.040), stdev = 17.662
[info]   CI (99.9%): [846.734, 982.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   74615.889 ±(99.9%) 30.605 B/op [Average]
[info]   (min, avg, max) = (74608.023, 74615.889, 74624.026), stdev = 7.948
[info]   CI (99.9%): [74585.284, 74646.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.172), stdev = 0.076
[info]   CI (99.9%): [≈ 0, 0.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.991 ±(99.9%) 24.267 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.991, 14.251), stdev = 6.302
[info]   CI (99.9%): [≈ 0, 27.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   877.689 ±(99.9%) 706.705 MB/sec [Average]
[info]   (min, avg, max) = (672.641, 877.689, 1017.048), stdev = 183.529
[info]   CI (99.9%): [170.984, 1584.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   71580.013 ±(99.9%) 57120.423 B/op [Average]
[info]   (min, avg, max) = (53855.162, 71580.013, 84210.348), stdev = 14833.993
[info]   CI (99.9%): [14459.590, 128700.436] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   66.177 ±(99.9%) 569.805 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 66.177, 330.885), stdev = 147.976
[info]   CI (99.9%): [≈ 0, 635.982] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.200, 13.000), stdev = 4.494
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 46.52% complete, ETA 00:46:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8172.284 ops/s
[info] # Warmup Iteration   2: 12042.066 ops/s
[info] # Warmup Iteration   3: 12256.423 ops/s
[info] Iteration   1: 12317.847 ops/s
[info]                  ·gc.alloc.rate:                   1181.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.227 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        129103.952 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 85.105 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 12051.641 ops/s
[info]                  ·gc.alloc.rate:                   1155.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              150944.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1347.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        176067.515 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 434.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 12142.802 ops/s
[info]                  ·gc.alloc.rate:                                  1164.486 MB/sec
[info]                  ·gc.alloc.rate.norm:                             150944.036 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.118 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 15.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132356.279 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 11910.604 ops/s
[info]                  ·gc.alloc.rate:                                  1142.297 MB/sec
[info]                  ·gc.alloc.rate.norm:                             150944.034 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       179911.806 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 11929.654 ops/s
[info]                  ·gc.alloc.rate:            1144.583 MB/sec
[info]                  ·gc.alloc.rate.norm:       150944.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.551 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134718.992 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   12070.510 ±(99.9%) 644.819 ops/s [Average]
[info]   (min, avg, max) = (11910.604, 12070.510, 12317.847), stdev = 167.458
[info]   CI (99.9%): [11425.690, 12715.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1157.603 ±(99.9%) 61.148 MB/sec [Average]
[info]   (min, avg, max) = (1142.297, 1157.603, 1181.123), stdev = 15.880
[info]   CI (99.9%): [1096.455, 1218.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   150944.034 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (150944.033, 150944.034, 150944.036), stdev = 0.001
[info]   CI (99.9%): [150944.030, 150944.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.200 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.118), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.263 ±(99.9%) 25.930 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.263, 15.282), stdev = 6.734
[info]   CI (99.9%): [≈ 0, 29.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1152.447 ±(99.9%) 711.352 MB/sec [Average]
[info]   (min, avg, max) = (1010.227, 1152.447, 1361.516), stdev = 184.736
[info]   CI (99.9%): [441.095, 1863.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   150431.709 ±(99.9%) 97314.589 B/op [Average]
[info]   (min, avg, max) = (129103.952, 150431.709, 179911.806), stdev = 25272.290
[info]   CI (99.9%): [53117.119, 247746.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.559 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   104.011 ±(99.9%) 726.366 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 104.011, 434.949), stdev = 188.635
[info]   CI (99.9%): [≈ 0, 830.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 14.000), stdev = 5.177
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 46.77% complete, ETA 00:45:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6570.114 ops/s
[info] # Warmup Iteration   2: 11460.288 ops/s
[info] # Warmup Iteration   3: 11717.791 ops/s
[info] Iteration   1: 11673.447 ops/s
[info]                  ·gc.alloc.rate:            1068.318 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 136056.238 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 11796.058 ops/s
[info]                  ·gc.alloc.rate:            1079.474 MB/sec
[info]                  ·gc.alloc.rate.norm:       144056.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.985 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 134649.317 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 11778.155 ops/s
[info]                  ·gc.alloc.rate:                                  1078.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144065.819 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.111 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 14.881 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       135923.222 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                534.079 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 11966.845 ops/s
[info]                  ·gc.alloc.rate:                                  1095.732 MB/sec
[info]                  ·gc.alloc.rate.norm:                             144088.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       134302.532 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 11715.326 ops/s
[info]                  ·gc.alloc.rate:            1072.685 MB/sec
[info]                  ·gc.alloc.rate.norm:       144088.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.786 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 182921.340 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   11785.966 ±(99.9%) 432.793 ops/s [Average]
[info]   (min, avg, max) = (11673.447, 11785.966, 11966.845), stdev = 112.395
[info]   CI (99.9%): [11353.173, 12218.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1078.845 ±(99.9%) 40.156 MB/sec [Average]
[info]   (min, avg, max) = (1068.318, 1078.845, 1095.732), stdev = 10.428
[info]   CI (99.9%): [1038.689, 1119.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144070.792 ±(99.9%) 62.535 B/op [Average]
[info]   (min, avg, max) = (144056.035, 144070.792, 144088.037), stdev = 16.240
[info]   CI (99.9%): [144008.257, 144133.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.189 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.111), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.182 ±(99.9%) 25.241 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.182, 14.881), stdev = 6.555
[info]   CI (99.9%): [≈ 0, 28.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1083.634 ±(99.9%) 599.094 MB/sec [Average]
[info]   (min, avg, max) = (1008.985, 1083.634, 1361.786), stdev = 155.583
[info]   CI (99.9%): [484.540, 1682.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   144770.530 ±(99.9%) 82175.755 B/op [Average]
[info]   (min, avg, max) = (134302.532, 144770.530, 182921.340), stdev = 21340.783
[info]   CI (99.9%): [62594.775, 226946.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   106.816 ±(99.9%) 919.717 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 106.816, 534.079), stdev = 238.848
[info]   CI (99.9%): [≈ 0, 1026.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.800, 13.000), stdev = 4.550
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.01% complete, ETA 00:45:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 151198.228 ops/s
[info] # Warmup Iteration   2: 167551.981 ops/s
[info] # Warmup Iteration   3: 168538.764 ops/s
[info] Iteration   1: 160777.201 ops/s
[info]                  ·gc.alloc.rate:            929.769 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.972 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9899.117 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 162351.892 ops/s
[info]                  ·gc.alloc.rate:            938.956 MB/sec
[info]                  ·gc.alloc.rate.norm:       9104.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6535.276 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 163673.410 ops/s
[info]                  ·gc.alloc.rate:                   946.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9723.984 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 32.029 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 166787.008 ops/s
[info]                  ·gc.alloc.rate:                                  964.612 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9636.168 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 159547.750 ops/s
[info]                  ·gc.alloc.rate:                                  922.825 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9104.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10073.300 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   162627.452 ±(99.9%) 10785.216 ops/s [Average]
[info]   (min, avg, max) = (159547.750, 162627.452, 166787.008), stdev = 2800.886
[info]   CI (99.9%): [151842.236, 173412.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   940.549 ±(99.9%) 62.338 MB/sec [Average]
[info]   (min, avg, max) = (922.825, 940.549, 964.612), stdev = 16.189
[info]   CI (99.9%): [878.211, 1002.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.003, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.205 ±(99.9%) 1.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.205, 1.015), stdev = 0.453
[info]   CI (99.9%): [≈ 0, 1.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.624 ±(99.9%) 589.255 MB/sec [Average]
[info]   (min, avg, max) = (674.026, 947.624, 1021.078), stdev = 153.028
[info]   CI (99.9%): [358.368, 1536.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   9173.569 ±(99.9%) 5715.801 B/op [Average]
[info]   (min, avg, max) = (6535.276, 9173.569, 10073.300), stdev = 1484.375
[info]   CI (99.9%): [3457.768, 14889.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   6.406 ±(99.9%) 55.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.406, 32.029), stdev = 14.324
[info]   CI (99.9%): [≈ 0, 61.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 47.26% complete, ETA 00:45:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3729.467 ops/s
[info] # Warmup Iteration   2: 9786.188 ops/s
[info] # Warmup Iteration   3: 10418.752 ops/s
[info] Iteration   1: 10375.389 ops/s
[info]                  ·gc.alloc.rate:            1298.913 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.042 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 153073.101 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 10366.944 ops/s
[info]                  ·gc.alloc.rate:                                  1297.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1348.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       204780.249 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                707.882 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   3: 10599.817 ops/s
[info]                  ·gc.alloc.rate:                                  1326.859 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.042 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.316 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.607 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202158.965 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10564.425 ops/s
[info]                  ·gc.alloc.rate:                                  1322.206 MB/sec
[info]                  ·gc.alloc.rate.norm:                             197000.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.325 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       202828.555 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10253.141 ops/s
[info]                  ·gc.alloc.rate:            1283.238 MB/sec
[info]                  ·gc.alloc.rate.norm:       197000.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 208999.448 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson":
[info]   10431.943 ±(99.9%) 561.742 ops/s [Average]
[info]   (min, avg, max) = (10253.141, 10431.943, 10599.817), stdev = 145.883
[info]   CI (99.9%): [9870.201, 10993.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1305.720 ±(99.9%) 70.476 MB/sec [Average]
[info]   (min, avg, max) = (1283.238, 1305.720, 1326.859), stdev = 18.302
[info]   CI (99.9%): [1235.244, 1376.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   197000.042 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (197000.039, 197000.042, 197000.043), stdev = 0.002
[info]   CI (99.9%): [197000.035, 197000.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.979 ±(99.9%) 7.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.979, 4.316), stdev = 1.873
[info]   CI (99.9%): [≈ 0, 8.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.447 ±(99.9%) 601.305 MB/sec [Average]
[info]   (min, avg, max) = (1009.282, 1288.447, 1361.607), stdev = 156.157
[info]   CI (99.9%): [687.142, 1889.752] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   194368.064 ±(99.9%) 89481.770 B/op [Average]
[info]   (min, avg, max) = (153073.101, 194368.064, 208999.448), stdev = 23238.132
[info]   CI (99.9%): [104886.293, 283849.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   141.576 ±(99.9%) 1219.016 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 141.576, 707.882), stdev = 316.575
[info]   CI (99.9%): [≈ 0, 1360.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 16.000), stdev = 6.504
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 47.51% complete, ETA 00:45:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20382.871 ops/s
[info] # Warmup Iteration   2: 28036.893 ops/s
[info] # Warmup Iteration   3: 28232.902 ops/s
[info] Iteration   1: 28094.850 ops/s
[info]                  ·gc.alloc.rate:            1046.497 MB/sec
[info]                  ·gc.alloc.rate.norm:       58640.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56647.509 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 28074.189 ops/s
[info]                  ·gc.alloc.rate:                   1045.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              58620.122 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.273 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        56648.497 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 37.342 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 28358.307 ops/s
[info]                  ·gc.alloc.rate:                                  1056.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.035 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.920 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.428 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56305.089 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.849 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 27840.089 ops/s
[info]                  ·gc.alloc.rate:                                  1036.859 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.028 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.557 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       57729.108 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 27568.769 ops/s
[info]                  ·gc.alloc.rate:                                  1027.084 MB/sec
[info]                  ·gc.alloc.rate.norm:                             58616.015 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.451 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       77641.346 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   27987.241 ±(99.9%) 1144.882 ops/s [Average]
[info]   (min, avg, max) = (27568.769, 27987.241, 28358.307), stdev = 297.322
[info]   CI (99.9%): [26842.359, 29132.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1042.388 ±(99.9%) 42.091 MB/sec [Average]
[info]   (min, avg, max) = (1027.084, 1042.388, 1056.063), stdev = 10.931
[info]   CI (99.9%): [1000.296, 1084.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58621.637 ±(99.9%) 40.156 B/op [Average]
[info]   (min, avg, max) = (58616.014, 58621.637, 58640.018), stdev = 10.428
[info]   CI (99.9%): [58581.481, 58661.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.035), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.716 ±(99.9%) 3.630 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.716, 1.920), stdev = 0.943
[info]   CI (99.9%): [≈ 0, 4.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.452 ±(99.9%) 596.493 MB/sec [Average]
[info]   (min, avg, max) = (1010.273, 1083.452, 1360.451), stdev = 154.907
[info]   CI (99.9%): [486.959, 1679.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   60994.310 ±(99.9%) 35893.439 B/op [Average]
[info]   (min, avg, max) = (56305.089, 60994.310, 77641.346), stdev = 9321.412
[info]   CI (99.9%): [25100.871, 96887.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.560 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.330), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   44.438 ±(99.9%) 308.592 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.438, 184.849), stdev = 80.140
[info]   CI (99.9%): [≈ 0, 353.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 12.000), stdev = 4.159
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 47.76% complete, ETA 00:45:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51370.843 ops/s
[info] # Warmup Iteration   2: 79472.424 ops/s
[info] # Warmup Iteration   3: 79494.772 ops/s
[info] Iteration   1: 81021.291 ops/s
[info]                  ·gc.alloc.rate:            1289.549 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.929 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19603.542 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 81591.481 ops/s
[info]                  ·gc.alloc.rate:                                  1298.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.737 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1352.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26096.510 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                89.944 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 82091.127 ops/s
[info]                  ·gc.alloc.rate:                                  1306.762 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26103.613 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 79564.900 ops/s
[info]                  ·gc.alloc.rate:                                  1266.506 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25056.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26933.189 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 82099.490 ops/s
[info]                  ·gc.alloc.rate:            1307.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       25056.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26101.388 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala":
[info]   81273.658 ±(99.9%) 4054.533 ops/s [Average]
[info]   (min, avg, max) = (79564.900, 81273.658, 82099.490), stdev = 1052.949
[info]   CI (99.9%): [77219.125, 85328.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1293.709 ±(99.9%) 64.777 MB/sec [Average]
[info]   (min, avg, max) = (1266.506, 1293.709, 1307.145), stdev = 16.822
[info]   CI (99.9%): [1228.932, 1358.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25056.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25056.005, 25056.005, 25056.005), stdev = 0.001
[info]   CI (99.9%): [25056.004, 25056.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.331 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.194), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.773 ±(99.9%) 6.382 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.773, 3.737), stdev = 1.657
[info]   CI (99.9%): [≈ 0, 7.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1289.183 ±(99.9%) 603.453 MB/sec [Average]
[info]   (min, avg, max) = (1008.929, 1289.183, 1361.681), stdev = 156.715
[info]   CI (99.9%): [685.730, 1892.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24967.648 ±(99.9%) 11629.820 B/op [Average]
[info]   (min, avg, max) = (19603.542, 24967.648, 26933.189), stdev = 3020.227
[info]   CI (99.9%): [13337.828, 36597.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.027 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   17.989 ±(99.9%) 154.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.989, 89.944), stdev = 40.224
[info]   CI (99.9%): [≈ 0, 172.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 12.000), stdev = 4.324
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 48.01% complete, ETA 00:44:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 600547.927 ops/s
[info] # Warmup Iteration   2: 675691.274 ops/s
[info] # Warmup Iteration   3: 701891.893 ops/s
[info] Iteration   1: 681184.130 ops/s
[info]                  ·gc.alloc.rate:            934.716 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1554.490 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 673523.704 ops/s
[info]                  ·gc.alloc.rate:            924.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.966 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2358.211 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 684077.880 ops/s
[info]                  ·gc.alloc.rate:                   938.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2321.862 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 9.195 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 703855.534 ops/s
[info]                  ·gc.alloc.rate:                                  965.811 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2160.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2283.447 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 707963.117 ops/s
[info]                  ·gc.alloc.rate:            971.462 MB/sec
[info]                  ·gc.alloc.rate.norm:       2160.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.996 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2270.135 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   690120.873 ±(99.9%) 57722.287 ops/s [Average]
[info]   (min, avg, max) = (673523.704, 690120.873, 707963.117), stdev = 14990.295
[info]   CI (99.9%): [632398.586, 747843.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   946.990 ±(99.9%) 79.197 MB/sec [Average]
[info]   (min, avg, max) = (924.161, 946.990, 971.462), stdev = 20.567
[info]   CI (99.9%): [867.793, 1026.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.000, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.210 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.272), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.561 ±(99.9%) 589.981 MB/sec [Average]
[info]   (min, avg, max) = (672.688, 946.561, 1021.008), stdev = 153.216
[info]   CI (99.9%): [356.580, 1536.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2157.629 ±(99.9%) 1305.065 B/op [Average]
[info]   (min, avg, max) = (1554.490, 2157.629, 2358.211), stdev = 338.921
[info]   CI (99.9%): [852.565, 3462.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.839 ±(99.9%) 15.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.839, 9.195), stdev = 4.112
[info]   CI (99.9%): [≈ 0, 17.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 10.000), stdev = 3.050
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 48.26% complete, ETA 00:44:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 723856.957 ops/s
[info] # Warmup Iteration   2: 772507.170 ops/s
[info] # Warmup Iteration   3: 796386.140 ops/s
[info] Iteration   1: 797824.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 796021.803 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787926.295 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 795861.266 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 795857.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   794698.402 ±(99.9%) 14923.897 ops/s [Average]
[info]   (min, avg, max) = (787926.295, 794698.402, 797824.824), stdev = 3875.689
[info]   CI (99.9%): [779774.505, 809622.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 48.51% complete, ETA 00:44:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34355.815 ops/s
[info] # Warmup Iteration   2: 72228.320 ops/s
[info] # Warmup Iteration   3: 72309.659 ops/s
[info] Iteration   1: 72244.121 ops/s
[info]                  ·gc.alloc.rate:                   1416.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.147 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29284.725 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 29.024 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 70772.834 ops/s
[info]                  ·gc.alloc.rate:                                  1387.204 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.634 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30189.982 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                88.881 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 72156.124 ops/s
[info]                  ·gc.alloc.rate:            1414.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.423 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29699.022 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 72078.286 ops/s
[info]                  ·gc.alloc.rate:                                  1413.384 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30856.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.046 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.278 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37162.915 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 70523.898 ops/s
[info]                  ·gc.alloc.rate:            1382.841 MB/sec
[info]                  ·gc.alloc.rate.norm:       30856.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30384.890 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson":
[info]   71555.053 ±(99.9%) 3213.051 ops/s [Average]
[info]   (min, avg, max) = (70523.898, 71555.053, 72244.121), stdev = 834.419
[info]   CI (99.9%): [68342.002, 74768.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1402.832 ±(99.9%) 63.006 MB/sec [Average]
[info]   (min, avg, max) = (1382.841, 1402.832, 1416.268), stdev = 16.363
[info]   CI (99.9%): [1339.825, 1465.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   30856.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30856.006, 30856.006, 30856.006), stdev = 0.001
[info]   CI (99.9%): [30856.005, 30856.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.048 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.029), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.136 ±(99.9%) 1.075 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.136, 0.634), stdev = 0.279
[info]   CI (99.9%): [≈ 0, 1.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1425.367 ±(99.9%) 596.705 MB/sec [Average]
[info]   (min, avg, max) = (1344.147, 1425.367, 1702.278), stdev = 154.962
[info]   CI (99.9%): [828.663, 2022.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   31344.307 ±(99.9%) 12633.690 B/op [Average]
[info]   (min, avg, max) = (29284.725, 31344.307, 37162.915), stdev = 3280.929
[info]   CI (99.9%): [18710.617, 43977.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.581 ±(99.9%) 148.661 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.581, 88.881), stdev = 38.607
[info]   CI (99.9%): [≈ 0, 172.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.000, 18.000), stdev = 5.831
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 48.76% complete, ETA 00:44:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8483.082 ops/s
[info] # Warmup Iteration   2: 17460.172 ops/s
[info] # Warmup Iteration   3: 18809.023 ops/s
[info] Iteration   1: 18955.772 ops/s
[info]                  ·gc.alloc.rate:            710.331 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 55968.297 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 18886.833 ops/s
[info]                  ·gc.alloc.rate:            707.522 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56175.697 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 18890.155 ops/s
[info]                  ·gc.alloc.rate:            707.665 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 56166.777 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 17826.077 ops/s
[info]                  ·gc.alloc.rate:            668.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.390 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 59518.701 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 16570.591 ops/s
[info]                  ·gc.alloc.rate:            620.790 MB/sec
[info]                  ·gc.alloc.rate.norm:       58968.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64029.380 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   18225.885 ±(99.9%) 3997.391 ops/s [Average]
[info]   (min, avg, max) = (16570.591, 18225.885, 18955.772), stdev = 1038.110
[info]   CI (99.9%): [14228.495, 22223.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   682.892 ±(99.9%) 149.720 MB/sec [Average]
[info]   (min, avg, max) = (620.790, 682.892, 710.331), stdev = 38.882
[info]   CI (99.9%): [533.172, 832.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   58968.039 ±(99.9%) 0.123 B/op [Average]
[info]   (min, avg, max) = (58968.022, 58968.039, 58968.096), stdev = 0.032
[info]   CI (99.9%): [58967.916, 58968.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   674.145 ±(99.9%) 0.588 MB/sec [Average]
[info]   (min, avg, max) = (674.018, 674.145, 674.390), stdev = 0.153
[info]   CI (99.9%): [673.557, 674.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   58371.770 ±(99.9%) 13447.711 B/op [Average]
[info]   (min, avg, max) = (55968.297, 58371.770, 64029.380), stdev = 3492.328
[info]   CI (99.9%): [44924.059, 71819.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.00% complete, ETA 00:44:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6007.809 ops/s
[info] # Warmup Iteration   2: 16255.012 ops/s
[info] # Warmup Iteration   3: 16738.736 ops/s
[info] Iteration   1: 17078.516 ops/s
[info]                  ·gc.alloc.rate:            478.445 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.026 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.406 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30999.349 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 16307.587 ops/s
[info]                  ·gc.alloc.rate:            456.723 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32464.648 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 16249.365 ops/s
[info]                  ·gc.alloc.rate:            455.102 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65161.002 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 16254.920 ops/s
[info]                  ·gc.alloc.rate:            455.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 32570.481 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 16220.228 ops/s
[info]                  ·gc.alloc.rate:            454.376 MB/sec
[info]                  ·gc.alloc.rate.norm:       44088.958 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 65281.499 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   16422.123 ±(99.9%) 1418.132 ops/s [Average]
[info]   (min, avg, max) = (16220.228, 16422.123, 17078.516), stdev = 368.284
[info]   CI (99.9%): [15003.992, 17840.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   459.987 ±(99.9%) 39.867 MB/sec [Average]
[info]   (min, avg, max) = (454.376, 459.987, 478.445), stdev = 10.353
[info]   CI (99.9%): [420.120, 499.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44088.213 ±(99.9%) 1.603 B/op [Average]
[info]   (min, avg, max) = (44088.025, 44088.213, 44088.958), stdev = 0.416
[info]   CI (99.9%): [44086.611, 44089.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.896 ±(99.9%) 709.393 MB/sec [Average]
[info]   (min, avg, max) = (336.312, 470.896, 672.785), stdev = 184.227
[info]   CI (99.9%): [≈ 0, 1180.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   45295.396 ±(99.9%) 70083.177 B/op [Average]
[info]   (min, avg, max) = (30999.349, 45295.396, 65281.499), stdev = 18200.379
[info]   CI (99.9%): [≈ 0, 115378.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 49.25% complete, ETA 00:43:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 97604.588 ops/s
[info] # Warmup Iteration   2: 101995.016 ops/s
[info] # Warmup Iteration   3: 103534.487 ops/s
[info] Iteration   1: 103672.547 ops/s
[info]                  ·gc.alloc.rate:            260.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5126.942 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 103957.558 ops/s
[info]                  ·gc.alloc.rate:      260.971 MB/sec
[info]                  ·gc.alloc.rate.norm: 3952.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 103651.152 ops/s
[info]                  ·gc.alloc.rate:            260.274 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5128.179 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 106101.132 ops/s
[info]                  ·gc.alloc.rate:            266.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5009.782 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 107199.828 ops/s
[info]                  ·gc.alloc.rate:            269.140 MB/sec
[info]                  ·gc.alloc.rate.norm:       3952.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4958.430 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   104916.443 ±(99.9%) 6293.487 ops/s [Average]
[info]   (min, avg, max) = (103651.152, 104916.443, 107199.828), stdev = 1634.399
[info]   CI (99.9%): [98622.957, 111209.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   263.441 ±(99.9%) 15.831 MB/sec [Average]
[info]   (min, avg, max) = (260.274, 263.441, 269.140), stdev = 4.111
[info]   CI (99.9%): [247.610, 279.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3952.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3952.004, 3952.004, 3952.004), stdev = 0.001
[info]   CI (99.9%): [3952.003, 3952.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   270.191 ±(99.9%) 581.607 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 270.191, 337.819), stdev = 151.041
[info]   CI (99.9%): [≈ 0, 851.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   4044.667 ±(99.9%) 8711.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4044.667, 5128.179), stdev = 2262.248
[info]   CI (99.9%): [≈ 0, 12755.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 3.000), stdev = 1.342
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 49.50% complete, ETA 00:43:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3419.397 ops/s
[info] # Warmup Iteration   2: 13319.435 ops/s
[info] # Warmup Iteration   3: 14450.544 ops/s
[info] Iteration   1: 14610.998 ops/s
[info]                  ·gc.alloc.rate:            922.617 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.655 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 72464.027 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 14527.280 ops/s
[info]                  ·gc.alloc.rate:            917.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.968 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 109324.385 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   3: 14326.464 ops/s
[info]                  ·gc.alloc.rate:            904.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.466 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.080 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110865.562 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 14575.536 ops/s
[info]                  ·gc.alloc.rate:                                  920.380 MB/sec
[info]                  ·gc.alloc.rate.norm:                             99392.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.411 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 44.421 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73079.518 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                431.572 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 14518.500 ops/s
[info]                  ·gc.alloc.rate:            916.748 MB/sec
[info]                  ·gc.alloc.rate.norm:       99392.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.973 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 110691.847 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   14511.756 ±(99.9%) 424.168 ops/s [Average]
[info]   (min, avg, max) = (14326.464, 14511.756, 14610.998), stdev = 110.155
[info]   CI (99.9%): [14087.588, 14935.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   916.340 ±(99.9%) 26.774 MB/sec [Average]
[info]   (min, avg, max) = (904.654, 916.340, 922.617), stdev = 6.953
[info]   CI (99.9%): [889.567, 943.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99392.118 ±(99.9%) 0.750 B/op [Average]
[info]   (min, avg, max) = (99392.028, 99392.118, 99392.466), stdev = 0.195
[info]   CI (99.9%): [99391.368, 99392.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.082 ±(99.9%) 0.708 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.411), stdev = 0.184
[info]   CI (99.9%): [≈ 0, 0.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   8.884 ±(99.9%) 76.496 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.884, 44.421), stdev = 19.866
[info]   CI (99.9%): [≈ 0, 85.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   877.680 ±(99.9%) 713.809 MB/sec [Average]
[info]   (min, avg, max) = (672.655, 877.680, 1020.973), stdev = 185.374
[info]   CI (99.9%): [163.871, 1591.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   95285.068 ±(99.9%) 79175.209 B/op [Average]
[info]   (min, avg, max) = (72464.027, 95285.068, 110865.562), stdev = 20561.550
[info]   CI (99.9%): [16109.859, 174460.277] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   86.314 ±(99.9%) 743.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 86.314, 431.572), stdev = 193.005
[info]   CI (99.9%): [≈ 0, 829.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 13.000), stdev = 4.159
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 49.75% complete, ETA 00:43:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39774.721 ops/s
[info] # Warmup Iteration   2: 54404.117 ops/s
[info] # Warmup Iteration   3: 54840.130 ops/s
[info] Iteration   1: 53979.696 ops/s
[info]                  ·gc.alloc.rate:            1168.935 MB/sec
[info]                  ·gc.alloc.rate.norm:       34088.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39310.190 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 54896.745 ops/s
[info]                  ·gc.alloc.rate:                   1188.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              34088.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28990.773 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 95.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 55495.618 ops/s
[info]                  ·gc.alloc.rate:                                  1201.782 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34088.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.030 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.838 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38612.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 55441.932 ops/s
[info]                  ·gc.alloc.rate:                                  1201.228 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34088.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.524 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28988.441 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 55225.646 ops/s
[info]                  ·gc.alloc.rate:                                  1195.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             34088.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       38803.805 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   55007.927 ±(99.9%) 2391.762 ops/s [Average]
[info]   (min, avg, max) = (53979.696, 55007.927, 55495.618), stdev = 621.133
[info]   CI (99.9%): [52616.166, 57399.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1191.333 ±(99.9%) 52.239 MB/sec [Average]
[info]   (min, avg, max) = (1168.935, 1191.333, 1201.782), stdev = 13.566
[info]   CI (99.9%): [1139.094, 1243.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   34088.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (34088.007, 34088.008, 34088.008), stdev = 0.001
[info]   CI (99.9%): [34088.006, 34088.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.030), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.192 ±(99.9%) 1.395 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.192, 0.838), stdev = 0.362
[info]   CI (99.9%): [≈ 0, 1.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.650 ±(99.9%) 718.828 MB/sec [Average]
[info]   (min, avg, max) = (1011.040, 1220.650, 1361.362), stdev = 186.677
[info]   CI (99.9%): [501.822, 1939.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34941.233 ±(99.9%) 20943.796 B/op [Average]
[info]   (min, avg, max) = (28988.441, 34941.233, 39310.190), stdev = 5439.037
[info]   CI (99.9%): [13997.437, 55885.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.098 ±(99.9%) 164.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.098, 95.490), stdev = 42.704
[info]   CI (99.9%): [≈ 0, 183.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 4.868
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.00% complete, ETA 00:43:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51517.733 ops/s
[info] # Warmup Iteration   2: 80105.162 ops/s
[info] # Warmup Iteration   3: 80946.569 ops/s
[info] Iteration   1: 80090.872 ops/s
[info]                  ·gc.alloc.rate:                   1294.340 MB/sec
[info]                  ·gc.alloc.rate.norm:              25440.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.628 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        26428.419 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 80133.394 ops/s
[info]                  ·gc.alloc.rate:                                  1295.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.923 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19977.486 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                78.497 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 78230.434 ops/s
[info]                  ·gc.alloc.rate:                                  1264.258 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.220 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27393.430 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 82007.330 ops/s
[info]                  ·gc.alloc.rate:                                  1325.479 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.038 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.448 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26130.346 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 82041.232 ops/s
[info]                  ·gc.alloc.rate:                                  1326.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25440.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26120.474 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   80500.652 ±(99.9%) 6118.815 ops/s [Average]
[info]   (min, avg, max) = (78230.434, 80500.652, 82041.232), stdev = 1589.037
[info]   CI (99.9%): [74381.837, 86619.467] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1301.037 ±(99.9%) 99.194 MB/sec [Average]
[info]   (min, avg, max) = (1264.258, 1301.037, 1326.017), stdev = 25.760
[info]   CI (99.9%): [1201.843, 1400.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   25440.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25440.005, 25440.005, 25440.006), stdev = 0.001
[info]   CI (99.9%): [25440.004, 25440.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.077 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.047), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.240 ±(99.9%) 1.510 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.240, 0.923), stdev = 0.392
[info]   CI (99.9%): [≈ 0, 1.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1289.180 ±(99.9%) 586.544 MB/sec [Average]
[info]   (min, avg, max) = (1017.006, 1289.180, 1361.485), stdev = 152.324
[info]   CI (99.9%): [702.636, 1875.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   25210.031 ±(99.9%) 11440.222 B/op [Average]
[info]   (min, avg, max) = (19977.486, 25210.031, 27393.430), stdev = 2970.989
[info]   CI (99.9%): [13769.809, 36650.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   18.317 ±(99.9%) 131.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.317, 78.497), stdev = 34.116
[info]   CI (99.9%): [≈ 0, 149.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.400, 17.000), stdev = 5.595
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 50.25% complete, ETA 00:42:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 229928.547 ops/s
[info] # Warmup Iteration   2: 262088.158 ops/s
[info] # Warmup Iteration   3: 261110.449 ops/s
[info] Iteration   1: 250635.533 ops/s
[info]                  ·gc.alloc.rate:            480.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2116.544 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 260605.565 ops/s
[info]                  ·gc.alloc.rate:            499.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4063.235 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 262133.062 ops/s
[info]                  ·gc.alloc.rate:            502.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2019.730 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 257524.636 ops/s
[info]                  ·gc.alloc.rate:            493.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4111.791 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 263641.891 ops/s
[info]                  ·gc.alloc.rate:            505.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       3016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2008.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   258908.138 ±(99.9%) 19826.131 ops/s [Average]
[info]   (min, avg, max) = (250635.533, 258908.138, 263641.891), stdev = 5148.783
[info]   CI (99.9%): [239082.006, 278734.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   496.127 ±(99.9%) 38.064 MB/sec [Average]
[info]   (min, avg, max) = (480.249, 496.127, 505.145), stdev = 9.885
[info]   CI (99.9%): [458.062, 534.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3016.002, 3016.002, 3016.002), stdev = 0.001
[info]   CI (99.9%): [3016.001, 3016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.060 ±(99.9%) 708.865 MB/sec [Average]
[info]   (min, avg, max) = (336.352, 471.060, 672.745), stdev = 184.090
[info]   CI (99.9%): [≈ 0, 1179.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   2863.902 ±(99.9%) 4304.722 B/op [Average]
[info]   (min, avg, max) = (2008.210, 2863.902, 4111.791), stdev = 1117.923
[info]   CI (99.9%): [≈ 0, 7168.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 50.50% complete, ETA 00:42:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 294164.224 ops/s
[info] # Warmup Iteration   2: 323855.002 ops/s
[info] # Warmup Iteration   3: 324108.176 ops/s
[info] Iteration   1: 324554.995 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 324140.126 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 324771.827 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 324761.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 325458.443 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   324737.377 ±(99.9%) 1838.332 ops/s [Average]
[info]   (min, avg, max) = (324140.126, 324737.377, 325458.443), stdev = 477.409
[info]   CI (99.9%): [322899.045, 326575.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 50.75% complete, ETA 00:42:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48669.644 ops/s
[info] # Warmup Iteration   2: 68201.219 ops/s
[info] # Warmup Iteration   3: 68445.920 ops/s
[info] Iteration   1: 68910.414 ops/s
[info]                  ·gc.alloc.rate:            1236.679 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23048.468 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 66078.296 ops/s
[info]                  ·gc.alloc.rate:                                  1185.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1349.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       32144.273 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                95.195 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   3: 70552.290 ops/s
[info]                  ·gc.alloc.rate:                                  1266.141 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.964 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22780.593 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 70171.857 ops/s
[info]                  ·gc.alloc.rate:            1259.301 MB/sec
[info]                  ·gc.alloc.rate.norm:       28248.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.435 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30539.018 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 69320.178 ops/s
[info]                  ·gc.alloc.rate:                                  1243.979 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28248.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30913.422 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   69006.607 ±(99.9%) 6787.826 ops/s [Average]
[info]   (min, avg, max) = (66078.296, 69006.607, 70552.290), stdev = 1762.777
[info]   CI (99.9%): [62218.780, 75794.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1238.366 ±(99.9%) 121.993 MB/sec [Average]
[info]   (min, avg, max) = (1185.728, 1238.366, 1266.141), stdev = 31.681
[info]   CI (99.9%): [1116.372, 1360.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   28248.006 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (28248.006, 28248.006, 28248.007), stdev = 0.001
[info]   CI (99.9%): [28248.005, 28248.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.069), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.523 ±(99.9%) 2.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.523, 1.633), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 3.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.439 ±(99.9%) 722.363 MB/sec [Average]
[info]   (min, avg, max) = (1009.047, 1220.439, 1361.435), stdev = 187.595
[info]   CI (99.9%): [498.076, 1942.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   27885.155 ±(99.9%) 17625.222 B/op [Average]
[info]   (min, avg, max) = (22780.593, 27885.155, 32144.273), stdev = 4577.214
[info]   CI (99.9%): [10259.933, 45510.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   19.039 ±(99.9%) 163.932 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.039, 95.195), stdev = 42.573
[info]   CI (99.9%): [≈ 0, 182.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.000, 14.000), stdev = 5.148
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 51.00% complete, ETA 00:42:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 124762.493 ops/s
[info] # Warmup Iteration   2: 154633.731 ops/s
[info] # Warmup Iteration   3: 155296.399 ops/s
[info] Iteration   1: 156769.148 ops/s
[info]                  ·gc.alloc.rate:                                  2268.988 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22784.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.193 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23920.793 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   2: 157703.585 ops/s
[info]                  ·gc.alloc.rate:                                  2283.185 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22784.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.028 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23780.354 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 154769.855 ops/s
[info]                  ·gc.alloc.rate:                                  2240.973 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22784.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20769.113 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 152170.638 ops/s
[info]                  ·gc.alloc.rate:                                  2202.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22784.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24644.574 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 156390.503 ops/s
[info]                  ·gc.alloc.rate:                                  2263.787 MB/sec
[info]                  ·gc.alloc.rate.norm:                             22784.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.178 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20553.610 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   155560.746 ±(99.9%) 8361.049 ops/s [Average]
[info]   (min, avg, max) = (152170.638, 155560.746, 157703.585), stdev = 2171.338
[info]   CI (99.9%): [147199.696, 163921.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2251.883 ±(99.9%) 121.363 MB/sec [Average]
[info]   (min, avg, max) = (2202.484, 2251.883, 2283.185), stdev = 31.518
[info]   CI (99.9%): [2130.520, 2373.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   22784.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (22784.003, 22784.003, 22784.003), stdev = 0.001
[info]   CI (99.9%): [22784.002, 22784.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.006 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.006, 0.019), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.056 ±(99.9%) 0.296 B/op [Average]
[info]   (min, avg, max) = (0.014, 0.056, 0.193), stdev = 0.077
[info]   CI (99.9%): [≈ 0, 0.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2246.508 ±(99.9%) 717.168 MB/sec [Average]
[info]   (min, avg, max) = (2042.178, 2246.508, 2383.029), stdev = 186.246
[info]   CI (99.9%): [1529.340, 2963.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   22733.689 ±(99.9%) 7398.978 B/op [Average]
[info]   (min, avg, max) = (20553.610, 22733.689, 24644.574), stdev = 1921.491
[info]   CI (99.9%): [15334.711, 30132.666] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 51.24% complete, ETA 00:42:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31517.433 ops/s
[info] # Warmup Iteration   2: 663022.248 ops/s
[info] # Warmup Iteration   3: 651969.416 ops/s
[info] Iteration   1: 645012.538 ops/s
[info]                  ·gc.alloc.rate:            357.326 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 814.353 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 655815.809 ops/s
[info]                  ·gc.alloc.rate:            363.276 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.664 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 800.919 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 674892.542 ops/s
[info]                  ·gc.alloc.rate:            373.888 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.278 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 674369.788 ops/s
[info]                  ·gc.alloc.rate:            373.575 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.894 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 651715.673 ops/s
[info]                  ·gc.alloc.rate:            361.062 MB/sec
[info]                  ·gc.alloc.rate.norm:       872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 805.960 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava":
[info]   660361.270 ±(99.9%) 52317.328 ops/s [Average]
[info]   (min, avg, max) = (645012.538, 660361.270, 674892.542), stdev = 13586.644
[info]   CI (99.9%): [608043.942, 712678.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   365.825 ±(99.9%) 28.975 MB/sec [Average]
[info]   (min, avg, max) = (357.326, 365.825, 373.888), stdev = 7.525
[info]   CI (99.9%): [336.850, 394.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (872.001, 872.001, 872.001), stdev = 0.001
[info]   CI (99.9%): [872.001, 872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.694 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (333.664, 333.694, 333.717), stdev = 0.020
[info]   CI (99.9%): [333.616, 333.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   795.681 ±(99.9%) 62.873 B/op [Average]
[info]   (min, avg, max) = (778.278, 795.681, 814.353), stdev = 16.328
[info]   CI (99.9%): [732.807, 858.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.49% complete, ETA 00:41:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212563.160 ops/s
[info] # Warmup Iteration   2: 352777.431 ops/s
[info] # Warmup Iteration   3: 348423.771 ops/s
[info] Iteration   1: 350852.192 ops/s
[info]                  ·gc.alloc.rate:            365.581 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1508.962 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 348171.447 ops/s
[info]                  ·gc.alloc.rate:            362.725 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3041.306 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 349982.792 ops/s
[info]                  ·gc.alloc.rate:            364.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1512.785 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 355599.027 ops/s
[info]                  ·gc.alloc.rate:            370.552 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1488.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 355598.652 ops/s
[info]                  ·gc.alloc.rate:            370.569 MB/sec
[info]                  ·gc.alloc.rate.norm:       1640.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1488.893 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   352040.822 ±(99.9%) 13049.559 ops/s [Average]
[info]   (min, avg, max) = (348171.447, 352040.822, 355599.027), stdev = 3388.929
[info]   CI (99.9%): [338991.263, 365090.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   366.809 ±(99.9%) 13.767 MB/sec [Average]
[info]   (min, avg, max) = (362.725, 366.809, 370.569), stdev = 3.575
[info]   CI (99.9%): [353.043, 380.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1640.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1640.001, 1640.001, 1640.001), stdev = 0.001
[info]   CI (99.9%): [1640.001, 1640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.640 ±(99.9%) 579.079 MB/sec [Average]
[info]   (min, avg, max) = (336.336, 403.640, 672.657), stdev = 150.385
[info]   CI (99.9%): [≈ 0, 982.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1808.168 ±(99.9%) 2654.765 B/op [Average]
[info]   (min, avg, max) = (1488.893, 1808.168, 3041.306), stdev = 689.434
[info]   CI (99.9%): [≈ 0, 4462.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 8.000), stdev = 1.732
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 51.74% complete, ETA 00:41:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 902204.185 ops/s
[info] # Warmup Iteration   2: 929665.521 ops/s
[info] # Warmup Iteration   3: 954934.728 ops/s
[info] Iteration   1: 952369.965 ops/s
[info]                  ·gc.alloc.rate:            329.150 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 557.013 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 953856.762 ops/s
[info]                  ·gc.alloc.rate:            329.645 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.012 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.158 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 952845.541 ops/s
[info]                  ·gc.alloc.rate:            329.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 556.748 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 955977.519 ops/s
[info]                  ·gc.alloc.rate:            330.506 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 554.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 955108.724 ops/s
[info]                  ·gc.alloc.rate:            330.075 MB/sec
[info]                  ·gc.alloc.rate.norm:       544.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 555.431 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   954031.702 ±(99.9%) 5822.351 ops/s [Average]
[info]   (min, avg, max) = (952369.965, 954031.702, 955977.519), stdev = 1512.046
[info]   CI (99.9%): [948209.351, 959854.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   329.732 ±(99.9%) 2.164 MB/sec [Average]
[info]   (min, avg, max) = (329.150, 329.732, 330.506), stdev = 0.562
[info]   CI (99.9%): [327.568, 331.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.038 ±(99.9%) 0.231 MB/sec [Average]
[info]   (min, avg, max) = (337.000, 337.038, 337.144), stdev = 0.060
[info]   CI (99.9%): [336.807, 337.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   556.055 ±(99.9%) 3.374 B/op [Average]
[info]   (min, avg, max) = (554.927, 556.055, 557.013), stdev = 0.876
[info]   CI (99.9%): [552.682, 559.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 51.99% complete, ETA 00:41:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37062.632 ops/s
[info] # Warmup Iteration   2: 72126.670 ops/s
[info] # Warmup Iteration   3: 73355.325 ops/s
[info] Iteration   1: 75460.816 ops/s
[info]                  ·gc.alloc.rate:                                  3234.511 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.166 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.906 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       63892.325 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 74871.002 ops/s
[info]                  ·gc.alloc.rate:                                  3209.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.184 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71552.692 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 74481.898 ops/s
[info]                  ·gc.alloc.rate:                                  3192.445 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.083 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64737.167 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 74678.754 ops/s
[info]                  ·gc.alloc.rate:                                  3201.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.533 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71738.541 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 75030.576 ops/s
[info]                  ·gc.alloc.rate:                                  3216.363 MB/sec
[info]                  ·gc.alloc.rate.norm:                             67472.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.172 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64261.837 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   74904.609 ±(99.9%) 1435.700 ops/s [Average]
[info]   (min, avg, max) = (74481.898, 74904.609, 75460.816), stdev = 372.847
[info]   CI (99.9%): [73468.909, 76340.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3210.706 ±(99.9%) 61.692 MB/sec [Average]
[info]   (min, avg, max) = (3192.445, 3210.706, 3234.511), stdev = 16.021
[info]   CI (99.9%): [3149.014, 3272.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67472.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67472.005, 67472.006, 67472.006), stdev = 0.001
[info]   CI (99.9%): [67472.004, 67472.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.021 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.009, 0.018), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.189 ±(99.9%) 0.445 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.189, 0.386), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3199.201 ±(99.9%) 717.643 MB/sec [Average]
[info]   (min, avg, max) = (3062.906, 3199.201, 3403.533), stdev = 186.370
[info]   CI (99.9%): [2481.558, 3916.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   67236.512 ±(99.9%) 15543.524 B/op [Average]
[info]   (min, avg, max) = (63892.325, 67236.512, 71738.541), stdev = 4036.604
[info]   CI (99.9%): [51692.988, 82780.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 52.24% complete, ETA 00:41:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 196658.354 ops/s
[info] # Warmup Iteration   2: 260728.213 ops/s
[info] # Warmup Iteration   3: 265066.425 ops/s
[info] Iteration   1: 264120.812 ops/s
[info]                  ·gc.alloc.rate:                                  1553.775 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.243 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10062.995 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.848 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 257863.019 ops/s
[info]                  ·gc.alloc.rate:                                  1516.271 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.446 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8310.641 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 256243.961 ops/s
[info]                  ·gc.alloc.rate:                                  1507.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.048 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.477 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10453.234 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 261351.217 ops/s
[info]                  ·gc.alloc.rate:                                  1537.355 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9256.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.860 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8199.396 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 256328.458 ops/s
[info]                  ·gc.alloc.rate:            1507.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       9256.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10450.176 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   259181.493 ±(99.9%) 13284.981 ops/s [Average]
[info]   (min, avg, max) = (256243.961, 259181.493, 264120.812), stdev = 3450.067
[info]   CI (99.9%): [245896.512, 272466.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1524.549 ±(99.9%) 78.360 MB/sec [Average]
[info]   (min, avg, max) = (1507.489, 1524.549, 1553.775), stdev = 20.350
[info]   CI (99.9%): [1446.189, 1602.909] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9256.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9256.002, 9256.002, 9256.002), stdev = 0.001
[info]   CI (99.9%): [9256.001, 9256.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.136 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.073), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.176 ±(99.9%) 0.823 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.446), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1563.476 ±(99.9%) 709.806 MB/sec [Average]
[info]   (min, avg, max) = (1361.407, 1563.476, 1702.477), stdev = 184.334
[info]   CI (99.9%): [853.670, 2273.282] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   9495.289 ±(99.9%) 4404.945 B/op [Average]
[info]   (min, avg, max) = (8199.396, 9495.289, 10453.234), stdev = 1143.950
[info]   CI (99.9%): [5090.343, 13900.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.738 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.332), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.970 ±(99.9%) 34.180 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.970, 19.848), stdev = 8.876
[info]   CI (99.9%): [≈ 0, 38.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 15.000), stdev = 4.919
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava
[info] # Parameters: (size = 128)
[info] # Run progress: 52.49% complete, ETA 00:41:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13632.917 ops/s
[info] # Warmup Iteration   2: 1336474.503 ops/s
[info] # Warmup Iteration   3: 1350807.860 ops/s
[info] Iteration   1: 1354410.854 ops/s
[info]                  ·gc.alloc.rate:            461.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1359330.997 ops/s
[info]                  ·gc.alloc.rate:            462.845 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.673 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 386.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1354821.533 ops/s
[info]                  ·gc.alloc.rate:            461.334 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 775.414 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1354199.940 ops/s
[info]                  ·gc.alloc.rate:            461.136 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.707 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.883 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1354007.694 ops/s
[info]                  ·gc.alloc.rate:            461.052 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.684 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.927 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava":
[info]   1355354.204 ±(99.9%) 8639.086 ops/s [Average]
[info]   (min, avg, max) = (1354007.694, 1355354.204, 1359330.997), stdev = 2243.543
[info]   CI (99.9%): [1346715.118, 1363993.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   461.553 ±(99.9%) 2.834 MB/sec [Average]
[info]   (min, avg, max) = (461.052, 461.553, 462.845), stdev = 0.736
[info]   CI (99.9%): [458.719, 464.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   467.227 ±(99.9%) 704.116 MB/sec [Average]
[info]   (min, avg, max) = (333.673, 467.227, 667.677), stdev = 182.857
[info]   CI (99.9%): [≈ 0, 1171.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   542.653 ±(99.9%) 818.572 B/op [Average]
[info]   (min, avg, max) = (386.411, 542.653, 775.632), stdev = 212.581
[info]   CI (99.9%): [≈ 0, 1361.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 2.490
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.74% complete, ETA 00:40:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 777038.965 ops/s
[info] # Warmup Iteration   2: 1192734.518 ops/s
[info] # Warmup Iteration   3: 1237677.321 ops/s
[info] Iteration   1: 1241647.812 ops/s
[info]                  ·gc.alloc.rate:            725.736 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 852.801 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1236355.512 ops/s
[info]                  ·gc.alloc.rate:            722.546 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 856.463 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1206887.223 ops/s
[info]                  ·gc.alloc.rate:            705.329 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1316.107 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1242891.857 ops/s
[info]                  ·gc.alloc.rate:            726.448 MB/sec
[info]                  ·gc.alloc.rate.norm:       920.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 851.960 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1240398.130 ops/s
[info]                  ·gc.alloc.rate:                                  725.051 MB/sec
[info]                  ·gc.alloc.rate.norm:                             920.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.087 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.110 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.772 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       858.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.071 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1233636.107 ±(99.9%) 58349.620 ops/s [Average]
[info]   (min, avg, max) = (1206887.223, 1233636.107, 1242891.857), stdev = 15153.211
[info]   CI (99.9%): [1175286.486, 1291985.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   721.022 ±(99.9%) 34.252 MB/sec [Average]
[info]   (min, avg, max) = (705.329, 721.022, 726.448), stdev = 8.895
[info]   CI (99.9%): [686.770, 755.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   920.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (920.000, 920.000, 920.000), stdev = 0.001
[info]   CI (99.9%): [920.000, 920.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.087), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.022 ±(99.9%) 0.190 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.110), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.775 ±(99.9%) 577.432 MB/sec [Average]
[info]   (min, avg, max) = (672.645, 740.775, 1009.008), stdev = 149.957
[info]   CI (99.9%): [163.342, 1318.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   947.215 ±(99.9%) 794.140 B/op [Average]
[info]   (min, avg, max) = (851.960, 947.215, 1316.107), stdev = 206.236
[info]   CI (99.9%): [153.075, 1741.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.014 ±(99.9%) 8.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.014, 5.071), stdev = 2.268
[info]   CI (99.9%): [≈ 0, 9.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 13.000), stdev = 2.608
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 52.99% complete, ETA 00:40:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1198193.239 ops/s
[info] # Warmup Iteration   2: 1297895.095 ops/s
[info] # Warmup Iteration   3: 1332003.882 ops/s
[info] Iteration   1: 1348384.930 ops/s
[info]                  ·gc.alloc.rate:                   459.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.703 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        785.271 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.777 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1339645.085 ops/s
[info]                  ·gc.alloc.rate:            456.151 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 396.001 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 1353921.907 ops/s
[info]                  ·gc.alloc.rate:            460.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 782.094 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 1357358.705 ops/s
[info]                  ·gc.alloc.rate:            462.220 MB/sec
[info]                  ·gc.alloc.rate.norm:       536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 390.059 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1362034.590 ops/s
[info]                  ·gc.alloc.rate:                   463.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              536.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             336.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        388.719 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.770 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1352269.044 ±(99.9%) 33261.472 ops/s [Average]
[info]   (min, avg, max) = (1339645.085, 1352269.044, 1362034.590), stdev = 8637.899
[info]   CI (99.9%): [1319007.572, 1385530.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   460.462 ±(99.9%) 11.328 MB/sec [Average]
[info]   (min, avg, max) = (456.151, 460.462, 463.775), stdev = 2.942
[info]   CI (99.9%): [449.134, 471.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (536.000, 536.000, 536.000), stdev = 0.001
[info]   CI (99.9%): [536.000, 536.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.014 ±(99.9%) 708.876 MB/sec [Average]
[info]   (min, avg, max) = (336.340, 471.014, 672.703), stdev = 184.093
[info]   CI (99.9%): [≈ 0, 1179.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   548.429 ±(99.9%) 827.029 B/op [Average]
[info]   (min, avg, max) = (388.719, 548.429, 785.271), stdev = 214.777
[info]   CI (99.9%): [≈ 0, 1375.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.309 ±(99.9%) 1.632 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.309, 0.777), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.949
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 53.23% complete, ETA 00:40:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1319175.439 ops/s
[info] # Warmup Iteration   2: 1425776.558 ops/s
[info] # Warmup Iteration   3: 1429157.954 ops/s
[info] Iteration   1: 1429860.062 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1428293.944 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1457981.931 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1458229.581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1458034.619 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1446480.028 ±(99.9%) 61212.258 ops/s [Average]
[info]   (min, avg, max) = (1428293.944, 1446480.028, 1458229.581), stdev = 15896.629
[info]   CI (99.9%): [1385267.770, 1507692.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 53.48% complete, ETA 00:40:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21637.011 ops/s
[info] # Warmup Iteration   2: 34132.493 ops/s
[info] # Warmup Iteration   3: 35233.376 ops/s
[info] Iteration   1: 35570.651 ops/s
[info]                  ·gc.alloc.rate:                                  1649.207 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72984.818 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.093 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1685.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74599.333 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                176.846 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        18.000 ms
[info] Iteration   2: 36178.857 ops/s
[info]                  ·gc.alloc.rate:                                  1677.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.162 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.749 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74039.289 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 36379.762 ops/s
[info]                  ·gc.alloc.rate:                                  1686.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73630.289 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 36388.641 ops/s
[info]                  ·gc.alloc.rate:                                  1687.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.178 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.686 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73610.058 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36416.686 ops/s
[info]                  ·gc.alloc.rate:                                  1688.522 MB/sec
[info]                  ·gc.alloc.rate.norm:                             72976.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.113 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.930 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73555.492 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   36186.920 ±(99.9%) 1375.661 ops/s [Average]
[info]   (min, avg, max) = (35570.651, 36186.920, 36416.686), stdev = 357.255
[info]   CI (99.9%): [34811.258, 37562.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1677.723 ±(99.9%) 63.695 MB/sec [Average]
[info]   (min, avg, max) = (1649.207, 1677.723, 1688.522), stdev = 16.541
[info]   CI (99.9%): [1614.028, 1741.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72977.773 ±(99.9%) 15.166 B/op [Average]
[info]   (min, avg, max) = (72976.011, 72977.773, 72984.818), stdev = 3.938
[info]   CI (99.9%): [72962.607, 72992.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.193 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.039, 0.096), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.723 ±(99.9%) 8.477 B/op [Average]
[info]   (min, avg, max) = (0.057, 1.723, 4.162), stdev = 2.201
[info]   CI (99.9%): [≈ 0, 10.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.545 ±(99.9%) 27.676 MB/sec [Average]
[info]   (min, avg, max) = (1685.689, 1698.545, 1701.930), stdev = 7.187
[info]   CI (99.9%): [1670.869, 1726.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   73886.892 ±(99.9%) 1703.779 B/op [Average]
[info]   (min, avg, max) = (73555.492, 73886.892, 74599.333), stdev = 442.466
[info]   CI (99.9%): [72183.113, 75590.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   35.369 ±(99.9%) 304.539 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.369, 176.846), stdev = 79.088
[info]   CI (99.9%): [≈ 0, 339.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 18.000), stdev = 6.164
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 53.73% complete, ETA 00:39:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31476.603 ops/s
[info] # Warmup Iteration   2: 38883.113 ops/s
[info] # Warmup Iteration   3: 39159.118 ops/s
[info] Iteration   1: 40013.226 ops/s
[info]                  ·gc.alloc.rate:            798.734 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26515.715 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 40663.786 ops/s
[info]                  ·gc.alloc.rate:            811.828 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.114 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39137.899 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 39369.832 ops/s
[info]                  ·gc.alloc.rate:            786.200 MB/sec
[info]                  ·gc.alloc.rate.norm:       31424.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.232 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26948.699 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 39091.409 ops/s
[info]                  ·gc.alloc.rate:                   780.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40713.586 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 134.103 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 40033.527 ops/s
[info]                  ·gc.alloc.rate:                                  799.233 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31424.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.101 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.965 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26765.021 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   39834.356 ±(99.9%) 2379.445 ops/s [Average]
[info]   (min, avg, max) = (39091.409, 39834.356, 40663.786), stdev = 617.934
[info]   CI (99.9%): [37454.911, 42213.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   795.287 ±(99.9%) 47.322 MB/sec [Average]
[info]   (min, avg, max) = (780.438, 795.287, 811.828), stdev = 12.289
[info]   CI (99.9%): [747.965, 842.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.011, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.101), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.793 ±(99.9%) 6.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.793, 3.965), stdev = 1.773
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   810.242 ±(99.9%) 706.236 MB/sec [Average]
[info]   (min, avg, max) = (673.975, 810.242, 1011.152), stdev = 183.407
[info]   CI (99.9%): [104.006, 1516.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   32016.184 ±(99.9%) 27892.122 B/op [Average]
[info]   (min, avg, max) = (26515.715, 32016.184, 40713.586), stdev = 7243.496
[info]   CI (99.9%): [4124.062, 59908.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   26.821 ±(99.9%) 230.933 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.821, 134.103), stdev = 59.973
[info]   CI (99.9%): [≈ 0, 257.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.200, 9.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 53.98% complete, ETA 00:39:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47055.390 ops/s
[info] # Warmup Iteration   2: 77421.918 ops/s
[info] # Warmup Iteration   3: 77760.621 ops/s
[info] Iteration   1: 78388.851 ops/s
[info]                  ·gc.alloc.rate:            826.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13508.269 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 78473.925 ops/s
[info]                  ·gc.alloc.rate:                   827.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20227.614 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.360 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 77138.230 ops/s
[info]                  ·gc.alloc.rate:                   813.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              16592.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.247 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13713.894 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 13.592 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 76263.964 ops/s
[info]                  ·gc.alloc.rate:                                  803.866 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.936 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.065 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20909.931 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                82.485 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 77385.735 ops/s
[info]                  ·gc.alloc.rate:                                  815.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16592.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.989 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13845.896 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   77530.141 ±(99.9%) 3553.125 ops/s [Average]
[info]   (min, avg, max) = (76263.964, 77530.141, 78473.925), stdev = 922.735
[info]   CI (99.9%): [73977.016, 81083.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   817.335 ±(99.9%) 37.554 MB/sec [Average]
[info]   (min, avg, max) = (803.866, 817.335, 827.136), stdev = 9.753
[info]   CI (99.9%): [779.781, 854.888] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16592.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16592.005, 16592.005, 16592.006), stdev = 0.001
[info]   CI (99.9%): [16592.005, 16592.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.162 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.585 ±(99.9%) 3.343 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.585, 1.936), stdev = 0.868
[info]   CI (99.9%): [≈ 0, 3.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   809.478 ±(99.9%) 707.544 MB/sec [Average]
[info]   (min, avg, max) = (672.247, 809.478, 1013.065), stdev = 183.747
[info]   CI (99.9%): [101.934, 1517.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16441.121 ±(99.9%) 14546.362 B/op [Average]
[info]   (min, avg, max) = (13508.269, 16441.121, 20909.931), stdev = 3777.644
[info]   CI (99.9%): [1894.758, 30987.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.887 ±(99.9%) 132.997 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.887, 82.485), stdev = 34.539
[info]   CI (99.9%): [≈ 0, 154.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 8.400, 13.000), stdev = 4.450
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.23% complete, ETA 00:39:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237063.162 ops/s
[info] # Warmup Iteration   2: 263909.165 ops/s
[info] # Warmup Iteration   3: 262757.849 ops/s
[info] Iteration   1: 264814.419 ops/s
[info]                  ·gc.alloc.rate:            861.412 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6009.871 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 266972.078 ops/s
[info]                  ·gc.alloc.rate:            868.406 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3974.274 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 263942.025 ops/s
[info]                  ·gc.alloc.rate:            858.572 MB/sec
[info]                  ·gc.alloc.rate.norm:       5120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.145 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6029.860 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 265625.292 ops/s
[info]                  ·gc.alloc.rate:                                  864.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.013 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.078 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.405 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4014.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                19.735 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 265823.788 ops/s
[info]                  ·gc.alloc.rate:                                  864.585 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.084 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.933 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6045.882 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   265435.520 ±(99.9%) 4375.216 ops/s [Average]
[info]   (min, avg, max) = (263942.025, 265435.520, 266972.078), stdev = 1136.230
[info]   CI (99.9%): [261060.305, 269810.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   863.404 ±(99.9%) 14.167 MB/sec [Average]
[info]   (min, avg, max) = (858.572, 863.404, 868.406), stdev = 3.679
[info]   CI (99.9%): [849.237, 877.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.014), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.032 ±(99.9%) 0.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.084), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.938 ±(99.9%) 714.443 MB/sec [Average]
[info]   (min, avg, max) = (674.078, 878.938, 1020.933), stdev = 185.539
[info]   CI (99.9%): [164.495, 1593.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5214.788 ±(99.9%) 4291.289 B/op [Average]
[info]   (min, avg, max) = (3974.274, 5214.788, 6045.882), stdev = 1114.434
[info]   CI (99.9%): [923.499, 9506.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.947 ±(99.9%) 33.984 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.947, 19.735), stdev = 8.826
[info]   CI (99.9%): [≈ 0, 37.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 54.48% complete, ETA 00:39:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12325.348 ops/s
[info] # Warmup Iteration   2: 22626.417 ops/s
[info] # Warmup Iteration   3: 23009.351 ops/s
[info] Iteration   1: 22540.839 ops/s
[info]                  ·gc.alloc.rate:            1059.090 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.380 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.056 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70466.317 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 22648.929 ops/s
[info]                  ·gc.alloc.rate:            1064.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       73960.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 70130.348 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 23105.957 ops/s
[info]                  ·gc.alloc.rate:                                  1085.851 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69284.965 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                272.240 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 22824.392 ops/s
[info]                  ·gc.alloc.rate:                                  1072.421 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.044 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.064 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70416.463 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 22036.516 ops/s
[info]                  ·gc.alloc.rate:                                  1035.446 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73960.019 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.083 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       72934.075 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   22631.327 ±(99.9%) 1521.913 ops/s [Average]
[info]   (min, avg, max) = (22036.516, 22631.327, 23105.957), stdev = 395.236
[info]   CI (99.9%): [21109.413, 24153.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1063.382 ±(99.9%) 71.675 MB/sec [Average]
[info]   (min, avg, max) = (1035.446, 1063.382, 1085.851), stdev = 18.614
[info]   CI (99.9%): [991.707, 1135.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73960.092 ±(99.9%) 0.621 B/op [Average]
[info]   (min, avg, max) = (73960.018, 73960.092, 73960.380), stdev = 0.161
[info]   CI (99.9%): [73959.471, 73960.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.048), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.283 ±(99.9%) 6.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.283, 3.260), stdev = 1.717
[info]   CI (99.9%): [≈ 0, 7.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1015.479 ±(99.9%) 23.464 MB/sec [Average]
[info]   (min, avg, max) = (1009.004, 1015.479, 1021.083), stdev = 6.093
[info]   CI (99.9%): [992.016, 1038.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70646.433 ±(99.9%) 5251.074 B/op [Average]
[info]   (min, avg, max) = (69284.965, 70646.433, 72934.075), stdev = 1363.687
[info]   CI (99.9%): [65395.360, 75897.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   54.448 ±(99.9%) 468.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 54.448, 272.240), stdev = 121.749
[info]   CI (99.9%): [≈ 0, 523.261] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 13.000), stdev = 5.070
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 54.73% complete, ETA 00:39:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39482.168 ops/s
[info] # Warmup Iteration   2: 50552.484 ops/s
[info] # Warmup Iteration   3: 50454.416 ops/s
[info] Iteration   1: 49837.579 ops/s
[info]                  ·gc.alloc.rate:            1056.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42579.204 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 50770.575 ops/s
[info]                  ·gc.alloc.rate:            1075.910 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31347.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 51003.556 ops/s
[info]                  ·gc.alloc.rate:                                  1080.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.039 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31409.385 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                102.779 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 51082.262 ops/s
[info]                  ·gc.alloc.rate:                                  1082.962 MB/sec
[info]                  ·gc.alloc.rate.norm:                             33360.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       31462.821 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 51055.029 ops/s
[info]                  ·gc.alloc.rate:            1082.099 MB/sec
[info]                  ·gc.alloc.rate.norm:       33360.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.060 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 31478.224 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   50749.800 ±(99.9%) 2019.907 ops/s [Average]
[info]   (min, avg, max) = (49837.579, 50749.800, 51082.262), stdev = 524.563
[info]   CI (99.9%): [48729.893, 52769.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1075.656 ±(99.9%) 42.785 MB/sec [Average]
[info]   (min, avg, max) = (1056.390, 1075.656, 1082.962), stdev = 11.111
[info]   CI (99.9%): [1032.871, 1118.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.009), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.242 ±(99.9%) 2.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.242, 1.199), stdev = 0.535
[info]   CI (99.9%): [≈ 0, 2.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1083.897 ±(99.9%) 569.436 MB/sec [Average]
[info]   (min, avg, max) = (1011.007, 1083.897, 1348.329), stdev = 147.881
[info]   CI (99.9%): [514.461, 1653.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   33655.452 ±(99.9%) 19210.061 B/op [Average]
[info]   (min, avg, max) = (31347.625, 33655.452, 42579.204), stdev = 4988.792
[info]   CI (99.9%): [14445.391, 52865.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   20.556 ±(99.9%) 176.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.556, 102.779), stdev = 45.964
[info]   CI (99.9%): [≈ 0, 197.548] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 14.000), stdev = 5.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 54.98% complete, ETA 00:38:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55212.281 ops/s
[info] # Warmup Iteration   2: 95293.209 ops/s
[info] # Warmup Iteration   3: 95834.002 ops/s
[info] Iteration   1: 95911.555 ops/s
[info]                  ·gc.alloc.rate:            1313.641 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1344.692 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22069.646 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   2: 96695.103 ops/s
[info]                  ·gc.alloc.rate:                                  1324.602 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.984 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.138 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.250 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.498 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16545.107 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                75.895 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 95844.920 ops/s
[info]                  ·gc.alloc.rate:                                  1312.777 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21560.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22358.770 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 97155.591 ops/s
[info]                  ·gc.alloc.rate:            1330.711 MB/sec
[info]                  ·gc.alloc.rate.norm:       21560.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 22055.748 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 96255.384 ops/s
[info]                  ·gc.alloc.rate:                                  1319.055 MB/sec
[info]                  ·gc.alloc.rate.norm:                             21559.983 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.099 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       22263.546 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   96372.511 ±(99.9%) 2128.184 ops/s [Average]
[info]   (min, avg, max) = (95844.920, 96372.511, 97155.591), stdev = 552.683
[info]   CI (99.9%): [94244.327, 98500.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1320.157 ±(99.9%) 29.153 MB/sec [Average]
[info]   (min, avg, max) = (1312.777, 1320.157, 1330.711), stdev = 7.571
[info]   CI (99.9%): [1291.004, 1349.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.004 ±(99.9%) 0.080 B/op [Average]
[info]   (min, avg, max) = (21559.983, 21560.004, 21560.025), stdev = 0.021
[info]   CI (99.9%): [21559.924, 21560.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.237 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.138), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.459 ±(99.9%) 3.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.459, 2.250), stdev = 1.001
[info]   CI (99.9%): [≈ 0, 4.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1289.202 ±(99.9%) 587.695 MB/sec [Average]
[info]   (min, avg, max) = (1016.498, 1289.202, 1362.099), stdev = 152.623
[info]   CI (99.9%): [701.507, 1876.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   21058.564 ±(99.9%) 9728.206 B/op [Average]
[info]   (min, avg, max) = (16545.107, 21058.564, 22358.770), stdev = 2526.384
[info]   CI (99.9%): [11330.357, 30786.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   15.179 ±(99.9%) 130.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.179, 75.895), stdev = 33.941
[info]   CI (99.9%): [≈ 0, 145.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 18.000), stdev = 6.099
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 55.22% complete, ETA 00:38:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253455.243 ops/s
[info] # Warmup Iteration   2: 280723.814 ops/s
[info] # Warmup Iteration   3: 286546.618 ops/s
[info] Iteration   1: 284906.395 ops/s
[info]                  ·gc.alloc.rate:            908.191 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5574.870 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 285890.677 ops/s
[info]                  ·gc.alloc.rate:            911.134 MB/sec
[info]                  ·gc.alloc.rate.norm:       5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5555.763 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 285508.219 ops/s
[info]                  ·gc.alloc.rate:                   909.755 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5563.195 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 22.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 296675.678 ops/s
[info]                  ·gc.alloc.rate:                                  945.437 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.440 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3611.600 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 296704.674 ops/s
[info]                  ·gc.alloc.rate:                                  945.545 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5016.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.111 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.107 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5416.852 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   289937.129 ±(99.9%) 23776.363 ops/s [Average]
[info]   (min, avg, max) = (284906.395, 289937.129, 296704.674), stdev = 6174.646
[info]   CI (99.9%): [266160.766, 313713.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   924.012 ±(99.9%) 75.606 MB/sec [Average]
[info]   (min, avg, max) = (908.191, 924.012, 945.545), stdev = 19.635
[info]   CI (99.9%): [848.407, 999.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.001, 5016.001, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.733 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.440), stdev = 0.190
[info]   CI (99.9%): [≈ 0, 0.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.879 ±(99.9%) 571.101 MB/sec [Average]
[info]   (min, avg, max) = (680.729, 945.879, 1021.107), stdev = 148.313
[info]   CI (99.9%): [374.778, 1516.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5144.456 ±(99.9%) 3308.878 B/op [Average]
[info]   (min, avg, max) = (3611.600, 5144.456, 5574.870), stdev = 859.305
[info]   CI (99.9%): [1835.578, 8453.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.406 ±(99.9%) 37.941 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.406, 22.032), stdev = 9.853
[info]   CI (99.9%): [≈ 0, 42.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.600, 10.000), stdev = 3.782
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 55.47% complete, ETA 00:38:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287130.332 ops/s
[info] # Warmup Iteration   2: 316551.050 ops/s
[info] # Warmup Iteration   3: 318792.808 ops/s
[info] Iteration   1: 319669.262 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 319316.157 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 319334.007 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 319123.696 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 319531.669 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   319394.958 ±(99.9%) 811.017 ops/s [Average]
[info]   (min, avg, max) = (319123.696, 319394.958, 319669.262), stdev = 210.618
[info]   CI (99.9%): [318583.941, 320205.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 55.72% complete, ETA 00:38:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56069.588 ops/s
[info] # Warmup Iteration   2: 76409.199 ops/s
[info] # Warmup Iteration   3: 75037.615 ops/s
[info] Iteration   1: 77907.379 ops/s
[info]                  ·gc.alloc.rate:            1154.561 MB/sec
[info]                  ·gc.alloc.rate.norm:       23327.980 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.964 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20386.174 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 77987.467 ops/s
[info]                  ·gc.alloc.rate:                   1155.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              23328.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.129 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27155.082 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 80.659 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 78746.663 ops/s
[info]                  ·gc.alloc.rate:                                  1166.965 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.192 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.846 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.978 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20409.688 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 78730.803 ops/s
[info]                  ·gc.alloc.rate:                                  1166.853 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23328.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27217.755 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 79315.371 ops/s
[info]                  ·gc.alloc.rate:                                  1175.397 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23327.980 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20263.807 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   78537.536 ±(99.9%) 2266.479 ops/s [Average]
[info]   (min, avg, max) = (77907.379, 78537.536, 79315.371), stdev = 588.598
[info]   CI (99.9%): [76271.057, 80804.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1163.866 ±(99.9%) 33.741 MB/sec [Average]
[info]   (min, avg, max) = (1154.561, 1163.866, 1175.397), stdev = 8.762
[info]   CI (99.9%): [1130.125, 1197.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23328.000 ±(99.9%) 0.082 B/op [Average]
[info]   (min, avg, max) = (23327.980, 23328.000, 23328.031), stdev = 0.021
[info]   CI (99.9%): [23327.918, 23328.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.192), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.788 ±(99.9%) 6.584 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.788, 3.846), stdev = 1.710
[info]   CI (99.9%): [≈ 0, 7.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1151.499 ±(99.9%) 709.862 MB/sec [Average]
[info]   (min, avg, max) = (1008.964, 1151.499, 1361.416), stdev = 184.349
[info]   CI (99.9%): [441.637, 1861.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   23086.501 ±(99.9%) 14413.617 B/op [Average]
[info]   (min, avg, max) = (20263.807, 23086.501, 27217.755), stdev = 3743.171
[info]   CI (99.9%): [8672.884, 37500.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.880 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.995), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   16.132 ±(99.9%) 138.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.132, 80.659), stdev = 36.072
[info]   CI (99.9%): [≈ 0, 155.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 16.000), stdev = 6.025
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 55.97% complete, ETA 00:37:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53771.527 ops/s
[info] # Warmup Iteration   2: 74078.171 ops/s
[info] # Warmup Iteration   3: 74170.818 ops/s
[info] Iteration   1: 74425.642 ops/s
[info]                  ·gc.alloc.rate:                   1422.618 MB/sec
[info]                  ·gc.alloc.rate.norm:              30080.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        28441.164 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 14.087 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 74507.592 ops/s
[info]                  ·gc.alloc.rate:                                  1423.937 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30080.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.186 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.924 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.913 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35867.634 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                84.428 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 74463.167 ops/s
[info]                  ·gc.alloc.rate:                                  1423.674 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30080.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.112 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28778.255 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 73666.849 ops/s
[info]                  ·gc.alloc.rate:                                  1408.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             30080.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.145 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.899 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29089.555 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 73312.053 ops/s
[info]                  ·gc.alloc.rate:            1401.084 MB/sec
[info]                  ·gc.alloc.rate.norm:       30080.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 29229.994 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   74075.061 ±(99.9%) 2117.360 ops/s [Average]
[info]   (min, avg, max) = (73312.053, 74075.061, 74507.592), stdev = 549.872
[info]   CI (99.9%): [71957.701, 76192.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1415.916 ±(99.9%) 40.746 MB/sec [Average]
[info]   (min, avg, max) = (1401.084, 1415.916, 1423.937), stdev = 10.582
[info]   CI (99.9%): [1375.170, 1456.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   30080.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (30080.005, 30080.006, 30080.006), stdev = 0.001
[info]   CI (99.9%): [30080.005, 30080.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.040 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.186), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.836 ±(99.9%) 6.651 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.836, 3.924), stdev = 1.727
[info]   CI (99.9%): [≈ 0, 7.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1425.695 ±(99.9%) 586.633 MB/sec [Average]
[info]   (min, avg, max) = (1345.110, 1425.695, 1697.913), stdev = 152.347
[info]   CI (99.9%): [839.063, 2012.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   30281.321 ±(99.9%) 12081.740 B/op [Average]
[info]   (min, avg, max) = (28441.164, 30281.321, 35867.634), stdev = 3137.589
[info]   CI (99.9%): [18199.581, 42363.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.703 ±(99.9%) 141.291 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.703, 84.428), stdev = 36.693
[info]   CI (99.9%): [≈ 0, 160.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 15.000), stdev = 5.128
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.22% complete, ETA 00:37:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 47208.157 ops/s
[info] # Warmup Iteration   2: 80014.142 ops/s
[info] # Warmup Iteration   3: 79752.496 ops/s
[info] Iteration   1: 83750.942 ops/s
[info]                  ·gc.alloc.rate:            947.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12618.213 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 83022.001 ops/s
[info]                  ·gc.alloc.rate:                   939.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1005.781 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19068.233 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 12.628 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 81844.779 ops/s
[info]                  ·gc.alloc.rate:                   926.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.289 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        19367.785 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 89.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 81035.080 ops/s
[info]                  ·gc.alloc.rate:                                  917.105 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17808.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.160 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.104 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19833.029 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 81168.664 ops/s
[info]                  ·gc.alloc.rate:            918.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       17808.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      680.732 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13200.358 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   82164.293 ±(99.9%) 4564.925 ops/s [Average]
[info]   (min, avg, max) = (81035.080, 82164.293, 83750.942), stdev = 1185.496
[info]   CI (99.9%): [77599.368, 86729.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   929.649 ±(99.9%) 51.042 MB/sec [Average]
[info]   (min, avg, max) = (917.105, 929.649, 947.320), stdev = 13.255
[info]   CI (99.9%): [878.607, 980.691] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17808.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17808.005, 17808.005, 17808.005), stdev = 0.001
[info]   CI (99.9%): [17808.004, 17808.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.160), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.307] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.621 ±(99.9%) 5.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.621, 3.104), stdev = 1.388
[info]   CI (99.9%): [≈ 0, 5.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.287 ±(99.9%) 708.106 MB/sec [Average]
[info]   (min, avg, max) = (671.242, 877.287, 1021.393), stdev = 183.893
[info]   CI (99.9%): [169.182, 1585.393] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   16817.524 ±(99.9%) 13800.798 B/op [Average]
[info]   (min, avg, max) = (12618.213, 16817.524, 19833.029), stdev = 3584.023
[info]   CI (99.9%): [3016.726, 30618.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.663), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   20.459 ±(99.9%) 150.454 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 20.459, 89.666), stdev = 39.072
[info]   CI (99.9%): [≈ 0, 170.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 14.000), stdev = 5.550
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 56.47% complete, ETA 00:37:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77978.585 ops/s
[info] # Warmup Iteration   2: 99473.403 ops/s
[info] # Warmup Iteration   3: 100130.316 ops/s
[info] Iteration   1: 100167.446 ops/s
[info]                  ·gc.alloc.rate:            1076.118 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.295 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 21142.333 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 99928.903 ops/s
[info]                  ·gc.alloc.rate:            1073.544 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 15895.305 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 98501.852 ops/s
[info]                  ·gc.alloc.rate:                                  1058.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.705 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16252.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                63.862 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 100611.815 ops/s
[info]                  ·gc.alloc.rate:                                  1081.395 MB/sec
[info]                  ·gc.alloc.rate.norm:                             16912.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       15974.034 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 99598.291 ops/s
[info]                  ·gc.alloc.rate:            1070.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       16912.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.977 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16136.635 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   99761.662 ±(99.9%) 3061.929 ops/s [Average]
[info]   (min, avg, max) = (98501.852, 99761.662, 100611.815), stdev = 795.173
[info]   CI (99.9%): [96699.732, 102823.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1071.921 ±(99.9%) 32.976 MB/sec [Average]
[info]   (min, avg, max) = (1058.512, 1071.921, 1081.395), stdev = 8.564
[info]   CI (99.9%): [1038.945, 1104.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16912.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16912.004, 16912.004, 16912.004), stdev = 0.001
[info]   CI (99.9%): [16912.004, 16912.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.181 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.107), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.368 ±(99.9%) 2.888 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.368, 1.705), stdev = 0.750
[info]   CI (99.9%): [≈ 0, 3.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.792 ±(99.9%) 565.384 MB/sec [Average]
[info]   (min, avg, max) = (1009.006, 1082.792, 1345.295), stdev = 146.828
[info]   CI (99.9%): [517.408, 1648.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   17080.251 ±(99.9%) 8760.356 B/op [Average]
[info]   (min, avg, max) = (15895.305, 17080.251, 21142.333), stdev = 2275.037
[info]   CI (99.9%): [8319.895, 25840.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   12.772 ±(99.9%) 109.975 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 12.772, 63.862), stdev = 28.560
[info]   CI (99.9%): [≈ 0, 122.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 13.000), stdev = 4.658
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 56.72% complete, ETA 00:37:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22129.420 ops/s
[info] # Warmup Iteration   2: 43542.625 ops/s
[info] # Warmup Iteration   3: 43423.196 ops/s
[info] Iteration   1: 45080.265 ops/s
[info]                  ·gc.alloc.rate:                                  2153.760 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.095 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71301.959 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 43858.341 ops/s
[info]                  ·gc.alloc.rate:                                  2094.644 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.312 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.493 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85506.813 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 43806.995 ops/s
[info]                  ·gc.alloc.rate:                                  2092.128 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73378.541 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 43406.260 ops/s
[info]                  ·gc.alloc.rate:                                  2072.803 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.884 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74054.638 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 45041.281 ops/s
[info]                  ·gc.alloc.rate:                                  2151.147 MB/sec
[info]                  ·gc.alloc.rate.norm:                             75176.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71363.685 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   44238.628 ±(99.9%) 2967.973 ops/s [Average]
[info]   (min, avg, max) = (43406.260, 44238.628, 45080.265), stdev = 770.773
[info]   CI (99.9%): [41270.655, 47206.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2112.896 ±(99.9%) 142.849 MB/sec [Average]
[info]   (min, avg, max) = (2072.803, 2112.896, 2153.760), stdev = 37.097
[info]   CI (99.9%): [1970.047, 2255.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   75176.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (75176.009, 75176.010, 75176.010), stdev = 0.001
[info]   CI (99.9%): [75176.008, 75176.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.152 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.024, 0.095), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.847 ±(99.9%) 5.312 B/op [Average]
[info]   (min, avg, max) = (0.095, 0.847, 3.305), stdev = 1.380
[info]   CI (99.9%): [≈ 0, 6.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2110.262 ±(99.9%) 586.001 MB/sec [Average]
[info]   (min, avg, max) = (2041.884, 2110.262, 2382.493), stdev = 152.182
[info]   CI (99.9%): [1524.261, 2696.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   75121.127 ±(99.9%) 22840.916 B/op [Average]
[info]   (min, avg, max) = (71301.959, 75121.127, 85506.813), stdev = 5931.713
[info]   CI (99.9%): [52280.211, 97962.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 56.97% complete, ETA 00:37:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86059.733 ops/s
[info] # Warmup Iteration   2: 116073.512 ops/s
[info] # Warmup Iteration   3: 117817.338 ops/s
[info] Iteration   1: 117250.332 ops/s
[info]                  ·gc.alloc.rate:                   809.173 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.301 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13537.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 117325.844 ops/s
[info]                  ·gc.alloc.rate:                   809.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9016.184 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.936 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 119615.085 ops/s
[info]                  ·gc.alloc.rate:                   825.854 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        8843.602 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 8.765 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 119357.862 ops/s
[info]                  ·gc.alloc.rate:                   823.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              10864.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        13307.582 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 52.703 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   5: 119692.296 ops/s
[info]                  ·gc.alloc.rate:                                  826.121 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10864.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.191 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8951.184 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   118648.284 ±(99.9%) 4806.092 ops/s [Average]
[info]   (min, avg, max) = (117250.332, 118648.284, 119692.296), stdev = 1248.127
[info]   CI (99.9%): [113842.192, 123454.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   818.940 ±(99.9%) 33.541 MB/sec [Average]
[info]   (min, avg, max) = (809.173, 818.940, 826.121), stdev = 8.710
[info]   CI (99.9%): [785.399, 852.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10864.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10864.003, 10864.003, 10864.004), stdev = 0.001
[info]   CI (99.9%): [10864.003, 10864.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.329 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.191), stdev = 0.085
[info]   CI (99.9%): [≈ 0, 0.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.503 ±(99.9%) 4.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.503, 2.514), stdev = 1.124
[info]   CI (99.9%): [≈ 0, 4.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   808.473 ±(99.9%) 704.000 MB/sec [Average]
[info]   (min, avg, max) = (672.005, 808.473, 1009.125), stdev = 182.827
[info]   CI (99.9%): [104.473, 1512.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10731.213 ±(99.9%) 9468.571 B/op [Average]
[info]   (min, avg, max) = (8843.602, 10731.213, 13537.512), stdev = 2458.958
[info]   CI (99.9%): [1262.642, 20199.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 6.124 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 3.997), stdev = 1.590
[info]   CI (99.9%): [≈ 0, 7.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.869 ±(99.9%) 80.660 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.869, 52.703), stdev = 20.947
[info]   CI (99.9%): [≈ 0, 96.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 12.000), stdev = 3.435
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.21% complete, ETA 00:36:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 110914.998 ops/s
[info] # Warmup Iteration   2: 158392.025 ops/s
[info] # Warmup Iteration   3: 165178.023 ops/s
[info] Iteration   1: 155774.041 ops/s
[info]                  ·gc.alloc.rate:            231.251 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.787 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3391.991 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 164092.277 ops/s
[info]                  ·gc.alloc.rate:            243.515 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3220.097 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 163854.054 ops/s
[info]                  ·gc.alloc.rate:            243.170 MB/sec
[info]                  ·gc.alloc.rate.norm:       2336.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3224.773 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 165899.753 ops/s
[info]                  ·gc.alloc.rate:      246.297 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.002 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 164029.541 ops/s
[info]                  ·gc.alloc.rate:                   243.432 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3215.001 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.392 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   162729.933 ±(99.9%) 15310.946 ops/s [Average]
[info]   (min, avg, max) = (155774.041, 162729.933, 165899.753), stdev = 3976.204
[info]   CI (99.9%): [147418.987, 178040.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   241.533 ±(99.9%) 22.670 MB/sec [Average]
[info]   (min, avg, max) = (231.251, 241.533, 246.297), stdev = 5.887
[info]   CI (99.9%): [218.863, 264.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   268.437 ±(99.9%) 577.832 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.437, 335.787), stdev = 150.061
[info]   CI (99.9%): [≈ 0, 846.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2610.372 ±(99.9%) 5626.356 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2610.372, 3391.991), stdev = 1461.147
[info]   CI (99.9%): [≈ 0, 8236.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.278 ±(99.9%) 11.007 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.278, 6.392), stdev = 2.858
[info]   CI (99.9%): [≈ 0, 12.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.600, 5.000), stdev = 2.074
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 57.46% complete, ETA 00:36:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 708761.730 ops/s
[info] # Warmup Iteration   2: 803261.707 ops/s
[info] # Warmup Iteration   3: 785889.795 ops/s
[info] Iteration   1: 782015.577 ops/s
[info]                  ·gc.alloc.rate:            969.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2031.077 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 777271.973 ops/s
[info]                  ·gc.alloc.rate:            963.836 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2043.482 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 764430.177 ops/s
[info]                  ·gc.alloc.rate:                                  947.959 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.078 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2086.108 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.229 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 773800.894 ops/s
[info]                  ·gc.alloc.rate:                                  959.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.095 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.797 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1384.718 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Iteration   5: 768787.309 ops/s
[info]                  ·gc.alloc.rate:            953.571 MB/sec
[info]                  ·gc.alloc.rate.norm:       1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2090.579 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   773261.186 ±(99.9%) 26609.826 ops/s [Average]
[info]   (min, avg, max) = (764430.177, 773261.186, 782015.577), stdev = 6910.487
[info]   CI (99.9%): [746651.360, 799871.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   958.964 ±(99.9%) 32.832 MB/sec [Average]
[info]   (min, avg, max) = (947.959, 958.964, 969.749), stdev = 8.526
[info]   CI (99.9%): [926.132, 991.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.078), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.051 ±(99.9%) 0.284 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.160), stdev = 0.074
[info]   CI (99.9%): [≈ 0, 0.335] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   946.639 ±(99.9%) 572.567 MB/sec [Average]
[info]   (min, avg, max) = (680.797, 946.639, 1021.268), stdev = 148.694
[info]   CI (99.9%): [374.072, 1519.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1927.193 ±(99.9%) 1171.986 B/op [Average]
[info]   (min, avg, max) = (1384.718, 1927.193, 2090.579), stdev = 304.361
[info]   CI (99.9%): [755.207, 3099.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.646 ±(99.9%) 14.171 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.646, 8.229), stdev = 3.680
[info]   CI (99.9%): [≈ 0, 15.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.600, 11.000), stdev = 4.393
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 57.71% complete, ETA 00:36:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 753669.450 ops/s
[info] # Warmup Iteration   2: 791658.677 ops/s
[info] # Warmup Iteration   3: 803503.322 ops/s
[info] Iteration   1: 786500.288 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 802963.311 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 803031.850 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 801509.636 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 794859.890 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   797772.995 ±(99.9%) 27507.019 ops/s [Average]
[info]   (min, avg, max) = (786500.288, 797772.995, 803031.850), stdev = 7143.485
[info]   CI (99.9%): [770265.976, 825280.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 57.96% complete, ETA 00:36:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 146393.827 ops/s
[info] # Warmup Iteration   2: 196248.524 ops/s
[info] # Warmup Iteration   3: 202760.169 ops/s
[info] Iteration   1: 202496.743 ops/s
[info]                  ·gc.alloc.rate:            659.676 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5218.547 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 200712.155 ops/s
[info]                  ·gc.alloc.rate:                   653.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5259.908 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.223 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 195172.604 ops/s
[info]                  ·gc.alloc.rate:            635.826 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5414.639 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 203222.170 ops/s
[info]                  ·gc.alloc.rate:                   662.364 MB/sec
[info]                  ·gc.alloc.rate.norm:              5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5195.184 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.159 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 201748.843 ops/s
[info]                  ·gc.alloc.rate:            657.239 MB/sec
[info]                  ·gc.alloc.rate.norm:       5128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.353 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5238.125 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   200670.503 ±(99.9%) 12363.745 ops/s [Average]
[info]   (min, avg, max) = (195172.604, 200670.503, 203222.170), stdev = 3210.825
[info]   CI (99.9%): [188306.758, 213034.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   653.785 ±(99.9%) 40.512 MB/sec [Average]
[info]   (min, avg, max) = (635.826, 653.785, 662.364), stdev = 10.521
[info]   CI (99.9%): [613.273, 694.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5128.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5128.002, 5128.002, 5128.002), stdev = 0.001
[info]   CI (99.9%): [5128.002, 5128.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   671.144 ±(99.9%) 1.206 MB/sec [Average]
[info]   (min, avg, max) = (670.638, 671.144, 671.367), stdev = 0.313
[info]   CI (99.9%): [669.938, 672.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   5265.281 ±(99.9%) 334.428 B/op [Average]
[info]   (min, avg, max) = (5195.184, 5265.281, 5414.639), stdev = 86.850
[info]   CI (99.9%): [4930.852, 5599.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   2.076 ±(99.9%) 10.949 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.076, 5.223), stdev = 2.843
[info]   CI (99.9%): [≈ 0, 13.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 58.21% complete, ETA 00:36:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 93366.221 ops/s
[info] # Warmup Iteration   2: 124950.456 ops/s
[info] # Warmup Iteration   3: 123646.208 ops/s
[info] Iteration   1: 124574.592 ops/s
[info]                  ·gc.alloc.rate:                                  1533.872 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.057 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.717 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21334.758 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                42.080 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 127444.262 ops/s
[info]                  ·gc.alloc.rate:                                  1569.367 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.070 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.860 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.386 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16815.124 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   3: 126990.369 ops/s
[info]                  ·gc.alloc.rate:                                  1563.809 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21094.039 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 127249.465 ops/s
[info]                  ·gc.alloc.rate:            1567.106 MB/sec
[info]                  ·gc.alloc.rate.norm:       19384.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16840.359 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 123946.907 ops/s
[info]                  ·gc.alloc.rate:                                  1526.550 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19384.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21611.839 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce":
[info]   126041.119 ±(99.9%) 6346.676 ops/s [Average]
[info]   (min, avg, max) = (123946.907, 126041.119, 127444.262), stdev = 1648.212
[info]   CI (99.9%): [119694.443, 132387.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate":
[info]   1552.141 ±(99.9%) 78.101 MB/sec [Average]
[info]   (min, avg, max) = (1526.550, 1552.141, 1569.367), stdev = 20.283
[info]   CI (99.9%): [1474.040, 1630.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   19384.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19384.003, 19384.003, 19384.004), stdev = 0.001
[info]   CI (99.9%): [19384.003, 19384.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.070), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.335 ±(99.9%) 1.611 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.335, 0.860), stdev = 0.418
[info]   CI (99.9%): [≈ 0, 1.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1562.970 ±(99.9%) 708.785 MB/sec [Average]
[info]   (min, avg, max) = (1361.386, 1562.970, 1701.998), stdev = 184.069
[info]   CI (99.9%): [854.186, 2271.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   19539.224 ±(99.9%) 9557.380 B/op [Average]
[info]   (min, avg, max) = (16815.124, 19539.224, 21611.839), stdev = 2482.021
[info]   CI (99.9%): [9981.844, 29096.604] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   8.416 ±(99.9%) 72.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.416, 42.080), stdev = 18.819
[info]   CI (99.9%): [≈ 0, 80.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 4.930
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.46% complete, ETA 00:35:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104601.924 ops/s
[info] # Warmup Iteration   2: 157196.274 ops/s
[info] # Warmup Iteration   3: 157587.588 ops/s
[info] Iteration   1: 161148.353 ops/s
[info]                  ·gc.alloc.rate:            859.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.965 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9856.383 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 162928.679 ops/s
[info]                  ·gc.alloc.rate:            869.823 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.005 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6499.305 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 162723.258 ops/s
[info]                  ·gc.alloc.rate:            868.335 MB/sec
[info]                  ·gc.alloc.rate.norm:       8400.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9761.178 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 164233.381 ops/s
[info]                  ·gc.alloc.rate:                                  876.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.125 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.199 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.385 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9748.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                38.304 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 166196.339 ops/s
[info]                  ·gc.alloc.rate:                                  887.000 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8400.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.254 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6447.263 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   163446.002 ±(99.9%) 7268.821 ops/s [Average]
[info]   (min, avg, max) = (161148.353, 163446.002, 166196.339), stdev = 1887.690
[info]   CI (99.9%): [156177.181, 170714.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   872.340 ±(99.9%) 39.044 MB/sec [Average]
[info]   (min, avg, max) = (859.880, 872.340, 887.000), stdev = 10.140
[info]   CI (99.9%): [833.297, 911.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8400.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8400.002, 8400.003, 8400.003), stdev = 0.001
[info]   CI (99.9%): [8400.002, 8400.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.125), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.291 ±(99.9%) 2.001 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.291, 1.199), stdev = 0.520
[info]   CI (99.9%): [≈ 0, 2.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   877.840 ±(99.9%) 706.525 MB/sec [Average]
[info]   (min, avg, max) = (673.005, 877.840, 1017.385), stdev = 183.482
[info]   CI (99.9%): [171.314, 1584.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   8462.495 ±(99.9%) 6994.562 B/op [Average]
[info]   (min, avg, max) = (6447.263, 8462.495, 9856.383), stdev = 1816.466
[info]   CI (99.9%): [1467.933, 15457.057] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.800 ±(99.9%) 6.884 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.800, 3.998), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.661 ±(99.9%) 65.962 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.661, 38.304), stdev = 17.130
[info]   CI (99.9%): [≈ 0, 73.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.400, 13.000), stdev = 4.506
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 58.71% complete, ETA 00:35:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 292272.182 ops/s
[info] # Warmup Iteration   2: 313236.950 ops/s
[info] # Warmup Iteration   3: 322513.647 ops/s
[info] Iteration   1: 323937.238 ops/s
[info]                  ·gc.alloc.rate:            628.973 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.095 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3275.232 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 314464.305 ops/s
[info]                  ·gc.alloc.rate:            610.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.130 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3374.050 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 311029.904 ops/s
[info]                  ·gc.alloc.rate:            603.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1705.687 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 310479.769 ops/s
[info]                  ·gc.alloc.rate:            602.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.258 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3417.427 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 322476.506 ops/s
[info]                  ·gc.alloc.rate:            626.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       3056.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.088 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3290.211 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   316477.544 ±(99.9%) 24455.212 ops/s [Average]
[info]   (min, avg, max) = (310479.769, 316477.544, 323937.238), stdev = 6350.941
[info]   CI (99.9%): [292022.333, 340932.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   614.521 ±(99.9%) 47.288 MB/sec [Average]
[info]   (min, avg, max) = (602.949, 614.521, 628.973), stdev = 12.281
[info]   CI (99.9%): [567.233, 661.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   606.737 ±(99.9%) 580.380 MB/sec [Average]
[info]   (min, avg, max) = (337.116, 606.737, 674.258), stdev = 150.723
[info]   CI (99.9%): [26.357, 1187.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3012.521 ±(99.9%) 2822.155 B/op [Average]
[info]   (min, avg, max) = (1705.687, 3012.521, 3417.427), stdev = 732.905
[info]   CI (99.9%): [190.367, 5834.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 58.96% complete, ETA 00:35:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27697.186 ops/s
[info] # Warmup Iteration   2: 62007.486 ops/s
[info] # Warmup Iteration   3: 62500.208 ops/s
[info] Iteration   1: 64520.226 ops/s
[info]                  ·gc.alloc.rate:                                  2723.077 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.252 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.943 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66428.717 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 64248.833 ops/s
[info]                  ·gc.alloc.rate:                                  2711.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.525 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66706.796 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 63738.803 ops/s
[info]                  ·gc.alloc.rate:                                  2690.026 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.763 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67240.450 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 63152.726 ops/s
[info]                  ·gc.alloc.rate:                                  2666.131 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.161 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59381.235 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 64516.981 ops/s
[info]                  ·gc.alloc.rate:                                  2723.101 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66432.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.224 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66425.629 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson":
[info]   64035.514 ±(99.9%) 2261.425 ops/s [Average]
[info]   (min, avg, max) = (63152.726, 64035.514, 64520.226), stdev = 587.285
[info]   CI (99.9%): [61774.089, 66296.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2702.729 ±(99.9%) 94.390 MB/sec [Average]
[info]   (min, avg, max) = (2666.131, 2702.729, 2723.101), stdev = 24.513
[info]   CI (99.9%): [2608.339, 2797.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66432.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66432.006, 66432.006, 66432.007), stdev = 0.001
[info]   CI (99.9%): [66432.006, 66432.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.016 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.005, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.132 ±(99.9%) 0.385 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.132, 0.252), stdev = 0.100
[info]   CI (99.9%): [≈ 0, 0.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2654.846 ±(99.9%) 584.824 MB/sec [Average]
[info]   (min, avg, max) = (2383.161, 2654.846, 2722.943), stdev = 151.877
[info]   CI (99.9%): [2070.022, 3239.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65236.565 ±(99.9%) 12668.724 B/op [Average]
[info]   (min, avg, max) = (59381.235, 65236.565, 67240.450), stdev = 3290.027
[info]   CI (99.9%): [52567.842, 77905.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 59.20% complete, ETA 00:35:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 130545.050 ops/s
[info] # Warmup Iteration   2: 168200.549 ops/s
[info] # Warmup Iteration   3: 169002.200 ops/s
[info] Iteration   1: 168348.201 ops/s
[info]                  ·gc.alloc.rate:            826.414 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.955 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9453.700 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 168931.567 ops/s
[info]                  ·gc.alloc.rate:            829.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6280.682 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 168059.973 ops/s
[info]                  ·gc.alloc.rate:            825.013 MB/sec
[info]                  ·gc.alloc.rate.norm:       7728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.971 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9469.898 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 168535.494 ops/s
[info]                  ·gc.alloc.rate:                   827.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              7728.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.072 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6295.437 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 31.104 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 169641.271 ops/s
[info]                  ·gc.alloc.rate:                                  832.869 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7728.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.720 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9474.191 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce":
[info]   168703.301 ±(99.9%) 2358.044 ops/s [Average]
[info]   (min, avg, max) = (168059.973, 168703.301, 169641.271), stdev = 612.376
[info]   CI (99.9%): [166345.258, 171061.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate":
[info]   828.213 ±(99.9%) 11.699 MB/sec [Average]
[info]   (min, avg, max) = (825.013, 828.213, 832.869), stdev = 3.038
[info]   CI (99.9%): [816.514, 839.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7728.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7728.002, 7728.002, 7728.003), stdev = 0.001
[info]   CI (99.9%): [7728.002, 7728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.319 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.185), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.344 ±(99.9%) 2.961 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.344, 1.720), stdev = 0.769
[info]   CI (99.9%): [≈ 0, 3.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.210 ±(99.9%) 717.892 MB/sec [Average]
[info]   (min, avg, max) = (673.991, 878.210, 1021.061), stdev = 186.434
[info]   CI (99.9%): [160.318, 1596.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8194.782 ±(99.9%) 6702.491 B/op [Average]
[info]   (min, avg, max) = (6280.682, 8194.782, 9474.191), stdev = 1740.616
[info]   CI (99.9%): [1492.290, 14897.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   6.221 ±(99.9%) 53.563 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.221, 31.104), stdev = 13.910
[info]   CI (99.9%): [≈ 0, 59.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.45% complete, ETA 00:35:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 194242.693 ops/s
[info] # Warmup Iteration   2: 291995.364 ops/s
[info] # Warmup Iteration   3: 288237.603 ops/s
[info] Iteration   1: 285556.548 ops/s
[info]                  ·gc.alloc.rate:            281.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1854.113 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 274621.885 ops/s
[info]                  ·gc.alloc.rate:      270.737 MB/sec
[info]                  ·gc.alloc.rate.norm: 1552.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 289049.090 ops/s
[info]                  ·gc.alloc.rate:            284.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1831.672 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 289752.019 ops/s
[info]                  ·gc.alloc.rate:            285.684 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.347 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1827.235 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 289183.273 ops/s
[info]                  ·gc.alloc.rate:            285.122 MB/sec
[info]                  ·gc.alloc.rate.norm:       1552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1830.823 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   285632.563 ±(99.9%) 24542.451 ops/s [Average]
[info]   (min, avg, max) = (274621.885, 285632.563, 289752.019), stdev = 6373.597
[info]   CI (99.9%): [261090.112, 310175.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   281.629 ±(99.9%) 24.246 MB/sec [Average]
[info]   (min, avg, max) = (270.737, 281.629, 285.684), stdev = 6.297
[info]   CI (99.9%): [257.383, 305.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.002), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   269.093 ±(99.9%) 579.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 269.093, 336.424), stdev = 150.428
[info]   CI (99.9%): [≈ 0, 848.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1468.769 ±(99.9%) 3161.899 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1468.769, 1854.113), stdev = 821.135
[info]   CI (99.9%): [≈ 0, 4630.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 59.70% complete, ETA 00:34:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1102745.397 ops/s
[info] # Warmup Iteration   2: 1212665.977 ops/s
[info] # Warmup Iteration   3: 1257945.072 ops/s
[info] Iteration   1: 1253358.746 ops/s
[info]                  ·gc.alloc.rate:            929.974 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1267.274 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1258572.050 ops/s
[info]                  ·gc.alloc.rate:            933.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.970 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1262.054 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 1234241.117 ops/s
[info]                  ·gc.alloc.rate:                   915.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1287.746 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.946 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 1216565.073 ops/s
[info]                  ·gc.alloc.rate:                                  902.742 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.089 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.116 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       880.762 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 1240140.623 ops/s
[info]                  ·gc.alloc.rate:                                  920.217 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1168.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.019 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1295.994 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1240575.522 ±(99.9%) 63974.637 ops/s [Average]
[info]   (min, avg, max) = (1216565.073, 1240575.522, 1258572.050), stdev = 16614.010
[info]   CI (99.9%): [1176600.885, 1304550.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   920.494 ±(99.9%) 47.315 MB/sec [Average]
[info]   (min, avg, max) = (902.742, 920.494, 933.778), stdev = 12.288
[info]   CI (99.9%): [873.179, 967.809] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.089), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.116), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   945.886 ±(99.9%) 571.095 MB/sec [Average]
[info]   (min, avg, max) = (680.737, 945.886, 1021.058), stdev = 148.311
[info]   CI (99.9%): [374.791, 1516.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1198.766 ±(99.9%) 686.657 B/op [Average]
[info]   (min, avg, max) = (880.762, 1198.766, 1295.994), stdev = 178.323
[info]   CI (99.9%): [512.109, 1885.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.189 ±(99.9%) 10.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.189, 5.946), stdev = 2.659
[info]   CI (99.9%): [≈ 0, 11.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.800, 10.000), stdev = 3.962
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 59.95% complete, ETA 00:34:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100141.497 ops/s
[info] # Warmup Iteration   2: 1191956.981 ops/s
[info] # Warmup Iteration   3: 1195598.435 ops/s
[info] Iteration   1: 1180002.702 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1194181.480 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1193008.999 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1167152.374 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1132279.250 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1173324.961 ±(99.9%) 97981.660 ops/s [Average]
[info]   (min, avg, max) = (1132279.250, 1173324.961, 1194181.480), stdev = 25445.526
[info]   CI (99.9%): [1075343.301, 1271306.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 60.20% complete, ETA 00:34:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 158712.197 ops/s
[info] # Warmup Iteration   2: 294724.769 ops/s
[info] # Warmup Iteration   3: 295196.460 ops/s
[info] Iteration   1: 294162.018 ops/s
[info]                  ·gc.alloc.rate:                   800.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.242 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3596.091 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.564 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 293897.323 ops/s
[info]                  ·gc.alloc.rate:                   799.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.094 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3599.419 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 293585.311 ops/s
[info]                  ·gc.alloc.rate:                   798.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5403.117 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 295627.473 ops/s
[info]                  ·gc.alloc.rate:                   803.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              4280.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.175 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3578.346 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 24.825 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 290125.481 ops/s
[info]                  ·gc.alloc.rate:                                  788.822 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4280.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.373 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.675 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3693.212 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson":
[info]   293479.521 ±(99.9%) 7824.210 ops/s [Average]
[info]   (min, avg, max) = (290125.481, 293479.521, 295627.473), stdev = 2031.922
[info]   CI (99.9%): [285655.311, 301303.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   798.056 ±(99.9%) 21.590 MB/sec [Average]
[info]   (min, avg, max) = (788.822, 798.056, 803.978), stdev = 5.607
[info]   CI (99.9%): [776.467, 819.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4280.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4280.001, 4280.001, 4280.001), stdev = 0.001
[info]   CI (99.9%): [4280.001, 4280.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.069), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.075 ±(99.9%) 0.643 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.373), stdev = 0.167
[info]   CI (99.9%): [≈ 0, 0.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   740.972 ±(99.9%) 574.275 MB/sec [Average]
[info]   (min, avg, max) = (672.094, 740.972, 1007.676), stdev = 149.138
[info]   CI (99.9%): [166.697, 1315.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   3974.037 ±(99.9%) 3081.047 B/op [Average]
[info]   (min, avg, max) = (3578.346, 3974.037, 5403.117), stdev = 800.138
[info]   CI (99.9%): [892.990, 7055.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 7.118 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 4.663), stdev = 1.849
[info]   CI (99.9%): [≈ 0, 8.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.820 ±(99.9%) 37.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.820, 24.825), stdev = 9.836
[info]   CI (99.9%): [≈ 0, 45.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 13.000), stdev = 3.194
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 60.45% complete, ETA 00:34:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2627.115 ops/s
[info] # Warmup Iteration   2: 4377.524 ops/s
[info] # Warmup Iteration   3: 4461.921 ops/s
[info] Iteration   1: 4461.903 ops/s
[info]                  ·gc.alloc.rate:            878.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1002.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 353753.462 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 4441.821 ops/s
[info]                  ·gc.alloc.rate:            874.520 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.185 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 355425.491 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 4452.627 ops/s
[info]                  ·gc.alloc.rate:            876.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       309840.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.643 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 236365.133 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 4426.637 ops/s
[info]                  ·gc.alloc.rate:                   871.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              309840.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.361 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        358523.953 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2131.252 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 4508.346 ops/s
[info]                  ·gc.alloc.rate:                                  887.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             309840.098 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.148 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 51.697 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.609 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       237615.227 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   4458.267 ±(99.9%) 119.056 ops/s [Average]
[info]   (min, avg, max) = (4426.637, 4458.267, 4508.346), stdev = 30.919
[info]   CI (99.9%): [4339.210, 4577.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   877.640 ±(99.9%) 23.331 MB/sec [Average]
[info]   (min, avg, max) = (871.436, 877.640, 887.484), stdev = 6.059
[info]   CI (99.9%): [854.310, 900.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   309840.096 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (309840.092, 309840.096, 309840.106), stdev = 0.006
[info]   CI (99.9%): [309840.072, 309840.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.030 ±(99.9%) 0.255 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.030, 0.148), stdev = 0.066
[info]   CI (99.9%): [≈ 0, 0.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   10.339 ±(99.9%) 89.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.339, 51.697), stdev = 23.119
[info]   CI (99.9%): [≈ 0, 99.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   872.708 ±(99.9%) 696.528 MB/sec [Average]
[info]   (min, avg, max) = (668.643, 872.708, 1008.361), stdev = 180.886
[info]   CI (99.9%): [176.180, 1569.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   308336.653 ±(99.9%) 250885.263 B/op [Average]
[info]   (min, avg, max) = (236365.133, 308336.653, 358523.953), stdev = 65154.106
[info]   CI (99.9%): [57451.391, 559221.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 10.322 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.994), stdev = 2.681
[info]   CI (99.9%): [≈ 0, 11.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   426.250 ±(99.9%) 3670.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 426.250, 2131.252), stdev = 953.125
[info]   CI (99.9%): [≈ 0, 4096.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   52.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 10.400, 13.000), stdev = 2.074
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.70% complete, ETA 00:33:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2104.819 ops/s
[info] # Warmup Iteration   2: 4200.386 ops/s
[info] # Warmup Iteration   3: 4257.224 ops/s
[info] Iteration   1: 4205.385 ops/s
[info]                  ·gc.alloc.rate:            781.252 MB/sec
[info]                  ·gc.alloc.rate.norm:       292392.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.187 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 374705.118 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 4426.605 ops/s
[info]                  ·gc.alloc.rate:            822.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       292392.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 237279.393 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 4401.590 ops/s
[info]                  ·gc.alloc.rate:            817.633 MB/sec
[info]                  ·gc.alloc.rate.norm:       292392.093 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 357939.979 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   4: 4430.281 ops/s
[info]                  ·gc.alloc.rate:                   823.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              292392.092 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        237065.242 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2129.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 4372.656 ops/s
[info]                  ·gc.alloc.rate:                                  812.314 MB/sec
[info]                  ·gc.alloc.rate.norm:                             292392.093 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.915 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       367265.302 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                239.729 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala":
[info]   4367.303 ±(99.9%) 359.704 ops/s [Average]
[info]   (min, avg, max) = (4205.385, 4367.303, 4430.281), stdev = 93.414
[info]   CI (99.9%): [4007.600, 4727.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   811.389 ±(99.9%) 67.028 MB/sec [Average]
[info]   (min, avg, max) = (781.252, 811.389, 823.152), stdev = 17.407
[info]   CI (99.9%): [744.361, 878.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   292392.096 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (292392.092, 292392.096, 292392.105), stdev = 0.005
[info]   CI (99.9%): [292392.075, 292392.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.009 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.383 ±(99.9%) 3.298 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.383, 1.915), stdev = 0.856
[info]   CI (99.9%): [≈ 0, 3.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   871.475 ±(99.9%) 717.750 MB/sec [Average]
[info]   (min, avg, max) = (667.394, 871.475, 1020.324), stdev = 186.397
[info]   CI (99.9%): [153.725, 1589.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   314851.007 ±(99.9%) 274007.971 B/op [Average]
[info]   (min, avg, max) = (237065.242, 314851.007, 374705.118), stdev = 71159.000
[info]   CI (99.9%): [40843.036, 588858.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.995), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   473.812 ±(99.9%) 3585.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 473.812, 2129.329), stdev = 931.266
[info]   CI (99.9%): [≈ 0, 4059.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 11.800, 16.000), stdev = 4.550
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 60.95% complete, ETA 00:33:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 23401.817 ops/s
[info] # Warmup Iteration   2: 29686.984 ops/s
[info] # Warmup Iteration   3: 30527.315 ops/s
[info] Iteration   1: 30168.091 ops/s
[info]                  ·gc.alloc.rate:            494.459 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:      334.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17445.569 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 30007.583 ops/s
[info]                  ·gc.alloc.rate:                   491.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:             668.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35078.312 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 30725.738 ops/s
[info]                  ·gc.alloc.rate:            503.680 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.073 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17163.480 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 30706.794 ops/s
[info]                  ·gc.alloc.rate:                   503.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              25800.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:             669.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34314.053 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 34.143 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 30937.289 ops/s
[info]                  ·gc.alloc.rate:            507.065 MB/sec
[info]                  ·gc.alloc.rate.norm:       25800.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      334.348 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 17011.995 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30509.099 ±(99.9%) 1536.845 ops/s [Average]
[info]   (min, avg, max) = (30007.583, 30509.099, 30937.289), stdev = 399.114
[info]   CI (99.9%): [28972.254, 32045.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   500.084 ±(99.9%) 25.175 MB/sec [Average]
[info]   (min, avg, max) = (491.889, 500.084, 507.065), stdev = 6.538
[info]   CI (99.9%): [474.909, 525.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   25800.014 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (25800.013, 25800.014, 25800.017), stdev = 0.002
[info]   CI (99.9%): [25800.008, 25800.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   468.396 ±(99.9%) 705.525 MB/sec [Average]
[info]   (min, avg, max) = (334.345, 468.396, 669.426), stdev = 183.223
[info]   CI (99.9%): [≈ 0, 1173.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24202.682 ±(99.9%) 36905.669 B/op [Average]
[info]   (min, avg, max) = (17011.995, 24202.682, 35078.312), stdev = 9584.285
[info]   CI (99.9%): [≈ 0, 61108.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   13.816 ±(99.9%) 72.858 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 13.816, 34.939), stdev = 18.921
[info]   CI (99.9%): [≈ 0, 86.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 8.000), stdev = 2.191
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 61.19% complete, ETA 00:33:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1643.597 ops/s
[info] # Warmup Iteration   2: 3771.430 ops/s
[info] # Warmup Iteration   3: 3755.323 ops/s
[info] Iteration   1: 3850.197 ops/s
[info]                  ·gc.alloc.rate:            982.073 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.114 B/op
[info]                  ·gc.churn.G1_Old_Gen:      998.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 407659.009 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 3873.965 ops/s
[info]                  ·gc.alloc.rate:            986.791 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.105 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.245 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 271141.459 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3823.642 ops/s
[info]                  ·gc.alloc.rate:                   974.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              400992.107 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.940 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        412028.687 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2467.238 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 3823.938 ops/s
[info]                  ·gc.alloc.rate:                                  974.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             400992.107 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.040 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.414 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       419978.675 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                274.138 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3735.280 ops/s
[info]                  ·gc.alloc.rate:            951.696 MB/sec
[info]                  ·gc.alloc.rate.norm:       400992.109 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1020.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 430149.052 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   3821.404 ±(99.9%) 202.117 ops/s [Average]
[info]   (min, avg, max) = (3735.280, 3821.404, 3873.965), stdev = 52.489
[info]   CI (99.9%): [3619.288, 4023.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   973.776 ±(99.9%) 51.878 MB/sec [Average]
[info]   (min, avg, max) = (951.696, 973.776, 986.791), stdev = 13.473
[info]   CI (99.9%): [921.898, 1025.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   400992.108 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (400992.105, 400992.108, 400992.114), stdev = 0.003
[info]   CI (99.9%): [400992.095, 400992.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.069 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   3.283 ±(99.9%) 28.266 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.283, 16.414), stdev = 7.341
[info]   CI (99.9%): [≈ 0, 31.549] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   941.560 ±(99.9%) 591.870 MB/sec [Average]
[info]   (min, avg, max) = (667.245, 941.560, 1020.896), stdev = 153.707
[info]   CI (99.9%): [349.690, 1533.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   388191.376 ±(99.9%) 254104.342 B/op [Average]
[info]   (min, avg, max) = (271141.459, 388191.376, 430149.052), stdev = 65990.091
[info]   CI (99.9%): [134087.034, 642295.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.096 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.994), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   548.275 ±(99.9%) 4155.925 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 548.275, 2467.238), stdev = 1079.280
[info]   CI (99.9%): [≈ 0, 4704.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 16.000), stdev = 6.535
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 61.44% complete, ETA 00:33:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9641.501 ops/s
[info] # Warmup Iteration   2: 13021.591 ops/s
[info] # Warmup Iteration   3: 13224.587 ops/s
[info] Iteration   1: 13603.932 ops/s
[info]                  ·gc.alloc.rate:            852.774 MB/sec
[info]                  ·gc.alloc.rate.norm:       98672.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116054.638 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 13680.754 ops/s
[info]                  ·gc.alloc.rate:            857.669 MB/sec
[info]                  ·gc.alloc.rate.norm:       98680.189 B/op
[info]                  ·gc.churn.G1_Old_Gen:      668.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 76934.398 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 13588.504 ops/s
[info]                  ·gc.alloc.rate:            852.491 MB/sec
[info]                  ·gc.alloc.rate.norm:       98736.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1003.126 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 116182.715 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 13470.849 ops/s
[info]                  ·gc.alloc.rate:                   845.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.452 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        117822.775 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 700.400 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 13175.795 ops/s
[info]                  ·gc.alloc.rate:                                  826.538 MB/sec
[info]                  ·gc.alloc.rate.norm:                             98736.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.232 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.718 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81314.567 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   13503.967 ±(99.9%) 763.328 ops/s [Average]
[info]   (min, avg, max) = (13175.795, 13503.967, 13680.754), stdev = 198.234
[info]   CI (99.9%): [12740.639, 14267.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   846.912 ±(99.9%) 47.146 MB/sec [Average]
[info]   (min, avg, max) = (826.538, 846.912, 857.669), stdev = 12.244
[info]   CI (99.9%): [799.766, 894.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98712.065 ±(99.9%) 126.870 B/op [Average]
[info]   (min, avg, max) = (98672.032, 98712.065, 98736.039), stdev = 32.948
[info]   CI (99.9%): [98585.194, 98838.935] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.046 ±(99.9%) 0.400 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.232), stdev = 0.104
[info]   CI (99.9%): [≈ 0, 0.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.544 ±(99.9%) 47.732 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.544, 27.718), stdev = 12.396
[info]   CI (99.9%): [≈ 0, 53.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   872.790 ±(99.9%) 696.616 MB/sec [Average]
[info]   (min, avg, max) = (668.667, 872.790, 1008.452), stdev = 180.909
[info]   CI (99.9%): [176.174, 1569.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   101661.818 ±(99.9%) 79491.369 B/op [Average]
[info]   (min, avg, max) = (76934.398, 101661.818, 117822.775), stdev = 20643.656
[info]   CI (99.9%): [22170.449, 181153.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 10.323 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 5.995), stdev = 2.681
[info]   CI (99.9%): [≈ 0, 11.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   140.080 ±(99.9%) 1206.130 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 140.080, 700.400), stdev = 313.228
[info]   CI (99.9%): [≈ 0, 1346.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.000, 13.000), stdev = 4.359
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.69% complete, ETA 00:33:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9547.163 ops/s
[info] # Warmup Iteration   2: 15275.672 ops/s
[info] # Warmup Iteration   3: 15215.425 ops/s
[info] Iteration   1: 15346.523 ops/s
[info]                  ·gc.alloc.rate:            794.830 MB/sec
[info]                  ·gc.alloc.rate.norm:       81535.899 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.287 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68452.222 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 15195.542 ops/s
[info]                  ·gc.alloc.rate:            787.078 MB/sec
[info]                  ·gc.alloc.rate.norm:       81536.140 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1000.949 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 103691.672 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   3: 15415.382 ops/s
[info]                  ·gc.alloc.rate:            798.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       81535.917 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68141.459 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 15604.881 ops/s
[info]                  ·gc.alloc.rate:                   808.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              81536.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        67316.322 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.995 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 604.638 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 16162.391 ops/s
[info]                  ·gc.alloc.rate:                                  837.243 MB/sec
[info]                  ·gc.alloc.rate.norm:                             81536.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.099 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 9.633 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.372 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       99370.186 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                64.863 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala":
[info]   15544.944 ±(99.9%) 1444.726 ops/s [Average]
[info]   (min, avg, max) = (15195.542, 15544.944, 16162.391), stdev = 375.191
[info]   CI (99.9%): [14100.217, 16989.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   805.218 ±(99.9%) 75.000 MB/sec [Average]
[info]   (min, avg, max) = (787.078, 805.218, 837.243), stdev = 19.477
[info]   CI (99.9%): [730.218, 880.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   81536.025 ±(99.9%) 0.468 B/op [Average]
[info]   (min, avg, max) = (81535.899, 81536.025, 81536.160), stdev = 0.122
[info]   CI (99.9%): [81535.557, 81536.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.099), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.927 ±(99.9%) 16.588 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.927, 9.633), stdev = 4.308
[info]   CI (99.9%): [≈ 0, 18.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   804.676 ±(99.9%) 724.545 MB/sec [Average]
[info]   (min, avg, max) = (667.287, 804.676, 1020.372), stdev = 188.162
[info]   CI (99.9%): [80.131, 1529.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   81394.372 ±(99.9%) 71044.901 B/op [Average]
[info]   (min, avg, max) = (67316.322, 81394.372, 103691.672), stdev = 18450.135
[info]   CI (99.9%): [10349.471, 152439.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 10.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.995), stdev = 2.622
[info]   CI (99.9%): [≈ 0, 11.430] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   133.900 ±(99.9%) 1019.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 133.900, 604.638), stdev = 264.645
[info]   CI (99.9%): [≈ 0, 1152.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.200, 16.000), stdev = 4.266
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 61.94% complete, ETA 00:32:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 244237.764 ops/s
[info] # Warmup Iteration   2: 270096.383 ops/s
[info] # Warmup Iteration   3: 275337.221 ops/s
[info] Iteration   1: 279434.488 ops/s
[info]                  ·gc.alloc.rate:                   985.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1003.665 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5654.066 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.752 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 281198.898 ops/s
[info]                  ·gc.alloc.rate:                   992.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1004.612 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5622.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.728 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 277307.771 ops/s
[info]                  ·gc.alloc.rate:                   978.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.999 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5731.514 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 30.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 275968.167 ops/s
[info]                  ·gc.alloc.rate:                                  973.721 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.402 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.426 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5824.008 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 273841.945 ops/s
[info]                  ·gc.alloc.rate:                                  965.927 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5552.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5869.153 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   277550.254 ±(99.9%) 11089.636 ops/s [Average]
[info]   (min, avg, max) = (273841.945, 277550.254, 281198.898), stdev = 2879.943
[info]   CI (99.9%): [266460.618, 288639.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   979.116 ±(99.9%) 39.052 MB/sec [Average]
[info]   (min, avg, max) = (965.927, 979.116, 992.017), stdev = 10.142
[info]   CI (99.9%): [940.064, 1018.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.002, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.121 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.071), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.082 ±(99.9%) 0.689 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.402), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 0.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1012.161 ±(99.9%) 33.329 MB/sec [Average]
[info]   (min, avg, max) = (1003.665, 1012.161, 1021.426), stdev = 8.656
[info]   CI (99.9%): [978.832, 1045.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5740.246 ±(99.9%) 408.433 B/op [Average]
[info]   (min, avg, max) = (5622.491, 5740.246, 5869.153), stdev = 106.069
[info]   CI (99.9%): [5331.813, 6148.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 8.700 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 5.330), stdev = 2.259
[info]   CI (99.9%): [≈ 0, 10.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   7.545 ±(99.9%) 49.392 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.545, 30.245), stdev = 12.827
[info]   CI (99.9%): [≈ 0, 56.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.400, 13.000), stdev = 5.079
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 62.19% complete, ETA 00:32:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 287981.501 ops/s
[info] # Warmup Iteration   2: 317440.299 ops/s
[info] # Warmup Iteration   3: 311577.625 ops/s
[info] Iteration   1: 318753.060 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 315990.279 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 317297.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 315619.312 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 317800.703 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   317092.209 ±(99.9%) 4978.471 ops/s [Average]
[info]   (min, avg, max) = (315619.312, 317092.209, 318753.060), stdev = 1292.893
[info]   CI (99.9%): [312113.738, 322070.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 62.44% complete, ETA 00:32:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10363.330 ops/s
[info] # Warmup Iteration   2: 14240.580 ops/s
[info] # Warmup Iteration   3: 14908.519 ops/s
[info] Iteration   1: 14865.479 ops/s
[info]                  ·gc.alloc.rate:                   844.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1001.760 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106070.642 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.526 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 14843.774 ops/s
[info]                  ·gc.alloc.rate:                   843.824 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.030 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.471 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70766.697 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 14841.828 ops/s
[info]                  ·gc.alloc.rate:                   843.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1002.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        106312.778 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 70.640 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   4: 14873.813 ops/s
[info]                  ·gc.alloc.rate:                   845.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             667.338 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        70628.741 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.994 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 634.390 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 14780.972 ops/s
[info]                  ·gc.alloc.rate:                                  840.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             89460.629 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.255 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.102 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1020.679 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       108659.255 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                70.926 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   14841.173 ±(99.9%) 140.001 ops/s [Average]
[info]   (min, avg, max) = (14780.972, 14841.173, 14873.813), stdev = 36.358
[info]   CI (99.9%): [14701.172, 14981.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   843.584 ±(99.9%) 7.540 MB/sec [Average]
[info]   (min, avg, max) = (840.339, 843.584, 845.303), stdev = 1.958
[info]   CI (99.9%): [836.044, 851.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   89463.345 ±(99.9%) 5.846 B/op [Average]
[info]   (min, avg, max) = (89460.629, 89463.345, 89464.030), stdev = 1.518
[info]   CI (99.9%): [89457.499, 89469.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.051 ±(99.9%) 0.438 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.051, 0.255), stdev = 0.114
[info]   CI (99.9%): [≈ 0, 0.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.420 ±(99.9%) 46.671 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.420, 27.102), stdev = 12.120
[info]   CI (99.9%): [≈ 0, 52.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   871.928 ±(99.9%) 719.524 MB/sec [Average]
[info]   (min, avg, max) = (667.338, 871.928, 1020.679), stdev = 186.858
[info]   CI (99.9%): [152.403, 1591.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   92487.623 ±(99.9%) 76693.681 B/op [Average]
[info]   (min, avg, max) = (70628.741, 92487.623, 108659.255), stdev = 19917.105
[info]   CI (99.9%): [15793.942, 169181.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.732 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (0.666, 1.732, 5.994), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.907] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   183.421 ±(99.9%) 970.744 B/op [Average]
[info]   (min, avg, max) = (70.526, 183.421, 634.390), stdev = 252.099
[info]   CI (99.9%): [≈ 0, 1154.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 10.800, 15.000), stdev = 4.550
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala
[info] # Run progress: 62.69% complete, ETA 00:32:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 571015.579 ops/s
[info] # Warmup Iteration   2: 642358.658 ops/s
[info] # Warmup Iteration   3: 650694.675 ops/s
[info] Iteration   1: 650569.951 ops/s
[info]                  ·gc.alloc.rate:      42.980 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 649684.180 ops/s
[info]                  ·gc.alloc.rate:      42.936 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 648593.415 ops/s
[info]                  ·gc.alloc.rate:      42.861 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 650428.563 ops/s
[info]                  ·gc.alloc.rate:      42.972 MB/sec
[info]                  ·gc.alloc.rate.norm: 104.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 622291.770 ops/s
[info]                  ·gc.alloc.rate:            41.133 MB/sec
[info]                  ·gc.alloc.rate.norm:       104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.170 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 862.616 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala":
[info]   644313.576 ±(99.9%) 47499.517 ops/s [Average]
[info]   (min, avg, max) = (622291.770, 644313.576, 650569.951), stdev = 12335.474
[info]   CI (99.9%): [596814.058, 691813.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   42.576 ±(99.9%) 3.112 MB/sec [Average]
[info]   (min, avg, max) = (41.133, 42.576, 42.980), stdev = 0.808
[info]   CI (99.9%): [39.464, 45.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.001, 104.001, 104.001), stdev = 0.001
[info]   CI (99.9%): [104.001, 104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   68.234 ±(99.9%) 587.516 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 68.234, 341.170), stdev = 152.576
[info]   CI (99.9%): [≈ 0, 655.750] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   172.523 ±(99.9%) 1485.478 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 172.523, 862.616), stdev = 385.774
[info]   CI (99.9%): [≈ 0, 1658.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readJsoniterScala:·gc.time":
[info]   3.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 3.000), stdev = 1.342
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson
[info] # Run progress: 62.94% complete, ETA 00:32:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25483.422 ops/s
[info] # Warmup Iteration   2: 66043.455 ops/s
[info] # Warmup Iteration   3: 66773.531 ops/s
[info] Iteration   1: 67073.748 ops/s
[info]                  ·gc.alloc.rate:                                  3025.839 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.344 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       71888.152 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 68580.753 ops/s
[info]                  ·gc.alloc.rate:                                  3093.982 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.246 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.465 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70307.640 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 69152.780 ops/s
[info]                  ·gc.alloc.rate:                                  3119.466 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.351 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.154 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       69726.165 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 68332.230 ops/s
[info]                  ·gc.alloc.rate:                                  3084.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.249 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70562.773 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 68751.765 ops/s
[info]                  ·gc.alloc.rate:                                  3101.675 MB/sec
[info]                  ·gc.alloc.rate.norm:                             71008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.311 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70129.734 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson":
[info]   68378.255 ±(99.9%) 3034.603 ops/s [Average]
[info]   (min, avg, max) = (67073.748, 68378.255, 69152.780), stdev = 788.077
[info]   CI (99.9%): [65343.652, 71412.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3084.996 ±(99.9%) 136.788 MB/sec [Average]
[info]   (min, avg, max) = (3025.839, 3084.996, 3119.466), stdev = 35.523
[info]   CI (99.9%): [2948.207, 3221.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (71008.006, 71008.006, 71008.006), stdev = 0.001
[info]   CI (99.9%): [71008.005, 71008.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.023 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.008, 0.015), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.188 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.188, 0.351), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.591 ±(99.9%) 2.383 MB/sec [Average]
[info]   (min, avg, max) = (3063.154, 3063.591, 3064.680), stdev = 0.619
[info]   CI (99.9%): [3061.207, 3065.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   70522.893 ±(99.9%) 3164.334 B/op [Average]
[info]   (min, avg, max) = (69726.165, 70522.893, 71888.152), stdev = 821.767
[info]   CI (99.9%): [67358.559, 73687.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.000, 11.000), stdev = 1.225
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala
[info] # Run progress: 63.18% complete, ETA 00:31:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 631062.038 ops/s
[info] # Warmup Iteration   2: 981005.302 ops/s
[info] # Warmup Iteration   3: 1010658.778 ops/s
[info] Iteration   1: 1008343.188 ops/s
[info]                  ·gc.alloc.rate:                   579.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.475 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1047.992 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.040 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 975094.352 ops/s
[info]                  ·gc.alloc.rate:            559.953 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.323 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 542.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 966092.824 ops/s
[info]                  ·gc.alloc.rate:            554.907 MB/sec
[info]                  ·gc.alloc.rate.norm:       904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.798 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1096.057 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 969755.421 ops/s
[info]                  ·gc.alloc.rate:                   556.917 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1090.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.081 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 971939.039 ops/s
[info]                  ·gc.alloc.rate:                   558.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              904.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.696 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        543.655 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.079 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala":
[info]   978244.965 ±(99.9%) 66006.286 ops/s [Average]
[info]   (min, avg, max) = (966092.824, 978244.965, 1008343.188), stdev = 17141.623
[info]   CI (99.9%): [912238.679, 1044251.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   561.839 ±(99.9%) 38.072 MB/sec [Average]
[info]   (min, avg, max) = (554.907, 561.839, 579.216), stdev = 9.887
[info]   CI (99.9%): [523.767, 599.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   904.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (904.000, 904.000, 904.000), stdev = 0.001
[info]   CI (99.9%): [904.000, 904.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.663 ±(99.9%) 708.844 MB/sec [Average]
[info]   (min, avg, max) = (335.696, 537.663, 672.798), stdev = 184.085
[info]   CI (99.9%): [≈ 0, 1246.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   864.303 ±(99.9%) 1130.617 B/op [Average]
[info]   (min, avg, max) = (542.967, 864.303, 1096.057), stdev = 293.618
[info]   CI (99.9%): [≈ 0, 1994.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.640 ±(99.9%) 2.250 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 1.081), stdev = 0.584
[info]   CI (99.9%): [≈ 0, 2.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 9.000), stdev = 2.168
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala
[info] # Run progress: 63.43% complete, ETA 00:31:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 687079.976 ops/s
[info] # Warmup Iteration   2: 718429.045 ops/s
[info] # Warmup Iteration   3: 730464.500 ops/s
[info] Iteration   1: 729089.244 ops/s
[info]                  ·gc.alloc.rate:                   196.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        721.846 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.314 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 729134.871 ops/s
[info]                  ·gc.alloc.rate:      196.375 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 764027.328 ops/s
[info]                  ·gc.alloc.rate:            205.862 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.964 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 725722.984 ops/s
[info]                  ·gc.alloc.rate:            195.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       424.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.366 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 729.534 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 730904.468 ops/s
[info]                  ·gc.alloc.rate:      196.879 MB/sec
[info]                  ·gc.alloc.rate.norm: 424.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala":
[info]   735775.779 ±(99.9%) 61240.669 ops/s [Average]
[info]   (min, avg, max) = (725722.984, 735775.779, 764027.328), stdev = 15904.007
[info]   CI (99.9%): [674535.110, 797016.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   198.203 ±(99.9%) 16.598 MB/sec [Average]
[info]   (min, avg, max) = (195.494, 198.203, 205.862), stdev = 4.311
[info]   CI (99.9%): [181.605, 214.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.001, 424.001, 424.001), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   201.439 ±(99.9%) 708.092 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.439, 336.450), stdev = 183.889
[info]   CI (99.9%): [≈ 0, 909.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   428.869 ±(99.9%) 1508.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 428.869, 729.534), stdev = 391.739
[info]   CI (99.9%): [≈ 0, 1937.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 3.441 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.894
[info]   CI (99.9%): [≈ 0, 3.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.863 ±(99.9%) 7.429 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.863, 4.314), stdev = 1.929
[info]   CI (99.9%): [≈ 0, 8.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 63.68% complete, ETA 00:31:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 812653.984 ops/s
[info] # Warmup Iteration   2: 884056.464 ops/s
[info] # Warmup Iteration   3: 894219.712 ops/s
[info] Iteration   1: 894369.066 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 847314.852 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 878199.358 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 894310.754 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 894001.905 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   881639.187 ±(99.9%) 78572.189 ops/s [Average]
[info]   (min, avg, max) = (847314.852, 881639.187, 894369.066), stdev = 20404.948
[info]   CI (99.9%): [803066.997, 960211.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson
[info] # Run progress: 63.93% complete, ETA 00:31:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20044.335 ops/s
[info] # Warmup Iteration   2: 38713.466 ops/s
[info] # Warmup Iteration   3: 39326.785 ops/s
[info] Iteration   1: 39887.859 ops/s
[info]                  ·gc.alloc.rate:                                  1674.385 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66059.414 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.212 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.516 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66656.358 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                183.988 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 40454.562 ops/s
[info]                  ·gc.alloc.rate:                                  1698.316 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66214.668 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 39710.674 ops/s
[info]                  ·gc.alloc.rate:                                  1667.057 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.202 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67453.338 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 41122.709 ops/s
[info]                  ·gc.alloc.rate:                                  1726.459 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.250 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65137.653 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 40561.722 ops/s
[info]                  ·gc.alloc.rate:                                  1702.346 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66064.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.051 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66040.024 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson":
[info]   40347.505 ±(99.9%) 2174.097 ops/s [Average]
[info]   (min, avg, max) = (39710.674, 40347.505, 41122.709), stdev = 564.606
[info]   CI (99.9%): [38173.408, 42521.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1693.713 ±(99.9%) 91.369 MB/sec [Average]
[info]   (min, avg, max) = (1667.057, 1693.713, 1726.459), stdev = 23.728
[info]   CI (99.9%): [1602.344, 1785.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66063.091 ±(99.9%) 7.915 B/op [Average]
[info]   (min, avg, max) = (66059.414, 66063.091, 66064.011), stdev = 2.055
[info]   CI (99.9%): [66055.176, 66071.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.004, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.143 ±(99.9%) 0.289 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.143, 0.212), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.433] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.560 ±(99.9%) 21.635 MB/sec [Average]
[info]   (min, avg, max) = (1689.516, 1699.560, 1702.250), stdev = 5.618
[info]   CI (99.9%): [1677.925, 1721.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66300.408 ±(99.9%) 3269.136 B/op [Average]
[info]   (min, avg, max) = (65137.653, 66300.408, 67453.338), stdev = 848.984
[info]   CI (99.9%): [63031.272, 69569.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.798 ±(99.9%) 316.839 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.798, 183.988), stdev = 82.282
[info]   CI (99.9%): [≈ 0, 353.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 64.18% complete, ETA 00:30:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 409090.438 ops/s
[info] # Warmup Iteration   2: 721671.375 ops/s
[info] # Warmup Iteration   3: 730453.646 ops/s
[info] Iteration   1: 737204.857 ops/s
[info]                  ·gc.alloc.rate:                                  2409.113 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5087.096 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 735314.802 ops/s
[info]                  ·gc.alloc.rate:                                  2402.692 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5100.204 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 739480.137 ops/s
[info]                  ·gc.alloc.rate:                                  2417.411 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.276 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5071.365 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 744784.684 ops/s
[info]                  ·gc.alloc.rate:                                  2434.967 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5035.187 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 733133.398 ops/s
[info]                  ·gc.alloc.rate:                                  2395.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5144.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.647 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5115.375 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   737983.576 ±(99.9%) 17193.433 ops/s [Average]
[info]   (min, avg, max) = (733133.398, 737983.576, 744784.684), stdev = 4465.080
[info]   CI (99.9%): [720790.143, 755177.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2412.033 ±(99.9%) 58.027 MB/sec [Average]
[info]   (min, avg, max) = (2395.981, 2412.033, 2434.967), stdev = 15.069
[info]   CI (99.9%): [2354.006, 2470.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.001, 5144.001, 5144.001), stdev = 0.001
[info]   CI (99.9%): [5144.000, 5144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.007, 0.011), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2382.816 ±(99.9%) 2.034 MB/sec [Average]
[info]   (min, avg, max) = (2382.235, 2382.816, 2383.459), stdev = 0.528
[info]   CI (99.9%): [2380.782, 2384.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   5081.845 ±(99.9%) 118.304 B/op [Average]
[info]   (min, avg, max) = (5035.187, 5081.845, 5115.375), stdev = 30.723
[info]   CI (99.9%): [4963.542, 5200.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava
[info] # Run progress: 64.43% complete, ETA 00:30:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.839 ops/s
[info] # Warmup Iteration   2: 5185179.446 ops/s
[info] # Warmup Iteration   3: 5207002.634 ops/s
[info] Iteration   1: 5428991.337 ops/s
[info]                  ·gc.alloc.rate:      331.156 MB/sec
[info]                  ·gc.alloc.rate.norm: 96.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 5403482.108 ops/s
[info]                  ·gc.alloc.rate:            329.530 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 97.210 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 5481654.007 ops/s
[info]                  ·gc.alloc.rate:                   334.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.047 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        95.632 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.191 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5498051.469 ops/s
[info]                  ·gc.alloc.rate:            335.336 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.701 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 95.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 5492159.329 ops/s
[info]                  ·gc.alloc.rate:            334.959 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.378 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 191.272 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava":
[info]   5460867.650 ±(99.9%) 162265.673 ops/s [Average]
[info]   (min, avg, max) = (5403482.108, 5460867.650, 5498051.469), stdev = 42139.880
[info]   CI (99.9%): [5298601.977, 5623133.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   333.062 ±(99.9%) 9.908 MB/sec [Average]
[info]   (min, avg, max) = (329.530, 333.062, 335.336), stdev = 2.573
[info]   CI (99.9%): [323.154, 342.971] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.562 ±(99.9%) 908.575 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 333.562, 667.378), stdev = 235.954
[info]   CI (99.9%): [≈ 0, 1242.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   95.929 ±(99.9%) 260.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 95.929, 191.272), stdev = 67.629
[info]   CI (99.9%): [≈ 0, 356.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.038 ±(99.9%) 0.329 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.191), stdev = 0.086
[info]   CI (99.9%): [≈ 0, 0.368] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 1.000, 2.000), stdev = 0.707
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readDslJsonJava:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 5.000, 10.000), stdev = 3.536
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 64.68% complete, ETA 00:30:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 191322.087 ops/s
[info] # Warmup Iteration   2: 753987.394 ops/s
[info] # Warmup Iteration   3: 761522.474 ops/s
[info] Iteration   1: 761696.725 ops/s
[info]                  ·gc.alloc.rate:                   944.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2083.903 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.376 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 763839.697 ops/s
[info]                  ·gc.alloc.rate:                   947.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1384.899 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.373 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 760505.498 ops/s
[info]                  ·gc.alloc.rate:                   943.094 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2087.163 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.379 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   4: 763026.893 ops/s
[info]                  ·gc.alloc.rate:                                  946.531 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.207 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1016.711 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2096.729 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                9.618 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 801038.183 ops/s
[info]                  ·gc.alloc.rate:                                  993.417 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1952.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.110 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2006.414 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   770021.399 ±(99.9%) 66945.579 ops/s [Average]
[info]   (min, avg, max) = (760505.498, 770021.399, 801038.183), stdev = 17385.554
[info]   CI (99.9%): [703075.821, 836966.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   954.939 ±(99.9%) 83.062 MB/sec [Average]
[info]   (min, avg, max) = (943.094, 954.939, 993.417), stdev = 21.571
[info]   CI (99.9%): [871.877, 1038.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.045 ±(99.9%) 0.351 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.045, 0.207), stdev = 0.091
[info]   CI (99.9%): [≈ 0, 0.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.092 ±(99.9%) 0.725 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.092, 0.428), stdev = 0.188
[info]   CI (99.9%): [≈ 0, 0.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   945.304 ±(99.9%) 588.705 MB/sec [Average]
[info]   (min, avg, max) = (671.992, 945.304, 1021.110), stdev = 152.885
[info]   CI (99.9%): [356.599, 1534.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1931.822 ±(99.9%) 1185.508 B/op [Average]
[info]   (min, avg, max) = (1384.899, 1931.822, 2096.729), stdev = 307.873
[info]   CI (99.9%): [746.314, 3117.329] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 7.257 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 4.664), stdev = 1.885
[info]   CI (99.9%): [≈ 0, 8.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.749 ±(99.9%) 14.963 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.749, 9.618), stdev = 3.886
[info]   CI (99.9%): [≈ 0, 17.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 16.000), stdev = 5.079
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 64.93% complete, ETA 00:30:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6963063.115 ops/s
[info] # Warmup Iteration   2: 7486326.301 ops/s
[info] # Warmup Iteration   3: 7544821.863 ops/s
[info] Iteration   1: 7784532.836 ops/s
[info]                  ·gc.alloc.rate:            356.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.148 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 7707856.558 ops/s
[info]                  ·gc.alloc.rate:            352.553 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.828 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   3: 7689274.372 ops/s
[info]                  ·gc.alloc.rate:            351.707 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.993 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7728897.454 ops/s
[info]                  ·gc.alloc.rate:            353.535 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.029 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.639 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7753559.410 ops/s
[info]                  ·gc.alloc.rate:            354.654 MB/sec
[info]                  ·gc.alloc.rate.norm:       72.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.019 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.420 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   7732824.126 ±(99.9%) 144580.296 ops/s [Average]
[info]   (min, avg, max) = (7689274.372, 7732824.126, 7784532.836), stdev = 37547.044
[info]   CI (99.9%): [7588243.830, 7877404.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   353.698 ±(99.9%) 6.589 MB/sec [Average]
[info]   (min, avg, max) = (351.707, 353.698, 356.042), stdev = 1.711
[info]   CI (99.9%): [347.110, 360.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.016 ±(99.9%) 0.053 MB/sec [Average]
[info]   (min, avg, max) = (336.993, 337.016, 337.029), stdev = 0.014
[info]   CI (99.9%): [336.963, 337.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   68.605 ±(99.9%) 1.284 B/op [Average]
[info]   (min, avg, max) = (68.148, 68.605, 68.993), stdev = 0.333
[info]   CI (99.9%): [67.321, 69.890] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 65.17% complete, ETA 00:30:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29601.320 ops/s
[info] # Warmup Iteration   2: 255857.780 ops/s
[info] # Warmup Iteration   3: 260028.341 ops/s
[info] Iteration   1: 268568.669 ops/s
[info]                  ·gc.alloc.rate:                   1385.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7877.837 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.904 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 268096.337 ops/s
[info]                  ·gc.alloc.rate:                   1383.346 MB/sec
[info]                  ·gc.alloc.rate.norm:              8120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1349.106 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7919.020 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.374 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   3: 270149.405 ops/s
[info]                  ·gc.alloc.rate:                                  1393.521 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8120.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.164 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.954 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7932.585 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 271553.413 ops/s
[info]                  ·gc.alloc.rate:            1400.803 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7891.461 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 271289.713 ops/s
[info]                  ·gc.alloc.rate:            1399.985 MB/sec
[info]                  ·gc.alloc.rate.norm:       8120.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9874.034 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   269931.507 ±(99.9%) 6011.187 ops/s [Average]
[info]   (min, avg, max) = (268096.337, 269931.507, 271553.413), stdev = 1561.086
[info]   CI (99.9%): [263920.321, 275942.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1392.603 ±(99.9%) 31.090 MB/sec [Average]
[info]   (min, avg, max) = (1383.346, 1392.603, 1400.803), stdev = 8.074
[info]   CI (99.9%): [1361.513, 1423.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8120.002, 8120.002, 8120.002), stdev = 0.001
[info]   CI (99.9%): [8120.001, 8120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.033 ±(99.9%) 0.282 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.164), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.191 ±(99.9%) 1.642 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.191, 0.954), stdev = 0.427
[info]   CI (99.9%): [≈ 0, 1.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1423.657 ±(99.9%) 600.734 MB/sec [Average]
[info]   (min, avg, max) = (1344.042, 1423.657, 1702.401), stdev = 156.009
[info]   CI (99.9%): [822.923, 2024.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8298.987 ±(99.9%) 3391.433 B/op [Average]
[info]   (min, avg, max) = (7877.837, 8298.987, 9874.034), stdev = 880.744
[info]   CI (99.9%): [4907.555, 11690.420] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   6.256 ±(99.9%) 45.923 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 6.256, 27.374), stdev = 11.926
[info]   CI (99.9%): [≈ 0, 52.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.400, 19.000), stdev = 7.503
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 65.42% complete, ETA 00:29:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5036.171 ops/s
[info] # Warmup Iteration   2: 6850.861 ops/s
[info] # Warmup Iteration   3: 7228.301 ops/s
[info] Iteration   1: 7303.313 ops/s
[info]                  ·gc.alloc.rate:                                  1758.484 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.056 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.165 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 35.498 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1691.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       364597.268 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                717.711 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   2: 7234.233 ops/s
[info]                  ·gc.alloc.rate:                                  1742.016 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.061 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.126 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 27.355 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.231 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       444297.128 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 7201.789 ops/s
[info]                  ·gc.alloc.rate:                                  1733.934 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 11.099 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.488 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       371892.238 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 7376.109 ops/s
[info]                  ·gc.alloc.rate:                                  1776.025 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.060 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 17.476 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       363121.670 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 7217.875 ops/s
[info]                  ·gc.alloc.rate:                                  1737.826 MB/sec
[info]                  ·gc.alloc.rate.norm:                             378984.057 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.075 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 16.389 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.764 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       371119.501 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7266.664 ±(99.9%) 278.755 ops/s [Average]
[info]   (min, avg, max) = (7201.789, 7266.664, 7376.109), stdev = 72.392
[info]   CI (99.9%): [6987.909, 7545.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1749.657 ±(99.9%) 67.213 MB/sec [Average]
[info]   (min, avg, max) = (1733.934, 1749.657, 1776.025), stdev = 17.455
[info]   CI (99.9%): [1682.444, 1816.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378984.058 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (378984.056, 378984.058, 378984.061), stdev = 0.002
[info]   CI (99.9%): [378984.049, 378984.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.100 ±(99.9%) 0.175 MB/sec [Average]
[info]   (min, avg, max) = (0.051, 0.100, 0.165), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   21.563 ±(99.9%) 37.566 B/op [Average]
[info]   (min, avg, max) = (11.099, 21.563, 35.498), stdev = 9.756
[info]   CI (99.9%): [≈ 0, 59.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1767.780 ±(99.9%) 591.007 MB/sec [Average]
[info]   (min, avg, max) = (1691.729, 1767.780, 2042.231), stdev = 153.483
[info]   CI (99.9%): [1176.773, 2358.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   383005.561 ±(99.9%) 132772.901 B/op [Average]
[info]   (min, avg, max) = (363121.670, 383005.561, 444297.128), stdev = 34480.701
[info]   CI (99.9%): [250232.660, 515778.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   143.542 ±(99.9%) 1235.942 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 143.542, 717.711), stdev = 320.970
[info]   CI (99.9%): [≈ 0, 1379.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 13.000), stdev = 3.674
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava
[info] # Run progress: 65.67% complete, ETA 00:29:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 472.726 ops/s
[info] # Warmup Iteration   2: 11700.186 ops/s
[info] # Warmup Iteration   3: 11758.588 ops/s
[info] Iteration   1: 11803.876 ops/s
[info]                  ·gc.alloc.rate:                   272.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             330.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        44053.337 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 355.269 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11770.487 ops/s
[info]                  ·gc.alloc.rate:            271.307 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.024 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44533.084 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 11681.619 ops/s
[info]                  ·gc.alloc.rate:            269.264 MB/sec
[info]                  ·gc.alloc.rate.norm:       36280.035 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 44872.304 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 11779.650 ops/s
[info]                  ·gc.alloc.rate:                   271.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              36280.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        44499.066 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 88.998 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11827.810 ops/s
[info]                  ·gc.alloc.rate:      272.700 MB/sec
[info]                  ·gc.alloc.rate.norm: 36280.037 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava":
[info]   11772.688 ±(99.9%) 214.031 ops/s [Average]
[info]   (min, avg, max) = (11681.619, 11772.688, 11827.810), stdev = 55.583
[info]   CI (99.9%): [11558.658, 11986.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   271.391 ±(99.9%) 5.046 MB/sec [Average]
[info]   (min, avg, max) = (269.264, 271.391, 272.700), stdev = 1.310
[info]   CI (99.9%): [266.345, 276.437] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   36280.037 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (36280.035, 36280.037, 36280.037), stdev = 0.001
[info]   CI (99.9%): [36280.033, 36280.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   265.913 ±(99.9%) 572.414 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 265.913, 333.034), stdev = 148.654
[info]   CI (99.9%): [≈ 0, 838.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   35591.558 ±(99.9%) 76621.708 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35591.558, 44872.304), stdev = 19898.414
[info]   CI (99.9%): [≈ 0, 112213.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 4.444 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 2.665), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 5.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   88.853 ±(99.9%) 592.367 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 88.853, 355.269), stdev = 153.836
[info]   CI (99.9%): [≈ 0, 681.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 4.000, 5.000), stdev = 2.236
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 65.92% complete, ETA 00:29:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6455.750 ops/s
[info] # Warmup Iteration   2: 12907.724 ops/s
[info] # Warmup Iteration   3: 13335.879 ops/s
[info] Iteration   1: 12942.375 ops/s
[info]                  ·gc.alloc.rate:            328.855 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.036 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40822.053 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 12540.188 ops/s
[info]                  ·gc.alloc.rate:            318.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.644 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 42133.645 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 12926.970 ops/s
[info]                  ·gc.alloc.rate:            328.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.793 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 40872.568 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 13346.044 ops/s
[info]                  ·gc.alloc.rate:            339.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.776 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39592.621 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 13301.937 ops/s
[info]                  ·gc.alloc.rate:            337.961 MB/sec
[info]                  ·gc.alloc.rate.norm:       39992.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 39720.579 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   13011.503 ±(99.9%) 1263.005 ops/s [Average]
[info]   (min, avg, max) = (12540.188, 13011.503, 13346.044), stdev = 327.998
[info]   CI (99.9%): [11748.498, 14274.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   330.624 ±(99.9%) 32.166 MB/sec [Average]
[info]   (min, avg, max) = (318.584, 330.624, 339.163), stdev = 8.353
[info]   CI (99.9%): [298.459, 362.790] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39992.033 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (39992.031, 39992.033, 39992.036), stdev = 0.002
[info]   CI (99.9%): [39992.023, 39992.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   335.712 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (335.644, 335.712, 335.793), stdev = 0.067
[info]   CI (99.9%): [335.452, 335.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   40628.293 ±(99.9%) 3973.754 B/op [Average]
[info]   (min, avg, max) = (39592.621, 40628.293, 42133.645), stdev = 1031.971
[info]   CI (99.9%): [36654.540, 44602.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 66.17% complete, ETA 00:29:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18572.607 ops/s
[info] # Warmup Iteration   2: 22591.904 ops/s
[info] # Warmup Iteration   3: 22310.783 ops/s
[info] Iteration   1: 22977.814 ops/s
[info]                  ·gc.alloc.rate:            430.580 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23085.735 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 22793.033 ops/s
[info]                  ·gc.alloc.rate:            427.254 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.257 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 46548.182 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 22796.319 ops/s
[info]                  ·gc.alloc.rate:            427.328 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23271.029 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 22960.279 ops/s
[info]                  ·gc.alloc.rate:            430.263 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.034 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23104.836 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 23001.024 ops/s
[info]                  ·gc.alloc.rate:            431.028 MB/sec
[info]                  ·gc.alloc.rate.norm:       29496.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23063.658 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   22905.694 ±(99.9%) 394.217 ops/s [Average]
[info]   (min, avg, max) = (22793.033, 22905.694, 23001.024), stdev = 102.377
[info]   CI (99.9%): [22511.477, 23299.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   429.291 ±(99.9%) 7.107 MB/sec [Average]
[info]   (min, avg, max) = (427.254, 429.291, 431.028), stdev = 1.846
[info]   CI (99.9%): [422.183, 436.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   29496.019 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (29496.018, 29496.019, 29496.024), stdev = 0.003
[info]   CI (99.9%): [29496.009, 29496.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   404.494 ±(99.9%) 580.687 MB/sec [Average]
[info]   (min, avg, max) = (337.003, 404.494, 674.257), stdev = 150.802
[info]   CI (99.9%): [≈ 0, 985.180] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   27814.688 ±(99.9%) 40326.494 B/op [Average]
[info]   (min, avg, max) = (23063.658, 27814.688, 46548.182), stdev = 10472.662
[info]   CI (99.9%): [≈ 0, 68141.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 6.000), stdev = 1.304
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 66.42% complete, ETA 00:28:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 673.481 ops/s
[info] # Warmup Iteration   2: 2163.611 ops/s
[info] # Warmup Iteration   3: 2167.496 ops/s
[info] Iteration   1: 2171.825 ops/s
[info]                  ·gc.alloc.rate:            1355.874 MB/sec
[info]                  ·gc.alloc.rate.norm:       982672.184 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 972816.022 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 2197.488 ops/s
[info]                  ·gc.alloc.rate:                                  1371.855 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.186 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 88.433 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1351.317 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       967953.005 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3339.414 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        13.000 ms
[info] Iteration   3: 2212.667 ops/s
[info]                  ·gc.alloc.rate:                                  1381.491 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.199 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 20.918 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1360.963 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       968062.034 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 2198.449 ops/s
[info]                  ·gc.alloc.rate:                                  1372.518 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.186 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.051 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 36.169 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       974665.459 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 2207.333 ops/s
[info]                  ·gc.alloc.rate:                                  1378.091 MB/sec
[info]                  ·gc.alloc.rate.norm:                             982664.185 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 46.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       970692.638 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2197.552 ±(99.9%) 60.482 ops/s [Average]
[info]   (min, avg, max) = (2171.825, 2197.552, 2212.667), stdev = 15.707
[info]   CI (99.9%): [2137.071, 2258.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1371.966 ±(99.9%) 37.901 MB/sec [Average]
[info]   (min, avg, max) = (1355.874, 1371.966, 1381.491), stdev = 9.843
[info]   CI (99.9%): [1334.065, 1409.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   982665.788 ±(99.9%) 13.769 B/op [Average]
[info]   (min, avg, max) = (982664.185, 982665.788, 982672.184), stdev = 3.576
[info]   CI (99.9%): [982652.019, 982679.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.054 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.123), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   38.350 ±(99.9%) 126.981 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 38.350, 88.433), stdev = 32.977
[info]   CI (99.9%): [≈ 0, 165.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1355.441 ±(99.9%) 32.792 MB/sec [Average]
[info]   (min, avg, max) = (1342.275, 1355.441, 1361.346), stdev = 8.516
[info]   CI (99.9%): [1322.649, 1388.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   970837.831 ±(99.9%) 11327.101 B/op [Average]
[info]   (min, avg, max) = (967953.005, 970837.831, 974665.459), stdev = 2941.612
[info]   CI (99.9%): [959510.731, 982164.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   667.883 ±(99.9%) 5750.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 667.883, 3339.414), stdev = 1493.431
[info]   CI (99.9%): [≈ 0, 6418.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 19.000), stdev = 6.907
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 66.67% complete, ETA 00:28:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5013.694 ops/s
[info] # Warmup Iteration   2: 6614.035 ops/s
[info] # Warmup Iteration   3: 7088.629 ops/s
[info] Iteration   1: 7076.065 ops/s
[info]                  ·gc.alloc.rate:                                  1558.665 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.062 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 8.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1687.363 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       375253.321 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                888.875 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 7038.506 ops/s
[info]                  ·gc.alloc.rate:                                  1549.942 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.058 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.082 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.339 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.303 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       304444.509 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 7179.404 ops/s
[info]                  ·gc.alloc.rate:            1581.266 MB/sec
[info]                  ·gc.alloc.rate.norm:       346632.057 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 373083.370 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6954.258 ops/s
[info]                  ·gc.alloc.rate:                                  1532.032 MB/sec
[info]                  ·gc.alloc.rate.norm:                             346632.059 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.822 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       308120.952 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 7199.856 ops/s
[info]                  ·gc.alloc.rate:            1585.534 MB/sec
[info]                  ·gc.alloc.rate.norm:       346632.061 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.785 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 372047.171 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7089.618 ±(99.9%) 391.425 ops/s [Average]
[info]   (min, avg, max) = (6954.258, 7089.618, 7199.856), stdev = 101.652
[info]   CI (99.9%): [6698.193, 7481.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1561.488 ±(99.9%) 85.635 MB/sec [Average]
[info]   (min, avg, max) = (1532.032, 1561.488, 1585.534), stdev = 22.239
[info]   CI (99.9%): [1475.852, 1647.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   346632.059 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (346632.057, 346632.059, 346632.062), stdev = 0.002
[info]   CI (99.9%): [346632.051, 346632.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.082), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   5.400 ±(99.9%) 30.801 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.400, 18.339), stdev = 7.999
[info]   CI (99.9%): [≈ 0, 36.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1562.841 ±(99.9%) 707.890 MB/sec [Average]
[info]   (min, avg, max) = (1361.303, 1562.841, 1701.932), stdev = 183.837
[info]   CI (99.9%): [854.951, 2270.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   346589.865 ±(99.9%) 141843.609 B/op [Average]
[info]   (min, avg, max) = (304444.509, 346589.865, 375253.321), stdev = 36836.335
[info]   CI (99.9%): [204746.256, 488433.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   177.775 ±(99.9%) 1530.696 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 177.775, 888.875), stdev = 397.517
[info]   CI (99.9%): [≈ 0, 1708.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 15.000), stdev = 4.879
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava
[info] # Run progress: 66.92% complete, ETA 00:28:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2857.393 ops/s
[info] # Warmup Iteration   2: 51039.544 ops/s
[info] # Warmup Iteration   3: 52109.857 ops/s
[info] Iteration   1: 53022.438 ops/s
[info]                  ·gc.alloc.rate:            523.724 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9906.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 51954.488 ops/s
[info]                  ·gc.alloc.rate:            513.054 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      666.753 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20200.627 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 52654.668 ops/s
[info]                  ·gc.alloc.rate:                   520.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9955.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.911 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 52909.030 ops/s
[info]                  ·gc.alloc.rate:            522.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19854.365 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 52001.560 ops/s
[info]                  ·gc.alloc.rate:            513.677 MB/sec
[info]                  ·gc.alloc.rate.norm:       15544.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.587 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20201.368 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava":
[info]   52508.437 ±(99.9%) 1934.771 ops/s [Average]
[info]   (min, avg, max) = (51954.488, 52508.437, 53022.438), stdev = 502.454
[info]   CI (99.9%): [50573.666, 54443.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   518.626 ±(99.9%) 19.159 MB/sec [Average]
[info]   (min, avg, max) = (513.054, 518.626, 523.724), stdev = 4.976
[info]   CI (99.9%): [499.467, 537.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   15544.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15544.008, 15544.008, 15544.008), stdev = 0.001
[info]   CI (99.9%): [15544.007, 15544.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   533.735 ±(99.9%) 703.997 MB/sec [Average]
[info]   (min, avg, max) = (333.150, 533.735, 667.587), stdev = 182.826
[info]   CI (99.9%): [≈ 0, 1237.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16023.659 ±(99.9%) 21423.707 B/op [Average]
[info]   (min, avg, max) = (9906.217, 16023.659, 20201.368), stdev = 5563.669
[info]   CI (99.9%): [≈ 0, 37447.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   3.982 ±(99.9%) 34.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.982, 19.911), stdev = 8.905
[info]   CI (99.9%): [≈ 0, 38.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.000, 10.000), stdev = 2.739
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 67.16% complete, ETA 00:28:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_cbecb3a0/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 18506.592 ops/s
[info] # Warmup Iteration   2: 37067.836 ops/s
[info] # Warmup Iteration   3: 37914.894 ops/s
[info] Iteration   1: 38106.030 ops/s
[info]                  ·gc.alloc.rate:            567.194 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.744 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.648 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13866.195 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 38039.577 ops/s
[info]                  ·gc.alloc.rate:            566.342 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.937 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27781.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 38016.271 ops/s
[info]                  ·gc.alloc.rate:                   565.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              23431.841 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.690 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        27770.456 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 27.577 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 37950.861 ops/s
[info]                  ·gc.alloc.rate:            564.957 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.878 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.376 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 27845.635 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 38200.833 ops/s
[info]                  ·gc.alloc.rate:            568.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       23431.952 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13831.357 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   38062.714 ±(99.9%) 366.098 ops/s [Average]
[info]   (min, avg, max) = (37950.861, 38062.714, 38200.833), stdev = 95.074
[info]   CI (99.9%): [37696.617, 38428.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   566.636 ±(99.9%) 5.558 MB/sec [Average]
[info]   (min, avg, max) = (564.957, 566.636, 568.778), stdev = 1.443
[info]   CI (99.9%): [561.077, 572.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   23431.871 ±(99.9%) 0.322 B/op [Average]
[info]   (min, avg, max) = (23431.744, 23431.871, 23431.952), stdev = 0.084
[info]   CI (99.9%): [23431.548, 23432.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   536.983 ±(99.9%) 707.565 MB/sec [Average]
[info]   (min, avg, max) = (335.648, 536.983, 671.462), stdev = 183.752
[info]   CI (99.9%): [≈ 0, 1244.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22218.974 ±(99.9%) 29422.672 B/op [Average]
[info]   (min, avg, max) = (13831.357, 22218.974, 27845.635), stdev = 7640.975
[info]   CI (99.9%): [≈ 0, 51641.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.515 ±(99.9%) 47.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.515, 27.577), stdev = 12.333
[info]   CI (99.9%): [≈ 0, 53.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.600, 10.000), stdev = 2.408
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 67.41% complete, ETA 00:28:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64643.225 ops/s
[info] # Warmup Iteration   2: 63262.447 ops/s
[info] # Warmup Iteration   3: 75963.189 ops/s
[info] Iteration   1: 76083.957 ops/s
[info]                  ·gc.alloc.rate:            571.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.629 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13916.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 73751.118 ops/s
[info]                  ·gc.alloc.rate:            554.516 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14357.629 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 76013.121 ops/s
[info]                  ·gc.alloc.rate:            571.282 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.309 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6965.404 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 75488.575 ops/s
[info]                  ·gc.alloc.rate:            567.461 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14027.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 76473.404 ops/s
[info]                  ·gc.alloc.rate:            574.880 MB/sec
[info]                  ·gc.alloc.rate.norm:       11832.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13846.117 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   75562.035 ±(99.9%) 4125.444 ops/s [Average]
[info]   (min, avg, max) = (73751.118, 75562.035, 76473.404), stdev = 1071.365
[info]   CI (99.9%): [71436.591, 79687.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   568.002 ±(99.9%) 30.757 MB/sec [Average]
[info]   (min, avg, max) = (554.516, 568.002, 574.880), stdev = 7.987
[info]   CI (99.9%): [537.245, 598.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11832.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11832.005, 11832.005, 11832.006), stdev = 0.001
[info]   CI (99.9%): [11832.005, 11832.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.463 ±(99.9%) 579.375 MB/sec [Average]
[info]   (min, avg, max) = (336.309, 605.463, 672.881), stdev = 150.462
[info]   CI (99.9%): [26.088, 1184.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   12622.671 ±(99.9%) 12201.080 B/op [Average]
[info]   (min, avg, max) = (6965.404, 12622.671, 14357.629), stdev = 3168.582
[info]   CI (99.9%): [421.591, 24823.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 7.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 67.66% complete, ETA 00:27:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 87200.014 ops/s
[info] # Warmup Iteration   2: 103056.212 ops/s
[info] # Warmup Iteration   3: 103421.637 ops/s
[info] Iteration   1: 103589.241 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 103124.235 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 103301.495 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 103713.415 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 103759.489 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   103497.575 ±(99.9%) 1057.032 ops/s [Average]
[info]   (min, avg, max) = (103124.235, 103497.575, 103759.489), stdev = 274.508
[info]   CI (99.9%): [102440.543, 104554.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.004, 0.004), stdev = 0.001
[info]   CI (99.9%): [0.004, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 67.91% complete, ETA 00:27:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2256.185 ops/s
[info] # Warmup Iteration   2: 5612.078 ops/s
[info] # Warmup Iteration   3: 5776.169 ops/s
[info] Iteration   1: 5753.010 ops/s
[info]                  ·gc.alloc.rate:                   1647.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              450744.742 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1682.622 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        460323.771 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1275.640 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 5691.553 ops/s
[info]                  ·gc.alloc.rate:                                  1629.774 MB/sec
[info]                  ·gc.alloc.rate.norm:                             450742.702 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.777 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.564 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       470597.520 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 5747.621 ops/s
[info]                  ·gc.alloc.rate:                                  1645.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             450744.608 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.069 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 18.977 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.748 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       466013.512 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 5830.561 ops/s
[info]                  ·gc.alloc.rate:                                  1669.603 MB/sec
[info]                  ·gc.alloc.rate.norm:                             450743.617 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.092 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 24.893 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.598 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       459381.289 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 5822.913 ops/s
[info]                  ·gc.alloc.rate:                                  1667.460 MB/sec
[info]                  ·gc.alloc.rate.norm:                             450744.227 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.084 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 22.661 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       459933.336 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5769.132 ±(99.9%) 222.931 ops/s [Average]
[info]   (min, avg, max) = (5691.553, 5769.132, 5830.561), stdev = 57.894
[info]   CI (99.9%): [5546.201, 5992.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1652.087 ±(99.9%) 63.805 MB/sec [Average]
[info]   (min, avg, max) = (1629.774, 1652.087, 1669.603), stdev = 16.570
[info]   CI (99.9%): [1588.282, 1715.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   450743.979 ±(99.9%) 3.223 B/op [Average]
[info]   (min, avg, max) = (450742.702, 450743.979, 450744.742), stdev = 0.837
[info]   CI (99.9%): [450740.756, 450747.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.065 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.065, 0.092), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   17.661 ±(99.9%) 38.884 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.661, 24.893), stdev = 10.098
[info]   CI (99.9%): [≈ 0, 56.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1697.797 ±(99.9%) 32.669 MB/sec [Average]
[info]   (min, avg, max) = (1682.622, 1697.797, 1701.748), stdev = 8.484
[info]   CI (99.9%): [1665.128, 1730.466] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   463249.885 ±(99.9%) 18879.257 B/op [Average]
[info]   (min, avg, max) = (459381.289, 463249.885, 470597.520), stdev = 4902.883
[info]   CI (99.9%): [444370.629, 482129.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   255.128 ±(99.9%) 2196.729 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 255.128, 1275.640), stdev = 570.484
[info]   CI (99.9%): [≈ 0, 2451.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.200, 20.000), stdev = 6.611
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 68.16% complete, ETA 00:27:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4386685.610 ops/s
[info] # Warmup Iteration   2: 6496759.216 ops/s
[info] # Warmup Iteration   3: 6658492.797 ops/s
[info] Iteration   1: 6686339.177 ops/s
[info]                  ·gc.alloc.rate:                                  4147.398 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4085.788 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       961.502 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   2: 6710452.640 ops/s
[info]                  ·gc.alloc.rate:                                  4160.305 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4083.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       958.057 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 6640087.117 ops/s
[info]                  ·gc.alloc.rate:                                  4118.306 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4085.454 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       968.215 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 6655093.349 ops/s
[info]                  ·gc.alloc.rate:                                  4126.990 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4084.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       966.002 B/op
[info]                  ·gc.count:                                       12.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 6664229.831 ops/s
[info]                  ·gc.alloc.rate:                                  4132.045 MB/sec
[info]                  ·gc.alloc.rate.norm:                             976.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            4424.478 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1045.074 B/op
[info]                  ·gc.count:                                       13.000 counts
[info]                  ·gc.time:                                        19.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6671240.423 ±(99.9%) 106259.202 ops/s [Average]
[info]   (min, avg, max) = (6640087.117, 6671240.423, 6710452.640), stdev = 27595.177
[info]   CI (99.9%): [6564981.221, 6777499.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4137.009 ±(99.9%) 64.591 MB/sec [Average]
[info]   (min, avg, max) = (4118.306, 4137.009, 4160.305), stdev = 16.774
[info]   CI (99.9%): [4072.417, 4201.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   4152.851 ±(99.9%) 584.706 MB/sec [Average]
[info]   (min, avg, max) = (4083.820, 4152.851, 4424.478), stdev = 151.846
[info]   CI (99.9%): [3568.145, 4737.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   979.770 ±(99.9%) 141.388 B/op [Average]
[info]   (min, avg, max) = (958.057, 979.770, 1045.074), stdev = 36.718
[info]   CI (99.9%): [838.382, 1121.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   61.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (12.000, 12.200, 13.000), stdev = 0.447
[info]   CI (99.9%): [61.000, 61.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.800, 19.000), stdev = 4.025
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava
[info] # Run progress: 68.41% complete, ETA 00:27:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.890 ops/s
[info] # Warmup Iteration   2: 38852756.904 ops/s
[info] # Warmup Iteration   3: 39779344.936 ops/s
[info] Iteration   1: 38922299.810 ops/s
[info]                  ·gc.alloc.rate:            395.642 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.495 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 38858847.437 ops/s
[info]                  ·gc.alloc.rate:            394.960 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.517 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 38912143.130 ops/s
[info]                  ·gc.alloc.rate:            395.584 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.476 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26.997 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 37527930.979 ops/s
[info]                  ·gc.alloc.rate:            381.467 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.704 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 37604208.411 ops/s
[info]                  ·gc.alloc.rate:            382.302 MB/sec
[info]                  ·gc.alloc.rate.norm:       16.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.752 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13.968 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava":
[info]   38365085.954 ±(99.9%) 2812105.466 ops/s [Average]
[info]   (min, avg, max) = (37527930.979, 38365085.954, 38922299.810), stdev = 730294.859
[info]   CI (99.9%): [35552980.488, 41177191.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   389.991 ±(99.9%) 28.536 MB/sec [Average]
[info]   (min, avg, max) = (381.467, 389.991, 395.642), stdev = 7.411
[info]   CI (99.9%): [361.455, 418.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   400.460 ±(99.9%) 574.774 MB/sec [Average]
[info]   (min, avg, max) = (333.667, 400.460, 667.476), stdev = 149.267
[info]   CI (99.9%): [≈ 0, 975.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   16.395 ±(99.9%) 22.841 B/op [Average]
[info]   (min, avg, max) = (13.495, 16.395, 26.997), stdev = 5.932
[info]   CI (99.9%): [≈ 0, 39.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readDslJsonJava:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 10.000), stdev = 2.387
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 68.66% complete, ETA 00:27:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2823609.789 ops/s
[info] # Warmup Iteration   2: 6873789.662 ops/s
[info] # Warmup Iteration   3: 6973762.334 ops/s
[info] Iteration   1: 7283492.951 ops/s
[info]                  ·gc.alloc.rate:                                  2738.989 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       588.457 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 7151817.677 ops/s
[info]                  ·gc.alloc.rate:                                  2690.228 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       599.263 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 7204492.102 ops/s
[info]                  ·gc.alloc.rate:                                  2709.649 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.808 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       594.875 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 7213954.146 ops/s
[info]                  ·gc.alloc.rate:                                  2712.939 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.605 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       594.109 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 7187596.286 ops/s
[info]                  ·gc.alloc.rate:                                  2703.213 MB/sec
[info]                  ·gc.alloc.rate.norm:                             592.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       596.265 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   7208270.632 ±(99.9%) 185864.301 ops/s [Average]
[info]   (min, avg, max) = (7151817.677, 7208270.632, 7283492.951), stdev = 48268.369
[info]   CI (99.9%): [7022406.331, 7394134.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2711.003 ±(99.9%) 68.911 MB/sec [Average]
[info]   (min, avg, max) = (2690.228, 2711.003, 2738.989), stdev = 17.896
[info]   CI (99.9%): [2642.093, 2779.914] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2722.786 ±(99.9%) 1.020 MB/sec [Average]
[info]   (min, avg, max) = (2722.595, 2722.786, 2723.235), stdev = 0.265
[info]   CI (99.9%): [2721.766, 2723.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   594.594 ±(99.9%) 15.230 B/op [Average]
[info]   (min, avg, max) = (588.457, 594.594, 599.263), stdev = 3.955
[info]   CI (99.9%): [579.364, 609.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 68.91% complete, ETA 00:26:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37191097.837 ops/s
[info] # Warmup Iteration   2: 33413909.779 ops/s
[info] # Warmup Iteration   3: 33211863.285 ops/s
[info] Iteration   1: 38252311.264 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 38190841.446 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 37729173.778 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 38171459.700 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 38181448.556 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   38105046.949 ±(99.9%) 818150.779 ops/s [Average]
[info]   (min, avg, max) = (37729173.778, 38105046.949, 38252311.264), stdev = 212471.159
[info]   CI (99.9%): [37286896.170, 38923197.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 69.15% complete, ETA 00:26:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21508904.900 ops/s
[info] # Warmup Iteration   2: 26891430.506 ops/s
[info] # Warmup Iteration   3: 25903579.300 ops/s
[info] Iteration   1: 26113723.309 ops/s
[info]                  ·gc.alloc.rate:            1327.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81.258 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 26191876.683 ops/s
[info]                  ·gc.alloc.rate:                                  1331.523 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.122 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.449 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       81.618 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.200 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 26234448.296 ops/s
[info]                  ·gc.alloc.rate:            1333.749 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 81.687 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 26518941.601 ops/s
[info]                  ·gc.alloc.rate:                                  1348.516 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1362.188 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       80.811 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 25867805.585 ops/s
[info]                  ·gc.alloc.rate:            1314.720 MB/sec
[info]                  ·gc.alloc.rate.norm:       80.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.040 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 62.130 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   26185359.095 ±(99.9%) 902443.065 ops/s [Average]
[info]   (min, avg, max) = (25867805.585, 26185359.095, 26518941.601), stdev = 234361.598
[info]   CI (99.9%): [25282916.030, 27087802.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1331.133 ±(99.9%) 46.939 MB/sec [Average]
[info]   (min, avg, max) = (1314.720, 1331.133, 1348.516), stdev = 12.190
[info]   CI (99.9%): [1284.194, 1378.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.122), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.007), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen":
[info]   1290.314 ±(99.9%) 580.055 MB/sec [Average]
[info]   (min, avg, max) = (1021.040, 1290.314, 1362.188), stdev = 150.639
[info]   CI (99.9%): [710.259, 1870.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   77.501 ±(99.9%) 33.114 B/op [Average]
[info]   (min, avg, max) = (62.130, 77.501, 81.687), stdev = 8.600
[info]   CI (99.9%): [44.386, 110.615] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.040 ±(99.9%) 0.345 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.040, 0.200), stdev = 0.090
[info]   CI (99.9%): [≈ 0, 0.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 5.200, 12.000), stdev = 4.087
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 69.40% complete, ETA 00:26:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3154251.963 ops/s
[info] # Warmup Iteration   2: 5884485.144 ops/s
[info] # Warmup Iteration   3: 5984686.202 ops/s
[info] Iteration   1: 6286631.370 ops/s
[info]                  ·gc.alloc.rate:                                  3036.336 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.131 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       766.957 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 6259922.676 ops/s
[info]                  ·gc.alloc.rate:                                  3022.343 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       770.273 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 6181356.198 ops/s
[info]                  ·gc.alloc.rate:                                  2985.679 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3064.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       780.050 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 6116271.627 ops/s
[info]                  ·gc.alloc.rate:                                  2953.043 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       700.743 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 6246062.406 ops/s
[info]                  ·gc.alloc.rate:                                  3015.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             760.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.251 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       771.949 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   6218048.855 ±(99.9%) 265014.763 ops/s [Average]
[info]   (min, avg, max) = (6116271.627, 6218048.855, 6286631.370), stdev = 68823.492
[info]   CI (99.9%): [5953034.092, 6483063.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3002.647 ±(99.9%) 128.366 MB/sec [Average]
[info]   (min, avg, max) = (2953.043, 3002.647, 3036.336), stdev = 33.336
[info]   CI (99.9%): [2874.281, 3131.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.002 ±(99.9%) 0.002 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻³, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2995.564 ±(99.9%) 587.157 MB/sec [Average]
[info]   (min, avg, max) = (2722.796, 2995.564, 3064.445), stdev = 152.483
[info]   CI (99.9%): [2408.407, 3582.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   757.995 ±(99.9%) 124.626 B/op [Average]
[info]   (min, avg, max) = (700.743, 757.995, 780.050), stdev = 32.365
[info]   CI (99.9%): [633.368, 882.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   44.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 9.000), stdev = 0.447
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.600, 9.000), stdev = 1.140
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 69.65% complete, ETA 00:26:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13397795.045 ops/s
[info] # Warmup Iteration   2: 18618817.296 ops/s
[info] # Warmup Iteration   3: 19412441.904 ops/s
[info] Iteration   1: 19568975.361 ops/s
[info]                  ·gc.alloc.rate:                                  2287.268 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.127 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.286 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       191.644 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 19303979.810 ops/s
[info]                  ·gc.alloc.rate:                                  2256.528 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       194.270 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 19630179.958 ops/s
[info]                  ·gc.alloc.rate:                                  2295.482 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       191.038 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 19669415.300 ops/s
[info]                  ·gc.alloc.rate:                                  2299.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             184.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.220 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       163.422 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 19323786.203 ops/s
[info]                  ·gc.alloc.rate:            2258.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       184.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 194.068 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   19499267.327 ±(99.9%) 666613.361 ops/s [Average]
[info]   (min, avg, max) = (19303979.810, 19499267.327, 19669415.300), stdev = 173117.373
[info]   CI (99.9%): [18832653.966, 20165880.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2279.501 ±(99.9%) 78.553 MB/sec [Average]
[info]   (min, avg, max) = (2256.528, 2279.501, 2299.372), stdev = 20.400
[info]   CI (99.9%): [2200.948, 2358.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.215 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.127), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.017 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.010), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   2314.544 ±(99.9%) 586.202 MB/sec [Average]
[info]   (min, avg, max) = (2042.220, 2314.544, 2383.280), stdev = 152.235
[info]   CI (99.9%): [1728.343, 2900.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   186.888 ±(99.9%) 50.813 B/op [Average]
[info]   (min, avg, max) = (163.422, 186.888, 194.270), stdev = 13.196
[info]   CI (99.9%): [136.075, 237.702] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava
[info] # Run progress: 69.90% complete, ETA 00:25:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.898 ops/s
[info] # Warmup Iteration   2: 50527515.701 ops/s
[info] # Warmup Iteration   3: 51792964.871 ops/s
[info] Iteration   1: 55057832.066 ops/s
[info]                  ·gc.alloc.rate:                   1678.879 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1667.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        47.663 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.019 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         24.000 ms
[info] Iteration   2: 55974302.706 ops/s
[info]                  ·gc.alloc.rate:                                  1707.650 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.610 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.017 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.237 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.595 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.187 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 56662758.180 ops/s
[info]                  ·gc.alloc.rate:                                  1728.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.085 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.276 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 56225371.830 ops/s
[info]                  ·gc.alloc.rate:                                  1714.969 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.240 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.644 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 56586400.124 ops/s
[info]                  ·gc.alloc.rate:                                  1725.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             48.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.853 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47.339 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava":
[info]   56101332.981 ±(99.9%) 2488738.281 ops/s [Average]
[info]   (min, avg, max) = (55057832.066, 56101332.981, 56662758.180), stdev = 646317.428
[info]   CI (99.9%): [53612594.700, 58590071.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   1711.052 ±(99.9%) 76.199 MB/sec [Average]
[info]   (min, avg, max) = (1678.879, 1711.052, 1728.161), stdev = 19.789
[info]   CI (99.9%): [1634.853, 1787.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.123 ±(99.9%) 1.049 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.610), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.003 ±(99.9%) 0.029 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.017), stdev = 0.008
[info]   CI (99.9%): [≈ 0, 0.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   1693.302 ±(99.9%) 58.307 MB/sec [Average]
[info]   (min, avg, max) = (1667.092, 1693.302, 1702.240), stdev = 15.142
[info]   CI (99.9%): [1634.995, 1751.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   47.503 ±(99.9%) 0.700 B/op [Average]
[info]   (min, avg, max) = (47.276, 47.503, 47.663), stdev = 0.182
[info]   CI (99.9%): [46.803, 48.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.466 ±(99.9%) 11.243 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.466, 6.664), stdev = 2.920
[info]   CI (99.9%): [≈ 0, 12.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.041 ±(99.9%) 0.316 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.041, 0.187), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeDslJsonJava:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 10.000, 24.000), stdev = 8.246
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 70.15% complete, ETA 00:25:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3839496.895 ops/s
[info] # Warmup Iteration   2: 10764478.765 ops/s
[info] # Warmup Iteration   3: 10625845.745 ops/s
[info] Iteration   1: 11449100.100 ops/s
[info]                  ·gc.alloc.rate:                                  2269.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.239 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.132 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       280.771 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 11396236.324 ops/s
[info]                  ·gc.alloc.rate:                                  2258.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.439 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       329.087 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 11427448.893 ops/s
[info]                  ·gc.alloc.rate:                                  2265.558 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2381.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       327.961 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 11223478.561 ops/s
[info]                  ·gc.alloc.rate:                                  2224.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             312.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       286.402 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 11326189.808 ops/s
[info]                  ·gc.alloc.rate:            2244.854 MB/sec
[info]                  ·gc.alloc.rate.norm:       312.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 331.113 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   11364490.737 ±(99.9%) 352295.258 ops/s [Average]
[info]   (min, avg, max) = (11223478.561, 11364490.737, 11449100.100), stdev = 91489.960
[info]   CI (99.9%): [11012195.479, 11716785.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2252.660 ±(99.9%) 69.725 MB/sec [Average]
[info]   (min, avg, max) = (2224.885, 2252.660, 2269.269), stdev = 18.107
[info]   CI (99.9%): [2182.935, 2322.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.049 ±(99.9%) 0.409 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.049, 0.239), stdev = 0.106
[info]   CI (99.9%): [≈ 0, 0.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.056 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.033), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   2246.148 ±(99.9%) 716.778 MB/sec [Average]
[info]   (min, avg, max) = (2042.132, 2246.148, 2382.439), stdev = 186.145
[info]   CI (99.9%): [1529.371, 2962.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   311.067 ±(99.9%) 96.998 B/op [Average]
[info]   (min, avg, max) = (280.771, 311.067, 331.113), stdev = 25.190
[info]   CI (99.9%): [214.068, 408.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 70.40% complete, ETA 00:25:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31916356.300 ops/s
[info] # Warmup Iteration   2: 43097134.977 ops/s
[info] # Warmup Iteration   3: 44284823.180 ops/s
[info] Iteration   1: 44073630.138 ops/s
[info]                  ·gc.alloc.rate:                   896.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.404 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        24.050 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.024 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 42728144.173 ops/s
[info]                  ·gc.alloc.rate:            868.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.667 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37.200 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 44277811.604 ops/s
[info]                  ·gc.alloc.rate:            900.121 MB/sec
[info]                  ·gc.alloc.rate.norm:       32.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.071 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35.873 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 39250938.027 ops/s
[info]                  ·gc.alloc.rate:                                  798.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.071 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.771 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       27.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                0.160 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 36917547.199 ops/s
[info]                  ·gc.alloc.rate:                                  750.568 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29.023 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   41449614.228 ±(99.9%) 12461549.896 ops/s [Average]
[info]   (min, avg, max) = (36917547.199, 41449614.228, 44277811.604), stdev = 3236224.935
[info]   CI (99.9%): [28988064.333, 53911164.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   842.654 ±(99.9%) 253.179 MB/sec [Average]
[info]   (min, avg, max) = (750.568, 842.654, 900.121), stdev = 65.750
[info]   CI (99.9%): [589.475, 1095.833] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.038 ±(99.9%) 0.209 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.038, 0.117), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.002, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   809.930 ±(99.9%) 701.128 MB/sec [Average]
[info]   (min, avg, max) = (673.404, 809.930, 1009.667), stdev = 182.081
[info]   CI (99.9%): [108.802, 1511.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   30.657 ±(99.9%) 21.844 B/op [Average]
[info]   (min, avg, max) = (24.050, 30.657, 37.200), stdev = 5.673
[info]   CI (99.9%): [8.812, 52.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.689 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.037 ±(99.9%) 0.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.160), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.400, 10.000), stdev = 3.362
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 70.65% complete, ETA 00:25:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34967384.703 ops/s
[info] # Warmup Iteration   2: 45574449.609 ops/s
[info] # Warmup Iteration   3: 47713040.866 ops/s
[info] Iteration   1: 47741743.455 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 47594024.134 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 47666637.462 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 47708061.709 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 47747919.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   47691677.205 ±(99.9%) 244306.301 ops/s [Average]
[info]   (min, avg, max) = (47594024.134, 47691677.205, 47747919.265), stdev = 63445.571
[info]   CI (99.9%): [47447370.904, 47935983.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 70.90% complete, ETA 00:25:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33234564.256 ops/s
[info] # Warmup Iteration   2: 32707362.179 ops/s
[info] # Warmup Iteration   3: 33248417.028 ops/s
[info] Iteration   1: 33145805.481 ops/s
[info]                  ·gc.alloc.rate:                                  2526.686 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.282 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113.142 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 32263583.498 ops/s
[info]                  ·gc.alloc.rate:                                  2460.537 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2723.826 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132.841 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 32110915.562 ops/s
[info]                  ·gc.alloc.rate:                                  2447.922 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116.786 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 32153395.657 ops/s
[info]                  ·gc.alloc.rate:                                  2451.215 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.450 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116.634 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 32194036.462 ops/s
[info]                  ·gc.alloc.rate:                                  2454.444 MB/sec
[info]                  ·gc.alloc.rate.norm:                             120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.519 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116.484 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   32373547.332 ±(99.9%) 1676402.780 ops/s [Average]
[info]   (min, avg, max) = (32110915.562, 32373547.332, 33145805.481), stdev = 435356.478
[info]   CI (99.9%): [30697144.552, 34049950.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2468.161 ±(99.9%) 127.250 MB/sec [Average]
[info]   (min, avg, max) = (2447.922, 2468.161, 2526.686), stdev = 33.046
[info]   CI (99.9%): [2340.911, 2595.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.001 ±(99.9%) 0.004 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻⁴, 0.001, 0.003), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen":
[info]   2450.686 ±(99.9%) 587.954 MB/sec [Average]
[info]   (min, avg, max) = (2382.282, 2450.686, 2723.826), stdev = 152.690
[info]   CI (99.9%): [1862.733, 3038.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm":
[info]   119.177 ±(99.9%) 29.986 B/op [Average]
[info]   (min, avg, max) = (113.142, 119.177, 132.841), stdev = 7.787
[info]   CI (99.9%): [89.192, 149.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 9.000), stdev = 1.342
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 71.14% complete, ETA 00:24:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1304013.424 ops/s
[info] # Warmup Iteration   2: 2040062.366 ops/s
[info] # Warmup Iteration   3: 2090128.664 ops/s
[info] Iteration   1: 2163104.832 ops/s
[info]                  ·gc.alloc.rate:                                  1737.029 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.185 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.134 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.881 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1229.692 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.908 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 2199938.787 ops/s
[info]                  ·gc.alloc.rate:                                  1766.514 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1217.680 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 2203285.238 ops/s
[info]                  ·gc.alloc.rate:            1769.193 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1215.804 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 2197381.764 ops/s
[info]                  ·gc.alloc.rate:            1764.900 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1702.105 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1219.027 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 2158308.536 ops/s
[info]                  ·gc.alloc.rate:                                  1733.512 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1264.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1241.109 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2184403.831 ±(99.9%) 83942.293 ops/s [Average]
[info]   (min, avg, max) = (2158308.536, 2184403.831, 2203285.238), stdev = 21799.547
[info]   CI (99.9%): [2100461.539, 2268346.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1754.229 ±(99.9%) 67.077 MB/sec [Average]
[info]   (min, avg, max) = (1733.512, 1754.229, 1769.193), stdev = 17.420
[info]   CI (99.9%): [1687.153, 1821.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.000, 1264.000, 1264.000), stdev = 0.001
[info]   CI (99.9%): [1264.000, 1264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.185), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.134), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.523 ±(99.9%) 20.767 MB/sec [Average]
[info]   (min, avg, max) = (1689.881, 1699.523, 1702.118), stdev = 5.393
[info]   CI (99.9%): [1678.756, 1720.290] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1224.662 ±(99.9%) 41.059 B/op [Average]
[info]   (min, avg, max) = (1215.804, 1224.662, 1241.109), stdev = 10.663
[info]   CI (99.9%): [1183.604, 1265.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.582 ±(99.9%) 5.008 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.582, 2.908), stdev = 1.301
[info]   CI (99.9%): [≈ 0, 5.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.000, 14.000), stdev = 4.472
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 71.39% complete, ETA 00:24:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 119944.903 ops/s
[info] # Warmup Iteration   2: 142474.323 ops/s
[info] # Warmup Iteration   3: 143169.172 ops/s
[info] Iteration   1: 144127.356 ops/s
[info]                  ·gc.alloc.rate:                                  2643.673 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26019.093 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 144536.287 ops/s
[info]                  ·gc.alloc.rate:                                  2650.947 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.086 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.693 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29653.412 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 141449.578 ops/s
[info]                  ·gc.alloc.rate:                                  2594.623 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.937 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30299.838 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 141528.881 ops/s
[info]                  ·gc.alloc.rate:                                  2596.274 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26497.374 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 141142.401 ops/s
[info]                  ·gc.alloc.rate:                                  2588.761 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28872.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.058 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.713 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30365.948 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala":
[info]   142556.900 ±(99.9%) 6288.497 ops/s [Average]
[info]   (min, avg, max) = (141142.401, 142556.900, 144536.287), stdev = 1633.103
[info]   CI (99.9%): [136268.403, 148845.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2614.855 ±(99.9%) 115.014 MB/sec [Average]
[info]   (min, avg, max) = (2588.761, 2614.855, 2650.947), stdev = 29.869
[info]   CI (99.9%): [2499.842, 2729.869] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   28872.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28872.003, 28872.003, 28872.003), stdev = 0.001
[info]   CI (99.9%): [28872.003, 28872.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.005, 0.008), stdev = 0.003
[info]   CI (99.9%): [≈ 0, 0.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.004, 0.052, 0.086), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   2586.706 ±(99.9%) 717.488 MB/sec [Average]
[info]   (min, avg, max) = (2382.445, 2586.706, 2722.937), stdev = 186.329
[info]   CI (99.9%): [1869.218, 3304.193] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   28567.133 ±(99.9%) 8212.443 B/op [Average]
[info]   (min, avg, max) = (26019.093, 28567.133, 30365.948), stdev = 2132.745
[info]   CI (99.9%): [20354.690, 36779.577] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson
[info] # Run progress: 71.64% complete, ETA 00:24:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7316.882 ops/s
[info] # Warmup Iteration   2: 19449.534 ops/s
[info] # Warmup Iteration   3: 19897.809 ops/s
[info] Iteration   1: 20111.382 ops/s
[info]                  ·gc.alloc.rate:                   1589.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              124424.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        105144.310 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      5.328 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 417.032 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 20194.025 ops/s
[info]                  ·gc.alloc.rate:                                  1596.583 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.292 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.124 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       132648.991 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 19754.344 ops/s
[info]                  ·gc.alloc.rate:                                  1561.515 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.028 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.209 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       135603.162 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 19911.783 ops/s
[info]                  ·gc.alloc.rate:                                  1573.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.415 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.382 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       107621.860 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 20573.427 ops/s
[info]                  ·gc.alloc.rate:                                  1626.728 MB/sec
[info]                  ·gc.alloc.rate.norm:                             124424.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.401 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       130199.333 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson":
[info]   20108.992 ±(99.9%) 1198.663 ops/s [Average]
[info]   (min, avg, max) = (19754.344, 20108.992, 20573.427), stdev = 311.289
[info]   CI (99.9%): [18910.330, 21307.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1589.680 ±(99.9%) 95.526 MB/sec [Average]
[info]   (min, avg, max) = (1561.515, 1589.680, 1626.728), stdev = 24.808
[info]   CI (99.9%): [1494.154, 1685.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   124424.031 ±(99.9%) 0.075 B/op [Average]
[info]   (min, avg, max) = (124424.020, 124424.031, 124424.065), stdev = 0.019
[info]   CI (99.9%): [124423.956, 124424.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.009 ±(99.9%) 0.046 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.009, 0.029), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.663 ±(99.9%) 3.565 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.663, 2.292), stdev = 0.926
[info]   CI (99.9%): [≈ 0, 4.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.177 ±(99.9%) 737.958 MB/sec [Average]
[info]   (min, avg, max) = (1343.331, 1562.177, 1702.235), stdev = 191.645
[info]   CI (99.9%): [824.219, 2300.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   122243.531 ±(99.9%) 56337.460 B/op [Average]
[info]   (min, avg, max) = (105144.310, 122243.531, 135603.162), stdev = 14630.659
[info]   CI (99.9%): [65906.072, 178580.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 9.175 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 5.328), stdev = 2.383
[info]   CI (99.9%): [≈ 0, 10.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   83.406 ±(99.9%) 718.155 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 83.406, 417.032), stdev = 186.503
[info]   CI (99.9%): [≈ 0, 801.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 19.000), stdev = 6.387
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 71.89% complete, ETA 00:24:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 66277.290 ops/s
[info] # Warmup Iteration   2: 130843.486 ops/s
[info] # Warmup Iteration   3: 132895.318 ops/s
[info] Iteration   1: 130201.231 ops/s
[info]                  ·gc.alloc.rate:                   1446.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1678.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20299.955 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 56.366 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         23.000 ms
[info] Iteration   2: 132326.787 ops/s
[info]                  ·gc.alloc.rate:                                  1470.403 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.131 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.553 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.652 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16194.591 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 131937.191 ops/s
[info]                  ·gc.alloc.rate:            1465.885 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.459 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 16242.208 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 131550.607 ops/s
[info]                  ·gc.alloc.rate:            1461.593 MB/sec
[info]                  ·gc.alloc.rate.norm:       17488.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 20362.324 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 131164.895 ops/s
[info]                  ·gc.alloc.rate:                                  1457.247 MB/sec
[info]                  ·gc.alloc.rate.norm:                             17488.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.391 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16337.666 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala":
[info]   131436.142 ±(99.9%) 3137.733 ops/s [Average]
[info]   (min, avg, max) = (130201.231, 131436.142, 132326.787), stdev = 814.859
[info]   CI (99.9%): [128298.410, 134573.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1460.293 ±(99.9%) 35.463 MB/sec [Average]
[info]   (min, avg, max) = (1446.335, 1460.293, 1470.403), stdev = 9.210
[info]   CI (99.9%): [1424.830, 1495.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   17488.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17488.003, 17488.003, 17488.003), stdev = 0.001
[info]   CI (99.9%): [17488.003, 17488.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.131), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.315 ±(99.9%) 2.665 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.315, 1.553), stdev = 0.692
[info]   CI (99.9%): [≈ 0, 2.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1493.044 ±(99.9%) 694.290 MB/sec [Average]
[info]   (min, avg, max) = (1361.391, 1493.044, 1701.820), stdev = 180.305
[info]   CI (99.9%): [798.753, 2187.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   17887.349 ±(99.9%) 8592.978 B/op [Average]
[info]   (min, avg, max) = (16194.591, 17887.349, 20362.324), stdev = 2231.569
[info]   CI (99.9%): [9294.371, 26480.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.273 ±(99.9%) 97.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.273, 56.366), stdev = 25.208
[info]   CI (99.9%): [≈ 0, 108.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 23.000), stdev = 8.497
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 72.14% complete, ETA 00:24:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 443319.427 ops/s
[info] # Warmup Iteration   2: 499130.938 ops/s
[info] # Warmup Iteration   3: 499469.523 ops/s
[info] Iteration   1: 504419.888 ops/s
[info]                  ·gc.alloc.rate:            1043.469 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4198.486 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  16.000 ms
[info] Iteration   2: 493190.179 ops/s
[info]                  ·gc.alloc.rate:            1020.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       3256.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.957 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3220.625 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 488016.706 ops/s
[info]                  ·gc.alloc.rate:                                  1009.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.055 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.177 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.213 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3280.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                12.890 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 490478.365 ops/s
[info]                  ·gc.alloc.rate:                                  1014.617 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.134 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3276.914 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 507810.092 ops/s
[info]                  ·gc.alloc.rate:                                  1050.770 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3256.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.422 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3165.059 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala":
[info]   496783.046 ±(99.9%) 33867.256 ops/s [Average]
[info]   (min, avg, max) = (488016.706, 496783.046, 507810.092), stdev = 8795.219
[info]   CI (99.9%): [462915.790, 530650.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1027.702 ±(99.9%) 70.419 MB/sec [Average]
[info]   (min, avg, max) = (1009.617, 1027.702, 1050.770), stdev = 18.288
[info]   CI (99.9%): [957.283, 1098.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3256.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3256.001, 3256.001, 3256.001), stdev = 0.001
[info]   CI (99.9%): [3256.001, 3256.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.093 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.055), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.037 ±(99.9%) 0.301 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.177), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1082.848 ±(99.9%) 565.737 MB/sec [Average]
[info]   (min, avg, max) = (1008.957, 1082.848, 1345.512), stdev = 146.920
[info]   CI (99.9%): [517.110, 1648.585] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3428.317 ±(99.9%) 1667.793 B/op [Average]
[info]   (min, avg, max) = (3165.059, 3428.317, 4198.486), stdev = 433.121
[info]   CI (99.9%): [1760.523, 5096.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.578 ±(99.9%) 22.197 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.578, 12.890), stdev = 5.765
[info]   CI (99.9%): [≈ 0, 24.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.200, 16.000), stdev = 5.805
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 72.39% complete, ETA 00:23:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 455759.958 ops/s
[info] # Warmup Iteration   2: 541306.246 ops/s
[info] # Warmup Iteration   3: 537932.563 ops/s
[info] Iteration   1: 541304.228 ops/s
[info]                  ·gc.alloc.rate:            528.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1956.299 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 540300.525 ops/s
[info]                  ·gc.alloc.rate:            527.201 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.958 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 541468.154 ops/s
[info]                  ·gc.alloc.rate:            528.321 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.680 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1955.699 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 532761.848 ops/s
[info]                  ·gc.alloc.rate:            519.919 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 993.823 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 539309.202 ops/s
[info]                  ·gc.alloc.rate:            526.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       1536.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1963.520 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   539028.791 ±(99.9%) 13896.853 ops/s [Average]
[info]   (min, avg, max) = (532761.848, 539028.791, 541468.154), stdev = 3608.969
[info]   CI (99.9%): [525131.938, 552925.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   525.980 ±(99.9%) 13.444 MB/sec [Average]
[info]   (min, avg, max) = (519.919, 525.980, 528.321), stdev = 3.491
[info]   CI (99.9%): [512.536, 539.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   1536.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1536.001, 1536.001, 1536.001), stdev = 0.001
[info]   CI (99.9%): [1536.001, 1536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   538.179 ±(99.9%) 709.374 MB/sec [Average]
[info]   (min, avg, max) = (336.350, 538.179, 672.747), stdev = 184.222
[info]   CI (99.9%): [≈ 0, 1247.553] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   1569.860 ±(99.9%) 2049.340 B/op [Average]
[info]   (min, avg, max) = (979.958, 1569.860, 1963.520), stdev = 532.207
[info]   CI (99.9%): [≈ 0, 3619.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 7.000), stdev = 1.643
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson
[info] # Run progress: 72.64% complete, ETA 00:23:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22330.467 ops/s
[info] # Warmup Iteration   2: 43964.046 ops/s
[info] # Warmup Iteration   3: 44792.484 ops/s
[info] Iteration   1: 44718.683 ops/s
[info]                  ·gc.alloc.rate:            926.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       32624.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.979 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 35447.992 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 44641.116 ops/s
[info]                  ·gc.alloc.rate:                   925.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              32624.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.666 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35533.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 23.485 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 44614.994 ops/s
[info]                  ·gc.alloc.rate:                   924.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              32624.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        35530.611 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 164.494 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 45245.602 ops/s
[info]                  ·gc.alloc.rate:                                  938.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32624.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.160 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.908 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23680.662 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 45306.333 ops/s
[info]                  ·gc.alloc.rate:                                  939.103 MB/sec
[info]                  ·gc.alloc.rate.norm:                             32624.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.282 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       35472.394 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson":
[info]   44905.346 ±(99.9%) 1313.642 ops/s [Average]
[info]   (min, avg, max) = (44614.994, 44905.346, 45306.333), stdev = 341.149
[info]   CI (99.9%): [43591.704, 46218.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   930.735 ±(99.9%) 27.792 MB/sec [Average]
[info]   (min, avg, max) = (924.591, 930.735, 939.103), stdev = 7.217
[info]   CI (99.9%): [902.944, 958.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   32624.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32624.009, 32624.009, 32624.010), stdev = 0.001
[info]   CI (99.9%): [32624.008, 32624.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.074 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.037), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.488 ±(99.9%) 2.580 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.488, 1.282), stdev = 0.670
[info]   CI (99.9%): [≈ 0, 3.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   944.723 ±(99.9%) 568.355 MB/sec [Average]
[info]   (min, avg, max) = (680.908, 944.723, 1021.096), stdev = 147.600
[info]   CI (99.9%): [376.368, 1513.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   33133.013 ±(99.9%) 20347.396 B/op [Average]
[info]   (min, avg, max) = (23680.662, 33133.013, 35533.405), stdev = 5284.154
[info]   CI (99.9%): [12785.617, 53480.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   37.596 ±(99.9%) 275.950 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 37.596, 164.494), stdev = 71.663
[info]   CI (99.9%): [≈ 0, 313.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 9.200, 14.000), stdev = 6.140
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 72.89% complete, ETA 00:23:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272289.633 ops/s
[info] # Warmup Iteration   2: 327084.477 ops/s
[info] # Warmup Iteration   3: 326757.434 ops/s
[info] Iteration   1: 331048.384 ops/s
[info]                  ·gc.alloc.rate:                                  2245.885 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.012 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.056 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11327.826 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 337435.876 ops/s
[info]                  ·gc.alloc.rate:                                  2289.449 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.472 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11113.945 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 342988.213 ops/s
[info]                  ·gc.alloc.rate:                                  2327.342 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9372.248 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 339771.736 ops/s
[info]                  ·gc.alloc.rate:                                  2305.349 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.584 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11037.805 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 342071.748 ops/s
[info]                  ·gc.alloc.rate:                                  2321.488 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10680.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.077 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10963.341 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce":
[info]   338663.191 ±(99.9%) 18370.895 ops/s [Average]
[info]   (min, avg, max) = (331048.384, 338663.191, 342988.213), stdev = 4770.863
[info]   CI (99.9%): [320292.296, 357034.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   2297.903 ±(99.9%) 125.600 MB/sec [Average]
[info]   (min, avg, max) = (2245.885, 2297.903, 2327.342), stdev = 32.618
[info]   CI (99.9%): [2172.303, 2423.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   10680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10680.001, 10680.001, 10680.001), stdev = 0.001
[info]   CI (99.9%): [10680.001, 10680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.015 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.005, 0.012), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.024 ±(99.9%) 0.071 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.024, 0.056), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   2314.522 ±(99.9%) 585.847 MB/sec [Average]
[info]   (min, avg, max) = (2042.362, 2314.522, 2383.077), stdev = 152.143
[info]   CI (99.9%): [1728.675, 2900.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   10763.033 ±(99.9%) 3039.349 B/op [Average]
[info]   (min, avg, max) = (9372.248, 10763.033, 11327.826), stdev = 789.309
[info]   CI (99.9%): [7723.684, 13802.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 7.000), stdev = 0.894
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.13% complete, ETA 00:23:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192074.566 ops/s
[info] # Warmup Iteration   2: 386830.848 ops/s
[info] # Warmup Iteration   3: 386891.320 ops/s
[info] Iteration   1: 386055.666 ops/s
[info]                  ·gc.alloc.rate:            1022.249 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4114.107 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 402401.850 ops/s
[info]                  ·gc.alloc.rate:            1065.659 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.215 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3947.236 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 404689.025 ops/s
[info]                  ·gc.alloc.rate:                                  1072.054 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.066 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.355 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5261.662 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                18.135 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 400834.220 ops/s
[info]                  ·gc.alloc.rate:                                  1061.365 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4168.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.147 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4009.726 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 393531.008 ops/s
[info]                  ·gc.alloc.rate:            1042.304 MB/sec
[info]                  ·gc.alloc.rate.norm:       4168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.329 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4084.126 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala":
[info]   397502.354 ±(99.9%) 29423.612 ops/s [Average]
[info]   (min, avg, max) = (386055.666, 397502.354, 404689.025), stdev = 7641.219
[info]   CI (99.9%): [368078.742, 426925.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1052.726 ±(99.9%) 78.276 MB/sec [Average]
[info]   (min, avg, max) = (1022.249, 1052.726, 1072.054), stdev = 20.328
[info]   CI (99.9%): [974.450, 1131.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.116 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.066), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.081 ±(99.9%) 0.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.081, 0.256), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1082.798 ±(99.9%) 582.857 MB/sec [Average]
[info]   (min, avg, max) = (1009.031, 1082.798, 1353.355), stdev = 151.366
[info]   CI (99.9%): [499.941, 1665.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   4283.371 ±(99.9%) 2120.715 B/op [Average]
[info]   (min, avg, max) = (3947.236, 4283.371, 5261.662), stdev = 550.743
[info]   CI (99.9%): [2162.656, 6404.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.032 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.627 ±(99.9%) 31.229 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.627, 18.135), stdev = 8.110
[info]   CI (99.9%): [≈ 0, 34.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 14.000), stdev = 5.683
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 73.38% complete, ETA 00:22:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 411949.455 ops/s
[info] # Warmup Iteration   2: 430803.717 ops/s
[info] # Warmup Iteration   3: 439554.401 ops/s
[info] Iteration   1: 442151.006 ops/s
[info]                  ·gc.alloc.rate:            871.951 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.152 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3599.532 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 441130.252 ops/s
[info]                  ·gc.alloc.rate:            869.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2405.160 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 440877.845 ops/s
[info]                  ·gc.alloc.rate:            869.320 MB/sec
[info]                  ·gc.alloc.rate.norm:       3104.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3609.818 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 441617.327 ops/s
[info]                  ·gc.alloc.rate:                                  870.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.061 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.217 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            677.357 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2414.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                11.870 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 439464.852 ops/s
[info]                  ·gc.alloc.rate:                                  866.946 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3104.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.456 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3657.207 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala":
[info]   441048.257 ±(99.9%) 3890.310 ops/s [Average]
[info]   (min, avg, max) = (439464.852, 441048.257, 442151.006), stdev = 1010.301
[info]   CI (99.9%): [437157.947, 444938.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   869.777 ±(99.9%) 7.222 MB/sec [Average]
[info]   (min, avg, max) = (866.946, 869.777, 871.951), stdev = 1.876
[info]   CI (99.9%): [862.555, 876.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3104.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3104.001, 3104.001, 3104.001), stdev = 0.001
[info]   CI (99.9%): [3104.001, 3104.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.061), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.058 ±(99.9%) 0.364 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.217), stdev = 0.095
[info]   CI (99.9%): [≈ 0, 0.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.989 ±(99.9%) 714.869 MB/sec [Average]
[info]   (min, avg, max) = (673.998, 878.989, 1021.456), stdev = 185.649
[info]   CI (99.9%): [164.120, 1593.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   3137.218 ±(99.9%) 2558.498 B/op [Average]
[info]   (min, avg, max) = (2405.160, 3137.218, 3657.207), stdev = 664.434
[info]   CI (99.9%): [578.720, 5695.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   2.374 ±(99.9%) 20.441 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.374, 11.870), stdev = 5.308
[info]   CI (99.9%): [≈ 0, 22.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 73.63% complete, ETA 00:22:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 56258.120 ops/s
[info] # Warmup Iteration   2: 94329.661 ops/s
[info] # Warmup Iteration   3: 95441.594 ops/s
[info] Iteration   1: 98844.495 ops/s
[info]                  ·gc.alloc.rate:                                  3578.280 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.065 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.399 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54199.018 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 95399.774 ops/s
[info]                  ·gc.alloc.rate:                                  3453.222 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.081 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.419 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       61772.737 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 95117.388 ops/s
[info]                  ·gc.alloc.rate:                                  3443.208 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.297 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56323.498 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 99132.353 ops/s
[info]                  ·gc.alloc.rate:                                  3588.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.044 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.254 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54041.042 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 97858.056 ops/s
[info]                  ·gc.alloc.rate:                                  3542.339 MB/sec
[info]                  ·gc.alloc.rate.norm:                             56984.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.066 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3743.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       60220.750 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson":
[info]   97270.413 ±(99.9%) 7312.344 ops/s [Average]
[info]   (min, avg, max) = (95117.388, 97270.413, 99132.353), stdev = 1898.992
[info]   CI (99.9%): [89958.069, 104582.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3521.127 ±(99.9%) 265.037 MB/sec [Average]
[info]   (min, avg, max) = (3443.208, 3521.127, 3588.588), stdev = 68.829
[info]   CI (99.9%): [3256.091, 3786.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   56984.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (56984.004, 56984.004, 56984.005), stdev = 0.001
[info]   CI (99.9%): [56984.003, 56984.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.004 ±(99.9%) 0.003 MB/sec [Average]
[info]   (min, avg, max) = (0.003, 0.004, 0.005), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.066 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.044, 0.066, 0.081), stdev = 0.013
[info]   CI (99.9%): [0.014, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3539.383 ±(99.9%) 717.440 MB/sec [Average]
[info]   (min, avg, max) = (3403.254, 3539.383, 3743.547), stdev = 186.317
[info]   CI (99.9%): [2821.943, 4256.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   57311.409 ±(99.9%) 13576.722 B/op [Average]
[info]   (min, avg, max) = (54041.042, 57311.409, 61772.737), stdev = 3525.832
[info]   CI (99.9%): [43734.687, 70888.131] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   52.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.400, 11.000), stdev = 0.548
[info]   CI (99.9%): [52.000, 52.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 1.095
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 73.88% complete, ETA 00:22:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253539.105 ops/s
[info] # Warmup Iteration   2: 336081.177 ops/s
[info] # Warmup Iteration   3: 339498.764 ops/s
[info] Iteration   1: 338797.096 ops/s
[info]                  ·gc.alloc.rate:            833.463 MB/sec
[info]                  ·gc.alloc.rate.norm:       3872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4697.444 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 332053.101 ops/s
[info]                  ·gc.alloc.rate:            816.709 MB/sec
[info]                  ·gc.alloc.rate.norm:       3872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3195.242 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 326853.340 ops/s
[info]                  ·gc.alloc.rate:            804.027 MB/sec
[info]                  ·gc.alloc.rate.norm:       3872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.116 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4869.295 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 340048.641 ops/s
[info]                  ·gc.alloc.rate:                   836.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              3872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.081 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3120.165 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 15.416 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 339815.564 ops/s
[info]                  ·gc.alloc.rate:                                  835.906 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.168 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.778 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.087 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4729.778 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce":
[info]   335513.548 ±(99.9%) 22521.329 ops/s [Average]
[info]   (min, avg, max) = (326853.340, 335513.548, 340048.641), stdev = 5848.718
[info]   CI (99.9%): [312992.219, 358034.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   825.323 ±(99.9%) 55.505 MB/sec [Average]
[info]   (min, avg, max) = (804.027, 825.323, 836.508), stdev = 14.414
[info]   CI (99.9%): [769.818, 880.828] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3872.001, 3872.001, 3872.001), stdev = 0.001
[info]   CI (99.9%): [3872.001, 3872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.289 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.168), stdev = 0.075
[info]   CI (99.9%): [≈ 0, 0.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.156 ±(99.9%) 1.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.156, 0.778), stdev = 0.348
[info]   CI (99.9%): [≈ 0, 1.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   878.278 ±(99.9%) 718.160 MB/sec [Average]
[info]   (min, avg, max) = (673.962, 878.278, 1021.087), stdev = 186.504
[info]   CI (99.9%): [160.118, 1596.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4122.385 ±(99.9%) 3401.632 B/op [Average]
[info]   (min, avg, max) = (3120.165, 4122.385, 4869.295), stdev = 883.393
[info]   CI (99.9%): [720.753, 7524.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.083 ±(99.9%) 26.547 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.083, 15.416), stdev = 6.894
[info]   CI (99.9%): [≈ 0, 29.630] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.13% complete, ETA 00:22:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 360164.043 ops/s
[info] # Warmup Iteration   2: 580554.043 ops/s
[info] # Warmup Iteration   3: 609670.221 ops/s
[info] Iteration   1: 584255.389 ops/s
[info]                  ·gc.alloc.rate:                   433.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        904.400 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 582989.271 ops/s
[info]                  ·gc.alloc.rate:            432.533 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.942 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1814.494 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 586213.870 ops/s
[info]                  ·gc.alloc.rate:                   434.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        901.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.788 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 586823.179 ops/s
[info]                  ·gc.alloc.rate:            435.446 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.368 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 902.243 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 610263.187 ops/s
[info]                  ·gc.alloc.rate:            450.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       1168.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      665.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1725.231 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala":
[info]   590108.979 ±(99.9%) 43782.144 ops/s [Average]
[info]   (min, avg, max) = (582989.271, 590108.979, 610263.187), stdev = 11370.084
[info]   CI (99.9%): [546326.835, 633891.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   437.369 ±(99.9%) 28.380 MB/sec [Average]
[info]   (min, avg, max) = (432.533, 437.369, 450.390), stdev = 7.370
[info]   CI (99.9%): [408.989, 465.749] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.001, 1168.001, 1168.001), stdev = 0.001
[info]   CI (99.9%): [1168.001, 1168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   468.985 ±(99.9%) 701.743 MB/sec [Average]
[info]   (min, avg, max) = (335.676, 468.985, 671.942), stdev = 182.240
[info]   CI (99.9%): [≈ 0, 1170.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1249.552 ±(99.9%) 1833.004 B/op [Average]
[info]   (min, avg, max) = (901.390, 1249.552, 1814.494), stdev = 476.025
[info]   CI (99.9%): [≈ 0, 3082.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.717 ±(99.9%) 3.778 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.717, 1.794), stdev = 0.981
[info]   CI (99.9%): [≈ 0, 4.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.400, 9.000), stdev = 2.408
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 74.38% complete, ETA 00:22:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2243131.218 ops/s
[info] # Warmup Iteration   2: 2445537.507 ops/s
[info] # Warmup Iteration   3: 2503393.332 ops/s
[info] Iteration   1: 2537811.611 ops/s
[info]                  ·gc.alloc.rate:                   1173.688 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1346.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        834.902 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.826 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 2562101.133 ops/s
[info]                  ·gc.alloc.rate:                   1185.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.055 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        620.331 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.998 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.455 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 2461662.046 ops/s
[info]                  ·gc.alloc.rate:                                  1138.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.142 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.091 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.560 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       870.536 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   4: 2521849.000 ops/s
[info]                  ·gc.alloc.rate:            1166.701 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 637.317 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2541424.562 ops/s
[info]                  ·gc.alloc.rate:                                  1175.319 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       843.212 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala":
[info]   2524969.670 ±(99.9%) 147032.318 ops/s [Average]
[info]   (min, avg, max) = (2461662.046, 2524969.670, 2562101.133), stdev = 38183.826
[info]   CI (99.9%): [2377937.352, 2672001.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1167.940 ±(99.9%) 68.124 MB/sec [Average]
[info]   (min, avg, max) = (1138.627, 1167.940, 1185.367), stdev = 17.692
[info]   CI (99.9%): [1099.816, 1236.064] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.245 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.142), stdev = 0.064
[info]   CI (99.9%): [≈ 0, 0.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.018 ±(99.9%) 0.156 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.091), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1220.069 ±(99.9%) 718.912 MB/sec [Average]
[info]   (min, avg, max) = (1010.055, 1220.069, 1361.560), stdev = 186.699
[info]   CI (99.9%): [501.156, 1938.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   761.259 ±(99.9%) 468.859 B/op [Average]
[info]   (min, avg, max) = (620.331, 761.259, 870.536), stdev = 121.761
[info]   CI (99.9%): [292.400, 1230.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.998), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.656 ±(99.9%) 4.110 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.656, 2.455), stdev = 1.067
[info]   CI (99.9%): [≈ 0, 4.766] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.800, 14.000), stdev = 5.541
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 74.63% complete, ETA 00:21:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2320267.218 ops/s
[info] # Warmup Iteration   2: 2527546.478 ops/s
[info] # Warmup Iteration   3: 2514919.805 ops/s
[info] Iteration   1: 2515581.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2515795.883 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2515652.192 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2475229.379 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2514404.205 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2507332.544 ±(99.9%) 69137.674 ops/s [Average]
[info]   (min, avg, max) = (2475229.379, 2507332.544, 2515795.883), stdev = 17954.834
[info]   CI (99.9%): [2438194.870, 2576470.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 74.88% complete, ETA 00:21:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 310902.371 ops/s
[info] # Warmup Iteration   2: 417402.965 ops/s
[info] # Warmup Iteration   3: 434091.574 ops/s
[info] Iteration   1: 438007.352 ops/s
[info]                  ·gc.alloc.rate:            630.044 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.384 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1208.762 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 430924.340 ops/s
[info]                  ·gc.alloc.rate:            619.745 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.646 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2457.254 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 432530.140 ops/s
[info]                  ·gc.alloc.rate:            622.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.739 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2448.137 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 434112.730 ops/s
[info]                  ·gc.alloc.rate:            624.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.645 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2439.217 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 432642.145 ops/s
[info]                  ·gc.alloc.rate:            622.289 MB/sec
[info]                  ·gc.alloc.rate.norm:       2264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2447.504 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson":
[info]   433643.341 ±(99.9%) 10350.193 ops/s [Average]
[info]   (min, avg, max) = (430924.340, 433643.341, 438007.352), stdev = 2687.912
[info]   CI (99.9%): [423293.148, 443993.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   623.709 ±(99.9%) 15.001 MB/sec [Average]
[info]   (min, avg, max) = (619.745, 623.709, 630.044), stdev = 3.896
[info]   CI (99.9%): [608.707, 638.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2264.001, 2264.001, 2264.001), stdev = 0.001
[info]   CI (99.9%): [2264.001, 2264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.428 ±(99.9%) 579.138 MB/sec [Average]
[info]   (min, avg, max) = (336.384, 605.428, 672.739), stdev = 150.400
[info]   CI (99.9%): [26.290, 1184.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2200.175 ±(99.9%) 2134.232 B/op [Average]
[info]   (min, avg, max) = (1208.762, 2200.175, 2457.254), stdev = 554.253
[info]   CI (99.9%): [65.943, 4334.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ListOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 75.12% complete, ETA 00:21:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29557.995 ops/s
[info] # Warmup Iteration   2: 38948.901 ops/s
[info] # Warmup Iteration   3: 39102.433 ops/s
[info] Iteration   1: 38978.538 ops/s
[info]                  ·gc.alloc.rate:            1314.390 MB/sec
[info]                  ·gc.alloc.rate.norm:       53080.010 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 54439.344 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 38710.830 ops/s
[info]                  ·gc.alloc.rate:                                  1305.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53080.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.359 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.817 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       55085.583 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                135.412 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 39558.436 ops/s
[info]                  ·gc.alloc.rate:                                  1334.083 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53080.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.288 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.512 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54171.347 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 39285.501 ops/s
[info]                  ·gc.alloc.rate:                                  1324.835 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53080.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.386 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.468 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54547.728 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 38116.625 ops/s
[info]                  ·gc.alloc.rate:                                  1285.413 MB/sec
[info]                  ·gc.alloc.rate.norm:                             53080.012 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.368 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.462 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       56220.375 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce":
[info]   38929.986 ±(99.9%) 2138.133 ops/s [Average]
[info]   (min, avg, max) = (38116.625, 38929.986, 39558.436), stdev = 555.266
[info]   CI (99.9%): [36791.853, 41068.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1312.842 ±(99.9%) 72.136 MB/sec [Average]
[info]   (min, avg, max) = (1285.413, 1312.842, 1334.083), stdev = 18.734
[info]   CI (99.9%): [1240.706, 1384.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   53080.011 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (53080.010, 53080.011, 53080.012), stdev = 0.001
[info]   CI (99.9%): [53080.008, 53080.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.880 ±(99.9%) 5.369 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.880, 3.359), stdev = 1.394
[info]   CI (99.9%): [≈ 0, 6.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1357.462 ±(99.9%) 23.106 MB/sec [Average]
[info]   (min, avg, max) = (1348.050, 1357.462, 1361.512), stdev = 6.001
[info]   CI (99.9%): [1334.355, 1380.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   54892.875 ±(99.9%) 3131.127 B/op [Average]
[info]   (min, avg, max) = (54171.347, 54892.875, 56220.375), stdev = 813.144
[info]   CI (99.9%): [51761.748, 58024.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   27.082 ±(99.9%) 233.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.082, 135.412), stdev = 60.558
[info]   CI (99.9%): [≈ 0, 260.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 13.000), stdev = 4.159
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.37% complete, ETA 00:21:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27165.397 ops/s
[info] # Warmup Iteration   2: 53602.861 ops/s
[info] # Warmup Iteration   3: 54110.404 ops/s
[info] Iteration   1: 54543.895 ops/s
[info]                  ·gc.alloc.rate:                   982.481 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.434 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        29100.949 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 52348.325 ops/s
[info]                  ·gc.alloc.rate:                   942.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.778 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        30301.497 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 20.027 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 52655.407 ops/s
[info]                  ·gc.alloc.rate:                   948.615 MB/sec
[info]                  ·gc.alloc.rate.norm:              28352.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        20089.494 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 139.372 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 52532.857 ops/s
[info]                  ·gc.alloc.rate:                                  946.698 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28352.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.073 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.180 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.558 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30593.944 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 52728.496 ops/s
[info]                  ·gc.alloc.rate:                                  950.125 MB/sec
[info]                  ·gc.alloc.rate.norm:                             28352.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30480.242 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   52961.796 ±(99.9%) 3450.398 ops/s [Average]
[info]   (min, avg, max) = (52348.325, 52961.796, 54543.895), stdev = 896.058
[info]   CI (99.9%): [49511.398, 56412.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   954.172 ±(99.9%) 61.810 MB/sec [Average]
[info]   (min, avg, max) = (942.941, 954.172, 982.481), stdev = 16.052
[info]   CI (99.9%): [892.362, 1015.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   28352.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28352.008, 28352.008, 28352.008), stdev = 0.001
[info]   CI (99.9%): [28352.007, 28352.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.125 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.073), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.438 ±(99.9%) 3.750 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.438, 2.180), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.276 ±(99.9%) 590.611 MB/sec [Average]
[info]   (min, avg, max) = (672.164, 946.276, 1021.558), stdev = 153.380
[info]   CI (99.9%): [355.664, 1536.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   28113.225 ±(99.9%) 17424.019 B/op [Average]
[info]   (min, avg, max) = (20089.494, 28113.225, 30593.944), stdev = 4524.962
[info]   CI (99.9%): [10689.207, 45537.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.566 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.663), stdev = 1.965
[info]   CI (99.9%): [≈ 0, 8.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   35.724 ±(99.9%) 226.289 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 35.724, 139.372), stdev = 58.767
[info]   CI (99.9%): [≈ 0, 262.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 14.000), stdev = 5.030
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 75.62% complete, ETA 00:21:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63091.558 ops/s
[info] # Warmup Iteration   2: 73474.856 ops/s
[info] # Warmup Iteration   3: 74647.646 ops/s
[info] Iteration   1: 74856.857 ops/s
[info]                  ·gc.alloc.rate:            1147.835 MB/sec
[info]                  ·gc.alloc.rate.norm:       24136.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.137 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 28347.841 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 73150.685 ops/s
[info]                  ·gc.alloc.rate:                   1121.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              24136.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.017 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        21757.246 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 71.664 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 74365.180 ops/s
[info]                  ·gc.alloc.rate:                                  1140.238 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.108 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.046 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21613.002 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 75437.167 ops/s
[info]                  ·gc.alloc.rate:                                  1156.627 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24136.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.082 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       28407.880 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 75337.602 ops/s
[info]                  ·gc.alloc.rate:                                  1155.563 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24136.005 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.407 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       21333.904 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   74629.498 ±(99.9%) 3582.436 ops/s [Average]
[info]   (min, avg, max) = (73150.685, 74629.498, 75437.167), stdev = 930.347
[info]   CI (99.9%): [71047.062, 78211.934] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1144.363 ±(99.9%) 55.307 MB/sec [Average]
[info]   (min, avg, max) = (1121.554, 1144.363, 1156.627), stdev = 14.363
[info]   CI (99.9%): [1089.057, 1199.670] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   24136.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24136.005, 24136.006, 24136.006), stdev = 0.001
[info]   CI (99.9%): [24136.005, 24136.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.023 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.023, 0.108), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.477 ±(99.9%) 3.875 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.477, 2.276), stdev = 1.006
[info]   CI (99.9%): [≈ 0, 4.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1152.589 ±(99.9%) 710.992 MB/sec [Average]
[info]   (min, avg, max) = (1011.017, 1152.589, 1361.340), stdev = 184.642
[info]   CI (99.9%): [441.598, 1863.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   24291.975 ±(99.9%) 14374.647 B/op [Average]
[info]   (min, avg, max) = (21333.904, 24291.975, 28407.880), stdev = 3733.050
[info]   CI (99.9%): [9917.327, 38666.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   14.333 ±(99.9%) 123.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.333, 71.664), stdev = 32.049
[info]   CI (99.9%): [≈ 0, 137.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.000, 12.000), stdev = 4.301
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 75.87% complete, ETA 00:20:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8335.095 ops/s
[info] # Warmup Iteration   2: 18800.578 ops/s
[info] # Warmup Iteration   3: 18857.053 ops/s
[info] Iteration   1: 18510.350 ops/s
[info]                  ·gc.alloc.rate:                   1335.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              113520.232 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.109 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        114287.138 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 113.268 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 18485.709 ops/s
[info]                  ·gc.alloc.rate:                                  1333.596 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 6.781 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.157 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       115185.129 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                396.995 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 18963.334 ops/s
[info]                  ·gc.alloc.rate:                                  1367.666 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.027 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.203 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.412 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       113000.967 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 19122.376 ops/s
[info]                  ·gc.alloc.rate:                                  1379.070 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.361 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.352 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       112061.557 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 18323.869 ops/s
[info]                  ·gc.alloc.rate:                                  1321.478 MB/sec
[info]                  ·gc.alloc.rate.norm:                             113520.022 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.338 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.298 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       116940.711 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson":
[info]   18681.128 ±(99.9%) 1318.989 ops/s [Average]
[info]   (min, avg, max) = (18323.869, 18681.128, 19122.376), stdev = 342.537
[info]   CI (99.9%): [17362.139, 20000.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1347.380 ±(99.9%) 94.864 MB/sec [Average]
[info]   (min, avg, max) = (1321.478, 1347.380, 1379.070), stdev = 24.636
[info]   CI (99.9%): [1252.516, 1442.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   113520.065 ±(99.9%) 0.359 B/op [Average]
[info]   (min, avg, max) = (113520.022, 113520.065, 113520.232), stdev = 0.093
[info]   CI (99.9%): [113519.706, 113520.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.080), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   1.737 ±(99.9%) 10.992 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.737, 6.781), stdev = 2.855
[info]   CI (99.9%): [≈ 0, 12.729] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1356.266 ±(99.9%) 29.522 MB/sec [Average]
[info]   (min, avg, max) = (1344.109, 1356.266, 1361.412), stdev = 7.667
[info]   CI (99.9%): [1326.743, 1385.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   114295.101 ±(99.9%) 7320.013 B/op [Average]
[info]   (min, avg, max) = (112061.557, 114295.101, 116940.711), stdev = 1900.984
[info]   CI (99.9%): [106975.087, 121615.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.199 ±(99.9%) 7.782 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.199, 4.664), stdev = 2.021
[info]   CI (99.9%): [≈ 0, 8.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   102.052 ±(99.9%) 662.380 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 102.052, 396.995), stdev = 172.018
[info]   CI (99.9%): [≈ 0, 764.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 9.200, 19.000), stdev = 6.380
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.12% complete, ETA 00:20:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76878.826 ops/s
[info] # Warmup Iteration   2: 149469.483 ops/s
[info] # Warmup Iteration   3: 150342.975 ops/s
[info] Iteration   1: 150530.552 ops/s
[info]                  ·gc.alloc.rate:            1386.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       14496.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1342.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14041.097 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 151696.424 ops/s
[info]                  ·gc.alloc.rate:                                  1397.074 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.162 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.684 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.198 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14071.877 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.663 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                48.381 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 152836.140 ops/s
[info]                  ·gc.alloc.rate:                                  1407.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.561 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14021.532 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 153072.352 ops/s
[info]                  ·gc.alloc.rate:                                  1409.823 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.540 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       13999.552 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 145005.470 ops/s
[info]                  ·gc.alloc.rate:                                  1335.473 MB/sec
[info]                  ·gc.alloc.rate.norm:                             14496.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.513 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       14778.656 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   150628.187 ±(99.9%) 12715.088 ops/s [Average]
[info]   (min, avg, max) = (145005.470, 150628.187, 153072.352), stdev = 3302.068
[info]   CI (99.9%): [137913.100, 163343.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1387.262 ±(99.9%) 117.166 MB/sec [Average]
[info]   (min, avg, max) = (1335.473, 1387.262, 1409.823), stdev = 30.428
[info]   CI (99.9%): [1270.097, 1504.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14496.003, 14496.003, 14496.003), stdev = 0.001
[info]   CI (99.9%): [14496.002, 14496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.034 ±(99.9%) 0.277 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.162), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.349 ±(99.9%) 2.873 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.349, 1.684), stdev = 0.746
[info]   CI (99.9%): [≈ 0, 3.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1356.723 ±(99.9%) 31.258 MB/sec [Average]
[info]   (min, avg, max) = (1342.804, 1356.723, 1361.561), stdev = 8.117
[info]   CI (99.9%): [1325.466, 1387.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   14182.543 ±(99.9%) 1287.254 B/op [Average]
[info]   (min, avg, max) = (13999.552, 14182.543, 14778.656), stdev = 334.296
[info]   CI (99.9%): [12895.288, 15469.797] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.030 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.663), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.676 ±(99.9%) 83.315 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.676, 48.381), stdev = 21.637
[info]   CI (99.9%): [≈ 0, 92.991] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.800, 19.000), stdev = 6.496
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 76.37% complete, ETA 00:20:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 483871.284 ops/s
[info] # Warmup Iteration   2: 558745.609 ops/s
[info] # Warmup Iteration   3: 529075.834 ops/s
[info] Iteration   1: 569484.585 ops/s
[info]                  ·gc.alloc.rate:            628.023 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.653 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1859.367 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 572309.199 ops/s
[info]                  ·gc.alloc.rate:            631.069 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 925.103 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 560157.106 ops/s
[info]                  ·gc.alloc.rate:            617.729 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1890.348 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 562178.167 ops/s
[info]                  ·gc.alloc.rate:            620.042 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.742 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1883.553 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 548918.486 ops/s
[info]                  ·gc.alloc.rate:            605.418 MB/sec
[info]                  ·gc.alloc.rate.norm:       1736.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.744 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1929.053 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   562609.509 ±(99.9%) 35238.920 ops/s [Average]
[info]   (min, avg, max) = (548918.486, 562609.509, 572309.199), stdev = 9151.436
[info]   CI (99.9%): [527370.589, 597848.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   620.456 ±(99.9%) 38.682 MB/sec [Average]
[info]   (min, avg, max) = (605.418, 620.456, 631.069), stdev = 10.046
[info]   CI (99.9%): [581.775, 659.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1736.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1736.001, 1736.001, 1736.001), stdev = 0.001
[info]   CI (99.9%): [1736.001, 1736.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.417 ±(99.9%) 579.310 MB/sec [Average]
[info]   (min, avg, max) = (336.293, 605.417, 672.744), stdev = 150.445
[info]   CI (99.9%): [26.107, 1184.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1697.485 ±(99.9%) 1665.399 B/op [Average]
[info]   (min, avg, max) = (925.103, 1697.485, 1929.053), stdev = 432.499
[info]   CI (99.9%): [32.086, 3362.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 76.62% complete, ETA 00:20:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 441969.796 ops/s
[info] # Warmup Iteration   2: 510038.238 ops/s
[info] # Warmup Iteration   3: 508012.621 ops/s
[info] Iteration   1: 508172.663 ops/s
[info]                  ·gc.alloc.rate:      5.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 508267.872 ops/s
[info]                  ·gc.alloc.rate:      5.166 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 507557.128 ops/s
[info]                  ·gc.alloc.rate:      5.162 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 493232.062 ops/s
[info]                  ·gc.alloc.rate:      5.014 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 496900.100 ops/s
[info]                  ·gc.alloc.rate:      5.051 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   502825.965 ±(99.9%) 27750.315 ops/s [Average]
[info]   (min, avg, max) = (493232.062, 502825.965, 508267.872), stdev = 7206.669
[info]   CI (99.9%): [475075.650, 530576.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   5.112 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (5.014, 5.112, 5.166), stdev = 0.073
[info]   CI (99.9%): [4.829, 5.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 76.87% complete, ETA 00:19:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32390.626 ops/s
[info] # Warmup Iteration   2: 60731.709 ops/s
[info] # Warmup Iteration   3: 62361.503 ops/s
[info] Iteration   1: 62288.796 ops/s
[info]                  ·gc.alloc.rate:            1003.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.201 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 25448.995 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 60560.141 ops/s
[info]                  ·gc.alloc.rate:            976.364 MB/sec
[info]                  ·gc.alloc.rate.norm:       25368.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 26175.448 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 61372.034 ops/s
[info]                  ·gc.alloc.rate:                   989.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              25368.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1010.998 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25932.102 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 119.581 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 62854.187 ops/s
[info]                  ·gc.alloc.rate:                                  1013.250 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25368.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.086 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.149 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.324 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25570.142 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 61190.422 ops/s
[info]                  ·gc.alloc.rate:                                  986.210 MB/sec
[info]                  ·gc.alloc.rate.norm:                             25368.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.071 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.096 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       26265.372 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson":
[info]   61653.116 ±(99.9%) 3515.676 ops/s [Average]
[info]   (min, avg, max) = (60560.141, 61653.116, 62854.187), stdev = 913.010
[info]   CI (99.9%): [58137.439, 65168.792] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   993.765 ±(99.9%) 56.686 MB/sec [Average]
[info]   (min, avg, max) = (976.364, 993.765, 1013.250), stdev = 14.721
[info]   CI (99.9%): [937.079, 1050.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   25368.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25368.006, 25368.007, 25368.007), stdev = 0.001
[info]   CI (99.9%): [25368.006, 25368.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.018, 0.086), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.444 ±(99.9%) 3.672 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.444, 2.149), stdev = 0.954
[info]   CI (99.9%): [≈ 0, 4.116] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.612 ±(99.9%) 27.330 MB/sec [Average]
[info]   (min, avg, max) = (1007.201, 1013.612, 1021.324), stdev = 7.098
[info]   CI (99.9%): [986.282, 1040.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   25878.412 ±(99.9%) 1388.744 B/op [Average]
[info]   (min, avg, max) = (25448.995, 25878.412, 26265.372), stdev = 360.652
[info]   CI (99.9%): [24489.668, 27267.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   23.916 ±(99.9%) 205.927 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 23.916, 119.581), stdev = 53.478
[info]   CI (99.9%): [≈ 0, 229.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 14.000), stdev = 5.148
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 77.11% complete, ETA 00:19:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1167880.064 ops/s
[info] # Warmup Iteration   2: 2137487.327 ops/s
[info] # Warmup Iteration   3: 2175184.135 ops/s
[info] Iteration   1: 2156160.731 ops/s
[info]                  ·gc.alloc.rate:                                  3068.150 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.890 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2236.160 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 2158015.226 ops/s
[info]                  ·gc.alloc.rate:                                  3070.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2234.296 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 2174329.362 ops/s
[info]                  ·gc.alloc.rate:                                  3094.030 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2217.550 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 2205709.205 ops/s
[info]                  ·gc.alloc.rate:                                  3138.802 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2186.044 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 2216316.375 ops/s
[info]                  ·gc.alloc.rate:                                  3154.072 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2240.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.275 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2175.517 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2182106.180 ±(99.9%) 106180.408 ops/s [Average]
[info]   (min, avg, max) = (2156160.731, 2182106.180, 2216316.375), stdev = 27574.715
[info]   CI (99.9%): [2075925.772, 2288286.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3105.176 ±(99.9%) 151.560 MB/sec [Average]
[info]   (min, avg, max) = (3068.150, 3105.176, 3154.072), stdev = 39.360
[info]   CI (99.9%): [2953.615, 3256.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2240.000, 2240.000, 2240.000), stdev = 0.001
[info]   CI (99.9%): [2240.000, 2240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.007 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.006), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.002 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.002, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3063.077 ±(99.9%) 0.601 MB/sec [Average]
[info]   (min, avg, max) = (3062.890, 3063.077, 3063.275), stdev = 0.156
[info]   CI (99.9%): [3062.476, 3063.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2209.913 ±(99.9%) 107.102 B/op [Average]
[info]   (min, avg, max) = (2175.517, 2209.913, 2236.160), stdev = 27.814
[info]   CI (99.9%): [2102.811, 2317.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava
[info] # Run progress: 77.36% complete, ETA 00:19:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.910 ops/s
[info] # Warmup Iteration   2: 717387.023 ops/s
[info] # Warmup Iteration   3: 767491.881 ops/s
[info] Iteration   1: 768377.253 ops/s
[info]                  ·gc.alloc.rate:            363.236 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.740 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 683.586 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 773969.095 ops/s
[info]                  ·gc.alloc.rate:            365.866 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 678.666 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 757863.240 ops/s
[info]                  ·gc.alloc.rate:            358.253 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 693.087 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 759046.063 ops/s
[info]                  ·gc.alloc.rate:            358.783 MB/sec
[info]                  ·gc.alloc.rate.norm:       744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      333.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.028 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 749061.769 ops/s
[info]                  ·gc.alloc.rate:                   354.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             333.174 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        699.852 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.400 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava":
[info]   761663.484 ±(99.9%) 37363.091 ops/s [Average]
[info]   (min, avg, max) = (749061.769, 761663.484, 773969.095), stdev = 9703.076
[info]   CI (99.9%): [724300.393, 799026.575] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   360.066 ±(99.9%) 17.555 MB/sec [Average]
[info]   (min, avg, max) = (354.191, 360.066, 365.866), stdev = 4.559
[info]   CI (99.9%): [342.511, 377.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.001, 744.001, 744.001), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   333.622 ±(99.9%) 0.964 MB/sec [Average]
[info]   (min, avg, max) = (333.174, 333.622, 333.740), stdev = 0.250
[info]   CI (99.9%): [332.657, 334.586] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   689.444 ±(99.9%) 32.145 B/op [Average]
[info]   (min, avg, max) = (678.666, 689.444, 699.852), stdev = 8.348
[info]   CI (99.9%): [657.299, 721.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.280 ±(99.9%) 2.410 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.280, 1.400), stdev = 0.626
[info]   CI (99.9%): [≈ 0, 2.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readDslJsonJava:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 77.61% complete, ETA 00:19:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 37194.251 ops/s
[info] # Warmup Iteration   2: 269797.627 ops/s
[info] # Warmup Iteration   3: 262805.406 ops/s
[info] Iteration   1: 269931.278 ops/s
[info]                  ·gc.alloc.rate:                   502.308 MB/sec
[info]                  ·gc.alloc.rate.norm:              2928.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.811 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1957.472 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 269770.467 ops/s
[info]                  ·gc.alloc.rate:            501.937 MB/sec
[info]                  ·gc.alloc.rate.norm:       2928.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.879 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3925.170 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 272613.482 ops/s
[info]                  ·gc.alloc.rate:            507.097 MB/sec
[info]                  ·gc.alloc.rate.norm:       2928.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1942.099 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 270103.889 ops/s
[info]                  ·gc.alloc.rate:            502.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       2928.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.743 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3920.331 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 272318.195 ops/s
[info]                  ·gc.alloc.rate:            506.521 MB/sec
[info]                  ·gc.alloc.rate.norm:       2928.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.334 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1944.217 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   270947.462 ±(99.9%) 5371.646 ops/s [Average]
[info]   (min, avg, max) = (269770.467, 270947.462, 272613.482), stdev = 1394.999
[info]   CI (99.9%): [265575.816, 276319.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   504.064 ±(99.9%) 9.709 MB/sec [Average]
[info]   (min, avg, max) = (501.937, 504.064, 507.097), stdev = 2.521
[info]   CI (99.9%): [494.355, 513.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2928.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2928.001, 2928.002, 2928.002), stdev = 0.001
[info]   CI (99.9%): [2928.001, 2928.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   470.823 ±(99.9%) 710.015 MB/sec [Average]
[info]   (min, avg, max) = (335.811, 470.823, 672.879), stdev = 184.389
[info]   CI (99.9%): [≈ 0, 1180.838] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2737.858 ±(99.9%) 4165.131 B/op [Average]
[info]   (min, avg, max) = (1942.099, 2737.858, 3925.170), stdev = 1081.671
[info]   CI (99.9%): [≈ 0, 6902.989] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.281] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.777 ±(99.9%) 6.688 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.884), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 9.000), stdev = 2.588
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 77.86% complete, ETA 00:19:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 603286.523 ops/s
[info] # Warmup Iteration   2: 676285.061 ops/s
[info] # Warmup Iteration   3: 681590.955 ops/s
[info] Iteration   1: 682914.954 ops/s
[info]                  ·gc.alloc.rate:            430.354 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.010 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 776.834 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 677587.280 ops/s
[info]                  ·gc.alloc.rate:            426.963 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.947 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1565.838 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 680812.814 ops/s
[info]                  ·gc.alloc.rate:            429.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 779.207 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 681684.990 ops/s
[info]                  ·gc.alloc.rate:            429.590 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.008 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 778.211 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Iteration   5: 680403.760 ops/s
[info]                  ·gc.alloc.rate:            428.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       992.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.142 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1559.324 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   680680.760 ±(99.9%) 7619.968 ops/s [Average]
[info]   (min, avg, max) = (677587.280, 680680.760, 682914.954), stdev = 1978.881
[info]   CI (99.9%): [673060.792, 688300.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   428.963 ±(99.9%) 4.848 MB/sec [Average]
[info]   (min, avg, max) = (426.963, 428.963, 430.354), stdev = 1.259
[info]   CI (99.9%): [424.115, 433.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   992.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (992.001, 992.001, 992.001), stdev = 0.001
[info]   CI (99.9%): [992.001, 992.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   471.822 ±(99.9%) 710.841 MB/sec [Average]
[info]   (min, avg, max) = (337.003, 471.822, 674.142), stdev = 184.603
[info]   CI (99.9%): [≈ 0, 1182.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1091.883 ±(99.9%) 1654.597 B/op [Average]
[info]   (min, avg, max) = (776.834, 1091.883, 1565.838), stdev = 429.694
[info]   CI (99.9%): [≈ 0, 2746.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 4.000, 6.000), stdev = 1.871
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 78.11% complete, ETA 00:18:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3447336.796 ops/s
[info] # Warmup Iteration   2: 3748869.177 ops/s
[info] # Warmup Iteration   3: 3733378.421 ops/s
[info] Iteration   1: 3917364.888 ops/s
[info]                  ·gc.alloc.rate:            1254.656 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.436 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 541.672 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 3858538.637 ops/s
[info]                  ·gc.alloc.rate:                                  1235.370 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.023 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.270 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       413.797 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.358 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   3: 3683353.265 ops/s
[info]                  ·gc.alloc.rate:                                  1179.359 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.058 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       581.791 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 3739768.016 ops/s
[info]                  ·gc.alloc.rate:            1197.482 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 429.776 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 3881183.579 ops/s
[info]                  ·gc.alloc.rate:            1242.775 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.479 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 552.140 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3816041.677 ±(99.9%) 383809.628 ops/s [Average]
[info]   (min, avg, max) = (3683353.265, 3816041.677, 3917364.888), stdev = 99674.142
[info]   CI (99.9%): [3432232.049, 4199851.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1221.928 ±(99.9%) 123.222 MB/sec [Average]
[info]   (min, avg, max) = (1179.359, 1221.928, 1254.656), stdev = 32.000
[info]   CI (99.9%): [1098.706, 1345.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.016 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.058), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.007 ±(99.9%) 0.042 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.025), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen":
[info]   1221.340 ±(99.9%) 716.181 MB/sec [Average]
[info]   (min, avg, max) = (1014.270, 1221.340, 1361.479), stdev = 185.990
[info]   CI (99.9%): [505.159, 1937.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm":
[info]   503.835 ±(99.9%) 294.730 B/op [Average]
[info]   (min, avg, max) = (413.797, 503.835, 581.791), stdev = 76.541
[info]   CI (99.9%): [209.105, 798.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm":
[info]   0.272 ±(99.9%) 2.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.272, 1.358), stdev = 0.608
[info]   CI (99.9%): [≈ 0, 2.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.400, 12.000), stdev = 3.507
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 78.36% complete, ETA 00:18:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6245407.901 ops/s
[info] # Warmup Iteration   2: 6653461.310 ops/s
[info] # Warmup Iteration   3: 7072907.732 ops/s
[info] Iteration   1: 7261575.499 ops/s
[info]                  ·gc.alloc.rate:            590.490 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.114 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 7265503.213 ops/s
[info]                  ·gc.alloc.rate:            590.778 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.036 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 7186049.136 ops/s
[info]                  ·gc.alloc.rate:            584.330 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 147.654 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 7029531.166 ops/s
[info]                  ·gc.alloc.rate:            571.777 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.120 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 75.469 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 7262096.674 ops/s
[info]                  ·gc.alloc.rate:            590.539 MB/sec
[info]                  ·gc.alloc.rate.norm:       128.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.025 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 146.096 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   7200951.138 ±(99.9%) 390740.460 ops/s [Average]
[info]   (min, avg, max) = (7029531.166, 7200951.138, 7265503.213), stdev = 101474.057
[info]   CI (99.9%): [6810210.677, 7591691.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   585.583 ±(99.9%) 31.507 MB/sec [Average]
[info]   (min, avg, max) = (571.777, 585.583, 590.778), stdev = 8.182
[info]   CI (99.9%): [554.075, 617.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   128.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (128.000, 128.000, 128.000), stdev = 0.001
[info]   CI (99.9%): [128.000, 128.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen":
[info]   606.655 ±(99.9%) 580.194 MB/sec [Average]
[info]   (min, avg, max) = (337.120, 606.655, 674.054), stdev = 150.674
[info]   CI (99.9%): [26.461, 1186.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm":
[info]   132.274 ±(99.9%) 122.305 B/op [Average]
[info]   (min, avg, max) = (75.469, 132.274, 147.654), stdev = 31.762
[info]   CI (99.9%): [9.969, 254.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.800, 6.000), stdev = 1.095
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 78.61% complete, ETA 00:18:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17496.494 ops/s
[info] # Warmup Iteration   2: 168054.909 ops/s
[info] # Warmup Iteration   3: 181430.371 ops/s
[info] Iteration   1: 185692.477 ops/s
[info]                  ·gc.alloc.rate:                   1241.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.004 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11393.515 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.646 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 179929.445 ops/s
[info]                  ·gc.alloc.rate:            1203.682 MB/sec
[info]                  ·gc.alloc.rate.norm:       10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.265 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8810.045 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 180234.693 ops/s
[info]                  ·gc.alloc.rate:                                  1205.490 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10528.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.182 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.593 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1356.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       11848.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                40.717 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 187568.336 ops/s
[info]                  ·gc.alloc.rate:            1254.877 MB/sec
[info]                  ·gc.alloc.rate.norm:       10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.343 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8568.724 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 185030.049 ops/s
[info]                  ·gc.alloc.rate:            1237.505 MB/sec
[info]                  ·gc.alloc.rate.norm:       10528.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.312 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11581.279 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   183691.000 ±(99.9%) 13189.236 ops/s [Average]
[info]   (min, avg, max) = (179929.445, 183691.000, 187568.336), stdev = 3425.203
[info]   CI (99.9%): [170501.764, 196880.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1228.692 ±(99.9%) 88.267 MB/sec [Average]
[info]   (min, avg, max) = (1203.682, 1228.692, 1254.877), stdev = 22.923
[info]   CI (99.9%): [1140.425, 1316.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10528.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10528.002, 10528.002, 10528.002), stdev = 0.001
[info]   CI (99.9%): [10528.002, 10528.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.036 ±(99.9%) 0.314 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.036, 0.182), stdev = 0.082
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.319 ±(99.9%) 2.744 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.319, 1.593), stdev = 0.713
[info]   CI (99.9%): [≈ 0, 3.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.129 ±(99.9%) 717.145 MB/sec [Average]
[info]   (min, avg, max) = (1007.265, 1218.129, 1361.312), stdev = 186.240
[info]   CI (99.9%): [500.984, 1935.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   10440.461 ±(99.9%) 6195.437 B/op [Average]
[info]   (min, avg, max) = (8568.724, 10440.461, 11848.744), stdev = 1608.935
[info]   CI (99.9%): [4245.025, 16635.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   9.273 ±(99.9%) 68.339 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.273, 40.717), stdev = 17.747
[info]   CI (99.9%): [≈ 0, 77.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 19.000), stdev = 6.760
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 78.86% complete, ETA 00:18:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 770464.794 ops/s
[info] # Warmup Iteration   2: 855689.701 ops/s
[info] # Warmup Iteration   3: 860987.839 ops/s
[info] Iteration   1: 849504.769 ops/s
[info]                  ·gc.alloc.rate:            82.035 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      341.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 631.909 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 815570.255 ops/s
[info]                  ·gc.alloc.rate:      78.757 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 815607.076 ops/s
[info]                  ·gc.alloc.rate:      78.761 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 819385.628 ops/s
[info]                  ·gc.alloc.rate:      79.124 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 815157.813 ops/s
[info]                  ·gc.alloc.rate:      78.710 MB/sec
[info]                  ·gc.alloc.rate.norm: 152.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala":
[info]   823045.108 ±(99.9%) 57338.165 ops/s [Average]
[info]   (min, avg, max) = (815157.813, 823045.108, 849504.769), stdev = 14890.539
[info]   CI (99.9%): [765706.943, 880383.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   79.477 ±(99.9%) 5.542 MB/sec [Average]
[info]   (min, avg, max) = (78.710, 79.477, 82.035), stdev = 1.439
[info]   CI (99.9%): [73.935, 85.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   152.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.001, 152.001), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   68.208 ±(99.9%) 587.293 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 68.208, 341.041), stdev = 152.518
[info]   CI (99.9%): [≈ 0, 655.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   126.382 ±(99.9%) 1088.185 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 126.382, 631.909), stdev = 282.598
[info]   CI (99.9%): [≈ 0, 1214.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.count":
[info]   1.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.200, 1.000), stdev = 0.447
[info]   CI (99.9%): [1.000, 1.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 4.000), stdev = 1.789
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 79.10% complete, ETA 00:18:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27348.122 ops/s
[info] # Warmup Iteration   2: 64081.481 ops/s
[info] # Warmup Iteration   3: 65823.903 ops/s
[info] Iteration   1: 65565.489 ops/s
[info]                  ·gc.alloc.rate:                                  3046.907 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.256 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.747 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73540.237 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 64533.803 ops/s
[info]                  ·gc.alloc.rate:                                  2998.158 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.408 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.885 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74714.939 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 64784.887 ops/s
[info]                  ·gc.alloc.rate:                                  3009.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.343 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.993 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74425.512 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 65076.099 ops/s
[info]                  ·gc.alloc.rate:                                  3023.626 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.349 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       74092.755 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   5: 65831.934 ops/s
[info]                  ·gc.alloc.rate:                                  3058.730 MB/sec
[info]                  ·gc.alloc.rate.norm:                             73136.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.251 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3063.210 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73243.132 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson":
[info]   65158.442 ±(99.9%) 2069.856 ops/s [Average]
[info]   (min, avg, max) = (64533.803, 65158.442, 65831.934), stdev = 537.535
[info]   CI (99.9%): [63088.586, 67228.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3027.469 ±(99.9%) 96.973 MB/sec [Average]
[info]   (min, avg, max) = (2998.158, 3027.469, 3058.730), stdev = 25.183
[info]   CI (99.9%): [2930.496, 3124.441] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   73136.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (73136.006, 73136.006, 73136.007), stdev = 0.001
[info]   CI (99.9%): [73136.005, 73136.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.010 MB/sec [Average]
[info]   (min, avg, max) = (0.010, 0.013, 0.017), stdev = 0.003
[info]   CI (99.9%): [0.003, 0.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.321 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (0.251, 0.321, 0.408), stdev = 0.067
[info]   CI (99.9%): [0.064, 0.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3063.203 ±(99.9%) 1.280 MB/sec [Average]
[info]   (min, avg, max) = (3062.885, 3063.203, 3063.747), stdev = 0.332
[info]   CI (99.9%): [3061.924, 3064.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   74003.315 ±(99.9%) 2346.191 B/op [Average]
[info]   (min, avg, max) = (73243.132, 74003.315, 74714.939), stdev = 609.298
[info]   CI (99.9%): [71657.123, 76349.506] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.400, 9.000), stdev = 0.548
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.35% complete, ETA 00:17:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 625873.428 ops/s
[info] # Warmup Iteration   2: 1051179.686 ops/s
[info] # Warmup Iteration   3: 1050423.259 ops/s
[info] Iteration   1: 1035534.552 ops/s
[info]                  ·gc.alloc.rate:                   578.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1021.535 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.012 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   2: 1051246.111 ops/s
[info]                  ·gc.alloc.rate:                   587.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1006.280 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.997 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 1047602.514 ops/s
[info]                  ·gc.alloc.rate:            585.693 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 505.358 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 1004121.203 ops/s
[info]                  ·gc.alloc.rate:            561.359 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.705 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1054.548 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1001777.026 ops/s
[info]                  ·gc.alloc.rate:            560.033 MB/sec
[info]                  ·gc.alloc.rate.norm:       880.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.672 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1056.994 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala":
[info]   1028056.281 ±(99.9%) 91107.309 ops/s [Average]
[info]   (min, avg, max) = (1001777.026, 1028056.281, 1051246.111), stdev = 23660.279
[info]   CI (99.9%): [936948.972, 1119163.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   574.740 ±(99.9%) 50.965 MB/sec [Average]
[info]   (min, avg, max) = (560.033, 574.740, 587.701), stdev = 13.236
[info]   CI (99.9%): [523.774, 625.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   880.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (880.000, 880.000, 880.000), stdev = 0.001
[info]   CI (99.9%): [880.000, 880.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   605.156 ±(99.9%) 578.635 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 605.156, 672.705), stdev = 150.270
[info]   CI (99.9%): [26.521, 1183.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   928.943 ±(99.9%) 915.596 B/op [Average]
[info]   (min, avg, max) = (505.358, 928.943, 1056.994), stdev = 237.777
[info]   CI (99.9%): [13.347, 1844.539] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.402 ±(99.9%) 2.119 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.402, 1.012), stdev = 0.550
[info]   CI (99.9%): [≈ 0, 2.521] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.600, 13.000), stdev = 2.881
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 79.60% complete, ETA 00:17:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 738062.637 ops/s
[info] # Warmup Iteration   2: 780782.480 ops/s
[info] # Warmup Iteration   3: 797943.783 ops/s
[info] Iteration   1: 796878.516 ops/s
[info]                  ·gc.alloc.rate:                   222.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.443 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        660.448 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      2.665 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.263 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 790726.764 ops/s
[info]                  ·gc.alloc.rate:            221.019 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.997 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 670.887 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 794138.587 ops/s
[info]                  ·gc.alloc.rate:      222.003 MB/sec
[info]                  ·gc.alloc.rate.norm: 440.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 797287.788 ops/s
[info]                  ·gc.alloc.rate:            222.922 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.062 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 796741.573 ops/s
[info]                  ·gc.alloc.rate:            222.742 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.398 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 664.516 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala":
[info]   795154.646 ±(99.9%) 10664.072 ops/s [Average]
[info]   (min, avg, max) = (790726.764, 795154.646, 797287.788), stdev = 2769.426
[info]   CI (99.9%): [784490.574, 805818.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   222.299 ±(99.9%) 3.088 MB/sec [Average]
[info]   (min, avg, max) = (221.019, 222.299, 222.922), stdev = 0.802
[info]   CI (99.9%): [219.211, 225.387] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.001, 440.001, 440.001), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   268.856 ±(99.9%) 578.744 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 268.856, 336.997), stdev = 150.298
[info]   CI (99.9%): [≈ 0, 847.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   531.983 ±(99.9%) 1145.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 531.983, 670.887), stdev = 297.411
[info]   CI (99.9%): [≈ 0, 1677.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 4.589 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 2.665), stdev = 1.192
[info]   CI (99.9%): [≈ 0, 5.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.053 ±(99.9%) 9.062 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.053, 5.263), stdev = 2.353
[info]   CI (99.9%): [≈ 0, 10.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.600, 4.000), stdev = 1.517
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 79.85% complete, ETA 00:17:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 881833.216 ops/s
[info] # Warmup Iteration   2: 920105.689 ops/s
[info] # Warmup Iteration   3: 908507.719 ops/s
[info] Iteration   1: 947950.073 ops/s
[info]                  ·gc.alloc.rate:      9.639 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 916098.942 ops/s
[info]                  ·gc.alloc.rate:      9.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 916295.487 ops/s
[info]                  ·gc.alloc.rate:      9.314 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 916887.750 ops/s
[info]                  ·gc.alloc.rate:      9.319 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 917050.774 ops/s
[info]                  ·gc.alloc.rate:      9.320 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc":
[info]   922856.605 ±(99.9%) 54037.149 ops/s [Average]
[info]   (min, avg, max) = (916098.942, 922856.605, 947950.073), stdev = 14033.276
[info]   CI (99.9%): [868819.456, 976893.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   9.381 ±(99.9%) 0.555 MB/sec [Average]
[info]   (min, avg, max) = (9.314, 9.381, 9.639), stdev = 0.144
[info]   CI (99.9%): [8.826, 9.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.10% complete, ETA 00:17:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18809.187 ops/s
[info] # Warmup Iteration   2: 38963.435 ops/s
[info] # Warmup Iteration   3: 39516.220 ops/s
[info] Iteration   1: 39850.414 ops/s
[info]                  ·gc.alloc.rate:                                  1671.976 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66048.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1687.610 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66665.619 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                184.159 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        16.000 ms
[info] Iteration   2: 41330.609 ops/s
[info]                  ·gc.alloc.rate:                                  1734.028 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66048.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.008 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.290 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.522 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64809.901 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 40181.375 ops/s
[info]                  ·gc.alloc.rate:                                  1686.049 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66048.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.103 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.828 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       66666.128 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 39870.345 ops/s
[info]                  ·gc.alloc.rate:                                  1673.087 MB/sec
[info]                  ·gc.alloc.rate.norm:                             66048.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.034 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.958 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67187.754 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 41383.509 ops/s
[info]                  ·gc.alloc.rate:            1736.413 MB/sec
[info]                  ·gc.alloc.rate.norm:       66048.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.681 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 64726.914 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson":
[info]   40523.250 ±(99.9%) 2975.071 ops/s [Average]
[info]   (min, avg, max) = (39850.414, 40523.250, 41383.509), stdev = 772.617
[info]   CI (99.9%): [37548.179, 43498.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1700.310 ±(99.9%) 124.591 MB/sec [Average]
[info]   (min, avg, max) = (1671.976, 1700.310, 1736.413), stdev = 32.356
[info]   CI (99.9%): [1575.719, 1824.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66048.011 ±(99.9%) 0.004 B/op [Average]
[info]   (min, avg, max) = (66048.010, 66048.011, 66048.013), stdev = 0.001
[info]   CI (99.9%): [66048.007, 66048.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.041 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.026), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.290 ±(99.9%) 1.635 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.290, 1.022), stdev = 0.424
[info]   CI (99.9%): [≈ 0, 1.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1698.920 ±(99.9%) 24.354 MB/sec [Average]
[info]   (min, avg, max) = (1687.610, 1698.920, 1701.958), stdev = 6.325
[info]   CI (99.9%): [1674.566, 1723.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   66011.263 ±(99.9%) 4446.612 B/op [Average]
[info]   (min, avg, max) = (64726.914, 66011.263, 67187.754), stdev = 1154.771
[info]   CI (99.9%): [61564.651, 70457.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   36.832 ±(99.9%) 317.133 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.832, 184.159), stdev = 82.358
[info]   CI (99.9%): [≈ 0, 353.965] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableBitSetBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.800, 16.000), stdev = 5.167
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.35% complete, ETA 00:16:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 218329.663 ops/s
[info] # Warmup Iteration   2: 243511.410 ops/s
[info] # Warmup Iteration   3: 244641.351 ops/s
[info] Iteration   1: 239739.412 ops/s
[info]                  ·gc.alloc.rate:            938.103 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.952 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6638.356 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 244015.698 ops/s
[info]                  ·gc.alloc.rate:            955.079 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.125 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4347.925 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 241772.109 ops/s
[info]                  ·gc.alloc.rate:                   946.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6582.491 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 21.681 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 248281.751 ops/s
[info]                  ·gc.alloc.rate:                                  971.634 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6160.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.231 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.050 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6473.291 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 248522.267 ops/s
[info]                  ·gc.alloc.rate:            972.547 MB/sec
[info]                  ·gc.alloc.rate.norm:       6160.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6467.015 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala":
[info]   244466.247 ±(99.9%) 15014.267 ops/s [Average]
[info]   (min, avg, max) = (239739.412, 244466.247, 248522.267), stdev = 3899.157
[info]   CI (99.9%): [229451.980, 259480.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   956.696 ±(99.9%) 58.861 MB/sec [Average]
[info]   (min, avg, max) = (938.103, 956.696, 972.547), stdev = 15.286
[info]   CI (99.9%): [897.835, 1015.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6160.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6160.002, 6160.002, 6160.002), stdev = 0.001
[info]   CI (99.9%): [6160.001, 6160.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.007 ±(99.9%) 0.063 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.007, 0.036), stdev = 0.016
[info]   CI (99.9%): [≈ 0, 0.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.046 ±(99.9%) 0.397 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.231), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   947.630 ±(99.9%) 589.059 MB/sec [Average]
[info]   (min, avg, max) = (674.125, 947.630, 1021.050), stdev = 152.977
[info]   CI (99.9%): [358.571, 1536.689] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   6101.815 ±(99.9%) 3785.802 B/op [Average]
[info]   (min, avg, max) = (4347.925, 6101.815, 6638.356), stdev = 983.161
[info]   CI (99.9%): [2316.013, 9887.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.336 ±(99.9%) 37.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.336, 21.681), stdev = 9.696
[info]   CI (99.9%): [≈ 0, 41.673] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 9.000), stdev = 2.828
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 80.60% complete, ETA 00:16:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6605.197 ops/s
[info] # Warmup Iteration   2: 15607.461 ops/s
[info] # Warmup Iteration   3: 16454.578 ops/s
[info] Iteration   1: 16382.556 ops/s
[info]                  ·gc.alloc.rate:            967.005 MB/sec
[info]                  ·gc.alloc.rate.norm:       92912.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 96884.173 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 16167.066 ops/s
[info]                  ·gc.alloc.rate:                   954.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              92912.025 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.840 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        98113.512 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 64.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 16226.559 ops/s
[info]                  ·gc.alloc.rate:                   957.762 MB/sec
[info]                  ·gc.alloc.rate.norm:              92912.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        97686.193 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 452.251 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 16474.213 ops/s
[info]                  ·gc.alloc.rate:                                  972.870 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92912.031 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.047 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.459 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.458 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97552.313 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 16575.814 ops/s
[info]                  ·gc.alloc.rate:                                  978.503 MB/sec
[info]                  ·gc.alloc.rate.norm:                             92912.025 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.159 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.113 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96958.020 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson":
[info]   16365.242 ±(99.9%) 652.971 ops/s [Average]
[info]   (min, avg, max) = (16167.066, 16365.242, 16575.814), stdev = 169.574
[info]   CI (99.9%): [15712.271, 17018.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   966.110 ±(99.9%) 38.827 MB/sec [Average]
[info]   (min, avg, max) = (954.409, 966.110, 978.503), stdev = 10.083
[info]   CI (99.9%): [927.282, 1004.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   92912.027 ±(99.9%) 0.010 B/op [Average]
[info]   (min, avg, max) = (92912.025, 92912.027, 92912.031), stdev = 0.003
[info]   CI (99.9%): [92912.017, 92912.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.010, 0.047), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.924 ±(99.9%) 7.615 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.924, 4.459), stdev = 1.977
[info]   CI (99.9%): [≈ 0, 8.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1013.147 ±(99.9%) 28.677 MB/sec [Average]
[info]   (min, avg, max) = (1006.975, 1013.147, 1021.458), stdev = 7.447
[info]   CI (99.9%): [984.470, 1041.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   97438.842 ±(99.9%) 1989.786 B/op [Average]
[info]   (min, avg, max) = (96884.173, 97438.842, 98113.512), stdev = 516.741
[info]   CI (99.9%): [95449.056, 99428.628] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   103.420 ±(99.9%) 758.631 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 103.420, 452.251), stdev = 197.014
[info]   CI (99.9%): [≈ 0, 862.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 14.000), stdev = 5.762
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 80.85% complete, ETA 00:16:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 67742.101 ops/s
[info] # Warmup Iteration   2: 126245.069 ops/s
[info] # Warmup Iteration   3: 127416.717 ops/s
[info] Iteration   1: 129248.508 ops/s
[info]                  ·gc.alloc.rate:                                  1579.017 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.585 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1684.263 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20513.872 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                56.780 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        20.000 ms
[info] Iteration   2: 133314.276 ops/s
[info]                  ·gc.alloc.rate:                                  1629.310 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.036 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.428 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.235 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20092.785 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 129713.401 ops/s
[info]                  ·gc.alloc.rate:                                  1584.900 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.043 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.437 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       16520.390 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 133016.602 ops/s
[info]                  ·gc.alloc.rate:                                  1625.832 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.392 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20137.640 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 133041.918 ops/s
[info]                  ·gc.alloc.rate:                                  1625.461 MB/sec
[info]                  ·gc.alloc.rate.norm:                             19232.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       20134.462 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala":
[info]   131666.941 ±(99.9%) 7723.156 ops/s [Average]
[info]   (min, avg, max) = (129248.508, 131666.941, 133314.276), stdev = 2005.679
[info]   CI (99.9%): [123943.785, 139390.097] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1608.904 ±(99.9%) 95.231 MB/sec [Average]
[info]   (min, avg, max) = (1579.017, 1608.904, 1629.310), stdev = 24.731
[info]   CI (99.9%): [1513.673, 1704.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   19232.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19232.003, 19232.003, 19232.003), stdev = 0.001
[info]   CI (99.9%): [19232.003, 19232.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.018 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.018, 0.048), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.214 ±(99.9%) 1.050 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.214, 0.585), stdev = 0.273
[info]   CI (99.9%): [≈ 0, 1.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1630.413 ±(99.9%) 579.755 MB/sec [Average]
[info]   (min, avg, max) = (1361.437, 1630.413, 1702.392), stdev = 150.561
[info]   CI (99.9%): [1050.657, 2210.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   19479.830 ±(99.9%) 6404.264 B/op [Average]
[info]   (min, avg, max) = (16520.390, 19479.830, 20513.872), stdev = 1663.167
[info]   CI (99.9%): [13075.566, 25884.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   11.356 ±(99.9%) 97.779 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.356, 56.780), stdev = 25.393
[info]   CI (99.9%): [≈ 0, 109.135] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 20.000), stdev = 6.986
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 81.09% complete, ETA 00:16:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 296722.970 ops/s
[info] # Warmup Iteration   2: 350927.903 ops/s
[info] # Warmup Iteration   3: 340876.600 ops/s
[info] Iteration   1: 352624.454 ops/s
[info]                  ·gc.alloc.rate:                                  1679.117 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.166 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.741 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1693.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7560.824 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                17.839 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 354500.604 ops/s
[info]                  ·gc.alloc.rate:                                  1687.991 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.595 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7556.415 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 355494.996 ops/s
[info]                  ·gc.alloc.rate:            1692.911 MB/sec
[info]                  ·gc.alloc.rate.norm:       7496.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.779 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7535.268 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 354583.146 ops/s
[info]                  ·gc.alloc.rate:                                  1688.736 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.582 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6043.819 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 356253.391 ops/s
[info]                  ·gc.alloc.rate:                                  1696.844 MB/sec
[info]                  ·gc.alloc.rate.norm:                             7496.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2041.350 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9017.896 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala":
[info]   354691.318 ±(99.9%) 5239.555 ops/s [Average]
[info]   (min, avg, max) = (352624.454, 354691.318, 356253.391), stdev = 1360.696
[info]   CI (99.9%): [349451.764, 359930.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1689.120 ±(99.9%) 25.507 MB/sec [Average]
[info]   (min, avg, max) = (1679.117, 1689.120, 1696.844), stdev = 6.624
[info]   CI (99.9%): [1663.613, 1714.627] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   7496.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7496.001, 7496.001, 7496.001), stdev = 0.001
[info]   CI (99.9%): [7496.001, 7496.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.283 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.166), stdev = 0.073
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.154 ±(99.9%) 1.263 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.154, 0.741), stdev = 0.328
[info]   CI (99.9%): [≈ 0, 1.418] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1699.989 ±(99.9%) 925.543 MB/sec [Average]
[info]   (min, avg, max) = (1361.582, 1699.989, 2041.350), stdev = 240.361
[info]   CI (99.9%): [774.446, 2625.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7542.844 ±(99.9%) 4049.323 B/op [Average]
[info]   (min, avg, max) = (6043.819, 7542.844, 9017.896), stdev = 1051.596
[info]   CI (99.9%): [3493.522, 11592.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   3.568 ±(99.9%) 30.720 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.568, 17.839), stdev = 7.978
[info]   CI (99.9%): [≈ 0, 34.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.200, 9.000), stdev = 2.387
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 81.34% complete, ETA 00:16:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329983.626 ops/s
[info] # Warmup Iteration   2: 400452.966 ops/s
[info] # Warmup Iteration   3: 397018.065 ops/s
[info] Iteration   1: 402717.475 ops/s
[info]                  ·gc.alloc.rate:            1379.540 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1345.441 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5258.721 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 388099.084 ops/s
[info]                  ·gc.alloc.rate:                                  1329.253 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.636 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1357.197 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5505.357 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.208 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 405597.700 ops/s
[info]                  ·gc.alloc.rate:                                  1389.313 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5283.436 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 402955.435 ops/s
[info]                  ·gc.alloc.rate:            1380.409 MB/sec
[info]                  ·gc.alloc.rate.norm:       5392.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.486 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5318.085 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 394033.082 ops/s
[info]                  ·gc.alloc.rate:                                  1349.834 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5392.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.446 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5438.385 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   398680.555 ±(99.9%) 28295.339 ops/s [Average]
[info]   (min, avg, max) = (388099.084, 398680.555, 405597.700), stdev = 7348.210
[info]   CI (99.9%): [370385.217, 426975.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1365.670 ±(99.9%) 97.140 MB/sec [Average]
[info]   (min, avg, max) = (1329.253, 1365.670, 1389.313), stdev = 25.227
[info]   CI (99.9%): [1268.530, 1462.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   5392.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5392.001, 5392.001, 5392.001), stdev = 0.001
[info]   CI (99.9%): [5392.001, 5392.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.032 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.032, 0.157), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.129 ±(99.9%) 1.092 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.129, 0.636), stdev = 0.284
[info]   CI (99.9%): [≈ 0, 1.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   1357.382 ±(99.9%) 26.654 MB/sec [Average]
[info]   (min, avg, max) = (1345.441, 1357.382, 1361.486), stdev = 6.922
[info]   CI (99.9%): [1330.728, 1384.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   5360.797 ±(99.9%) 409.084 B/op [Average]
[info]   (min, avg, max) = (5258.721, 5360.797, 5505.357), stdev = 106.238
[info]   CI (99.9%): [4951.713, 5769.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm":
[info]   3.242 ±(99.9%) 27.911 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.242, 16.208), stdev = 7.248
[info]   CI (99.9%): [≈ 0, 31.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.000, 13.000), stdev = 4.243
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 81.59% complete, ETA 00:15:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26382.812 ops/s
[info] # Warmup Iteration   2: 51446.026 ops/s
[info] # Warmup Iteration   3: 50980.677 ops/s
[info] Iteration   1: 52845.834 ops/s
[info]                  ·gc.alloc.rate:                   1287.411 MB/sec
[info]                  ·gc.alloc.rate.norm:              38344.008 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.480 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        40013.959 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 19.838 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 53341.610 ops/s
[info]                  ·gc.alloc.rate:                                  1299.279 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38344.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.098 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39937.516 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                117.926 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 54084.207 ops/s
[info]                  ·gc.alloc.rate:                                  1317.526 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38344.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.038 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.097 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.030 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29715.081 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 53898.892 ops/s
[info]                  ·gc.alloc.rate:                                  1313.062 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38344.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.191 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39759.017 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 53978.313 ops/s
[info]                  ·gc.alloc.rate:                                  1315.242 MB/sec
[info]                  ·gc.alloc.rate.norm:                             38344.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.171 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39699.365 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson":
[info]   53629.771 ±(99.9%) 2017.472 ops/s [Average]
[info]   (min, avg, max) = (52845.834, 53629.771, 54084.207), stdev = 523.931
[info]   CI (99.9%): [51612.299, 55647.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1306.504 ±(99.9%) 49.371 MB/sec [Average]
[info]   (min, avg, max) = (1287.411, 1306.504, 1317.526), stdev = 12.822
[info]   CI (99.9%): [1257.133, 1355.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   38344.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38344.008, 38344.008, 38344.008), stdev = 0.001
[info]   CI (99.9%): [38344.007, 38344.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.038), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.512 ±(99.9%) 2.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.512, 1.098), stdev = 0.540
[info]   CI (99.9%): [≈ 0, 2.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1288.207 ±(99.9%) 575.839 MB/sec [Average]
[info]   (min, avg, max) = (1021.030, 1288.207, 1361.733), stdev = 149.543
[info]   CI (99.9%): [712.369, 1864.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   37824.988 ±(99.9%) 17464.137 B/op [Average]
[info]   (min, avg, max) = (29715.081, 37824.988, 40013.959), stdev = 4535.381
[info]   CI (99.9%): [20360.850, 55289.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.687 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   27.553 ±(99.9%) 197.327 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.553, 117.926), stdev = 51.245
[info]   CI (99.9%): [≈ 0, 224.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 18.000), stdev = 6.573
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 81.84% complete, ETA 00:15:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42328.817 ops/s
[info] # Warmup Iteration   2: 55778.119 ops/s
[info] # Warmup Iteration   3: 55819.767 ops/s
[info] Iteration   1: 55156.956 ops/s
[info]                  ·gc.alloc.rate:            1241.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       35440.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.023 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 38472.180 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 54439.931 ops/s
[info]                  ·gc.alloc.rate:                                  1225.548 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35440.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.052 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.500 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.253 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29329.855 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                96.290 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 56872.025 ops/s
[info]                  ·gc.alloc.rate:                                  1280.646 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35440.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.037 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.574 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37679.571 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 57067.930 ops/s
[info]                  ·gc.alloc.rate:                                  1285.195 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35440.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.157 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       37550.183 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 54609.155 ops/s
[info]                  ·gc.alloc.rate:                                  1229.530 MB/sec
[info]                  ·gc.alloc.rate.norm:                             35440.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.047 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.079 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       29431.624 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce":
[info]   55629.199 ±(99.9%) 4829.614 ops/s [Average]
[info]   (min, avg, max) = (54439.931, 55629.199, 57067.930), stdev = 1254.236
[info]   CI (99.9%): [50799.585, 60458.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1252.539 ±(99.9%) 109.425 MB/sec [Average]
[info]   (min, avg, max) = (1225.548, 1252.539, 1285.195), stdev = 28.417
[info]   CI (99.9%): [1143.115, 1361.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   35440.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (35440.007, 35440.007, 35440.008), stdev = 0.001
[info]   CI (99.9%): [35440.006, 35440.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.052), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.544 ±(99.9%) 2.604 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.544, 1.500), stdev = 0.676
[info]   CI (99.9%): [≈ 0, 3.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1221.330 ±(99.9%) 716.286 MB/sec [Average]
[info]   (min, avg, max) = (1014.253, 1221.330, 1361.718), stdev = 186.017
[info]   CI (99.9%): [505.043, 1937.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   34492.683 ±(99.9%) 18021.062 B/op [Average]
[info]   (min, avg, max) = (29329.855, 34492.683, 38472.180), stdev = 4680.013
[info]   CI (99.9%): [16471.620, 52513.745] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   19.258 ±(99.9%) 165.817 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.258, 96.290), stdev = 43.062
[info]   CI (99.9%): [≈ 0, 185.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 14.000), stdev = 4.879
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.09% complete, ETA 00:15:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 46394.969 ops/s
[info] # Warmup Iteration   2: 93244.445 ops/s
[info] # Warmup Iteration   3: 90417.211 ops/s
[info] Iteration   1: 91049.648 ops/s
[info]                  ·gc.alloc.rate:                   618.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.266 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11618.092 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.514 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 90933.004 ops/s
[info]                  ·gc.alloc.rate:                   617.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.202 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11633.166 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 91477.435 ops/s
[info]                  ·gc.alloc.rate:                   621.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.141 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11564.249 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.461 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 95282.185 ops/s
[info]                  ·gc.alloc.rate:                   646.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              10688.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.063 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        11102.738 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 11.004 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 93168.694 ops/s
[info]                  ·gc.alloc.rate:            632.848 MB/sec
[info]                  ·gc.alloc.rate.norm:       10688.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.262 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 11353.656 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala":
[info]   92382.193 ±(99.9%) 7132.258 ops/s [Average]
[info]   (min, avg, max) = (90933.004, 92382.193, 95282.185), stdev = 1852.225
[info]   CI (99.9%): [85249.935, 99514.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   627.411 ±(99.9%) 48.207 MB/sec [Average]
[info]   (min, avg, max) = (617.588, 627.411, 646.958), stdev = 12.519
[info]   CI (99.9%): [579.203, 675.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   10688.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10688.004, 10688.005, 10688.005), stdev = 0.001
[info]   CI (99.9%): [10688.004, 10688.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.187 ±(99.9%) 0.332 MB/sec [Average]
[info]   (min, avg, max) = (672.063, 672.187, 672.266), stdev = 0.086
[info]   CI (99.9%): [671.855, 672.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   11454.380 ±(99.9%) 870.950 B/op [Average]
[info]   (min, avg, max) = (11102.738, 11454.380, 11633.166), stdev = 226.183
[info]   CI (99.9%): [10583.430, 12325.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.533 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.533, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.102 ±(99.9%) 19.610 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.102, 11.529), stdev = 5.093
[info]   CI (99.9%): [≈ 0, 28.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.34% complete, ETA 00:15:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 173057.312 ops/s
[info] # Warmup Iteration   2: 197863.448 ops/s
[info] # Warmup Iteration   3: 192650.091 ops/s
[info] Iteration   1: 198994.471 ops/s
[info]                  ·gc.alloc.rate:            819.104 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.936 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7997.600 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 195045.064 ops/s
[info]                  ·gc.alloc.rate:            802.895 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.001 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 5439.720 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 198705.630 ops/s
[info]                  ·gc.alloc.rate:            817.967 MB/sec
[info]                  ·gc.alloc.rate.norm:       6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8009.149 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 199916.840 ops/s
[info]                  ·gc.alloc.rate:                   823.029 MB/sec
[info]                  ·gc.alloc.rate.norm:              6480.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.061 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        5307.121 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 26.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 194547.837 ops/s
[info]                  ·gc.alloc.rate:                                  800.943 MB/sec
[info]                  ·gc.alloc.rate.norm:                             6480.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.096 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.776 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8261.299 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala":
[info]   197441.968 ±(99.9%) 9481.745 ops/s [Average]
[info]   (min, avg, max) = (194547.837, 197441.968, 199916.840), stdev = 2462.379
[info]   CI (99.9%): [187960.224, 206923.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   812.788 ±(99.9%) 38.974 MB/sec [Average]
[info]   (min, avg, max) = (800.943, 812.788, 823.029), stdev = 10.121
[info]   CI (99.9%): [773.814, 851.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6480.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6480.002, 6480.002, 6480.002), stdev = 0.001
[info]   CI (99.9%): [6480.002, 6480.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.019 ±(99.9%) 0.165 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.155 ±(99.9%) 1.336 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.155, 0.776), stdev = 0.347
[info]   CI (99.9%): [≈ 0, 1.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.221 ±(99.9%) 717.933 MB/sec [Average]
[info]   (min, avg, max) = (674.001, 878.221, 1021.115), stdev = 186.445
[info]   CI (99.9%): [160.287, 1596.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   7002.978 ±(99.9%) 5745.314 B/op [Average]
[info]   (min, avg, max) = (5307.121, 7002.978, 8261.299), stdev = 1492.040
[info]   CI (99.9%): [1257.665, 12748.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   5.244 ±(99.9%) 45.154 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.244, 26.221), stdev = 11.726
[info]   CI (99.9%): [≈ 0, 50.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 10.000), stdev = 2.775
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 82.59% complete, ETA 00:15:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6333.236 ops/s
[info] # Warmup Iteration   2: 21638.006 ops/s
[info] # Warmup Iteration   3: 21612.153 ops/s
[info] Iteration   1: 21213.901 ops/s
[info]                  ·gc.alloc.rate:                   1190.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              88344.021 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1343.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        99678.471 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 49.419 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         20.000 ms
[info] Iteration   2: 21838.067 ops/s
[info]                  ·gc.alloc.rate:                   1225.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              88344.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1006.842 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        72587.076 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 336.051 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 21935.416 ops/s
[info]                  ·gc.alloc.rate:                                  1231.002 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88344.023 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.062 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 4.418 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.274 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       97693.119 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 22227.503 ops/s
[info]                  ·gc.alloc.rate:                                  1247.489 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88344.018 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.072 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.387 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       96409.939 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 21786.009 ops/s
[info]                  ·gc.alloc.rate:                                  1223.142 MB/sec
[info]                  ·gc.alloc.rate.norm:                             88344.020 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.474 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.280 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       73764.088 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson":
[info]   21800.179 ±(99.9%) 1422.986 ops/s [Average]
[info]   (min, avg, max) = (21213.901, 21800.179, 22227.503), stdev = 369.545
[info]   CI (99.9%): [20377.194, 23223.165] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1223.586 ±(99.9%) 79.353 MB/sec [Average]
[info]   (min, avg, max) = (1190.893, 1223.586, 1247.489), stdev = 20.608
[info]   CI (99.9%): [1144.233, 1302.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   88344.021 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (88344.018, 88344.021, 88344.023), stdev = 0.002
[info]   CI (99.9%): [88344.014, 88344.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.014 ±(99.9%) 0.103 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.014, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.993 ±(99.9%) 7.412 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.993, 4.418), stdev = 1.925
[info]   CI (99.9%): [≈ 0, 8.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1218.893 ±(99.9%) 720.816 MB/sec [Average]
[info]   (min, avg, max) = (1006.842, 1218.893, 1361.387), stdev = 187.194
[info]   CI (99.9%): [498.077, 1939.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   88026.539 ±(99.9%) 52419.916 B/op [Average]
[info]   (min, avg, max) = (72587.076, 88026.539, 99678.471), stdev = 13613.286
[info]   CI (99.9%): [35606.622, 140446.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.065 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.065, 4.661), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   77.094 ±(99.9%) 563.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 77.094, 336.051), stdev = 146.335
[info]   CI (99.9%): [≈ 0, 640.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.000, 20.000), stdev = 7.616
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 82.84% complete, ETA 00:14:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 79627.496 ops/s
[info] # Warmup Iteration   2: 156926.828 ops/s
[info] # Warmup Iteration   3: 157612.615 ops/s
[info] Iteration   1: 159236.383 ops/s
[info]                  ·gc.alloc.rate:                   1024.510 MB/sec
[info]                  ·gc.alloc.rate.norm:              10128.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.691 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        9961.732 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.584 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 163823.168 ops/s
[info]                  ·gc.alloc.rate:            1054.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.320 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9676.032 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   3: 162167.861 ops/s
[info]                  ·gc.alloc.rate:                                  1043.425 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.053 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.514 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9820.258 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                45.255 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 161767.910 ops/s
[info]                  ·gc.alloc.rate:                                  1040.918 MB/sec
[info]                  ·gc.alloc.rate.norm:                             10128.003 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.059 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.576 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       9935.208 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 164893.847 ops/s
[info]                  ·gc.alloc.rate:            1061.039 MB/sec
[info]                  ·gc.alloc.rate.norm:       10128.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.483 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12995.855 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala":
[info]   162377.834 ±(99.9%) 8326.683 ops/s [Average]
[info]   (min, avg, max) = (159236.383, 162377.834, 164893.847), stdev = 2162.413
[info]   CI (99.9%): [154051.151, 170704.516] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1044.853 ±(99.9%) 53.908 MB/sec [Average]
[info]   (min, avg, max) = (1024.510, 1044.853, 1061.039), stdev = 14.000
[info]   CI (99.9%): [990.945, 1098.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10128.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10128.002, 10128.003, 10128.003), stdev = 0.001
[info]   CI (99.9%): [10128.002, 10128.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.059), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.218 ±(99.9%) 1.153 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.218, 0.576), stdev = 0.299
[info]   CI (99.9%): [≈ 0, 1.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1081.864 ±(99.9%) 602.283 MB/sec [Average]
[info]   (min, avg, max) = (1007.320, 1081.864, 1361.483), stdev = 156.411
[info]   CI (99.9%): [479.581, 1684.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   10477.817 ±(99.9%) 5437.637 B/op [Average]
[info]   (min, avg, max) = (9676.032, 10477.817, 12995.855), stdev = 1412.137
[info]   CI (99.9%): [5040.180, 15915.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.821 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   10.368 ±(99.9%) 75.895 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.368, 45.255), stdev = 19.710
[info]   CI (99.9%): [≈ 0, 86.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.800, 15.000), stdev = 4.817
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 83.08% complete, ETA 00:14:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 470322.337 ops/s
[info] # Warmup Iteration   2: 538888.082 ops/s
[info] # Warmup Iteration   3: 548561.753 ops/s
[info] Iteration   1: 551674.289 ops/s
[info]                  ·gc.alloc.rate:            614.112 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.801 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1919.435 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 549616.043 ops/s
[info]                  ·gc.alloc.rate:            611.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.365 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 963.328 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 547622.708 ops/s
[info]                  ·gc.alloc.rate:            609.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.688 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1933.667 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 545985.750 ops/s
[info]                  ·gc.alloc.rate:            607.915 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.962 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1939.468 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 547832.034 ops/s
[info]                  ·gc.alloc.rate:            609.747 MB/sec
[info]                  ·gc.alloc.rate.norm:       1752.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.716 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1932.930 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala":
[info]   548546.165 ±(99.9%) 8358.709 ops/s [Average]
[info]   (min, avg, max) = (545985.750, 548546.165, 551674.289), stdev = 2170.730
[info]   CI (99.9%): [540187.456, 556904.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   610.602 ±(99.9%) 9.197 MB/sec [Average]
[info]   (min, avg, max) = (607.915, 610.602, 614.112), stdev = 2.388
[info]   CI (99.9%): [601.405, 619.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1752.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1752.001, 1752.001, 1752.001), stdev = 0.001
[info]   CI (99.9%): [1752.001, 1752.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.506 ±(99.9%) 579.347 MB/sec [Average]
[info]   (min, avg, max) = (336.365, 605.506, 672.962), stdev = 150.455
[info]   CI (99.9%): [26.159, 1184.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   1737.765 ±(99.9%) 1667.275 B/op [Average]
[info]   (min, avg, max) = (963.328, 1737.765, 1939.468), stdev = 432.986
[info]   CI (99.9%): [70.491, 3405.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 83.33% complete, ETA 00:14:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 505422.499 ops/s
[info] # Warmup Iteration   2: 568625.080 ops/s
[info] # Warmup Iteration   3: 573200.724 ops/s
[info] Iteration   1: 573380.750 ops/s
[info]                  ·gc.alloc.rate:      11.662 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 573011.010 ops/s
[info]                  ·gc.alloc.rate:      11.648 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 571114.111 ops/s
[info]                  ·gc.alloc.rate:      11.611 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 571738.650 ops/s
[info]                  ·gc.alloc.rate:      11.628 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 572807.210 ops/s
[info]                  ·gc.alloc.rate:      11.643 MB/sec
[info]                  ·gc.alloc.rate.norm: 32.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   572410.346 ±(99.9%) 3648.667 ops/s [Average]
[info]   (min, avg, max) = (571114.111, 572410.346, 573380.750), stdev = 947.547
[info]   CI (99.9%): [568761.679, 576059.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   11.639 ±(99.9%) 0.076 MB/sec [Average]
[info]   (min, avg, max) = (11.611, 11.639, 11.662), stdev = 0.020
[info]   CI (99.9%): [11.562, 11.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   32.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.001, 32.001, 32.001), stdev = 0.001
[info]   CI (99.9%): [32.001, 32.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 83.58% complete, ETA 00:14:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31871.885 ops/s
[info] # Warmup Iteration   2: 61778.461 ops/s
[info] # Warmup Iteration   3: 61930.961 ops/s
[info] Iteration   1: 61717.677 ops/s
[info]                  ·gc.alloc.rate:                   1219.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              31080.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.812 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25719.212 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.988 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 61100.251 ops/s
[info]                  ·gc.alloc.rate:                   1206.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              31080.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1348.604 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        34747.196 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 120.114 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   3: 62755.934 ops/s
[info]                  ·gc.alloc.rate:                                  1239.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31080.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.081 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.033 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.362 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       34147.843 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 62674.885 ops/s
[info]                  ·gc.alloc.rate:                                  1237.519 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31080.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.075 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.039 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25643.158 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 63227.862 ops/s
[info]                  ·gc.alloc.rate:                                  1248.447 MB/sec
[info]                  ·gc.alloc.rate.norm:                             31080.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻³ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.440 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       33892.964 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson":
[info]   62295.322 ±(99.9%) 3327.929 ops/s [Average]
[info]   (min, avg, max) = (61100.251, 62295.322, 63227.862), stdev = 864.253
[info]   CI (99.9%): [58967.393, 65623.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1230.076 ±(99.9%) 65.600 MB/sec [Average]
[info]   (min, avg, max) = (1206.274, 1230.076, 1248.447), stdev = 17.036
[info]   CI (99.9%): [1164.476, 1295.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   31080.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31080.006, 31080.007, 31080.007), stdev = 0.001
[info]   CI (99.9%): [31080.005, 31080.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.138 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.017, 0.081), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.423 ±(99.9%) 3.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.423, 2.033), stdev = 0.901
[info]   CI (99.9%): [≈ 0, 3.891] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1220.252 ±(99.9%) 722.222 MB/sec [Average]
[info]   (min, avg, max) = (1008.812, 1220.252, 1361.440), stdev = 187.559
[info]   CI (99.9%): [498.030, 1942.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   30830.074 ±(99.9%) 18138.713 B/op [Average]
[info]   (min, avg, max) = (25643.158, 30830.074, 34747.196), stdev = 4710.566
[info]   CI (99.9%): [12691.361, 48968.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.820 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.662), stdev = 2.031
[info]   CI (99.9%): [≈ 0, 8.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   27.420 ±(99.9%) 201.530 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 27.420, 120.114), stdev = 52.337
[info]   CI (99.9%): [≈ 0, 228.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.600, 15.000), stdev = 5.595
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 83.83% complete, ETA 00:13:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 82579.077 ops/s
[info] # Warmup Iteration   2: 104849.214 ops/s
[info] # Warmup Iteration   3: 105158.068 ops/s
[info] Iteration   1: 103944.323 ops/s
[info]                  ·gc.alloc.rate:                                  1817.807 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.117 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.771 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1698.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25719.674 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                50.431 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 105937.357 ops/s
[info]                  ·gc.alloc.rate:            1852.498 MB/sec
[info]                  ·gc.alloc.rate.norm:       27528.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2041.896 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 30342.447 B/op
[info]                  ·gc.count:                 6.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 106843.315 ops/s
[info]                  ·gc.alloc.rate:                                  1868.323 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.566 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25070.996 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 106741.670 ops/s
[info]                  ·gc.alloc.rate:                                  1867.438 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.019 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.862 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       30113.939 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 103997.848 ops/s
[info]                  ·gc.alloc.rate:                                  1819.099 MB/sec
[info]                  ·gc.alloc.rate.norm:                             27528.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.060 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.033 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       25756.479 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce":
[info]   105492.903 ±(99.9%) 5517.941 ops/s [Average]
[info]   (min, avg, max) = (103944.323, 105492.903, 106843.315), stdev = 1432.992
[info]   CI (99.9%): [99974.961, 111010.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1845.033 ±(99.9%) 96.535 MB/sec [Average]
[info]   (min, avg, max) = (1817.807, 1845.033, 1868.323), stdev = 25.070
[info]   CI (99.9%): [1748.498, 1941.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27528.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27528.004, 27528.004, 27528.004), stdev = 0.001
[info]   CI (99.9%): [27528.003, 27528.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.199 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.117), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.374 ±(99.9%) 3.009 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.374, 1.771), stdev = 0.781
[info]   CI (99.9%): [≈ 0, 3.383] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1837.350 ±(99.9%) 720.727 MB/sec [Average]
[info]   (min, avg, max) = (1698.394, 1837.350, 2042.862), stdev = 187.170
[info]   CI (99.9%): [1116.623, 2558.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   27400.707 ±(99.9%) 9999.147 B/op [Average]
[info]   (min, avg, max) = (25070.996, 27400.707, 30342.447), stdev = 2596.747
[info]   CI (99.9%): [17401.560, 37399.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   10.086 ±(99.9%) 86.845 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.086, 50.431), stdev = 22.553
[info]   CI (99.9%): [≈ 0, 96.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 7.000), stdev = 1.140
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.08% complete, ETA 00:13:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76519.577 ops/s
[info] # Warmup Iteration   2: 146869.127 ops/s
[info] # Warmup Iteration   3: 146678.361 ops/s
[info] Iteration   1: 149574.110 ops/s
[info]                  ·gc.alloc.rate:            639.429 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.820 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7079.337 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 148909.172 ops/s
[info]                  ·gc.alloc.rate:                   636.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7104.049 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.041 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 149982.279 ops/s
[info]                  ·gc.alloc.rate:                   641.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.093 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7052.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 6.990 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 149742.853 ops/s
[info]                  ·gc.alloc.rate:                   640.255 MB/sec
[info]                  ·gc.alloc.rate.norm:              6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.249 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        7064.206 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 7.001 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 149971.886 ops/s
[info]                  ·gc.alloc.rate:            641.317 MB/sec
[info]                  ·gc.alloc.rate.norm:       6728.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7053.515 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala":
[info]   149636.060 ±(99.9%) 1696.311 ops/s [Average]
[info]   (min, avg, max) = (148909.172, 149636.060, 149982.279), stdev = 440.527
[info]   CI (99.9%): [147939.749, 151332.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   639.731 ±(99.9%) 7.504 MB/sec [Average]
[info]   (min, avg, max) = (636.516, 639.731, 641.317), stdev = 1.949
[info]   CI (99.9%): [632.227, 647.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   6728.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6728.003, 6728.003, 6728.003), stdev = 0.001
[info]   CI (99.9%): [6728.002, 6728.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   672.320 ±(99.9%) 1.154 MB/sec [Average]
[info]   (min, avg, max) = (672.093, 672.320, 672.820), stdev = 0.300
[info]   CI (99.9%): [671.167, 673.474] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   7070.793 ±(99.9%) 82.645 B/op [Average]
[info]   (min, avg, max) = (7052.857, 7070.793, 7104.049), stdev = 21.463
[info]   CI (99.9%): [6988.147, 7153.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.400 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.206 ±(99.9%) 14.786 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.206, 7.041), stdev = 3.840
[info]   CI (99.9%): [≈ 0, 18.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   45.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 84.33% complete, ETA 00:13:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 213422.892 ops/s
[info] # Warmup Iteration   2: 245136.655 ops/s
[info] # Warmup Iteration   3: 250296.664 ops/s
[info] Iteration   1: 250607.171 ops/s
[info]                  ·gc.alloc.rate:            892.988 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.219 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6350.493 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 251933.481 ops/s
[info]                  ·gc.alloc.rate:            897.621 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.074 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4211.366 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 245186.909 ops/s
[info]                  ·gc.alloc.rate:            873.486 MB/sec
[info]                  ·gc.alloc.rate.norm:       5608.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6490.877 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 242450.661 ops/s
[info]                  ·gc.alloc.rate:                                  863.824 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5608.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.043 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.278 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.768 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       6607.410 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.621 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 245910.639 ops/s
[info]                  ·gc.alloc.rate:                                  876.035 MB/sec
[info]                  ·gc.alloc.rate.norm:                             5608.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.014 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.089 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.637 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4357.147 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala":
[info]   247217.772 ±(99.9%) 15194.718 ops/s [Average]
[info]   (min, avg, max) = (242450.661, 247217.772, 251933.481), stdev = 3946.020
[info]   CI (99.9%): [232023.054, 262412.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   880.791 ±(99.9%) 54.315 MB/sec [Average]
[info]   (min, avg, max) = (863.824, 880.791, 897.621), stdev = 14.106
[info]   CI (99.9%): [826.476, 935.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5608.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5608.002, 5608.002, 5608.002), stdev = 0.001
[info]   CI (99.9%): [5608.001, 5608.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.011 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.073 ±(99.9%) 0.464 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.073, 0.278), stdev = 0.121
[info]   CI (99.9%): [≈ 0, 0.538] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   878.940 ±(99.9%) 708.729 MB/sec [Average]
[info]   (min, avg, max) = (674.074, 878.940, 1017.768), stdev = 184.055
[info]   CI (99.9%): [170.211, 1587.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   5603.459 ±(99.9%) 4654.624 B/op [Average]
[info]   (min, avg, max) = (4211.366, 5603.459, 6607.410), stdev = 1208.791
[info]   CI (99.9%): [948.834, 10258.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   4.324 ±(99.9%) 37.233 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.324, 21.621), stdev = 9.669
[info]   CI (99.9%): [≈ 0, 41.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 13.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 84.58% complete, ETA 00:13:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22278.240 ops/s
[info] # Warmup Iteration   2: 40171.246 ops/s
[info] # Warmup Iteration   3: 40157.080 ops/s
[info] Iteration   1: 39554.910 ops/s
[info]                  ·gc.alloc.rate:                                  1639.642 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.083 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 3.307 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1689.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       67242.235 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                159.028 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        15.000 ms
[info] Iteration   2: 40920.386 ops/s
[info]                  ·gc.alloc.rate:                                  1696.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.437 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.689 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       65460.739 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 41513.916 ops/s
[info]                  ·gc.alloc.rate:                                  1720.746 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.011 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.618 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64522.703 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 41478.151 ops/s
[info]                  ·gc.alloc.rate:                                  1719.364 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.106 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.809 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64581.807 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 41350.285 ops/s
[info]                  ·gc.alloc.rate:                                  1714.009 MB/sec
[info]                  ·gc.alloc.rate.norm:                             65248.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.718 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       64780.126 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson":
[info]   40963.529 ±(99.9%) 3165.625 ops/s [Average]
[info]   (min, avg, max) = (39554.910, 40963.529, 41513.916), stdev = 822.103
[info]   CI (99.9%): [37797.905, 44129.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1697.984 ±(99.9%) 131.136 MB/sec [Average]
[info]   (min, avg, max) = (1639.642, 1697.984, 1720.746), stdev = 34.056
[info]   CI (99.9%): [1566.848, 1829.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   65248.010 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (65248.010, 65248.010, 65248.011), stdev = 0.001
[info]   CI (99.9%): [65248.008, 65248.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.137 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.020, 0.083), stdev = 0.036
[info]   CI (99.9%): [≈ 0, 0.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.790 ±(99.9%) 5.453 B/op [Average]
[info]   (min, avg, max) = (0.050, 0.790, 3.307), stdev = 1.416
[info]   CI (99.9%): [≈ 0, 6.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1699.318 ±(99.9%) 20.585 MB/sec [Average]
[info]   (min, avg, max) = (1689.756, 1699.318, 1701.809), stdev = 5.346
[info]   CI (99.9%): [1678.733, 1719.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   65317.522 ±(99.9%) 4384.851 B/op [Average]
[info]   (min, avg, max) = (64522.703, 65317.522, 67242.235), stdev = 1138.732
[info]   CI (99.9%): [60932.672, 69702.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   31.806 ±(99.9%) 273.855 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 31.806, 159.028), stdev = 71.119
[info]   CI (99.9%): [≈ 0, 305.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 15.000), stdev = 4.494
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 84.83% complete, ETA 00:13:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 183573.520 ops/s
[info] # Warmup Iteration   2: 237895.641 ops/s
[info] # Warmup Iteration   3: 230265.312 ops/s
[info] Iteration   1: 237495.625 ops/s
[info]                  ·gc.alloc.rate:            1366.306 MB/sec
[info]                  ·gc.alloc.rate.norm:       9056.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8934.946 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 241750.838 ops/s
[info]                  ·gc.alloc.rate:                                  1391.281 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9056.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.120 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.780 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.526 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8842.795 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                21.684 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 238874.421 ops/s
[info]                  ·gc.alloc.rate:                                  1374.588 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9056.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8971.191 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 242833.140 ops/s
[info]                  ·gc.alloc.rate:            1397.211 MB/sec
[info]                  ·gc.alloc.rate.norm:       9056.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.552 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 8824.878 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 240393.020 ops/s
[info]                  ·gc.alloc.rate:                                  1383.183 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9056.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.578 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8914.549 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce":
[info]   240269.409 ±(99.9%) 8263.759 ops/s [Average]
[info]   (min, avg, max) = (237495.625, 240269.409, 242833.140), stdev = 2146.072
[info]   CI (99.9%): [232005.650, 248533.168] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1382.514 ±(99.9%) 47.896 MB/sec [Average]
[info]   (min, avg, max) = (1366.306, 1382.514, 1397.211), stdev = 12.438
[info]   CI (99.9%): [1334.618, 1430.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9056.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9056.002, 9056.002, 9056.002), stdev = 0.001
[info]   CI (99.9%): [9056.001, 9056.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.120), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.229] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.164 ±(99.9%) 1.326 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.164, 0.780), stdev = 0.344
[info]   CI (99.9%): [≈ 0, 1.490] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1358.283 ±(99.9%) 22.639 MB/sec [Average]
[info]   (min, avg, max) = (1348.042, 1358.283, 1361.715), stdev = 5.879
[info]   CI (99.9%): [1335.643, 1380.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8897.672 ±(99.9%) 238.846 B/op [Average]
[info]   (min, avg, max) = (8824.878, 8897.672, 8971.191), stdev = 62.028
[info]   CI (99.9%): [8658.826, 9136.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.737 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.403] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.337 ±(99.9%) 37.341 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.337, 21.684), stdev = 9.697
[info]   CI (99.9%): [≈ 0, 41.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.200, 13.000), stdev = 4.087
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.07% complete, ETA 00:12:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 256884.583 ops/s
[info] # Warmup Iteration   2: 505596.964 ops/s
[info] # Warmup Iteration   3: 512511.066 ops/s
[info] Iteration   1: 516310.956 ops/s
[info]                  ·gc.alloc.rate:                   414.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.634 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1023.379 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 511675.966 ops/s
[info]                  ·gc.alloc.rate:            410.871 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1034.729 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 508758.412 ops/s
[info]                  ·gc.alloc.rate:            408.568 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1038.598 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 513650.222 ops/s
[info]                  ·gc.alloc.rate:            412.478 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2057.432 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 512644.764 ops/s
[info]                  ·gc.alloc.rate:            411.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       1264.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1030.704 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala":
[info]   512608.064 ±(99.9%) 10630.756 ops/s [Average]
[info]   (min, avg, max) = (508758.412, 512608.064, 516310.956), stdev = 2760.774
[info]   CI (99.9%): [501977.308, 523238.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.631 ±(99.9%) 8.436 MB/sec [Average]
[info]   (min, avg, max) = (408.568, 411.631, 414.549), stdev = 2.191
[info]   CI (99.9%): [403.195, 420.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1264.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1264.001, 1264.001, 1264.001), stdev = 0.001
[info]   CI (99.9%): [1264.001, 1264.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   402.958 ±(99.9%) 577.837 MB/sec [Average]
[info]   (min, avg, max) = (335.634, 402.958, 671.397), stdev = 150.062
[info]   CI (99.9%): [≈ 0, 980.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1236.969 ±(99.9%) 1766.243 B/op [Average]
[info]   (min, avg, max) = (1023.379, 1236.969, 2057.432), stdev = 458.688
[info]   CI (99.9%): [≈ 0, 3003.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.406 ±(99.9%) 3.497 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.406, 2.031), stdev = 0.908
[info]   CI (99.9%): [≈ 0, 3.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 10.000), stdev = 2.510
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 85.32% complete, ETA 00:12:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 591384.829 ops/s
[info] # Warmup Iteration   2: 633653.185 ops/s
[info] # Warmup Iteration   3: 658818.017 ops/s
[info] Iteration   1: 660954.729 ops/s
[info]                  ·gc.alloc.rate:            356.145 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 801.011 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 661472.809 ops/s
[info]                  ·gc.alloc.rate:            356.395 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.394 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 800.411 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 668356.080 ops/s
[info]                  ·gc.alloc.rate:            360.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.445 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 792.165 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   4: 685607.581 ops/s
[info]                  ·gc.alloc.rate:            369.487 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.485 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 772.260 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 690554.131 ops/s
[info]                  ·gc.alloc.rate:            372.148 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.470 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 766.702 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala":
[info]   673389.066 ±(99.9%) 53282.131 ops/s [Average]
[info]   (min, avg, max) = (660954.729, 673389.066, 690554.131), stdev = 13837.200
[info]   CI (99.9%): [620106.936, 726671.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   362.867 ±(99.9%) 28.839 MB/sec [Average]
[info]   (min, avg, max) = (356.145, 362.867, 372.148), stdev = 7.489
[info]   CI (99.9%): [334.028, 391.706] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.001, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   336.441 ±(99.9%) 0.149 MB/sec [Average]
[info]   (min, avg, max) = (336.394, 336.441, 336.485), stdev = 0.039
[info]   CI (99.9%): [336.292, 336.590] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   786.510 ±(99.9%) 61.819 B/op [Average]
[info]   (min, avg, max) = (766.702, 786.510, 801.011), stdev = 16.054
[info]   CI (99.9%): [724.691, 848.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 85.57% complete, ETA 00:12:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 644727.435 ops/s
[info] # Warmup Iteration   2: 707982.849 ops/s
[info] # Warmup Iteration   3: 708017.788 ops/s
[info] Iteration   1: 701722.448 ops/s
[info]                  ·gc.alloc.rate:      7.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 706825.033 ops/s
[info]                  ·gc.alloc.rate:      7.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 707534.029 ops/s
[info]                  ·gc.alloc.rate:      7.192 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 708281.037 ops/s
[info]                  ·gc.alloc.rate:      7.200 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 706707.315 ops/s
[info]                  ·gc.alloc.rate:      7.184 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   706213.972 ±(99.9%) 9968.237 ops/s [Average]
[info]   (min, avg, max) = (701722.448, 706213.972, 708281.037), stdev = 2588.720
[info]   CI (99.9%): [696245.735, 716182.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   7.179 ±(99.9%) 0.097 MB/sec [Average]
[info]   (min, avg, max) = (7.135, 7.179, 7.200), stdev = 0.025
[info]   CI (99.9%): [7.082, 7.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.001, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.001, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 85.82% complete, ETA 00:12:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19830.723 ops/s
[info] # Warmup Iteration   2: 31171.240 ops/s
[info] # Warmup Iteration   3: 31114.831 ops/s
[info] Iteration   1: 31212.249 ops/s
[info]                  ·gc.alloc.rate:                   1555.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              78430.079 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1345.444 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        67851.604 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 201.539 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         17.000 ms
[info] Iteration   2: 31439.620 ops/s
[info]                  ·gc.alloc.rate:                                  1566.792 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.013 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.208 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.403 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.284 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       85197.217 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30720.028 ops/s
[info]                  ·gc.alloc.rate:                                  1530.357 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.014 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.269 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.715 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       87196.475 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 30800.520 ops/s
[info]                  ·gc.alloc.rate:            1534.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.857 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69573.763 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 31297.922 ops/s
[info]                  ·gc.alloc.rate:            1559.265 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.845 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 85586.419 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson":
[info]   31094.068 ±(99.9%) 1219.211 ops/s [Average]
[info]   (min, avg, max) = (30720.028, 31094.068, 31439.620), stdev = 316.625
[info]   CI (99.9%): [29874.857, 32313.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1549.312 ±(99.9%) 61.044 MB/sec [Average]
[info]   (min, avg, max) = (1530.357, 1549.312, 1566.792), stdev = 15.853
[info]   CI (99.9%): [1488.268, 1610.356] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78418.827 ±(99.9%) 24.222 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78418.827, 78430.079), stdev = 6.290
[info]   CI (99.9%): [78394.605, 78443.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.043 ±(99.9%) 0.356 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.043, 0.208), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.134 ±(99.9%) 17.804 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.134, 10.403), stdev = 4.624
[info]   CI (99.9%): [≈ 0, 19.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1562.629 ±(99.9%) 734.929 MB/sec [Average]
[info]   (min, avg, max) = (1345.444, 1562.629, 1702.284), stdev = 190.859
[info]   CI (99.9%): [827.700, 2297.558] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   79081.096 ±(99.9%) 36635.614 B/op [Average]
[info]   (min, avg, max) = (67851.604, 79081.096, 87196.475), stdev = 9514.153
[info]   CI (99.9%): [42445.481, 115716.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   40.308 ±(99.9%) 347.063 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 40.308, 201.539), stdev = 90.131
[info]   CI (99.9%): [≈ 0, 387.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableSetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 17.000), stdev = 5.814
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 86.07% complete, ETA 00:12:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262299.999 ops/s
[info] # Warmup Iteration   2: 604385.697 ops/s
[info] # Warmup Iteration   3: 610183.915 ops/s
[info] Iteration   1: 614326.690 ops/s
[info]                  ·gc.alloc.rate:                                  1901.270 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.094 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.242 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2031.941 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5206.845 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                8.533 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 596621.592 ops/s
[info]                  ·gc.alloc.rate:            1846.485 MB/sec
[info]                  ·gc.alloc.rate.norm:       4872.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4489.850 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 611273.231 ops/s
[info]                  ·gc.alloc.rate:                                  1891.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.011 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5258.350 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 620937.144 ops/s
[info]                  ·gc.alloc.rate:                                  1922.058 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.938 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4314.044 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 621129.632 ops/s
[info]                  ·gc.alloc.rate:                                  1922.705 MB/sec
[info]                  ·gc.alloc.rate.norm:                             4872.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.003 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       5175.119 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   612857.658 ±(99.9%) 38601.720 ops/s [Average]
[info]   (min, avg, max) = (596621.592, 612857.658, 621129.632), stdev = 10024.744
[info]   CI (99.9%): [574255.938, 651459.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   1896.899 ±(99.9%) 119.986 MB/sec [Average]
[info]   (min, avg, max) = (1846.485, 1896.899, 1922.705), stdev = 31.160
[info]   CI (99.9%): [1776.913, 2016.885] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4872.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4872.001, 4872.001, 4872.001), stdev = 0.001
[info]   CI (99.9%): [4872.001, 4872.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.161 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.094), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.050 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.242), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1903.974 ±(99.9%) 710.871 MB/sec [Average]
[info]   (min, avg, max) = (1701.651, 1903.974, 2042.328), stdev = 184.611
[info]   CI (99.9%): [1193.103, 2614.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   4888.842 ±(99.9%) 1731.938 B/op [Average]
[info]   (min, avg, max) = (4314.044, 4888.842, 5258.350), stdev = 449.779
[info]   CI (99.9%): [3156.903, 6620.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.707 ±(99.9%) 14.694 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.707, 8.533), stdev = 3.816
[info]   CI (99.9%): [≈ 0, 16.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.200, 12.000), stdev = 3.347
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 86.32% complete, ETA 00:11:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 354093.998 ops/s
[info] # Warmup Iteration   2: 1284495.286 ops/s
[info] # Warmup Iteration   3: 1286616.783 ops/s
[info] Iteration   1: 1288615.725 ops/s
[info]                  ·gc.alloc.rate:            975.767 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.984 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1232.578 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   2: 1320362.108 ops/s
[info]                  ·gc.alloc.rate:                   1000.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.708 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1202.163 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.794 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   3: 1329477.975 ops/s
[info]                  ·gc.alloc.rate:                   1006.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1009.308 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1194.764 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 4.732 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   4: 1348821.088 ops/s
[info]                  ·gc.alloc.rate:                                  1021.468 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1192.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.262 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.305 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1191.630 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 1349042.913 ops/s
[info]                  ·gc.alloc.rate:            1021.670 MB/sec
[info]                  ·gc.alloc.rate.norm:       1192.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.180 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1191.429 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1327263.962 ±(99.9%) 95981.809 ops/s [Average]
[info]   (min, avg, max) = (1288615.725, 1327263.962, 1349042.913), stdev = 24926.171
[info]   CI (99.9%): [1231282.152, 1423245.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1005.212 ±(99.9%) 72.820 MB/sec [Average]
[info]   (min, avg, max) = (975.767, 1005.212, 1021.670), stdev = 18.911
[info]   CI (99.9%): [932.391, 1078.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.052 ±(99.9%) 0.451 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.262), stdev = 0.117
[info]   CI (99.9%): [≈ 0, 0.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.061 ±(99.9%) 0.526 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.061, 0.305), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.866 ±(99.9%) 25.671 MB/sec [Average]
[info]   (min, avg, max) = (1008.708, 1013.866, 1021.180), stdev = 6.667
[info]   CI (99.9%): [988.195, 1039.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1202.513 ±(99.9%) 66.845 B/op [Average]
[info]   (min, avg, max) = (1191.429, 1202.513, 1232.578), stdev = 17.359
[info]   CI (99.9%): [1135.668, 1269.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 6.690 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 3.997), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.105 ±(99.9%) 7.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.105, 4.732), stdev = 2.056
[info]   CI (99.9%): [≈ 0, 9.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.600, 14.000), stdev = 5.595
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 86.57% complete, ETA 00:11:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7076699.278 ops/s
[info] # Warmup Iteration   2: 7302384.409 ops/s
[info] # Warmup Iteration   3: 7492248.391 ops/s
[info] Iteration   1: 7520254.977 ops/s
[info]                  ·gc.alloc.rate:      229.324 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 7439627.852 ops/s
[info]                  ·gc.alloc.rate:            226.843 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.995 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 71.308 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 7689332.142 ops/s
[info]                  ·gc.alloc.rate:            234.489 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.990 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 7736351.613 ops/s
[info]                  ·gc.alloc.rate:      235.927 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 7723213.519 ops/s
[info]                  ·gc.alloc.rate:            235.566 MB/sec
[info]                  ·gc.alloc.rate.norm:       48.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 68.686 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   7621756.020 ±(99.9%) 514696.713 ops/s [Average]
[info]   (min, avg, max) = (7439627.852, 7621756.020, 7736351.613), stdev = 133665.102
[info]   CI (99.9%): [7107059.308, 8136452.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   232.430 ±(99.9%) 15.779 MB/sec [Average]
[info]   (min, avg, max) = (226.843, 232.430, 235.927), stdev = 4.098
[info]   CI (99.9%): [216.651, 248.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   202.222 ±(99.9%) 710.840 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 202.222, 337.086), stdev = 184.603
[info]   CI (99.9%): [≈ 0, 913.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   41.797 ±(99.9%) 146.974 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.797, 71.308), stdev = 38.169
[info]   CI (99.9%): [≈ 0, 188.771] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.643
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 86.82% complete, ETA 00:11:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26578.380 ops/s
[info] # Warmup Iteration   2: 197411.638 ops/s
[info] # Warmup Iteration   3: 199326.132 ops/s
[info] Iteration   1: 201953.154 ops/s
[info]                  ·gc.alloc.rate:                   1430.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.733 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        10481.607 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 5.191 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         19.000 ms
[info] Iteration   2: 202177.570 ops/s
[info]                  ·gc.alloc.rate:                                  1432.354 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11152.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.157 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.226 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1353.377 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10537.097 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                31.113 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   3: 202485.326 ops/s
[info]                  ·gc.alloc.rate:                                  1435.053 MB/sec
[info]                  ·gc.alloc.rate.norm:                             11152.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.026 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.205 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.859 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10583.204 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 203585.291 ops/s
[info]                  ·gc.alloc.rate:            1442.339 MB/sec
[info]                  ·gc.alloc.rate.norm:       11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10526.031 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 204283.118 ops/s
[info]                  ·gc.alloc.rate:            1447.453 MB/sec
[info]                  ·gc.alloc.rate.norm:       11152.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 13112.140 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   202896.892 ±(99.9%) 3837.610 ops/s [Average]
[info]   (min, avg, max) = (201953.154, 202896.892, 204283.118), stdev = 996.615
[info]   CI (99.9%): [199059.281, 206734.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1437.588 ±(99.9%) 27.269 MB/sec [Average]
[info]   (min, avg, max) = (1430.741, 1437.588, 1447.453), stdev = 7.082
[info]   CI (99.9%): [1410.319, 1464.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11152.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11152.002, 11152.002, 11152.002), stdev = 0.001
[info]   CI (99.9%): [11152.002, 11152.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.037 ±(99.9%) 0.263 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.157), stdev = 0.068
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.286 ±(99.9%) 2.051 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.226), stdev = 0.533
[info]   CI (99.9%): [≈ 0, 2.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   1424.643 ±(99.9%) 597.349 MB/sec [Average]
[info]   (min, avg, max) = (1344.733, 1424.643, 1701.865), stdev = 155.130
[info]   CI (99.9%): [827.294, 2021.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   11048.016 ±(99.9%) 4445.360 B/op [Average]
[info]   (min, avg, max) = (10481.607, 11048.016, 13112.140), stdev = 1154.446
[info]   CI (99.9%): [6602.655, 15493.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   7.261 ±(99.9%) 52.069 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.261, 31.113), stdev = 13.522
[info]   CI (99.9%): [≈ 0, 59.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.800, 19.000), stdev = 6.611
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 87.06% complete, ETA 00:11:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 367143.322 ops/s
[info] # Warmup Iteration   2: 840163.142 ops/s
[info] # Warmup Iteration   3: 839209.443 ops/s
[info] Iteration   1: 842249.380 ops/s
[info]                  ·gc.alloc.rate:            1369.779 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.062 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2519.413 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 842266.046 ops/s
[info]                  ·gc.alloc.rate:                                  1369.735 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2560.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.146 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.694 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2531.890 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                6.224 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 846886.314 ops/s
[info]                  ·gc.alloc.rate:            1377.930 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.994 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2530.394 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 823738.566 ops/s
[info]                  ·gc.alloc.rate:            1339.758 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.547 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2601.635 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 822733.753 ops/s
[info]                  ·gc.alloc.rate:            1338.094 MB/sec
[info]                  ·gc.alloc.rate.norm:       2560.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2604.749 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   835574.812 ±(99.9%) 43999.486 ops/s [Average]
[info]   (min, avg, max) = (822733.753, 835574.812, 846886.314), stdev = 11426.527
[info]   CI (99.9%): [791575.326, 879574.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1359.059 ±(99.9%) 71.964 MB/sec [Average]
[info]   (min, avg, max) = (1338.094, 1359.059, 1377.930), stdev = 18.689
[info]   CI (99.9%): [1287.095, 1431.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2560.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2560.000, 2560.000, 2560.001), stdev = 0.001
[info]   CI (99.9%): [2560.000, 2560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.251 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.054 ±(99.9%) 0.469 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.272), stdev = 0.122
[info]   CI (99.9%): [≈ 0, 0.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1357.556 ±(99.9%) 23.531 MB/sec [Average]
[info]   (min, avg, max) = (1348.062, 1357.556, 1361.994), stdev = 6.111
[info]   CI (99.9%): [1334.025, 1381.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2557.616 ±(99.9%) 161.332 B/op [Average]
[info]   (min, avg, max) = (2519.413, 2557.616, 2604.749), stdev = 41.897
[info]   CI (99.9%): [2396.284, 2718.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.245 ±(99.9%) 10.718 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.245, 6.224), stdev = 2.783
[info]   CI (99.9%): [≈ 0, 11.963] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.600, 14.000), stdev = 4.827
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 87.31% complete, ETA 00:10:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_cbecb3a0/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 696682.032 ops/s
[info] # Warmup Iteration   2: 2089480.934 ops/s
[info] # Warmup Iteration   3: 2221970.393 ops/s
[info] Iteration   1: 2228293.165 ops/s
[info]                  ·gc.alloc.rate:            917.295 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 474.259 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 2183610.857 ops/s
[info]                  ·gc.alloc.rate:            898.785 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.888 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 725.940 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   3: 2097381.642 ops/s
[info]                  ·gc.alloc.rate:            863.558 MB/sec
[info]                  ·gc.alloc.rate.norm:       648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.189 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 755.778 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 2097465.828 ops/s
[info]                  ·gc.alloc.rate:                   863.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             675.374 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        506.831 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.662 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.499 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2125846.539 ops/s
[info]                  ·gc.alloc.rate:                                  875.202 MB/sec
[info]                  ·gc.alloc.rate.norm:                             648.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.129 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.115 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       756.034 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2146519.606 ±(99.9%) 222129.629 ops/s [Average]
[info]   (min, avg, max) = (2097381.642, 2146519.606, 2228293.165), stdev = 57686.359
[info]   CI (99.9%): [1924389.977, 2368649.235] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   883.666 ±(99.9%) 91.175 MB/sec [Average]
[info]   (min, avg, max) = (863.488, 883.666, 917.295), stdev = 23.678
[info]   CI (99.9%): [792.490, 974.841] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.300 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.026 ±(99.9%) 0.222 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.129), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   876.383 ±(99.9%) 714.011 MB/sec [Average]
[info]   (min, avg, max) = (671.351, 876.383, 1021.115), stdev = 185.426
[info]   CI (99.9%): [162.372, 1590.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   643.768 ±(99.9%) 542.473 B/op [Average]
[info]   (min, avg, max) = (474.259, 643.768, 756.034), stdev = 140.879
[info]   CI (99.9%): [101.295, 1186.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 8.029 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 4.662), stdev = 2.085
[info]   CI (99.9%): [≈ 0, 8.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.700 ±(99.9%) 6.025 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.700, 3.499), stdev = 1.565
[info]   CI (99.9%): [≈ 0, 6.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 9.200, 14.000), stdev = 4.658
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 87.56% complete, ETA 00:10:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4051531.301 ops/s
[info] # Warmup Iteration   2: 5940908.447 ops/s
[info] # Warmup Iteration   3: 5775647.845 ops/s
[info] Iteration   1: 6028987.336 ops/s
[info]                  ·gc.alloc.rate:            674.188 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.770 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 175.630 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   2: 6001708.103 ops/s
[info]                  ·gc.alloc.rate:            671.083 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.433 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 5985075.272 ops/s
[info]                  ·gc.alloc.rate:            669.257 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.767 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 176.923 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 5849173.545 ops/s
[info]                  ·gc.alloc.rate:            654.004 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 181.038 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   5: 5913392.739 ops/s
[info]                  ·gc.alloc.rate:            661.271 MB/sec
[info]                  ·gc.alloc.rate.norm:       176.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.807 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 179.070 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5955667.399 ±(99.9%) 282231.912 ops/s [Average]
[info]   (min, avg, max) = (5849173.545, 5955667.399, 6028987.336), stdev = 73294.731
[info]   CI (99.9%): [5673435.487, 6237899.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   665.960 ±(99.9%) 31.622 MB/sec [Average]
[info]   (min, avg, max) = (654.004, 665.960, 674.188), stdev = 8.212
[info]   CI (99.9%): [634.339, 697.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   672.760 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (672.723, 672.760, 672.807), stdev = 0.033
[info]   CI (99.9%): [672.634, 672.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   177.819 ±(99.9%) 8.489 B/op [Average]
[info]   (min, avg, max) = (175.630, 177.819, 181.038), stdev = 2.205
[info]   CI (99.9%): [169.330, 186.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 87.81% complete, ETA 00:10:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3979382.284 ops/s
[info] # Warmup Iteration   2: 5710366.900 ops/s
[info] # Warmup Iteration   3: 5708178.250 ops/s
[info] Iteration   1: 5892234.355 ops/s
[info]                  ·gc.alloc.rate:            359.341 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.330 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89.853 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 5856417.327 ops/s
[info]                  ·gc.alloc.rate:            357.138 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.322 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90.405 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 5873639.568 ops/s
[info]                  ·gc.alloc.rate:            358.223 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.712 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 180.280 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   4: 5884740.719 ops/s
[info]                  ·gc.alloc.rate:            358.894 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.351 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89.970 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 5854067.613 ops/s
[info]                  ·gc.alloc.rate:            357.143 MB/sec
[info]                  ·gc.alloc.rate.norm:       96.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.464 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 90.442 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   5872219.917 ±(99.9%) 64966.184 ops/s [Average]
[info]   (min, avg, max) = (5854067.613, 5872219.917, 5892234.355), stdev = 16871.512
[info]   CI (99.9%): [5807253.733, 5937186.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   358.148 ±(99.9%) 3.858 MB/sec [Average]
[info]   (min, avg, max) = (357.138, 358.148, 359.341), stdev = 1.002
[info]   CI (99.9%): [354.290, 362.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen":
[info]   403.636 ±(99.9%) 579.207 MB/sec [Average]
[info]   (min, avg, max) = (336.322, 403.636, 672.712), stdev = 150.418
[info]   CI (99.9%): [≈ 0, 982.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm":
[info]   108.190 ±(99.9%) 155.183 B/op [Average]
[info]   (min, avg, max) = (89.853, 108.190, 180.280), stdev = 40.300
[info]   CI (99.9%): [≈ 0, 263.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 7.000), stdev = 1.789
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 88.06% complete, ETA 00:10:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38217.405 ops/s
[info] # Warmup Iteration   2: 309573.982 ops/s
[info] # Warmup Iteration   3: 312316.089 ops/s
[info] Iteration   1: 308072.864 ops/s
[info]                  ·gc.alloc.rate:                   1588.011 MB/sec
[info]                  ·gc.alloc.rate.norm:              8112.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1344.429 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        6867.718 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.403 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         18.000 ms
[info] Iteration   2: 304970.441 ops/s
[info]                  ·gc.alloc.rate:                                  1572.065 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.188 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.968 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1697.559 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8759.562 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.065 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 318488.004 ops/s
[info]                  ·gc.alloc.rate:                                  1641.337 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8410.518 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 318894.410 ops/s
[info]                  ·gc.alloc.rate:                                  1643.983 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.380 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8400.155 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 315905.973 ops/s
[info]                  ·gc.alloc.rate:                                  1627.873 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8112.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.597 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8479.382 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   313266.338 ±(99.9%) 24482.855 ops/s [Average]
[info]   (min, avg, max) = (304970.441, 313266.338, 318894.410), stdev = 6358.120
[info]   CI (99.9%): [288783.483, 337749.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1614.654 ±(99.9%) 125.819 MB/sec [Average]
[info]   (min, avg, max) = (1572.065, 1614.654, 1643.983), stdev = 32.675
[info]   CI (99.9%): [1488.834, 1740.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8112.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8112.001, 8112.001, 8112.001), stdev = 0.001
[info]   CI (99.9%): [8112.001, 8112.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.320 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.188), stdev = 0.083
[info]   CI (99.9%): [≈ 0, 0.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.200 ±(99.9%) 1.654 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.200, 0.968), stdev = 0.429
[info]   CI (99.9%): [≈ 0, 1.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1629.541 ±(99.9%) 613.768 MB/sec [Average]
[info]   (min, avg, max) = (1344.429, 1629.541, 1702.380), stdev = 159.393
[info]   CI (99.9%): [1015.773, 2243.308] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   8183.467 ±(99.9%) 2887.439 B/op [Average]
[info]   (min, avg, max) = (6867.718, 8183.467, 8759.562), stdev = 749.859
[info]   CI (99.9%): [5296.028, 11070.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 7.823 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 4.664), stdev = 2.032
[info]   CI (99.9%): [≈ 0, 8.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   5.494 ±(99.9%) 40.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.494, 24.065), stdev = 10.486
[info]   CI (99.9%): [≈ 0, 45.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.200, 18.000), stdev = 5.805
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 88.31% complete, ETA 00:10:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50300.263 ops/s
[info] # Warmup Iteration   2: 64628.222 ops/s
[info] # Warmup Iteration   3: 66011.140 ops/s
[info] Iteration   1: 66253.439 ops/s
[info]                  ·gc.alloc.rate:                                  1894.290 MB/sec
[info]                  ·gc.alloc.rate.norm:                             45008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.113 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.691 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2038.649 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48437.932 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                79.121 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 68293.214 ops/s
[info]                  ·gc.alloc.rate:                                  1952.702 MB/sec
[info]                  ·gc.alloc.rate.norm:                             45008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.170 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.756 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       39223.924 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 66428.810 ops/s
[info]                  ·gc.alloc.rate:                                  1900.267 MB/sec
[info]                  ·gc.alloc.rate.norm:                             45008.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.011 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.272 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2043.026 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       48389.260 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 66326.013 ops/s
[info]                  ·gc.alloc.rate:                                  1896.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             45008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.124 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.741 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       40387.604 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 67743.368 ops/s
[info]                  ·gc.alloc.rate:                                  1937.018 MB/sec
[info]                  ·gc.alloc.rate.norm:                             45008.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.353 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.118 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       47450.099 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce":
[info]   67008.969 ±(99.9%) 3633.949 ops/s [Average]
[info]   (min, avg, max) = (66253.439, 67008.969, 68293.214), stdev = 943.725
[info]   CI (99.9%): [63375.019, 70642.918] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1916.140 ±(99.9%) 103.516 MB/sec [Average]
[info]   (min, avg, max) = (1894.290, 1916.140, 1952.702), stdev = 26.883
[info]   CI (99.9%): [1812.623, 2019.656] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   45008.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (45008.006, 45008.006, 45008.007), stdev = 0.001
[info]   CI (99.9%): [45008.005, 45008.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.005, 0.031, 0.113), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.722 ±(99.9%) 4.252 B/op [Average]
[info]   (min, avg, max) = (0.124, 0.722, 2.691), stdev = 1.104
[info]   CI (99.9%): [≈ 0, 4.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1905.458 ±(99.9%) 716.096 MB/sec [Average]
[info]   (min, avg, max) = (1701.741, 1905.458, 2043.026), stdev = 185.968
[info]   CI (99.9%): [1189.362, 2621.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   44777.764 ±(99.9%) 17614.303 B/op [Average]
[info]   (min, avg, max) = (39223.924, 44777.764, 48437.932), stdev = 4574.378
[info]   CI (99.9%): [27163.461, 62392.066] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   15.824 ±(99.9%) 136.251 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 15.824, 79.121), stdev = 35.384
[info]   CI (99.9%): [≈ 0, 152.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.673
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 88.56% complete, ETA 00:09:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 33651.013 ops/s
[info] # Warmup Iteration   2: 63063.258 ops/s
[info] # Warmup Iteration   3: 63054.416 ops/s
[info] Iteration   1: 63526.480 ops/s
[info]                  ·gc.alloc.rate:            976.916 MB/sec
[info]                  ·gc.alloc.rate.norm:       24208.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.986 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 24953.128 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 63337.665 ops/s
[info]                  ·gc.alloc.rate:                   974.024 MB/sec
[info]                  ·gc.alloc.rate.norm:              24208.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1007.016 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        25027.972 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 16.553 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 65424.720 ops/s
[info]                  ·gc.alloc.rate:                                  1006.172 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24208.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.048 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.144 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24373.936 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                96.150 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   4: 65860.311 ops/s
[info]                  ·gc.alloc.rate:                                  1012.896 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24208.007 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.050 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.198 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.066 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24403.258 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 66096.993 ops/s
[info]                  ·gc.alloc.rate:                                  1016.559 MB/sec
[info]                  ·gc.alloc.rate.norm:                             24208.006 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.024 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.084 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24315.771 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala":
[info]   64849.234 ±(99.9%) 5073.828 ops/s [Average]
[info]   (min, avg, max) = (63337.665, 64849.234, 66096.993), stdev = 1317.657
[info]   CI (99.9%): [59775.405, 69923.062] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   997.313 ±(99.9%) 78.210 MB/sec [Average]
[info]   (min, avg, max) = (974.024, 997.313, 1016.559), stdev = 20.311
[info]   CI (99.9%): [919.103, 1075.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   24208.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24208.006, 24208.006, 24208.007), stdev = 0.001
[info]   CI (99.9%): [24208.006, 24208.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.102 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.050), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.473 ±(99.9%) 2.455 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.473, 1.198), stdev = 0.638
[info]   CI (99.9%): [≈ 0, 2.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1013.844 ±(99.9%) 27.149 MB/sec [Average]
[info]   (min, avg, max) = (1006.986, 1013.844, 1021.084), stdev = 7.050
[info]   CI (99.9%): [986.695, 1040.993] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   24614.813 ±(99.9%) 1330.230 B/op [Average]
[info]   (min, avg, max) = (24315.771, 24614.813, 25027.972), stdev = 345.456
[info]   CI (99.9%): [23284.583, 25945.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.932 ±(99.9%) 6.688 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.932, 3.996), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 7.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   22.541 ±(99.9%) 160.835 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22.541, 96.150), stdev = 41.768
[info]   CI (99.9%): [≈ 0, 183.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 8.600, 14.000), stdev = 5.683
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 88.81% complete, ETA 00:09:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 98139.596 ops/s
[info] # Warmup Iteration   2: 110612.464 ops/s
[info] # Warmup Iteration   3: 111775.005 ops/s
[info] Iteration   1: 110405.401 ops/s
[info]                  ·gc.alloc.rate:                                  1622.766 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.123 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 1.753 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.724 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       19314.499 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                47.479 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 110812.478 ops/s
[info]                  ·gc.alloc.rate:                                  1628.734 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.010 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.717 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24172.727 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 110717.403 ops/s
[info]                  ·gc.alloc.rate:                                  1627.783 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.080 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.214 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       24193.901 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 111945.842 ops/s
[info]                  ·gc.alloc.rate:            1645.424 MB/sec
[info]                  ·gc.alloc.rate.norm:       23136.004 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.804 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 23928.759 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 114297.103 ops/s
[info]                  ·gc.alloc.rate:                                  1679.974 MB/sec
[info]                  ·gc.alloc.rate.norm:                             23136.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.819 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       23436.837 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala":
[info]   111635.645 ±(99.9%) 6153.159 ops/s [Average]
[info]   (min, avg, max) = (110405.401, 111635.645, 114297.103), stdev = 1597.956
[info]   CI (99.9%): [105482.486, 117788.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1640.936 ±(99.9%) 90.227 MB/sec [Average]
[info]   (min, avg, max) = (1622.766, 1640.936, 1679.974), stdev = 23.432
[info]   CI (99.9%): [1550.709, 1731.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   23136.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (23136.004, 23136.004, 23136.004), stdev = 0.001
[info]   CI (99.9%): [23136.003, 23136.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.028 ±(99.9%) 0.206 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.123), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.395 ±(99.9%) 2.931 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.395, 1.753), stdev = 0.761
[info]   CI (99.9%): [≈ 0, 3.326] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   1632.456 ±(99.9%) 597.838 MB/sec [Average]
[info]   (min, avg, max) = (1354.724, 1632.456, 1702.214), stdev = 155.257
[info]   CI (99.9%): [1034.618, 2230.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   23009.345 ±(99.9%) 8039.594 B/op [Average]
[info]   (min, avg, max) = (19314.499, 23009.345, 24193.901), stdev = 2087.857
[info]   CI (99.9%): [14969.751, 31048.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   9.496 ±(99.9%) 81.762 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.496, 47.479), stdev = 21.233
[info]   CI (99.9%): [≈ 0, 91.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 8.000), stdev = 1.789
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 89.05% complete, ETA 00:09:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26341.235 ops/s
[info] # Warmup Iteration   2: 47225.754 ops/s
[info] # Warmup Iteration   3: 47640.781 ops/s
[info] Iteration   1: 48794.921 ops/s
[info]                  ·gc.alloc.rate:                                  2505.816 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.472 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76855.037 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   2: 47207.629 ops/s
[info]                  ·gc.alloc.rate:                                  2424.132 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.010 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.200 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2722.397 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90786.570 B/op
[info]                  ·gc.count:                                       8.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 47107.001 ops/s
[info]                  ·gc.alloc.rate:                                  2419.255 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.015 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.493 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.401 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       79608.540 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 48730.038 ops/s
[info]                  ·gc.alloc.rate:                                  2503.529 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.008 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.133 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.293 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       76957.535 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   5: 47941.659 ops/s
[info]                  ·gc.alloc.rate:                                  2462.291 MB/sec
[info]                  ·gc.alloc.rate.norm:                             80840.009 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.009 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.301 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       78223.870 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson":
[info]   47956.250 ±(99.9%) 3094.914 ops/s [Average]
[info]   (min, avg, max) = (47107.001, 47956.250, 48794.921), stdev = 803.739
[info]   CI (99.9%): [44861.336, 51051.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2463.005 ±(99.9%) 159.938 MB/sec [Average]
[info]   (min, avg, max) = (2419.255, 2463.005, 2505.816), stdev = 41.535
[info]   CI (99.9%): [2303.067, 2622.942] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80840.009 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (80840.008, 80840.009, 80840.010), stdev = 0.001
[info]   CI (99.9%): [80840.006, 80840.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.010 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (0.004, 0.010, 0.015), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.320 ±(99.9%) 0.617 B/op [Average]
[info]   (min, avg, max) = (0.133, 0.320, 0.493), stdev = 0.160
[info]   CI (99.9%): [≈ 0, 0.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2450.598 ±(99.9%) 585.070 MB/sec [Average]
[info]   (min, avg, max) = (2382.293, 2450.598, 2722.397), stdev = 151.941
[info]   CI (99.9%): [1865.528, 3035.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   80486.310 ±(99.9%) 22586.486 B/op [Average]
[info]   (min, avg, max) = (76855.037, 80486.310, 90786.570), stdev = 5865.639
[info]   CI (99.9%): [57899.824, 103072.796] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.count":
[info]   36.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.200, 8.000), stdev = 0.447
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 89.30% complete, ETA 00:09:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 165537.742 ops/s
[info] # Warmup Iteration   2: 208417.773 ops/s
[info] # Warmup Iteration   3: 216313.411 ops/s
[info] Iteration   1: 215853.821 ops/s
[info]                  ·gc.alloc.rate:            1258.700 MB/sec
[info]                  ·gc.alloc.rate.norm:       9176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 9830.643 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   2: 214314.343 ops/s
[info]                  ·gc.alloc.rate:                                  1249.122 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.398 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.209 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       7450.344 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                24.459 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   3: 213432.254 ops/s
[info]                  ·gc.alloc.rate:                                  1244.299 MB/sec
[info]                  ·gc.alloc.rate.norm:                             9176.002 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.021 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.152 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.492 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       10040.237 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 210408.468 ops/s
[info]                  ·gc.alloc.rate:            1226.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       9176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.848 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 10184.945 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 215650.093 ops/s
[info]                  ·gc.alloc.rate:            1257.158 MB/sec
[info]                  ·gc.alloc.rate.norm:       9176.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.082 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 7452.880 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce":
[info]   213931.796 ±(99.9%) 8492.491 ops/s [Average]
[info]   (min, avg, max) = (210408.468, 213931.796, 215853.821), stdev = 2205.473
[info]   CI (99.9%): [205439.305, 222424.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1247.244 ±(99.9%) 49.237 MB/sec [Average]
[info]   (min, avg, max) = (1226.940, 1247.244, 1258.700), stdev = 12.787
[info]   CI (99.9%): [1198.007, 1296.480] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   9176.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9176.002, 9176.002, 9176.002), stdev = 0.001
[info]   CI (99.9%): [9176.002, 9176.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.015 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.054), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.110 ±(99.9%) 0.670 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.110, 0.398), stdev = 0.174
[info]   CI (99.9%): [≈ 0, 0.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1221.426 ±(99.9%) 716.677 MB/sec [Average]
[info]   (min, avg, max) = (1014.209, 1221.426, 1361.848), stdev = 186.119
[info]   CI (99.9%): [504.749, 1938.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8991.810 ±(99.9%) 5435.697 B/op [Average]
[info]   (min, avg, max) = (7450.344, 8991.810, 10184.945), stdev = 1411.633
[info]   CI (99.9%): [3556.113, 14427.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   4.892 ±(99.9%) 42.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.892, 24.459), stdev = 10.939
[info]   CI (99.9%): [≈ 0, 47.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeCirce:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 6.200, 14.000), stdev = 4.919
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.55% complete, ETA 00:09:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 251683.027 ops/s
[info] # Warmup Iteration   2: 478078.913 ops/s
[info] # Warmup Iteration   3: 463377.765 ops/s
[info] Iteration   1: 481602.269 ops/s
[info]                  ·gc.alloc.rate:                   423.438 MB/sec
[info]                  ·gc.alloc.rate.norm:              1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.676 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1097.153 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.177 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 482180.559 ops/s
[info]                  ·gc.alloc.rate:            423.917 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1097.997 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 463714.292 ops/s
[info]                  ·gc.alloc.rate:            407.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.816 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1139.491 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 455709.996 ops/s
[info]                  ·gc.alloc.rate:            400.870 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.727 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2319.131 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   5: 459082.207 ops/s
[info]                  ·gc.alloc.rate:            403.687 MB/sec
[info]                  ·gc.alloc.rate.norm:       1384.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1151.014 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala":
[info]   468457.865 ±(99.9%) 48478.381 ops/s [Average]
[info]   (min, avg, max) = (455709.996, 468457.865, 482180.559), stdev = 12589.681
[info]   CI (99.9%): [419979.484, 516936.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   411.958 ±(99.9%) 42.306 MB/sec [Average]
[info]   (min, avg, max) = (400.870, 411.958, 423.917), stdev = 10.987
[info]   CI (99.9%): [369.652, 454.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1384.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1384.001, 1384.001, 1384.001), stdev = 0.001
[info]   CI (99.9%): [1384.001, 1384.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   403.053 ±(99.9%) 578.342 MB/sec [Average]
[info]   (min, avg, max) = (335.676, 403.053, 671.727), stdev = 150.194
[info]   CI (99.9%): [≈ 0, 981.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1360.957 ±(99.9%) 2064.642 B/op [Average]
[info]   (min, avg, max) = (1097.153, 1360.957, 2319.131), stdev = 536.181
[info]   CI (99.9%): [≈ 0, 3425.599] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.435 ±(99.9%) 3.749 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.435, 2.177), stdev = 0.974
[info]   CI (99.9%): [≈ 0, 4.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 9.000), stdev = 1.949
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 89.80% complete, ETA 00:08:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 692050.779 ops/s
[info] # Warmup Iteration   2: 815744.635 ops/s
[info] # Warmup Iteration   3: 770303.889 ops/s
[info] Iteration   1: 781461.014 ops/s
[info]                  ·gc.alloc.rate:            420.995 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.345 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 677.492 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 781585.755 ops/s
[info]                  ·gc.alloc.rate:            421.159 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.865 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1354.808 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 782770.207 ops/s
[info]                  ·gc.alloc.rate:            421.694 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.358 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 676.394 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 785515.626 ops/s
[info]                  ·gc.alloc.rate:            423.179 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.354 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 674.013 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 809224.150 ops/s
[info]                  ·gc.alloc.rate:            436.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.932 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1308.564 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala":
[info]   788111.350 ±(99.9%) 45878.700 ops/s [Average]
[info]   (min, avg, max) = (781461.014, 788111.350, 809224.150), stdev = 11914.553
[info]   CI (99.9%): [742232.650, 833990.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   424.623 ±(99.9%) 24.897 MB/sec [Average]
[info]   (min, avg, max) = (420.995, 424.623, 436.086), stdev = 6.466
[info]   CI (99.9%): [399.726, 449.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   848.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.001, 848.001, 848.001), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   470.971 ±(99.9%) 709.804 MB/sec [Average]
[info]   (min, avg, max) = (336.345, 470.971, 672.932), stdev = 184.334
[info]   CI (99.9%): [≈ 0, 1180.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   938.254 ±(99.9%) 1384.410 B/op [Average]
[info]   (min, avg, max) = (674.013, 938.254, 1354.808), stdev = 359.527
[info]   CI (99.9%): [≈ 0, 2322.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 2.191
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 90.05% complete, ETA 00:08:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 744558.586 ops/s
[info] # Warmup Iteration   2: 772249.287 ops/s
[info] # Warmup Iteration   3: 782623.139 ops/s
[info] Iteration   1: 818738.487 ops/s
[info]                  ·gc.alloc.rate:      8.325 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 819719.230 ops/s
[info]                  ·gc.alloc.rate:      8.332 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 819404.346 ops/s
[info]                  ·gc.alloc.rate:      8.330 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 820017.270 ops/s
[info]                  ·gc.alloc.rate:      8.336 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 814951.239 ops/s
[info]                  ·gc.alloc.rate:      8.284 MB/sec
[info]                  ·gc.alloc.rate.norm: 16.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   818566.114 ±(99.9%) 7993.030 ops/s [Average]
[info]   (min, avg, max) = (814951.239, 818566.114, 820017.270), stdev = 2075.764
[info]   CI (99.9%): [810573.085, 826559.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   8.321 ±(99.9%) 0.082 MB/sec [Average]
[info]   (min, avg, max) = (8.284, 8.321, 8.336), stdev = 0.021
[info]   CI (99.9%): [8.239, 8.404] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   16.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.001, 16.001), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 90.30% complete, ETA 00:08:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19999.013 ops/s
[info] # Warmup Iteration   2: 29848.498 ops/s
[info] # Warmup Iteration   3: 30305.608 ops/s
[info] Iteration   1: 29133.597 ops/s
[info]                  ·gc.alloc.rate:                   1451.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              78432.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1681.878 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        90862.912 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 215.912 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         25.000 ms
[info] Iteration   2: 30469.207 ops/s
[info]                  ·gc.alloc.rate:                                  1517.779 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.150 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.194 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 10.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.302 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       70331.737 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 30097.335 ops/s
[info]                  ·gc.alloc.rate:            1499.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.014 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1701.699 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 89001.119 B/op
[info]                  ·gc.count:                 5.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 30748.469 ops/s
[info]                  ·gc.alloc.rate:            1531.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       78416.013 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.457 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 69691.401 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 29691.779 ops/s
[info]                  ·gc.alloc.rate:                                  1479.159 MB/sec
[info]                  ·gc.alloc.rate.norm:                             78416.016 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.070 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.720 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       90214.893 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson":
[info]   30028.077 ±(99.9%) 2459.254 ops/s [Average]
[info]   (min, avg, max) = (29133.597, 30028.077, 30748.469), stdev = 638.660
[info]   CI (99.9%): [27568.823, 32487.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1495.986 ±(99.9%) 121.964 MB/sec [Average]
[info]   (min, avg, max) = (1451.781, 1495.986, 1531.897), stdev = 31.674
[info]   CI (99.9%): [1374.022, 1617.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   78419.243 ±(99.9%) 27.505 B/op [Average]
[info]   (min, avg, max) = (78416.013, 78419.243, 78432.020), stdev = 7.143
[info]   CI (99.9%): [78391.738, 78446.747] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.039 ±(99.9%) 0.334 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.039, 0.194), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   2.020 ±(99.9%) 17.244 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.020, 10.031), stdev = 4.478
[info]   CI (99.9%): [≈ 0, 19.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1561.611 ±(99.9%) 704.533 MB/sec [Average]
[info]   (min, avg, max) = (1361.302, 1561.611, 1701.720), stdev = 182.965
[info]   CI (99.9%): [857.079, 2266.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   82020.412 ±(99.9%) 42300.127 B/op [Average]
[info]   (min, avg, max) = (69691.401, 82020.412, 90862.912), stdev = 10985.209
[info]   CI (99.9%): [39720.285, 124320.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   43.182 ±(99.9%) 371.813 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 43.182, 215.912), stdev = 96.559
[info]   CI (99.9%): [≈ 0, 414.996] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.SetOfIntsBenchmark.writePlayJson:·gc.time":
[info]   41.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 8.200, 25.000), stdev = 9.418
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 90.55% complete, ETA 00:08:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2913824.555 ops/s
[info] # Warmup Iteration   2: 4220251.626 ops/s
[info] # Warmup Iteration   3: 4259474.300 ops/s
[info] Iteration   1: 4349210.996 ops/s
[info]                  ·gc.alloc.rate:                                  3205.389 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.722 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1231.775 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   2: 4317506.116 ops/s
[info]                  ·gc.alloc.rate:                                  3181.463 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.852 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1116.753 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   3: 4245345.940 ops/s
[info]                  ·gc.alloc.rate:                                  3128.429 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3062.917 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1135.708 B/op
[info]                  ·gc.count:                                       9.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   4: 4291474.145 ops/s
[info]                  ·gc.alloc.rate:                                  3162.612 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1160.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.005 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.638 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1248.405 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   5: 4348464.676 ops/s
[info]                  ·gc.alloc.rate:            3205.914 MB/sec
[info]                  ·gc.alloc.rate.norm:       1160.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      3064.509 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1108.835 B/op
[info]                  ·gc.count:                 9.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4310400.375 ±(99.9%) 167800.713 ops/s [Average]
[info]   (min, avg, max) = (4245345.940, 4310400.375, 4349210.996), stdev = 43577.312
[info]   CI (99.9%): [4142599.662, 4478201.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3176.762 ±(99.9%) 125.186 MB/sec [Average]
[info]   (min, avg, max) = (3128.429, 3176.762, 3205.914), stdev = 32.510
[info]   CI (99.9%): [3051.576, 3301.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.008 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.005), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.001 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.001, 0.002), stdev = 0.001
[info]   CI (99.9%): [≈ 0, 0.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   3199.528 ±(99.9%) 717.630 MB/sec [Average]
[info]   (min, avg, max) = (3062.852, 3199.528, 3403.722), stdev = 186.366
[info]   CI (99.9%): [2481.898, 3917.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1168.295 ±(99.9%) 256.156 B/op [Average]
[info]   (min, avg, max) = (1108.835, 1168.295, 1248.405), stdev = 66.523
[info]   CI (99.9%): [912.139, 1424.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 10.000), stdev = 1.225
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 90.80% complete, ETA 00:07:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.885 ops/s
[info] # Warmup Iteration   2: 7048892.210 ops/s
[info] # Warmup Iteration   3: 7430413.703 ops/s
[info] Iteration   1: 7417446.121 ops/s
[info]                  ·gc.alloc.rate:                   791.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.418 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        212.305 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.141 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         15.000 ms
[info] Iteration   2: 7599056.153 ops/s
[info]                  ·gc.alloc.rate:            811.250 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.548 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.241 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 7599686.567 ops/s
[info]                  ·gc.alloc.rate:            811.139 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.393 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 138.228 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 7541629.212 ops/s
[info]                  ·gc.alloc.rate:            804.940 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.108 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 208.943 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   5: 7494750.034 ops/s
[info]                  ·gc.alloc.rate:                   799.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.728 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        140.857 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      7.327 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.539 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava":
[info]   7530513.617 ±(99.9%) 296210.801 ops/s [Average]
[info]   (min, avg, max) = (7417446.121, 7530513.617, 7599686.567), stdev = 76925.004
[info]   CI (99.9%): [7234302.816, 7826724.419] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   803.790 ±(99.9%) 31.812 MB/sec [Average]
[info]   (min, avg, max) = (791.645, 803.790, 811.250), stdev = 8.262
[info]   CI (99.9%): [771.978, 835.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.439 ±(99.9%) 700.672 MB/sec [Average]
[info]   (min, avg, max) = (667.393, 801.439, 1001.108), stdev = 181.962
[info]   CI (99.9%): [100.767, 1502.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   167.715 ±(99.9%) 150.957 B/op [Average]
[info]   (min, avg, max) = (138.228, 167.715, 212.305), stdev = 39.203
[info]   CI (99.9%): [16.758, 318.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.599 ±(99.9%) 12.380 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.599, 7.327), stdev = 3.215
[info]   CI (99.9%): [≈ 0, 13.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.336 ±(99.9%) 2.600 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.336, 1.539), stdev = 0.675
[info]   CI (99.9%): [≈ 0, 2.936] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   58.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 11.600, 15.000), stdev = 3.130
[info]   CI (99.9%): [58.000, 58.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 91.04% complete, ETA 00:07:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1444354.588 ops/s
[info] # Warmup Iteration   2: 3675390.198 ops/s
[info] # Warmup Iteration   3: 3747144.843 ops/s
[info] Iteration   1: 3708320.353 ops/s
[info]                  ·gc.alloc.rate:                                  1922.618 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.119 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.050 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2034.310 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       863.405 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.696 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Iteration   2: 3762942.551 ops/s
[info]                  ·gc.alloc.rate:                                  1951.292 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.726 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       854.236 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   3: 3752313.137 ops/s
[info]                  ·gc.alloc.rate:                                  1945.154 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.660 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       713.854 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   4: 3784196.235 ops/s
[info]                  ·gc.alloc.rate:                                  1962.442 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.849 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       849.434 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 3786946.868 ops/s
[info]                  ·gc.alloc.rate:                                  1963.193 MB/sec
[info]                  ·gc.alloc.rate.norm:                             816.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       848.816 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   3758943.829 ±(99.9%) 122444.217 ops/s [Average]
[info]   (min, avg, max) = (3708320.353, 3758943.829, 3786946.868), stdev = 31798.374
[info]   CI (99.9%): [3636499.612, 3881388.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1948.940 ±(99.9%) 63.803 MB/sec [Average]
[info]   (min, avg, max) = (1922.618, 1948.940, 1963.193), stdev = 16.569
[info]   CI (99.9%): [1885.137, 2012.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.025 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.025, 0.119), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.085 B/op [Average]
[info]   (min, avg, max) = (≈ 10⁻³, 0.011, 0.050), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   1972.738 ±(99.9%) 583.678 MB/sec [Average]
[info]   (min, avg, max) = (1701.660, 1972.738, 2042.849), stdev = 151.579
[info]   CI (99.9%): [1389.059, 2556.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   825.949 ±(99.9%) 242.338 B/op [Average]
[info]   (min, avg, max) = (713.854, 825.949, 863.405), stdev = 62.934
[info]   CI (99.9%): [583.611, 1068.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.339 ±(99.9%) 2.921 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.339, 1.696), stdev = 0.759
[info]   CI (99.9%): [≈ 0, 3.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 12.000), stdev = 3.050
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 91.29% complete, ETA 00:07:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5915032.593 ops/s
[info] # Warmup Iteration   2: 6701019.766 ops/s
[info] # Warmup Iteration   3: 6781087.787 ops/s
[info] Iteration   1: 6539893.116 ops/s
[info]                  ·gc.alloc.rate:            698.066 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.128 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 162.239 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 6570890.115 ops/s
[info]                  ·gc.alloc.rate:            701.313 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.051 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 161.469 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 6749063.700 ops/s
[info]                  ·gc.alloc.rate:            720.308 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.022 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.205 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 6738614.602 ops/s
[info]                  ·gc.alloc.rate:            719.345 MB/sec
[info]                  ·gc.alloc.rate.norm:       168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.164 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 157.448 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 6555850.458 ops/s
[info]                  ·gc.alloc.rate:                   699.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             674.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        161.834 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6630862.398 ±(99.9%) 399618.935 ops/s [Average]
[info]   (min, avg, max) = (6539893.116, 6630862.398, 6749063.700), stdev = 103779.768
[info]   CI (99.9%): [6231243.463, 7030481.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   707.768 ±(99.9%) 42.638 MB/sec [Average]
[info]   (min, avg, max) = (698.066, 707.768, 720.308), stdev = 11.073
[info]   CI (99.9%): [665.130, 750.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   674.097 ±(99.9%) 0.226 MB/sec [Average]
[info]   (min, avg, max) = (674.022, 674.097, 674.164), stdev = 0.059
[info]   CI (99.9%): [673.871, 674.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   160.039 ±(99.9%) 9.598 B/op [Average]
[info]   (min, avg, max) = (157.205, 160.039, 162.239), stdev = 2.493
[info]   CI (99.9%): [150.441, 169.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.160 ±(99.9%) 1.377 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.160, 0.800), stdev = 0.358
[info]   CI (99.9%): [≈ 0, 1.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 91.54% complete, ETA 00:07:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2365270.507 ops/s
[info] # Warmup Iteration   2: 4214573.576 ops/s
[info] # Warmup Iteration   3: 4226635.772 ops/s
[info] Iteration   1: 4356299.155 ops/s
[info]                  ·gc.alloc.rate:                                  2346.720 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.107 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.039 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2382.304 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       860.859 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   2: 4333976.500 ops/s
[info]                  ·gc.alloc.rate:            2334.604 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.171 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 865.278 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 4320841.568 ops/s
[info]                  ·gc.alloc.rate:                                  2328.499 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2383.268 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       867.946 B/op
[info]                  ·gc.count:                                       7.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 4361888.972 ops/s
[info]                  ·gc.alloc.rate:                                  2349.829 MB/sec
[info]                  ·gc.alloc.rate.norm:                             848.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: ≈ 10⁻³ B/op
[info]                  ·gc.churn.G1_Old_Gen:                            2042.104 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       736.949 B/op
[info]                  ·gc.count:                                       6.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 4119652.385 ops/s
[info]                  ·gc.alloc.rate:            2219.466 MB/sec
[info]                  ·gc.alloc.rate.norm:       848.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      2382.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 910.298 B/op
[info]                  ·gc.count:                 7.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson":
[info]   4298531.716 ±(99.9%) 390337.822 ops/s [Average]
[info]   (min, avg, max) = (4119652.385, 4298531.716, 4361888.972), stdev = 101369.493
[info]   CI (99.9%): [3908193.894, 4688869.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2315.824 ±(99.9%) 210.108 MB/sec [Average]
[info]   (min, avg, max) = (2219.466, 2315.824, 2349.829), stdev = 54.564
[info]   CI (99.9%): [2105.716, 2525.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   848.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (848.000, 848.000, 848.000), stdev = 0.001
[info]   CI (99.9%): [848.000, 848.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.022 ±(99.9%) 0.182 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.107), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.066 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.039), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.074] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   2314.473 ±(99.9%) 586.298 MB/sec [Average]
[info]   (min, avg, max) = (2042.104, 2314.473, 2383.268), stdev = 152.260
[info]   CI (99.9%): [1728.175, 2900.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   848.266 ±(99.9%) 251.583 B/op [Average]
[info]   (min, avg, max) = (736.949, 848.266, 910.298), stdev = 65.335
[info]   CI (99.9%): [596.683, 1099.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 91.79% complete, ETA 00:07:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1705319.259 ops/s
[info] # Warmup Iteration   2: 2717607.037 ops/s
[info] # Warmup Iteration   3: 2757211.821 ops/s
[info] Iteration   1: 2730288.637 ops/s
[info]                  ·gc.alloc.rate:            1137.768 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1347.981 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 777.203 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   2: 2783494.202 ops/s
[info]                  ·gc.alloc.rate:            1159.851 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1010.909 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 571.760 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2771197.392 ops/s
[info]                  ·gc.alloc.rate:                                  1154.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             656.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.130 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.074 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1358.054 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       771.420 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.892 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Iteration   4: 2824767.627 ops/s
[info]                  ·gc.alloc.rate:            1177.623 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.396 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 568.973 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 2823577.054 ops/s
[info]                  ·gc.alloc.rate:            1176.958 MB/sec
[info]                  ·gc.alloc.rate.norm:       656.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 758.975 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2786664.982 ±(99.9%) 152111.463 ops/s [Average]
[info]   (min, avg, max) = (2730288.637, 2786664.982, 2824767.627), stdev = 39502.864
[info]   CI (99.9%): [2634553.519, 2938776.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1161.412 ±(99.9%) 64.113 MB/sec [Average]
[info]   (min, avg, max) = (1137.768, 1161.412, 1177.623), stdev = 16.650
[info]   CI (99.9%): [1097.299, 1225.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.026 ±(99.9%) 0.223 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.026, 0.130), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.015 ±(99.9%) 0.127 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.074), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1220.010 ±(99.9%) 716.992 MB/sec [Average]
[info]   (min, avg, max) = (1010.909, 1220.010, 1361.710), stdev = 186.200
[info]   CI (99.9%): [503.018, 1937.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   689.666 ±(99.9%) 420.139 B/op [Average]
[info]   (min, avg, max) = (568.973, 689.666, 777.203), stdev = 109.109
[info]   CI (99.9%): [269.527, 1109.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.735 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.401] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.378 ±(99.9%) 3.258 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.378, 1.892), stdev = 0.846
[info]   CI (99.9%): [≈ 0, 3.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 6.800, 12.000), stdev = 4.087
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 92.04% complete, ETA 00:06:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.888 ops/s
[info] # Warmup Iteration   2: 7951212.621 ops/s
[info] # Warmup Iteration   3: 8175729.109 ops/s
[info] Iteration   1: 8427593.882 ops/s
[info]                  ·gc.alloc.rate:                   813.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1000.438 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        186.854 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 8475209.733 ops/s
[info]                  ·gc.alloc.rate:            818.372 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.356 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.951 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   3: 8456749.288 ops/s
[info]                  ·gc.alloc.rate:            816.644 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.121 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 186.336 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   4: 8463614.757 ops/s
[info]                  ·gc.alloc.rate:            817.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.425 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 124.123 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 8248739.051 ops/s
[info]                  ·gc.alloc.rate:                   796.580 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             671.433 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        128.120 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.271 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava":
[info]   8414381.342 ±(99.9%) 362916.832 ops/s [Average]
[info]   (min, avg, max) = (8248739.051, 8414381.342, 8475209.733), stdev = 94248.349
[info]   CI (99.9%): [8051464.510, 8777298.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   812.549 ±(99.9%) 34.981 MB/sec [Average]
[info]   (min, avg, max) = (796.580, 812.549, 818.372), stdev = 9.084
[info]   CI (99.9%): [777.569, 847.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   801.555 ±(99.9%) 700.333 MB/sec [Average]
[info]   (min, avg, max) = (667.356, 801.555, 1001.121), stdev = 181.874
[info]   CI (99.9%): [101.222, 1501.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   149.877 ±(99.9%) 129.232 B/op [Average]
[info]   (min, avg, max) = (123.951, 149.877, 186.854), stdev = 33.561
[info]   CI (99.9%): [20.645, 279.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.465 ±(99.9%) 11.239 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.465, 6.661), stdev = 2.919
[info]   CI (99.9%): [≈ 0, 12.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.279 ±(99.9%) 2.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.279, 1.271), stdev = 0.557
[info]   CI (99.9%): [≈ 0, 2.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   56.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 11.200, 15.000), stdev = 3.114
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 92.29% complete, ETA 00:06:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 995226.060 ops/s
[info] # Warmup Iteration   2: 1836684.178 ops/s
[info] # Warmup Iteration   3: 1801763.110 ops/s
[info] Iteration   1: 1861872.307 ops/s
[info]                  ·gc.alloc.rate:            577.187 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.702 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 568.757 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 1840620.555 ops/s
[info]                  ·gc.alloc.rate:            570.574 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.328 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 287.654 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   3: 1854558.090 ops/s
[info]                  ·gc.alloc.rate:            574.938 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.687 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 570.968 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 1855928.764 ops/s
[info]                  ·gc.alloc.rate:            575.666 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 570.548 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1863404.362 ops/s
[info]                  ·gc.alloc.rate:            577.743 MB/sec
[info]                  ·gc.alloc.rate.norm:       488.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.364 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 284.115 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   1855276.816 ±(99.9%) 34725.524 ops/s [Average]
[info]   (min, avg, max) = (1840620.555, 1855276.816, 1863404.362), stdev = 9018.108
[info]   CI (99.9%): [1820551.292, 1890002.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   575.221 ±(99.9%) 10.908 MB/sec [Average]
[info]   (min, avg, max) = (570.574, 575.221, 577.743), stdev = 2.833
[info]   CI (99.9%): [564.313, 586.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   538.224 ±(99.9%) 709.632 MB/sec [Average]
[info]   (min, avg, max) = (336.328, 538.224, 673.042), stdev = 184.289
[info]   CI (99.9%): [≈ 0, 1247.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   456.408 ±(99.9%) 599.443 B/op [Average]
[info]   (min, avg, max) = (284.115, 456.408, 570.968), stdev = 155.673
[info]   CI (99.9%): [≈ 0, 1055.851] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 6.600, 9.000), stdev = 2.408
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 92.54% complete, ETA 00:06:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6006940.878 ops/s
[info] # Warmup Iteration   2: 8777673.277 ops/s
[info] # Warmup Iteration   3: 8949173.985 ops/s
[info] Iteration   1: 8899833.502 ops/s
[info]                  ·gc.alloc.rate:            859.361 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.031 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 178.473 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 8602497.720 ops/s
[info]                  ·gc.alloc.rate:            830.632 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.674 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 123.095 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 8631635.941 ops/s
[info]                  ·gc.alloc.rate:            833.504 MB/sec
[info]                  ·gc.alloc.rate.norm:       152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 184.020 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 8940823.417 ops/s
[info]                  ·gc.alloc.rate:                   863.421 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.769 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        118.437 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.704 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 8901494.010 ops/s
[info]                  ·gc.alloc.rate:                                  859.600 MB/sec
[info]                  ·gc.alloc.rate.norm:                             152.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.174 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.031 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.122 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       180.561 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8795256.918 ±(99.9%) 630789.424 ops/s [Average]
[info]   (min, avg, max) = (8602497.720, 8795256.918, 8940823.417), stdev = 163814.010
[info]   CI (99.9%): [8164467.494, 9426046.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   849.304 ±(99.9%) 61.028 MB/sec [Average]
[info]   (min, avg, max) = (830.632, 849.304, 863.421), stdev = 15.849
[info]   CI (99.9%): [788.276, 910.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.035 ±(99.9%) 0.299 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.035, 0.174), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.006 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.006, 0.031), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   876.937 ±(99.9%) 718.095 MB/sec [Average]
[info]   (min, avg, max) = (672.674, 876.937, 1021.122), stdev = 186.487
[info]   CI (99.9%): [158.841, 1595.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   156.917 ±(99.9%) 127.464 B/op [Average]
[info]   (min, avg, max) = (118.437, 156.917, 184.020), stdev = 33.102
[info]   CI (99.9%): [29.454, 284.381] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.141 ±(99.9%) 1.212 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.141, 0.704), stdev = 0.315
[info]   CI (99.9%): [≈ 0, 1.352] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.200, 10.000), stdev = 2.950
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 92.79% complete, ETA 00:06:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5910182.770 ops/s
[info] # Warmup Iteration   2: 8172652.093 ops/s
[info] # Warmup Iteration   3: 8113073.534 ops/s
[info] Iteration   1: 8153795.413 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8152442.167 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 8116473.129 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8150282.183 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8139464.819 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   8142491.542 ±(99.9%) 60075.148 ops/s [Average]
[info]   (min, avg, max) = (8116473.129, 8142491.542, 8153795.413), stdev = 15601.325
[info]   CI (99.9%): [8082416.394, 8202566.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 93.03% complete, ETA 00:06:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2228735.788 ops/s
[info] # Warmup Iteration   2: 3118883.744 ops/s
[info] # Warmup Iteration   3: 3185956.889 ops/s
[info] Iteration   1: 3138991.031 ops/s
[info]                  ·gc.alloc.rate:            1004.996 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1008.990 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 506.003 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 3171225.843 ops/s
[info]                  ·gc.alloc.rate:            1015.325 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.000 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 500.860 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   3: 3148816.113 ops/s
[info]                  ·gc.alloc.rate:                                  1008.324 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.080 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.167 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       506.421 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                1.998 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 3144798.796 ops/s
[info]                  ·gc.alloc.rate:                                  1007.013 MB/sec
[info]                  ·gc.alloc.rate.norm:                             504.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.054 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.027 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.144 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       511.073 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 3145062.676 ops/s
[info]                  ·gc.alloc.rate:            1007.172 MB/sec
[info]                  ·gc.alloc.rate.norm:       504.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.218 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 511.029 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3149778.892 ±(99.9%) 48106.882 ops/s [Average]
[info]   (min, avg, max) = (3138991.031, 3149778.892, 3171225.843), stdev = 12493.205
[info]   CI (99.9%): [3101672.009, 3197885.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1008.566 ±(99.9%) 15.264 MB/sec [Average]
[info]   (min, avg, max) = (1004.996, 1008.566, 1015.325), stdev = 3.964
[info]   CI (99.9%): [993.302, 1023.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.027 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.027, 0.080), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.173] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.013 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.040), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.704 ±(99.9%) 23.695 MB/sec [Average]
[info]   (min, avg, max) = (1008.990, 1014.704, 1021.218), stdev = 6.153
[info]   CI (99.9%): [991.009, 1038.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   507.077 ±(99.9%) 16.316 B/op [Average]
[info]   (min, avg, max) = (500.860, 507.077, 511.073), stdev = 4.237
[info]   CI (99.9%): [490.761, 523.394] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.400 ±(99.9%) 3.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.998), stdev = 0.893
[info]   CI (99.9%): [≈ 0, 3.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.301
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 93.28% complete, ETA 00:05:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 635424.567 ops/s
[info] # Warmup Iteration   2: 949244.166 ops/s
[info] # Warmup Iteration   3: 942362.114 ops/s
[info] Iteration   1: 949023.320 ops/s
[info]                  ·gc.alloc.rate:                                  1591.977 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1688.746 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2800.474 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.524 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        14.000 ms
[info] Iteration   2: 958651.291 ops/s
[info]                  ·gc.alloc.rate:                                  1607.718 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.077 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.651 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2794.246 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 965297.546 ops/s
[info]                  ·gc.alloc.rate:                                  1618.923 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.006 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.340 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2219.956 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   4: 940012.855 ops/s
[info]                  ·gc.alloc.rate:                                  1576.565 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.002 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.750 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2849.628 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 963698.844 ops/s
[info]                  ·gc.alloc.rate:                                  1616.269 MB/sec
[info]                  ·gc.alloc.rate.norm:                             2640.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.723 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       2779.580 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   955336.771 ±(99.9%) 41059.919 ops/s [Average]
[info]   (min, avg, max) = (940012.855, 955336.771, 965297.546), stdev = 10663.131
[info]   CI (99.9%): [914276.852, 996396.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   1602.290 ±(99.9%) 68.605 MB/sec [Average]
[info]   (min, avg, max) = (1576.565, 1602.290, 1618.923), stdev = 17.816
[info]   CI (99.9%): [1533.686, 1670.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2640.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2640.000, 2640.000, 2640.000), stdev = 0.001
[info]   CI (99.9%): [2640.000, 2640.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.017 ±(99.9%) 0.129 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.017, 0.077), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.213 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.028, 0.127), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1631.042 ±(99.9%) 580.957 MB/sec [Average]
[info]   (min, avg, max) = (1361.340, 1631.042, 1701.750), stdev = 150.873
[info]   CI (99.9%): [1050.085, 2211.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   2688.777 ±(99.9%) 1014.247 B/op [Average]
[info]   (min, avg, max) = (2219.956, 2688.777, 2849.628), stdev = 263.397
[info]   CI (99.9%): [1674.529, 3703.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   1.105 ±(99.9%) 9.512 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.105, 5.524), stdev = 2.470
[info]   CI (99.9%): [≈ 0, 10.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.800, 14.000), stdev = 4.604
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava
[info] # Run progress: 93.53% complete, ETA 00:05:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.886 ops/s
[info] # Warmup Iteration   2: 2854382.274 ops/s
[info] # Warmup Iteration   3: 2904363.175 ops/s
[info] Iteration   1: 2963354.184 ops/s
[info]                  ·gc.alloc.rate:            828.559 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.337 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 531.753 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 2947766.988 ops/s
[info]                  ·gc.alloc.rate:            824.196 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.546 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 356.372 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2888444.032 ops/s
[info]                  ·gc.alloc.rate:            807.393 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1001.086 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 545.556 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  14.000 ms
[info] Iteration   4: 2910899.996 ops/s
[info]                  ·gc.alloc.rate:            813.730 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.421 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 360.888 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2893540.344 ops/s
[info]                  ·gc.alloc.rate:                                  808.949 MB/sec
[info]                  ·gc.alloc.rate.norm:                             440.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.479 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.260 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1011.872 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       550.373 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     6.661 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.623 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava":
[info]   2920801.109 ±(99.9%) 128089.409 ops/s [Average]
[info]   (min, avg, max) = (2888444.032, 2920801.109, 2963354.184), stdev = 33264.413
[info]   CI (99.9%): [2792711.700, 3048890.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate":
[info]   816.565 ±(99.9%) 36.136 MB/sec [Average]
[info]   (min, avg, max) = (807.393, 816.565, 828.559), stdev = 9.384
[info]   CI (99.9%): [780.430, 852.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.096 ±(99.9%) 0.824 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.096, 0.479), stdev = 0.214
[info]   CI (99.9%): [≈ 0, 0.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.052 ±(99.9%) 0.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.052, 0.260), stdev = 0.116
[info]   CI (99.9%): [≈ 0, 0.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   869.852 ±(99.9%) 711.553 MB/sec [Average]
[info]   (min, avg, max) = (667.421, 869.852, 1011.872), stdev = 184.788
[info]   CI (99.9%): [158.300, 1581.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   468.988 ±(99.9%) 388.866 B/op [Average]
[info]   (min, avg, max) = (356.372, 468.988, 550.373), stdev = 100.987
[info]   CI (99.9%): [80.123, 857.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space":
[info]   1.332 ±(99.9%) 11.471 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.332, 6.661), stdev = 2.979
[info]   CI (99.9%): [≈ 0, 12.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm":
[info]   0.725 ±(99.9%) 6.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.725, 3.623), stdev = 1.620
[info]   CI (99.9%): [≈ 0, 6.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time":
[info]   59.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.800, 15.000), stdev = 2.490
[info]   CI (99.9%): [59.000, 59.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 93.78% complete, ETA 00:05:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 460889.487 ops/s
[info] # Warmup Iteration   2: 1054176.761 ops/s
[info] # Warmup Iteration   3: 1058143.702 ops/s
[info] Iteration   1: 1053310.582 ops/s
[info]                  ·gc.alloc.rate:            728.171 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.815 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1005.290 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1070687.468 ops/s
[info]                  ·gc.alloc.rate:            739.962 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 989.006 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1063267.427 ops/s
[info]                  ·gc.alloc.rate:            735.969 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1006.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1487.278 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  13.000 ms
[info] Iteration   4: 1064359.997 ops/s
[info]                  ·gc.alloc.rate:            735.705 MB/sec
[info]                  ·gc.alloc.rate.norm:       1088.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.745 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 994.891 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1063729.278 ops/s
[info]                  ·gc.alloc.rate:                                  735.226 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1088.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.065 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.096 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1001.390 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.914 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1063070.950 ±(99.9%) 24001.729 ops/s [Average]
[info]   (min, avg, max) = (1053310.582, 1063070.950, 1070687.468), stdev = 6233.173
[info]   CI (99.9%): [1039069.221, 1087072.679] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   735.007 ±(99.9%) 16.420 MB/sec [Average]
[info]   (min, avg, max) = (728.171, 735.007, 739.962), stdev = 4.264
[info]   CI (99.9%): [718.586, 751.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1088.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1088.000, 1088.000, 1088.000), stdev = 0.001
[info]   CI (99.9%): [1088.000, 1088.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.111 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.065), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.124] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.165 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.096), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   740.190 ±(99.9%) 572.337 MB/sec [Average]
[info]   (min, avg, max) = (672.635, 740.190, 1006.057), stdev = 148.634
[info]   CI (99.9%): [167.853, 1312.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1095.571 ±(99.9%) 843.518 B/op [Average]
[info]   (min, avg, max) = (989.006, 1095.571, 1487.278), stdev = 219.059
[info]   CI (99.9%): [252.053, 1939.089] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.183 ±(99.9%) 10.184 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.183, 5.914), stdev = 2.645
[info]   CI (99.9%): [≈ 0, 11.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.600, 13.000), stdev = 2.608
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 94.03% complete, ETA 00:05:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1784547.923 ops/s
[info] # Warmup Iteration   2: 1938156.454 ops/s
[info] # Warmup Iteration   3: 1960626.793 ops/s
[info] Iteration   1: 1952951.666 ops/s
[info]                  ·gc.alloc.rate:            545.859 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.953 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.253 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   2: 1958524.969 ops/s
[info]                  ·gc.alloc.rate:            547.502 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.092 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 541.734 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1960929.622 ops/s
[info]                  ·gc.alloc.rate:            548.109 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.002 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 270.532 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 1952525.446 ops/s
[info]                  ·gc.alloc.rate:            545.816 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.078 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 543.397 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 1962646.696 ops/s
[info]                  ·gc.alloc.rate:            548.637 MB/sec
[info]                  ·gc.alloc.rate.norm:       440.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.032 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 270.295 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1957515.680 ±(99.9%) 17722.759 ops/s [Average]
[info]   (min, avg, max) = (1952525.446, 1957515.680, 1962646.696), stdev = 4602.544
[info]   CI (99.9%): [1939792.921, 1975238.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   547.185 ±(99.9%) 4.982 MB/sec [Average]
[info]   (min, avg, max) = (545.816, 547.185, 548.637), stdev = 1.294
[info]   CI (99.9%): [542.203, 552.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.232 ±(99.9%) 710.813 MB/sec [Average]
[info]   (min, avg, max) = (337.002, 539.232, 674.092), stdev = 184.596
[info]   CI (99.9%): [≈ 0, 1250.044] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   433.842 ±(99.9%) 574.480 B/op [Average]
[info]   (min, avg, max) = (270.295, 433.842, 543.397), stdev = 149.191
[info]   CI (99.9%): [≈ 0, 1008.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 1.095
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson
[info] # Run progress: 94.28% complete, ETA 00:04:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 622009.864 ops/s
[info] # Warmup Iteration   2: 1099361.401 ops/s
[info] # Warmup Iteration   3: 1106760.738 ops/s
[info] Iteration   1: 1085406.386 ops/s
[info]                  ·gc.alloc.rate:            772.284 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.683 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 975.555 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   2: 1080909.527 ops/s
[info]                  ·gc.alloc.rate:            768.981 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.606 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 979.632 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 1106812.515 ops/s
[info]                  ·gc.alloc.rate:            787.460 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.007 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1435.105 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  12.000 ms
[info] Iteration   4: 1107313.676 ops/s
[info]                  ·gc.alloc.rate:            787.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       1120.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.794 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 956.275 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 1111442.200 ops/s
[info]                  ·gc.alloc.rate:                                  790.862 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1120.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.098 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.139 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            676.735 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       958.377 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                5.660 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson":
[info]   1098376.861 ±(99.9%) 54288.309 ops/s [Average]
[info]   (min, avg, max) = (1080909.527, 1098376.861, 1111442.200), stdev = 14098.502
[info]   CI (99.9%): [1044088.551, 1152665.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   781.514 ±(99.9%) 38.836 MB/sec [Average]
[info]   (min, avg, max) = (768.981, 781.514, 790.862), stdev = 10.086
[info]   CI (99.9%): [742.678, 820.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.020 ±(99.9%) 0.169 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.098), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.028 ±(99.9%) 0.239 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.028, 0.139), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   740.765 ±(99.9%) 577.450 MB/sec [Average]
[info]   (min, avg, max) = (672.606, 740.765, 1009.007), stdev = 149.962
[info]   CI (99.9%): [163.315, 1318.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   1060.989 ±(99.9%) 806.283 B/op [Average]
[info]   (min, avg, max) = (956.275, 1060.989, 1435.105), stdev = 209.389
[info]   CI (99.9%): [254.706, 1867.272] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   1.132 ±(99.9%) 9.746 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.132, 5.660), stdev = 2.531
[info]   CI (99.9%): [≈ 0, 10.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.400, 12.000), stdev = 2.191
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 94.53% complete, ETA 00:04:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1051377.706 ops/s
[info] # Warmup Iteration   2: 1673261.242 ops/s
[info] # Warmup Iteration   3: 1686241.551 ops/s
[info] Iteration   1: 1677983.884 ops/s
[info]                  ·gc.alloc.rate:            1364.925 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.544 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1264.638 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  15.000 ms
[info] Iteration   2: 1694475.071 ops/s
[info]                  ·gc.alloc.rate:                                  1378.063 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.079 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.073 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1354.960 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1258.541 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.094 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   3: 1708084.415 ops/s
[info]                  ·gc.alloc.rate:                                  1389.023 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.025 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.023 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.484 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1254.623 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 1678732.147 ops/s
[info]                  ·gc.alloc.rate:            1365.161 MB/sec
[info]                  ·gc.alloc.rate.norm:       1280.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1361.520 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1276.587 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 1681510.879 ops/s
[info]                  ·gc.alloc.rate:                                  1367.579 MB/sec
[info]                  ·gc.alloc.rate.norm:                             1280.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1702.057 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       1593.059 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1688157.279 ±(99.9%) 49966.128 ops/s [Average]
[info]   (min, avg, max) = (1677983.884, 1688157.279, 1708084.415), stdev = 12976.045
[info]   CI (99.9%): [1638191.152, 1738123.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1372.950 ±(99.9%) 40.312 MB/sec [Average]
[info]   (min, avg, max) = (1364.925, 1372.950, 1389.023), stdev = 10.469
[info]   CI (99.9%): [1332.638, 1413.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.021 ±(99.9%) 0.131 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.079), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.019 ±(99.9%) 0.121 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.019, 0.073), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   1425.713 ±(99.9%) 595.212 MB/sec [Average]
[info]   (min, avg, max) = (1348.544, 1425.713, 1702.057), stdev = 154.575
[info]   CI (99.9%): [830.501, 2020.925] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   1329.490 ±(99.9%) 568.255 B/op [Average]
[info]   (min, avg, max) = (1254.623, 1329.490, 1593.059), stdev = 147.574
[info]   CI (99.9%): [761.235, 1897.744] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.736 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.331), stdev = 1.490
[info]   CI (99.9%): [≈ 0, 6.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   0.619 ±(99.9%) 5.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.619, 3.094), stdev = 1.384
[info]   CI (99.9%): [≈ 0, 5.946] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 7.600, 15.000), stdev = 4.775
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava
[info] # Run progress: 94.78% complete, ETA 00:04:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 0.899 ops/s
[info] # Warmup Iteration   2: 2767475.440 ops/s
[info] # Warmup Iteration   3: 2860079.019 ops/s
[info] Iteration   1: 2901910.410 ops/s
[info]                  ·gc.alloc.rate:            678.508 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.461 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.009 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 2904605.200 ops/s
[info]                  ·gc.alloc.rate:            679.026 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361.681 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2905945.818 ops/s
[info]                  ·gc.alloc.rate:            679.398 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.410 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 361.507 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 2899395.577 ops/s
[info]                  ·gc.alloc.rate:            677.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.416 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.322 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 2901329.278 ops/s
[info]                  ·gc.alloc.rate:            678.327 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      667.415 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 362.080 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava":
[info]   2902637.257 ±(99.9%) 10108.761 ops/s [Average]
[info]   (min, avg, max) = (2899395.577, 2902637.257, 2905945.818), stdev = 2625.213
[info]   CI (99.9%): [2892528.495, 2912746.018] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate":
[info]   678.627 ±(99.9%) 2.297 MB/sec [Average]
[info]   (min, avg, max) = (677.875, 678.627, 679.398), stdev = 0.597
[info]   CI (99.9%): [676.329, 680.924] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen":
[info]   667.414 ±(99.9%) 0.128 MB/sec [Average]
[info]   (min, avg, max) = (667.367, 667.414, 667.461), stdev = 0.033
[info]   CI (99.9%): [667.286, 667.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm":
[info]   361.920 ±(99.9%) 1.252 B/op [Average]
[info]   (min, avg, max) = (361.507, 361.920, 362.322), stdev = 0.325
[info]   CI (99.9%): [360.668, 363.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time":
[info]   48.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 95.02% complete, ETA 00:04:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 989000.118 ops/s
[info] # Warmup Iteration   2: 2473940.954 ops/s
[info] # Warmup Iteration   3: 2477131.444 ops/s
[info] Iteration   1: 2469649.812 ops/s
[info]                  ·gc.alloc.rate:                   991.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.336 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        642.753 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.425 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 2483084.032 ops/s
[info]                  ·gc.alloc.rate:                   996.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1008.370 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        639.263 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   3: 2432980.261 ops/s
[info]                  ·gc.alloc.rate:                                  976.833 MB/sec
[info]                  ·gc.alloc.rate.norm:                             632.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.067 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1013.036 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       655.422 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.585 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   4: 2462506.135 ops/s
[info]                  ·gc.alloc.rate:                                  988.681 MB/sec
[info]                  ·gc.alloc.rate.norm:                             632.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       435.117 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        2.000 ms
[info] Iteration   5: 2458211.441 ops/s
[info]                  ·gc.alloc.rate:            987.210 MB/sec
[info]                  ·gc.alloc.rate.norm:       632.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.285 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 653.814 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2461286.336 ±(99.9%) 70930.912 ops/s [Average]
[info]   (min, avg, max) = (2432980.261, 2461286.336, 2483084.032), stdev = 18420.532
[info]   CI (99.9%): [2390355.425, 2532217.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   988.221 ±(99.9%) 28.362 MB/sec [Average]
[info]   (min, avg, max) = (976.833, 988.221, 996.913), stdev = 7.365
[info]   CI (99.9%): [959.859, 1016.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.031 ±(99.9%) 0.177 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.031, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.020 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.020, 0.067), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   946.342 ±(99.9%) 572.213 MB/sec [Average]
[info]   (min, avg, max) = (680.682, 946.342, 1021.285), stdev = 148.602
[info]   CI (99.9%): [374.129, 1518.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   605.274 ±(99.9%) 367.250 B/op [Average]
[info]   (min, avg, max) = (435.117, 605.274, 655.422), stdev = 95.374
[info]   CI (99.9%): [238.024, 972.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   1.066 ±(99.9%) 6.437 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 1.066, 3.996), stdev = 1.672
[info]   CI (99.9%): [≈ 0, 7.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.686 ±(99.9%) 4.168 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 2.585), stdev = 1.082
[info]   CI (99.9%): [≈ 0, 4.855] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.800, 12.000), stdev = 4.919
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 95.27% complete, ETA 00:04:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1868381.396 ops/s
[info] # Warmup Iteration   2: 2654122.105 ops/s
[info] # Warmup Iteration   3: 2673975.190 ops/s
[info] Iteration   1: 2687330.484 ops/s
[info]                  ·gc.alloc.rate:            628.298 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.349 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 197.003 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 2663124.154 ops/s
[info]                  ·gc.alloc.rate:                   622.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.635 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        397.608 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 0.394 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2658217.895 ops/s
[info]                  ·gc.alloc.rate:            621.423 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      673.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 398.742 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 2775973.003 ops/s
[info]                  ·gc.alloc.rate:            648.992 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.710 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 381.449 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 2735898.948 ops/s
[info]                  ·gc.alloc.rate:            639.598 MB/sec
[info]                  ·gc.alloc.rate.norm:       368.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 387.029 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2704108.897 ±(99.9%) 194850.815 ops/s [Average]
[info]   (min, avg, max) = (2658217.895, 2704108.897, 2775973.003), stdev = 50602.138
[info]   CI (99.9%): [2509258.082, 2898959.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   632.171 ±(99.9%) 45.612 MB/sec [Average]
[info]   (min, avg, max) = (621.423, 632.171, 648.992), stdev = 11.845
[info]   CI (99.9%): [586.559, 677.783] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.540 ±(99.9%) 579.454 MB/sec [Average]
[info]   (min, avg, max) = (336.349, 605.540, 673.335), stdev = 150.482
[info]   CI (99.9%): [26.086, 1184.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   352.366 ±(99.9%) 335.595 B/op [Average]
[info]   (min, avg, max) = (197.003, 352.366, 398.742), stdev = 87.153
[info]   CI (99.9%): [16.771, 687.961] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.079 ±(99.9%) 0.678 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.394), stdev = 0.176
[info]   CI (99.9%): [≈ 0, 0.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 5.600, 7.000), stdev = 1.517
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 95.52% complete, ETA 00:03:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2161803.314 ops/s
[info] # Warmup Iteration   2: 3006031.046 ops/s
[info] # Warmup Iteration   3: 3001531.350 ops/s
[info] Iteration   1: 3000626.764 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2992899.137 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2993245.068 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2994079.508 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2994075.716 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2994985.239 ±(99.9%) 12306.167 ops/s [Average]
[info]   (min, avg, max) = (2992899.137, 2994985.239, 3000626.764), stdev = 3195.872
[info]   CI (99.9%): [2982679.072, 3007291.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 95.77% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1482643.366 ops/s
[info] # Warmup Iteration   2: 2259176.139 ops/s
[info] # Warmup Iteration   3: 2242112.294 ops/s
[info] Iteration   1: 2294504.638 ops/s
[info]                  ·gc.alloc.rate:            1049.537 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.028 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 692.210 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  11.000 ms
[info] Iteration   2: 2302459.466 ops/s
[info]                  ·gc.alloc.rate:            1053.386 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.269 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 689.846 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 2303100.841 ops/s
[info]                  ·gc.alloc.rate:                                  1053.372 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.029 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.020 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1012.967 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       692.383 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                2.731 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   4: 2306680.117 ops/s
[info]                  ·gc.alloc.rate:                                  1055.094 MB/sec
[info]                  ·gc.alloc.rate.norm:                             720.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.033 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.022 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.042 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       696.763 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        3.000 ms
[info] Iteration   5: 2256024.249 ops/s
[info]                  ·gc.alloc.rate:            1032.175 MB/sec
[info]                  ·gc.alloc.rate.norm:       720.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1021.290 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 712.408 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2292553.862 ±(99.9%) 80475.902 ops/s [Average]
[info]   (min, avg, max) = (2256024.249, 2292553.862, 2306680.117), stdev = 20899.336
[info]   CI (99.9%): [2212077.960, 2373029.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1048.713 ±(99.9%) 36.452 MB/sec [Average]
[info]   (min, avg, max) = (1032.175, 1048.713, 1055.094), stdev = 9.466
[info]   CI (99.9%): [1012.261, 1085.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.012 ±(99.9%) 0.065 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.033), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.008 ±(99.9%) 0.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.022), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   1014.719 ±(99.9%) 23.448 MB/sec [Average]
[info]   (min, avg, max) = (1009.028, 1014.719, 1021.290), stdev = 6.089
[info]   CI (99.9%): [991.272, 1038.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   696.722 ±(99.9%) 35.108 B/op [Average]
[info]   (min, avg, max) = (689.846, 696.722, 712.408), stdev = 9.117
[info]   CI (99.9%): [661.614, 731.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.881 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   0.546 ±(99.9%) 4.703 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.546, 2.731), stdev = 1.221
[info]   CI (99.9%): [≈ 0, 5.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 7.000, 11.000), stdev = 4.183
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 96.02% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5324.281 ops/s
[info] # Warmup Iteration   2: 8340.724 ops/s
[info] # Warmup Iteration   3: 9820.179 ops/s
[info] Iteration   1: 9841.470 ops/s
[info]                  ·gc.alloc.rate:            1445.086 MB/sec
[info]                  ·gc.alloc.rate.norm:       231032.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1348.529 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 215595.065 B/op
[info]                  ·gc.count:                 4.000 counts
[info]                  ·gc.time:                  19.000 ms
[info] Iteration   2: 10844.095 ops/s
[info]                  ·gc.alloc.rate:                                  1588.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230549.825 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.018 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 2.554 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.813 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       245950.336 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.997 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                580.072 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        11.000 ms
[info] Iteration   3: 11140.542 ops/s
[info]                  ·gc.alloc.rate:                                  1631.090 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230456.039 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.016 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.835 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       240451.596 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 10928.535 ops/s
[info]                  ·gc.alloc.rate:                                  1600.277 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230473.629 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.276 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1361.553 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       196092.346 B/op
[info]                  ·gc.count:                                       4.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 10983.265 ops/s
[info]                  ·gc.alloc.rate:                                  1608.422 MB/sec
[info]                  ·gc.alloc.rate.norm:                             230496.037 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.006 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.876 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.874 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       243888.182 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   10747.582 ±(99.9%) 1994.416 ops/s [Average]
[info]   (min, avg, max) = (9841.470, 10747.582, 11140.542), stdev = 517.944
[info]   CI (99.9%): [8753.165, 12741.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1574.713 ±(99.9%) 285.356 MB/sec [Average]
[info]   (min, avg, max) = (1445.086, 1574.713, 1631.090), stdev = 74.106
[info]   CI (99.9%): [1289.357, 1860.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230601.515 ±(99.9%) 936.647 B/op [Average]
[info]   (min, avg, max) = (230456.039, 230601.515, 231032.045), stdev = 243.244
[info]   CI (99.9%): [229664.868, 231538.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.005 ±(99.9%) 0.028 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.005, 0.018), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.744 ±(99.9%) 4.128 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.744, 2.554), stdev = 1.072
[info]   CI (99.9%): [≈ 0, 4.873] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1561.721 ±(99.9%) 726.809 MB/sec [Average]
[info]   (min, avg, max) = (1348.529, 1561.721, 1701.874), stdev = 188.750
[info]   CI (99.9%): [834.911, 2288.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   228395.505 ±(99.9%) 83942.487 B/op [Average]
[info]   (min, avg, max) = (196092.346, 228395.505, 245950.336), stdev = 21799.597
[info]   CI (99.9%): [144453.018, 312337.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.883 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.997), stdev = 1.788
[info]   CI (99.9%): [≈ 0, 7.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   116.014 ±(99.9%) 998.918 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 116.014, 580.072), stdev = 259.416
[info]   CI (99.9%): [≈ 0, 1114.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 8.600, 19.000), stdev = 6.504
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 96.27% complete, ETA 00:03:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4645.539 ops/s
[info] # Warmup Iteration   2: 14059.084 ops/s
[info] # Warmup Iteration   3: 14024.239 ops/s
[info] Iteration   1: 13911.325 ops/s
[info]                  ·gc.alloc.rate:                   196.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              22224.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:             334.335 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        37831.332 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      1.332 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 150.722 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 14060.761 ops/s
[info]                  ·gc.alloc.rate:      198.501 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.029 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 14451.170 ops/s
[info]                  ·gc.alloc.rate:            204.163 MB/sec
[info]                  ·gc.alloc.rate.norm:       22239.219 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 36563.049 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   4: 14540.214 ops/s
[info]                  ·gc.alloc.rate:      205.505 MB/sec
[info]                  ·gc.alloc.rate.norm: 22240.028 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 13913.754 ops/s
[info]                  ·gc.alloc.rate:            196.582 MB/sec
[info]                  ·gc.alloc.rate.norm:       22240.037 B/op
[info]                  ·gc.churn.G1_Old_Gen:      335.678 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 37976.596 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   14175.445 ±(99.9%) 1155.955 ops/s [Average]
[info]   (min, avg, max) = (13911.325, 14175.445, 14540.214), stdev = 300.198
[info]   CI (99.9%): [13019.489, 15331.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   200.231 ±(99.9%) 16.586 MB/sec [Average]
[info]   (min, avg, max) = (196.405, 200.231, 205.505), stdev = 4.307
[info]   CI (99.9%): [183.644, 216.817] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22233.469 ±(99.9%) 33.203 B/op [Average]
[info]   (min, avg, max) = (22224.029, 22233.469, 22240.037), stdev = 8.623
[info]   CI (99.9%): [22200.266, 22266.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   201.135 ±(99.9%) 707.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 201.135, 335.678), stdev = 183.611
[info]   CI (99.9%): [≈ 0, 908.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   22474.195 ±(99.9%) 79028.328 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22474.195, 37976.596), stdev = 20523.406
[info]   CI (99.9%): [≈ 0, 101502.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 2.294 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 1.332), stdev = 0.596
[info]   CI (99.9%): [≈ 0, 2.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   30.144 ±(99.9%) 259.553 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 30.144, 150.722), stdev = 67.405
[info]   CI (99.9%): [≈ 0, 289.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   3.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.600, 1.000), stdev = 0.548
[info]   CI (99.9%): [3.000, 3.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 3.000, 5.000), stdev = 2.739
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 96.52% complete, ETA 00:03:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18691.224 ops/s
[info] # Warmup Iteration   2: 22492.751 ops/s
[info] # Warmup Iteration   3: 36150.449 ops/s
[info] Iteration   1: 36173.102 ops/s
[info]                  ·gc.alloc.rate:            334.949 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.003 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14665.399 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 36179.165 ops/s
[info]                  ·gc.alloc.rate:            334.993 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.991 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14662.967 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   3: 36727.707 ops/s
[info]                  ·gc.alloc.rate:            340.126 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14443.825 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   4: 37883.187 ops/s
[info]                  ·gc.alloc.rate:            350.875 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.012 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.103 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14003.892 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   5: 37816.182 ops/s
[info]                  ·gc.alloc.rate:            350.312 MB/sec
[info]                  ·gc.alloc.rate.norm:       14576.011 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.150 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 14028.329 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   36955.869 ±(99.9%) 3260.628 ops/s [Average]
[info]   (min, avg, max) = (36173.102, 36955.869, 37883.187), stdev = 846.775
[info]   CI (99.9%): [33695.241, 40216.496] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   342.251 ±(99.9%) 30.435 MB/sec [Average]
[info]   (min, avg, max) = (334.949, 342.251, 350.875), stdev = 7.904
[info]   CI (99.9%): [311.816, 372.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14576.012 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (14576.011, 14576.012, 14576.015), stdev = 0.002
[info]   CI (99.9%): [14576.005, 14576.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   337.058 ±(99.9%) 0.260 MB/sec [Average]
[info]   (min, avg, max) = (336.991, 337.058, 337.150), stdev = 0.067
[info]   CI (99.9%): [336.798, 337.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   14360.882 ±(99.9%) 1260.900 B/op [Average]
[info]   (min, avg, max) = (14003.892, 14360.882, 14665.399), stdev = 327.452
[info]   CI (99.9%): [13099.982, 15621.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 96.77% complete, ETA 00:02:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 652.389 ops/s
[info] # Warmup Iteration   2: 2567.248 ops/s
[info] # Warmup Iteration   3: 2458.086 ops/s
[info] Iteration   1: 2490.384 ops/s
[info]                  ·gc.alloc.rate:            790.456 MB/sec
[info]                  ·gc.alloc.rate.norm:       499389.045 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.623 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 424313.371 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  27.000 ms
[info] Iteration   2: 2953.407 ops/s
[info]                  ·gc.alloc.rate:            936.994 MB/sec
[info]                  ·gc.alloc.rate.norm:       499155.358 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.494 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 536711.886 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  17.000 ms
[info] Iteration   3: 3000.001 ops/s
[info]                  ·gc.alloc.rate:            951.782 MB/sec
[info]                  ·gc.alloc.rate.norm:       499144.136 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1007.389 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 528306.202 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  18.000 ms
[info] Iteration   4: 2966.013 ops/s
[info]                  ·gc.alloc.rate:                   940.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              499144.138 B/op
[info]                  ·gc.churn.G1_Old_Gen:             1011.367 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        536480.744 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      4.664 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2473.890 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         16.000 ms
[info] Iteration   5: 3034.899 ops/s
[info]                  ·gc.alloc.rate:                                  962.845 MB/sec
[info]                  ·gc.alloc.rate.norm:                             499144.134 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.041 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 21.470 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1021.341 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       529468.711 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   2888.941 ±(99.9%) 866.570 ops/s [Average]
[info]   (min, avg, max) = (2490.384, 2888.941, 3034.899), stdev = 225.046
[info]   CI (99.9%): [2022.370, 3755.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   916.612 ±(99.9%) 274.309 MB/sec [Average]
[info]   (min, avg, max) = (790.456, 916.612, 962.845), stdev = 71.237
[info]   CI (99.9%): [642.302, 1190.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   499195.362 ±(99.9%) 417.337 B/op [Average]
[info]   (min, avg, max) = (499144.134, 499195.362, 499389.045), stdev = 108.381
[info]   CI (99.9%): [498778.025, 499612.699] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.008 ±(99.9%) 0.071 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.008, 0.041), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   4.294 ±(99.9%) 36.973 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.294, 21.470), stdev = 9.602
[info]   CI (99.9%): [≈ 0, 41.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   943.843 ±(99.9%) 586.382 MB/sec [Average]
[info]   (min, avg, max) = (671.623, 943.843, 1021.341), stdev = 152.282
[info]   CI (99.9%): [357.461, 1530.225] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   511056.183 ±(99.9%) 187316.346 B/op [Average]
[info]   (min, avg, max) = (424313.371, 511056.183, 536711.886), stdev = 48645.460
[info]   CI (99.9%): [323739.837, 698372.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space":
[info]   0.933 ±(99.9%) 8.031 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.933, 4.664), stdev = 2.086
[info]   CI (99.9%): [≈ 0, 8.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm":
[info]   494.778 ±(99.9%) 4260.188 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 494.778, 2473.890), stdev = 1106.357
[info]   CI (99.9%): [≈ 0, 4754.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   90.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (12.000, 18.000, 27.000), stdev = 5.523
[info]   CI (99.9%): [90.000, 90.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 97.01% complete, ETA 00:02:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_cbecb3a0/target/1bdf7fe1/jackson-module-afterburner-2.9.5.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 21137.772 ops/s
[info] # Warmup Iteration   2: 54009.548 ops/s
[info] # Warmup Iteration   3: 53946.261 ops/s
[info] Iteration   1: 55034.670 ops/s
[info]                  ·gc.alloc.rate:            702.710 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.094 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.975 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 19163.729 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 56383.435 ops/s
[info]                  ·gc.alloc.rate:            719.955 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.994 B/op
[info]                  ·gc.churn.G1_Old_Gen:      669.988 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18704.982 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 55933.168 ops/s
[info]                  ·gc.alloc.rate:            714.234 MB/sec
[info]                  ·gc.alloc.rate.norm:       20099.976 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.058 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18856.786 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 56990.510 ops/s
[info]                  ·gc.alloc.rate:            727.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       20100.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.041 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 18506.122 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   5: 57333.495 ops/s
[info]                  ·gc.alloc.rate:                   732.159 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:             670.069 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        18395.429 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 109.714 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   56335.056 ±(99.9%) 3487.627 ops/s [Average]
[info]   (min, avg, max) = (55034.670, 56335.056, 57333.495), stdev = 905.726
[info]   CI (99.9%): [52847.428, 59822.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   719.362 ±(99.9%) 44.661 MB/sec [Average]
[info]   (min, avg, max) = (702.710, 719.362, 732.159), stdev = 11.598
[info]   CI (99.9%): [674.701, 764.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.027 ±(99.9%) 0.191 B/op [Average]
[info]   (min, avg, max) = (20099.976, 20100.027, 20100.094), stdev = 0.050
[info]   CI (99.9%): [20099.836, 20100.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   670.026 ±(99.9%) 0.163 MB/sec [Average]
[info]   (min, avg, max) = (669.975, 670.026, 670.069), stdev = 0.042
[info]   CI (99.9%): [669.863, 670.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   18725.409 ±(99.9%) 1166.013 B/op [Average]
[info]   (min, avg, max) = (18395.429, 18725.409, 19163.729), stdev = 302.810
[info]   CI (99.9%): [17559.396, 19891.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   21.943 ±(99.9%) 188.935 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 21.943, 109.714), stdev = 49.066
[info]   CI (99.9%): [≈ 0, 210.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   50.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 97.26% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 68528.959 ops/s
[info] # Warmup Iteration   2: 87110.492 ops/s
[info] # Warmup Iteration   3: 87822.362 ops/s
[info] Iteration   1: 88000.945 ops/s
[info]                  ·gc.alloc.rate:            576.923 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12032.742 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   2: 87667.713 ops/s
[info]                  ·gc.alloc.rate:            574.746 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.677 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12078.440 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  7.000 ms
[info] Iteration   3: 84491.936 ops/s
[info]                  ·gc.alloc.rate:            553.984 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.738 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12532.237 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 83636.204 ops/s
[info]                  ·gc.alloc.rate:            548.369 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.371 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 6330.315 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 83308.909 ops/s
[info]                  ·gc.alloc.rate:            546.157 MB/sec
[info]                  ·gc.alloc.rate.norm:       10320.005 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.682 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 12710.775 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   85421.142 ±(99.9%) 8656.120 ops/s [Average]
[info]   (min, avg, max) = (83308.909, 85421.142, 88000.945), stdev = 2247.967
[info]   CI (99.9%): [76765.021, 94077.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   560.036 ±(99.9%) 56.688 MB/sec [Average]
[info]   (min, avg, max) = (546.157, 560.036, 576.923), stdev = 14.722
[info]   CI (99.9%): [503.348, 616.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10320.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10320.005, 10320.005, 10320.005), stdev = 0.001
[info]   CI (99.9%): [10320.004, 10320.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   605.428 ±(99.9%) 579.166 MB/sec [Average]
[info]   (min, avg, max) = (336.371, 605.428, 672.738), stdev = 150.407
[info]   CI (99.9%): [26.262, 1184.593] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   11136.902 ±(99.9%) 10406.776 B/op [Average]
[info]   (min, avg, max) = (6330.315, 11136.902, 12710.775), stdev = 2702.607
[info]   CI (99.9%): [730.125, 21543.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.800, 7.000), stdev = 1.095
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.51% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85617.195 ops/s
[info] # Warmup Iteration   2: 106421.504 ops/s
[info] # Warmup Iteration   3: 101640.777 ops/s
[info] Iteration   1: 106613.289 ops/s
[info]                  ·gc.alloc.rate:      16.257 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 106645.303 ops/s
[info]                  ·gc.alloc.rate:      16.263 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 106367.912 ops/s
[info]                  ·gc.alloc.rate:      16.217 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 106646.161 ops/s
[info]                  ·gc.alloc.rate:      16.260 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 106635.353 ops/s
[info]                  ·gc.alloc.rate:      16.261 MB/sec
[info]                  ·gc.alloc.rate.norm: 240.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   106581.604 ±(99.9%) 462.807 ops/s [Average]
[info]   (min, avg, max) = (106367.912, 106581.604, 106646.161), stdev = 120.190
[info]   CI (99.9%): [106118.796, 107044.411] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   16.252 ±(99.9%) 0.075 MB/sec [Average]
[info]   (min, avg, max) = (16.217, 16.252, 16.263), stdev = 0.019
[info]   CI (99.9%): [16.177, 16.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   240.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.004, 240.004, 240.004), stdev = 0.001
[info]   CI (99.9%): [240.004, 240.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 97.76% complete, ETA 00:01:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 259803.672 ops/s
[info] # Warmup Iteration   2: 314913.503 ops/s
[info] # Warmup Iteration   3: 313721.551 ops/s
[info] Iteration   1: 317423.802 ops/s
[info]                  ·gc.alloc.rate:                                  1700.161 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.104 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.515 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1694.928 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8406.048 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.330 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                16.515 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 319373.327 ops/s
[info]                  ·gc.alloc.rate:                                  1710.690 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.003 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.625 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8387.321 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   3: 307868.152 ops/s
[info]                  ·gc.alloc.rate:                                  1649.164 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.018 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.729 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8700.759 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   4: 312960.134 ops/s
[info]                  ·gc.alloc.rate:                                  1676.485 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.007 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.784 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8559.243 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        4.000 ms
[info] Iteration   5: 319395.118 ops/s
[info]                  ·gc.alloc.rate:                                  1710.917 MB/sec
[info]                  ·gc.alloc.rate.norm:                             8432.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.007 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.032 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1701.782 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       8386.980 B/op
[info]                  ·gc.count:                                       5.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce":
[info]   315404.107 ±(99.9%) 19110.765 ops/s [Average]
[info]   (min, avg, max) = (307868.152, 315404.107, 319395.118), stdev = 4963.005
[info]   CI (99.9%): [296293.342, 334514.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1689.483 ±(99.9%) 102.200 MB/sec [Average]
[info]   (min, avg, max) = (1649.164, 1689.483, 1710.917), stdev = 26.541
[info]   CI (99.9%): [1587.283, 1791.684] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   8432.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8432.001, 8432.001, 8432.001), stdev = 0.001
[info]   CI (99.9%): [8432.001, 8432.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.024 ±(99.9%) 0.173 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.024, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.117 ±(99.9%) 0.856 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.117, 0.515), stdev = 0.222
[info]   CI (99.9%): [≈ 0, 0.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen":
[info]   1700.370 ±(99.9%) 11.716 MB/sec [Average]
[info]   (min, avg, max) = (1694.928, 1700.370, 1701.784), stdev = 3.043
[info]   CI (99.9%): [1688.654, 1712.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm":
[info]   8488.070 ±(99.9%) 535.640 B/op [Average]
[info]   (min, avg, max) = (8386.980, 8488.070, 8700.759), stdev = 139.104
[info]   CI (99.9%): [7952.431, 9023.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space":
[info]   0.666 ±(99.9%) 5.734 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.666, 3.330), stdev = 1.489
[info]   CI (99.9%): [≈ 0, 6.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.303 ±(99.9%) 28.440 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.303, 16.515), stdev = 7.386
[info]   CI (99.9%): [≈ 0, 31.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 9.000), stdev = 2.168
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.01% complete, ETA 00:01:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 203738.025 ops/s
[info] # Warmup Iteration   2: 400654.143 ops/s
[info] # Warmup Iteration   3: 418598.819 ops/s
[info] Iteration   1: 417121.853 ops/s
[info]                  ·gc.alloc.rate:            508.795 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.373 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2533.509 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 410271.938 ops/s
[info]                  ·gc.alloc.rate:                   500.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.800 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        1287.866 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.555 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 396812.762 ops/s
[info]                  ·gc.alloc.rate:                   484.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             672.044 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        2665.860 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 2.642 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 399107.269 ops/s
[info]                  ·gc.alloc.rate:            486.813 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1326.557 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   5: 400280.561 ops/s
[info]                  ·gc.alloc.rate:            488.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1920.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      671.413 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2640.154 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala":
[info]   404718.877 ±(99.9%) 33256.600 ops/s [Average]
[info]   (min, avg, max) = (396812.762, 404718.877, 417121.853), stdev = 8636.634
[info]   CI (99.9%): [371462.276, 437975.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   493.704 ±(99.9%) 40.680 MB/sec [Average]
[info]   (min, avg, max) = (484.018, 493.704, 508.795), stdev = 10.565
[info]   CI (99.9%): [453.024, 534.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1920.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1920.001, 1920.001, 1920.001), stdev = 0.001
[info]   CI (99.9%): [1920.001, 1920.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.395 ±(99.9%) 707.677 MB/sec [Average]
[info]   (min, avg, max) = (335.800, 537.395, 672.044), stdev = 183.781
[info]   CI (99.9%): [≈ 0, 1245.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   2090.789 ±(99.9%) 2761.509 B/op [Average]
[info]   (min, avg, max) = (1287.866, 2090.789, 2665.860), stdev = 717.155
[info]   CI (99.9%): [≈ 0, 4852.298] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.266 ±(99.9%) 1.405 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.266, 0.666), stdev = 0.365
[info]   CI (99.9%): [≈ 0, 1.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   1.039 ±(99.9%) 5.482 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.039, 2.642), stdev = 1.424
[info]   CI (99.9%): [≈ 0, 6.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.000, 9.000), stdev = 2.739
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 98.26% complete, ETA 00:01:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 999466.517 ops/s
[info] # Warmup Iteration   2: 1096628.284 ops/s
[info] # Warmup Iteration   3: 1149469.625 ops/s
[info] Iteration   1: 1143637.608 ops/s
[info]                  ·gc.alloc.rate:            598.614 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.992 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 463.874 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Iteration   2: 1139804.249 ops/s
[info]                  ·gc.alloc.rate:            596.620 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.006 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 930.880 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   3: 1130310.182 ops/s
[info]                  ·gc.alloc.rate:            591.927 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.331 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 938.712 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   4: 1143986.716 ops/s
[info]                  ·gc.alloc.rate:            598.897 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.090 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 927.457 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   5: 1145535.844 ops/s
[info]                  ·gc.alloc.rate:            599.675 MB/sec
[info]                  ·gc.alloc.rate.norm:       824.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      337.018 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 463.090 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala":
[info]   1140654.920 ±(99.9%) 23702.422 ops/s [Average]
[info]   (min, avg, max) = (1130310.182, 1140654.920, 1145535.844), stdev = 6155.444
[info]   CI (99.9%): [1116952.497, 1164357.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   597.147 ±(99.9%) 12.043 MB/sec [Average]
[info]   (min, avg, max) = (591.927, 597.147, 599.675), stdev = 3.128
[info]   CI (99.9%): [585.103, 609.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   824.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (824.000, 824.000, 824.000), stdev = 0.001
[info]   CI (99.9%): [824.000, 824.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   539.288 ±(99.9%) 711.051 MB/sec [Average]
[info]   (min, avg, max) = (336.992, 539.288, 674.331), stdev = 184.658
[info]   CI (99.9%): [≈ 0, 1250.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   744.802 ±(99.9%) 989.006 B/op [Average]
[info]   (min, avg, max) = (463.090, 744.802, 938.712), stdev = 256.842
[info]   CI (99.9%): [≈ 0, 1733.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.517
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 98.51% complete, ETA 00:01:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 58127.845 ops/s
[info] # Warmup Iteration   2: 93342.074 ops/s
[info] # Warmup Iteration   3: 98981.158 ops/s
[info] Iteration   1: 99498.808 ops/s
[info]                  ·gc.alloc.rate:                                  3458.040 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.001 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.009 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.499 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       53841.210 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   2: 99182.538 ops/s
[info]                  ·gc.alloc.rate:                                  3447.501 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.062 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3744.518 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       59416.981 B/op
[info]                  ·gc.count:                                       11.000 counts
[info]                  ·gc.time:                                        10.000 ms
[info] Iteration   3: 98792.328 ops/s
[info]                  ·gc.alloc.rate:                                  3433.598 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3403.657 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54226.993 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Iteration   4: 98778.095 ops/s
[info]                  ·gc.alloc.rate:                                  3433.992 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.002 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.029 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.737 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54237.971 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        9.000 ms
[info] Iteration   5: 97657.279 ops/s
[info]                  ·gc.alloc.rate:                                  3395.189 MB/sec
[info]                  ·gc.alloc.rate.norm:                             54704.004 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.004 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.063 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            3404.796 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       54858.798 B/op
[info]                  ·gc.count:                                       10.000 counts
[info]                  ·gc.time:                                        8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson":
[info]   98781.810 ±(99.9%) 2681.223 ops/s [Average]
[info]   (min, avg, max) = (97657.279, 98781.810, 99498.808), stdev = 696.305
[info]   CI (99.9%): [96100.587, 101463.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3433.664 ±(99.9%) 91.652 MB/sec [Average]
[info]   (min, avg, max) = (3395.189, 3433.664, 3458.040), stdev = 23.802
[info]   CI (99.9%): [3342.012, 3525.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   54704.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (54704.004, 54704.004, 54704.004), stdev = 0.001
[info]   CI (99.9%): [54704.004, 54704.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.003 ±(99.9%) 0.006 MB/sec [Average]
[info]   (min, avg, max) = (0.001, 0.003, 0.004), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.045 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.045, 0.063), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen":
[info]   3472.242 ±(99.9%) 586.099 MB/sec [Average]
[info]   (min, avg, max) = (3403.499, 3472.242, 3744.518), stdev = 152.208
[info]   CI (99.9%): [2886.142, 4058.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   55316.390 ±(99.9%) 8937.761 B/op [Average]
[info]   (min, avg, max) = (53841.210, 55316.390, 59416.981), stdev = 2321.108
[info]   CI (99.9%): [46378.630, 64254.151] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   51.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce
[info] # Parameters: (size = 128)
[info] # Run progress: 98.76% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 257765.453 ops/s
[info] # Warmup Iteration   2: 337256.590 ops/s
[info] # Warmup Iteration   3: 339601.560 ops/s
[info] Iteration   1: 339332.782 ops/s
[info]                  ·gc.alloc.rate:            848.494 MB/sec
[info]                  ·gc.alloc.rate.norm:       3936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      674.043 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 3126.757 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 340803.805 ops/s
[info]                  ·gc.alloc.rate:            852.388 MB/sec
[info]                  ·gc.alloc.rate.norm:       3936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1011.315 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 4669.868 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   3: 335105.857 ops/s
[info]                  ·gc.alloc.rate:                   837.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              3936.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             673.403 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        3163.054 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 3.129 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 336987.202 ops/s
[info]                  ·gc.alloc.rate:                                  842.778 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.027 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.127 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1014.557 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       4738.254 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.331 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                15.556 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        7.000 ms
[info] Iteration   5: 339812.112 ops/s
[info]                  ·gc.alloc.rate:                                  849.659 MB/sec
[info]                  ·gc.alloc.rate.norm:                             3936.001 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.115 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.534 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.659 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       3153.120 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce":
[info]   338408.352 ±(99.9%) 8925.160 ops/s [Average]
[info]   (min, avg, max) = (335105.857, 338408.352, 340803.805), stdev = 2317.836
[info]   CI (99.9%): [329483.192, 347333.511] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   846.256 ±(99.9%) 22.377 MB/sec [Average]
[info]   (min, avg, max) = (837.961, 846.256, 852.388), stdev = 5.811
[info]   CI (99.9%): [823.879, 868.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3936.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3936.001, 3936.001, 3936.001), stdev = 0.001
[info]   CI (99.9%): [3936.001, 3936.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.029 ±(99.9%) 0.192 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.115), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.132 ±(99.9%) 0.891 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.132, 0.534), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen":
[info]   810.796 ±(99.9%) 710.650 MB/sec [Average]
[info]   (min, avg, max) = (673.403, 810.796, 1014.557), stdev = 184.554
[info]   CI (99.9%): [100.145, 1521.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm":
[info]   3770.211 ±(99.9%) 3284.332 B/op [Average]
[info]   (min, avg, max) = (3126.757, 3770.211, 4738.254), stdev = 852.931
[info]   CI (99.9%): [485.879, 7054.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 5.561 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.331), stdev = 1.444
[info]   CI (99.9%): [≈ 0, 6.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm":
[info]   3.737 ±(99.9%) 25.970 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.737, 15.556), stdev = 6.744
[info]   CI (99.9%): [≈ 0, 29.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeCirce:·gc.time":
[info]   39.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 7.800, 10.000), stdev = 2.168
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.00% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 427007.968 ops/s
[info] # Warmup Iteration   2: 725735.305 ops/s
[info] # Warmup Iteration   3: 732632.021 ops/s
[info] Iteration   1: 735106.599 ops/s
[info]                  ·gc.alloc.rate:            561.272 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      670.615 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1433.776 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   2: 732515.390 ops/s
[info]                  ·gc.alloc.rate:                   558.392 MB/sec
[info]                  ·gc.alloc.rate.norm:              1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:             335.671 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:        721.366 B/op
[info]                  ·gc.churn.G1_Survivor_Space:      0.666 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm: 1.431 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 699372.703 ops/s
[info]                  ·gc.alloc.rate:            533.160 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.698 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1514.064 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Iteration   4: 701132.641 ops/s
[info]                  ·gc.alloc.rate:            534.630 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.424 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 755.118 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  5.000 ms
[info] Iteration   5: 703904.552 ops/s
[info]                  ·gc.alloc.rate:            536.752 MB/sec
[info]                  ·gc.alloc.rate.norm:       1200.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.854 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1504.281 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala":
[info]   714406.377 ±(99.9%) 68583.831 ops/s [Average]
[info]   (min, avg, max) = (699372.703, 714406.377, 735106.599), stdev = 17811.003
[info]   CI (99.9%): [645822.546, 782990.208] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   544.841 ±(99.9%) 53.069 MB/sec [Average]
[info]   (min, avg, max) = (533.160, 544.841, 561.272), stdev = 13.782
[info]   CI (99.9%): [491.772, 597.910] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1200.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1200.001, 1200.001, 1200.001), stdev = 0.001
[info]   CI (99.9%): [1200.000, 1200.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen":
[info]   537.652 ±(99.9%) 708.679 MB/sec [Average]
[info]   (min, avg, max) = (335.671, 537.652, 672.854), stdev = 184.042
[info]   CI (99.9%): [≈ 0, 1246.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm":
[info]   1185.721 ±(99.9%) 1578.136 B/op [Average]
[info]   (min, avg, max) = (721.366, 1185.721, 1514.064), stdev = 409.837
[info]   CI (99.9%): [≈ 0, 2763.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space":
[info]   0.133 ±(99.9%) 1.147 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.133, 0.666), stdev = 0.298
[info]   CI (99.9%): [≈ 0, 1.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.286 ±(99.9%) 2.465 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.286, 1.431), stdev = 0.640
[info]   CI (99.9%): [≈ 0, 2.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 9.000), stdev = 2.490
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala
[info] # Parameters: (size = 128)
[info] # Run progress: 99.25% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1674987.904 ops/s
[info] # Warmup Iteration   2: 1910871.865 ops/s
[info] # Warmup Iteration   3: 1929677.004 ops/s
[info] Iteration   1: 1892311.106 ops/s
[info]                  ·gc.alloc.rate:            875.255 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.143 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 839.363 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   2: 1838855.425 ops/s
[info]                  ·gc.alloc.rate:            850.358 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.614 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 575.831 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  6.000 ms
[info] Iteration   3: 1885995.683 ops/s
[info]                  ·gc.alloc.rate:            872.208 MB/sec
[info]                  ·gc.alloc.rate.norm:       728.000 B/op
[info]                  ·gc.churn.G1_Old_Gen:      1009.020 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 842.192 B/op
[info]                  ·gc.count:                 3.000 counts
[info]                  ·gc.time:                  10.000 ms
[info] Iteration   4: 1902294.846 ops/s
[info]                  ·gc.alloc.rate:                                  879.981 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.049 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.040 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            1017.013 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       841.365 B/op
[info]                  ·gc.churn.G1_Survivor_Space:                     3.996 MB/sec
[info]                  ·gc.churn.G1_Survivor_Space.norm:                3.306 B/op
[info]                  ·gc.count:                                       3.000 counts
[info]                  ·gc.time:                                        5.000 ms
[info] Iteration   5: 1827336.872 ops/s
[info]                  ·gc.alloc.rate:                                  845.082 MB/sec
[info]                  ·gc.alloc.rate.norm:                             728.000 B/op
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods':      0.017 MB/sec
[info]                  ·gc.churn.CodeHeap_'non-profiled_nmethods'.norm: 0.015 B/op
[info]                  ·gc.churn.G1_Old_Gen:                            680.662 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm:                       586.360 B/op
[info]                  ·gc.count:                                       2.000 counts
[info]                  ·gc.time:                                        1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala":
[info]   1869358.786 ±(99.9%) 130363.999 ops/s [Average]
[info]   (min, avg, max) = (1827336.872, 1869358.786, 1902294.846), stdev = 33855.117
[info]   CI (99.9%): [1738994.787, 1999722.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   864.577 ±(99.9%) 60.632 MB/sec [Average]
[info]   (min, avg, max) = (845.082, 864.577, 879.981), stdev = 15.746
[info]   CI (99.9%): [803.945, 925.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'":
[info]   0.013 ±(99.9%) 0.081 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.013, 0.049), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm":
[info]   0.011 ±(99.9%) 0.067 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.011, 0.040), stdev = 0.018
[info]   CI (99.9%): [≈ 0, 0.078] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen":
[info]   877.690 ±(99.9%) 706.922 MB/sec [Average]
[info]   (min, avg, max) = (672.614, 877.690, 1017.013), stdev = 183.585
[info]   CI (99.9%): [170.768, 1584.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm":
[info]   737.022 ±(99.9%) 548.306 B/op [Average]
[info]   (min, avg, max) = (575.831, 737.022, 842.192), stdev = 142.393
[info]   CI (99.9%): [188.716, 1285.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space":
[info]   0.799 ±(99.9%) 6.882 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.799, 3.996), stdev = 1.787
[info]   CI (99.9%): [≈ 0, 7.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm":
[info]   0.661 ±(99.9%) 5.693 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.661, 3.306), stdev = 1.478
[info]   CI (99.9%): [≈ 0, 6.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 6.400, 10.000), stdev = 3.782
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Parameters: (size = 128)
[info] # Run progress: 99.50% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1790315.735 ops/s
[info] # Warmup Iteration   2: 1999138.522 ops/s
[info] # Warmup Iteration   3: 2010835.966 ops/s
[info] Iteration   1: 2009184.207 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2001294.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2004579.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2016828.672 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2015002.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2009377.644 ±(99.9%) 25510.219 ops/s [Average]
[info]   (min, avg, max) = (2001294.058, 2009377.644, 2016828.672), stdev = 6624.923
[info]   CI (99.9%): [1983867.424, 2034887.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson
[info] # Parameters: (size = 128)
[info] # Run progress: 99.75% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 300104.509 ops/s
[info] # Warmup Iteration   2: 413770.022 ops/s
[info] # Warmup Iteration   3: 401098.510 ops/s
[info] Iteration   1: 413468.981 ops/s
[info]                  ·gc.alloc.rate:            617.786 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      336.346 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 1280.520 B/op
[info]                  ·gc.count:                 1.000 counts
[info]                  ·gc.time:                  4.000 ms
[info] Iteration   2: 417085.352 ops/s
[info]                  ·gc.alloc.rate:            623.213 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.736 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2538.901 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   3: 412905.689 ops/s
[info]                  ·gc.alloc.rate:            616.983 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.755 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2564.612 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   4: 420008.562 ops/s
[info]                  ·gc.alloc.rate:            627.607 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.751 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2521.179 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Iteration   5: 418938.344 ops/s
[info]                  ·gc.alloc.rate:            626.127 MB/sec
[info]                  ·gc.alloc.rate.norm:       2352.001 B/op
[info]                  ·gc.churn.G1_Old_Gen:      672.892 MB/sec
[info]                  ·gc.churn.G1_Old_Gen.norm: 2527.672 B/op
[info]                  ·gc.count:                 2.000 counts
[info]                  ·gc.time:                  8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson":
[info]   416481.386 ±(99.9%) 12283.280 ops/s [Average]
[info]   (min, avg, max) = (412905.689, 416481.386, 420008.562), stdev = 3189.929
[info]   CI (99.9%): [404198.106, 428764.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   622.343 ±(99.9%) 18.496 MB/sec [Average]
[info]   (min, avg, max) = (616.983, 622.343, 627.607), stdev = 4.803
[info]   CI (99.9%): [603.847, 640.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2352.001, 2352.001, 2352.001), stdev = 0.001
[info]   CI (99.9%): [2352.001, 2352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen":
[info]   605.496 ±(99.9%) 579.365 MB/sec [Average]
[info]   (min, avg, max) = (336.346, 605.496, 672.892), stdev = 150.459
[info]   CI (99.9%): [26.131, 1184.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm":
[info]   2286.577 ±(99.9%) 2166.553 B/op [Average]
[info]   (min, avg, max) = (1280.520, 2286.577, 2564.612), stdev = 562.647
[info]   CI (99.9%): [120.024, 4453.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.VectorOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 7.200, 8.000), stdev = 1.789
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # Run complete. Total time: 01:26:21
[info] Benchmark                                                                                                     (size)   Mode  Cnt         Score          Error   Units
[info] AdtBenchmark.readCirce                                                                                           N/A  thrpt    5    709315.690 ±    62131.612   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      1874.754 ±      162.953  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5      4160.001 ±        0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.026 ±        0.199  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.056 ±        0.433    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      1904.153 ±      710.784  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5      4226.799 ±     1608.305    B/op
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                               N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                          N/A  thrpt    5         1.451 ±       12.491    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        28.000                 counts
[info] AdtBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        32.000                     ms
[info] AdtBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   1492988.042 ±    19566.872   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      1062.291 ±       13.967  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5      1120.000 ±        0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.041 ±        0.303  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.043 ±        0.319    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1013.983 ±       26.139  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      1069.066 ±       22.565    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.199 ±        7.564  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.261 ±        7.938    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        15.000                 counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        45.000                     ms
[info] AdtBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5   3170370.237 ±   221820.578   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5       209.481 ±       14.685  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       104.000 ±        0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       202.102 ±      710.417  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       100.816 ±      354.422    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         0.067 ±        0.579    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5         3.000                 counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                                          N/A  thrpt    5         8.000                     ms
[info] AdtBenchmark.readPlayJson                                                                                        N/A  thrpt    5    161080.467 ±     2635.563   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      1364.814 ±       22.518  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5     13336.003 ±        0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.024 ±        0.201  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.231 ±        1.965    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      1355.527 ±       32.451  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5     13245.610 ±      478.232    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                            N/A  thrpt    5         1.066 ±        7.823  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                       N/A  thrpt    5        10.354 ±       75.920    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        20.000                 counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        50.000                     ms
[info] AdtBenchmark.writeCirce                                                                                          N/A  thrpt    5    504097.422 ±    29250.941   ops/s
[info] AdtBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      1670.490 ±       97.694  MB/sec
[info] AdtBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5      5216.001 ±        0.001    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.036 ±        0.311  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.113 ±        0.964    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      1630.460 ±      579.829  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5      5092.277 ±     1848.748    B/op
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                              N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] AdtBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                         N/A  thrpt    5         2.136 ±       18.396    B/op
[info] AdtBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        24.000                 counts
[info] AdtBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        37.000                     ms
[info] AdtBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5   1765856.159 ±   124482.006   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5       628.284 ±       44.238  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       560.000 ±        0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5       604.313 ±      578.342  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       538.836 ±      518.083    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5         9.000                 counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        41.000                     ms
[info] AdtBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5   7816503.180 ±   681414.849   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       397.293 ±       34.837  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        80.000 ±        0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       403.680 ±      579.747  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        81.109 ±      112.844    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5         6.000                 counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        19.000                     ms
[info] AdtBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5   8072992.018 ±  1018744.583   ops/s
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] AdtBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] AdtBenchmark.writePlayJson                                                                                       N/A  thrpt    5    309195.186 ±    16200.182   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5       986.942 ±       52.454  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      5024.001 ±        0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.037 ±        0.319  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.186 ±        1.602    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5       944.939 ±      568.913  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      4816.180 ±     3029.132    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         1.066 ±        7.821  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         5.479 ±       40.356    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        14.000                 counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        47.000                     ms
[info] AnyRefsBenchmark.readCirce                                                                                       N/A  thrpt    5   1515841.041 ±    94136.221   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                                        N/A  thrpt    5      2380.752 ±      147.970  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      2472.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.003 ±        0.008  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.003 ±        0.008    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      2382.635 ±      926.867  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      2471.823 ±      848.490    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                                             N/A  thrpt    5        35.000                 counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                                              N/A  thrpt    5        39.000                     ms
[info] AnyRefsBenchmark.readDslJsonJava                                                                                 N/A  thrpt    5   9554493.242 ±   335912.206   ops/s
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate                                                                  N/A  thrpt    5      1165.539 ±       40.590  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                             N/A  thrpt    5       192.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.116 ±        0.802  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.019 ±        0.134    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1212.747 ±      711.525  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5       199.723 ±      115.424    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         1.466 ±       11.242  MB/sec
[info] AnyRefsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         0.244 ±        1.874    B/op
[info] AnyRefsBenchmark.readDslJsonJava:·gc.count                                                                       N/A  thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readDslJsonJava:·gc.time                                                                        N/A  thrpt    5        57.000                     ms
[info] AnyRefsBenchmark.readJacksonScala                                                                                N/A  thrpt    5   2250828.160 ±    76147.950   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5      1578.874 ±       53.164  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5      1104.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.018 ±        0.144  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.012 ±        0.102    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1629.470 ±      578.211  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      1139.588 ±      412.254    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±        9.178  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.754 ±        6.494    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                                                      N/A  thrpt    5        24.000                 counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                                                       N/A  thrpt    5        42.000                     ms
[info] AnyRefsBenchmark.readJsoniterScala                                                                               N/A  thrpt    5   9619709.123 ±  1143512.296   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5      1222.488 ±      145.793  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       200.000 ±        0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.026 ±        0.206  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.004 ±        0.033    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1222.145 ±      723.856  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       200.508 ±      131.871    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.108 ±        0.931    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                                                     N/A  thrpt    5        18.000                 counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                                                      N/A  thrpt    5        24.000                     ms
[info] AnyRefsBenchmark.readPlayJson                                                                                    N/A  thrpt    5    547423.619 ±    30545.909   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1441.438 ±       80.012  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4144.001 ±        0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.040 ±        0.334  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.117 ±        0.968    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1424.523 ±      578.498  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4097.681 ±     1759.216    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.199 ±        7.778  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         3.460 ±       22.540    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                                          N/A  thrpt    5        21.000                 counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                                           N/A  thrpt    5        44.000                     ms
[info] AnyRefsBenchmark.writeCirce                                                                                      N/A  thrpt    5   1865499.160 ±    86451.739   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                                                       N/A  thrpt    5      1687.735 ±       78.214  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                  N/A  thrpt    5      1424.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.016 ±        0.101  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.014 ±        0.087    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1699.216 ±       23.041  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5      1433.809 ±       48.911    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.574 ±        4.940    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                                            N/A  thrpt    5        25.000                 counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                                             N/A  thrpt    5        30.000                     ms
[info] AnyRefsBenchmark.writeDslJsonJava                                                                                N/A  thrpt    5  17282988.819 ±  1883363.219   ops/s
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                 N/A  thrpt    5       527.099 ±       57.398  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                            N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       534.002 ±      704.007  MB/sec
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5        48.915 ±       67.351    B/op
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.count                                                                      N/A  thrpt    5         8.000                 counts
[info] AnyRefsBenchmark.writeDslJsonJava:·gc.time                                                                       N/A  thrpt    5        42.000                     ms
[info] AnyRefsBenchmark.writeJacksonScala                                                                               N/A  thrpt    5   4910385.888 ±   258378.064   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                                                N/A  thrpt    5      1347.886 ±       71.109  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       432.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.014 ±        0.072  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.004 ±        0.023    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      1355.609 ±       31.681  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       434.536 ±       23.483    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.933 ±        8.030  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.306 ±        2.633    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                                                     N/A  thrpt    5        20.000                 counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                                                      N/A  thrpt    5        41.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                                              N/A  thrpt    5  21280668.285 ±  1446284.877   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                               N/A  thrpt    5       648.969 ±       43.940  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                          N/A  thrpt    5        48.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5       605.728 ±      579.657  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5        44.809 ±       42.967    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                                                    N/A  thrpt    5         9.000                 counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                                                     N/A  thrpt    5        29.000                     ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                                                      N/A  thrpt    5  20272479.430 ±  1699333.527   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                       N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                  N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                            N/A  thrpt    5           ≈ 0                 counts
[info] AnyRefsBenchmark.writePlayJson                                                                                   N/A  thrpt    5   1275328.405 ±    83600.703   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                                                    N/A  thrpt    5      1860.487 ±      121.534  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2296.000 ±        0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.026 ±        0.149  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.032 ±        0.185    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1835.511 ±      727.756  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2264.033 ±      825.930    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         1.066 ±        9.176  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.327 ±       11.424    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                                         N/A  thrpt    5        27.000                 counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                                          N/A  thrpt    5        36.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readCirce                                                                         128  thrpt    5    325340.901 ±    21382.660   ops/s
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1790.758 ±      117.064  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5      8664.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.029 ±        0.231  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.141 ±        1.129    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1836.612 ±      711.578  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      8895.054 ±     3823.119    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         3.256 ±       28.037    B/op
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.count                                                               128  thrpt    5        27.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readCirce:·gc.time                                                                128  thrpt    5        28.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala                                                                  128  thrpt    5    409163.499 ±     3667.762   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       557.291 ±        5.091  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5      2144.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       537.349 ±      707.697  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      2068.518 ±     2737.797    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5         0.511 ±        4.397    B/op
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5         8.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        35.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala                                                                 128  thrpt    5    950114.572 ±    15497.524   ops/s
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       632.635 ±       10.440  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5      1048.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       606.683 ±      580.343  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1005.171 ±      963.448    B/op
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        28.000                     ms
[info] ArrayBufferOfBooleansBenchmark.readPlayJson                                                                      128  thrpt    5     99223.897 ±     7056.430   ops/s
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      3436.414 ±      245.241  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5     54512.004 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.003 ±        0.004  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.044 ±        0.057    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      3471.734 ±      588.010  MB/sec
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     55075.007 ±     8681.646    B/op
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        51.000                 counts
[info] ArrayBufferOfBooleansBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        46.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeCirce                                                                        128  thrpt    5    313358.274 ±    28960.924   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       764.632 ±       70.824  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5      3840.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.009 ±        0.075  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.043 ±        0.368    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       741.779 ±      575.858  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3721.595 ±     2746.634    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         3.286 ±       28.298    B/op
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        11.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala                                                                 128  thrpt    5    624182.062 ±    36792.193   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       460.014 ±       27.196  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5      1160.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       470.116 ±      708.701  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5      1184.481 ±     1772.464    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         0.329 ±        2.830    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5         7.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        32.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala                                                                128  thrpt    5   2399031.969 ±    30917.485   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1109.612 ±       14.376  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.030 ±        0.259  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.020 ±        0.170    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1083.588 ±      563.668  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5       711.133 ±      378.294    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         0.527 ±        4.536    B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        16.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        34.000                     ms
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5   2496981.333 ±   149063.010   ops/s
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayBufferOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson                                                                     128  thrpt    5    439833.026 ±    11495.461   ops/s
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       632.677 ±       16.484  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5      2264.001 ±        0.001    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       605.519 ±      579.502  MB/sec
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2165.375 ±     2054.847    B/op
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5         9.000                 counts
[info] ArrayBufferOfBooleansBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                                            128  thrpt    5     19750.552 ±      833.005   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1235.778 ±       51.976  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     98480.030 ±        0.057    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.012 ±        0.054  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.947 ±        4.260    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.328 ±      721.241  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     97282.931 ±    56015.108    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        52.332 ±      450.594    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        18.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        30.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                                                     128  thrpt    5     31457.358 ±     2774.517   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       788.535 ±       69.830  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     39455.803 ±        1.815    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.025 ±        0.214  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.198 ±       10.314    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       741.593 ±      575.771  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     37161.698 ±    30180.599    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        40.072 ±      345.029    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        11.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        41.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                                                    128  thrpt    5     39500.300 ±      560.588   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       530.630 ±        7.833  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5     21144.011 ±        0.002    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       539.246 ±      710.573  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     21504.358 ±    28522.061    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         8.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        24.000                     ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                                         128  thrpt    5     25321.698 ±     1344.490   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1341.736 ±       70.719  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     83400.018 ±        0.009    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.029 ±        0.148  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.775 ±        9.196    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1289.163 ±      586.497  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     80153.816 ±    37019.890    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        57.962 ±      414.336    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        35.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                                           128  thrpt    5     27366.583 ±     1477.354   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1660.833 ±       88.515  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     95504.027 ±        0.097    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.030 ±        0.126  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.731 ±        7.193    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1632.050 ±      603.115  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     93902.860 ±    36732.103    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        37.945 ±      326.719    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        24.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                                                    128  thrpt    5     27624.690 ±     1328.043   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1513.192 ±       73.190  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     86208.027 ±        0.096    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.027 ±        0.205  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         1.505 ±       11.609    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1561.336 ±      703.083  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     89026.438 ±    42728.607    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.066 ±        9.178  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        61.740 ±      531.600    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        40.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                                                   128  thrpt    5     31102.849 ±      980.942   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1605.290 ±       50.855  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     81224.014 ±        0.005    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.028 ±        0.134  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         1.394 ±        6.749    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1563.504 ±      730.428  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     79127.691 ±    37575.013    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        40.470 ±      348.458    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        28.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5     31096.666 ±     1255.992   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5      1544.256 ±       62.506  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5     78168.023 ±        0.087    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                128  thrpt    5         0.027 ±        0.179  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm           128  thrpt    5         1.345 ±        9.060    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                      128  thrpt    5      1562.419 ±      735.268  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5     79029.316 ±    34819.330    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                          128  thrpt    5        40.608 ±      349.650    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5        23.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                  128  thrpt    5        31.000                     ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                                        128  thrpt    5      7820.944 ±      459.602   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1017.463 ±       59.979  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    204776.053 ±        0.008    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.020 ±        0.169  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.027 ±       34.269    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1013.792 ±       25.455  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    204079.149 ±    14056.406    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       162.822 ±     1401.950    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        15.000                 counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        43.000                     ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                                                128  thrpt    5     20146.943 ±      470.921   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1539.140 ±       36.045  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5    120238.559 ±       10.934    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.016 ±        0.077  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         1.219 ±        6.012    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1495.043 ±      727.965  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5    116815.272 ±    57666.381    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        52.363 ±      450.864    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        29.000                     ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                                         128  thrpt    5     38580.620 ±     3568.725   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       951.661 ±       88.227  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     38823.838 ±        1.488    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.039 ±        0.340  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.573 ±       13.541    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       946.391 ±      591.045  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     38622.920 ±    24287.603    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        43.588 ±      319.012    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        40.000                     ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                                        128  thrpt    5     58641.211 ±     1163.748   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       757.686 ±       15.086  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     20336.007 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.003 ±        0.026  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.080 ±        0.693    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       742.181 ±      578.851  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     19934.491 ±    15966.723    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        17.917 ±      154.271    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        11.000                 counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        36.000                     ms
[info] ArrayOfBigIntsBenchmark.readPlayJson                                                                             128  thrpt    5     29684.019 ±     1874.594   ops/s
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1982.679 ±      125.573  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5    105128.015 ±        0.005    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.010 ±        0.028  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.521 ±        1.525    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1973.221 ±      594.139  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    104565.409 ±    27237.484    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.933 ±        8.029  MB/sec
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        50.590 ±      435.591    B/op
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        29.000                 counts
[info] ArrayOfBigIntsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                                        128  thrpt    5     33868.309 ±     1519.067   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1852.219 ±       82.679  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     86072.013 ±        0.007    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.016 ±        0.119  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.763 ±        5.632    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1904.646 ±      712.548  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     88539.544 ±    34380.842    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        37.782 ±      325.314    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        28.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        35.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                                                       128  thrpt    5     44522.361 ±     2621.253   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1855.611 ±      109.225  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     65600.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.027 ±        0.218  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.932 ±        7.586    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1905.331 ±      715.818  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     67379.062 ±    26031.238    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        27.796 ±      239.331    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        28.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        26.000                     ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     44179.791 ±     2878.423   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5      1764.561 ±      114.198  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     62856.009 ±        0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.032 ±        0.264  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         1.149 ±        9.434    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1768.596 ±      589.066  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     62962.946 ±    18038.266    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5        28.574 ±      246.032    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5        26.000                 counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        31.000                     ms
[info] ArrayOfBooleansBenchmark.readCirce                                                                               128  thrpt    5    362555.828 ±     9249.884   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1833.444 ±       47.258  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      7960.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.021 ±        0.173  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.093 ±        0.759    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1769.211 ±      587.570  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      7680.091 ±     2475.711    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         2.924 ±       25.180    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        26.000                 counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        25.000                     ms
[info] ArrayOfBooleansBenchmark.readDslJsonJava                                                                         128  thrpt    5   1530689.271 ±   110460.669   ops/s
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate                                                          128  thrpt    5       482.354 ±       34.880  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     128  thrpt    5       496.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       466.945 ±      704.782  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       481.085 ±      737.154    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.273 ±        1.441    B/op
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.readDslJsonJava:·gc.time                                                                128  thrpt    5        34.000                     ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                                        128  thrpt    5    623365.403 ±    12048.846   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       529.112 ±       10.243  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       538.217 ±      709.590  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1360.632 ±     1811.611    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        33.000                     ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                                                       128  thrpt    5   1711265.226 ±    24284.343   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       330.514 ±        4.833  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       336.947 ±        0.548  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       309.921 ±        4.908    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         5.000                 counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        15.000                     ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                                            128  thrpt    5     94035.134 ±     3185.082   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      3416.372 ±      114.222  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     57176.004 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.003 ±        0.008  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.045 ±        0.128    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      3404.270 ±        3.086  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     56976.970 ±     1948.839    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        50.000                 counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        44.000                     ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                                              128  thrpt    5    328134.276 ±    17907.548   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5       810.602 ±       44.427  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      3888.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.028 ±        0.238  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.130 ±        1.118    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       810.304 ±      706.596  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      3890.507 ±     3471.098    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.203 ±       27.578    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        12.000                 counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        36.000                     ms
[info] ArrayOfBooleansBenchmark.writeDslJsonJava                                                                        128  thrpt    5   1136234.051 ±   148379.784   ops/s
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate                                                         128  thrpt    5       525.543 ±       68.714  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                    128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       533.930 ±      703.761  MB/sec
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       736.968 ±      940.582    B/op
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.count                                                              128  thrpt    5         8.000                 counts
[info] ArrayOfBooleansBenchmark.writeDslJsonJava:·gc.time                                                               128  thrpt    5        44.000                     ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                                                       128  thrpt    5   1008095.769 ±    68664.369   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       712.217 ±       48.654  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1112.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.018 ±        0.154  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.029 ±        0.249    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       740.681 ±      576.151  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1155.805 ±      873.972    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.494 ±       10.784    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        11.000                 counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        43.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                                                      128  thrpt    5   2120637.696 ±    72279.857   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       980.839 ±       33.791  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       728.000 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.019 ±        0.110  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.014 ±        0.083    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1015.125 ±       21.878  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       753.484 ±       24.348    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.701 ±        5.043    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        15.000                 counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        32.000                     ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5   2044193.290 ±    15933.289   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                                           128  thrpt    5    432463.217 ±    41039.459   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5       505.539 ±       48.116  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5      1840.001 ±        0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       470.911 ±      709.394  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1716.830 ±     2617.704    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        27.000                     ms
[info] ArrayOfBytesBenchmark.readCirce                                                                                  128  thrpt    5    174776.278 ±     8575.193   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2100.837 ±      103.378  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     18920.002 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.018 ±        0.123  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.163 ±        1.118    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2110.265 ±      586.436  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     19001.925 ±     4952.452    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        31.000                 counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        25.000                     ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                                           128  thrpt    5    366366.955 ±     2968.225   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       310.994 ±        2.556  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1336.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       336.395 ±        0.234  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1445.124 ±       11.676    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        22.000                     ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                                          128  thrpt    5   1055299.585 ±     8461.727   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       203.822 ±        1.594  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       304.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       201.835 ±      709.485  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       301.440 ±     1059.622    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.400 ±        3.442  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.596 ±        5.134    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         3.000                 counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5         9.000                     ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                                               128  thrpt    5     78719.957 ±     5014.243   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3353.160 ±      214.161  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     67048.005 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.011 ±        0.015  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.222 ±        0.293    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3403.586 ±        1.150  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     68071.291 ±     4353.441    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        50.000                 counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        47.000                     ms
[info] ArrayOfBytesBenchmark.writeCirce                                                                                 128  thrpt    5    306725.258 ±    16320.408   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1524.680 ±       81.534  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      7824.001 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.022 ±        0.104  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.112 ±        0.529    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1563.076 ±      709.103  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      8025.413 ±     3785.164    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         3.443 ±       29.645    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        23.000                 counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        30.000                     ms
[info] ArrayOfBytesBenchmark.writeJacksonScala                                                                          128  thrpt    5   1483692.328 ±   120797.748   ops/s
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       761.666 ±       62.036  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       808.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.015 ±        0.127  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.016 ±        0.140    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       741.381 ±      573.803  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       786.289 ±      596.623    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.989 ±        7.099    B/op
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        11.000                 counts
[info] ArrayOfBytesBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        39.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                                         128  thrpt    5   1971898.738 ±    79518.647   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       531.200 ±       21.548  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       424.000 ±        0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       538.210 ±      709.502  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       430.579 ±      578.042    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                 counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        25.000                     ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2072759.783 ±     7449.845   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                                              128  thrpt    5     41100.385 ±     1521.018   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1731.828 ±       64.625  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     66320.324 ±        2.706    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.039 ±        0.326  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.503 ±       12.703    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1767.584 ±      592.358  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     67678.410 ±    21811.343    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        31.102 ±      267.797    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        26.000                 counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        34.000                     ms
[info] ArrayOfCharsBenchmark.readCirce                                                                                  128  thrpt    5    235695.876 ±     8564.890   ops/s
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2425.675 ±       88.133  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     16200.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.007 ±        0.029  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.048 ±        0.194    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2450.526 ±      585.622  MB/sec
[info] ArrayOfCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     16360.945 ±     3407.996    B/op
[info] ArrayOfCharsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        36.000                 counts
[info] ArrayOfCharsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        29.000                     ms
[info] ArrayOfCharsBenchmark.readJacksonScala                                                                           128  thrpt    5    312289.665 ±    35909.074   ops/s
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5      1511.045 ±      174.133  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      7616.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.030 ±        0.151  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.155 ±        0.790    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1562.387 ±      706.755  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      7879.725 ±     3655.259    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.932 ±        8.029  MB/sec
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         4.907 ±       42.248    B/op
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        23.000                 counts
[info] ArrayOfCharsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        35.000                     ms
[info] ArrayOfCharsBenchmark.readJsoniterScala                                                                          128  thrpt    5   1291833.912 ±   109849.102   ops/s
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       446.438 ±       37.998  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.816 ±      710.856  MB/sec
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       576.244 ±      884.079    B/op
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfCharsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        21.000                     ms
[info] ArrayOfCharsBenchmark.readPlayJson                                                                               128  thrpt    5     74247.495 ±     1924.872   ops/s
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      3119.891 ±       80.887  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     66144.006 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.007 ±        0.018  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.145 ±        0.387    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      3131.192 ±      586.107  MB/sec
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     66386.074 ±    12547.575    B/op
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        46.000                 counts
[info] ArrayOfCharsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        44.000                     ms
[info] ArrayOfCharsBenchmark.writeCirce                                                                                 128  thrpt    5    211075.122 ±    11683.597   ops/s
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1932.369 ±      106.808  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     14408.002 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.018 ±        0.132  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.138 ±        0.989    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1906.297 ±      718.219  MB/sec
[info] ArrayOfCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     14220.648 ±     5630.056    B/op
[info] ArrayOfCharsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        28.000                 counts
[info] ArrayOfCharsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        25.000                     ms
[info] ArrayOfCharsBenchmark.writeJacksonScala                                                                          128  thrpt    5   1153961.777 ±     7739.622   ops/s
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       674.535 ±        4.768  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       672.683 ±        0.875  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       917.477 ±        6.500    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.273 ±        9.135    B/op
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        10.000                 counts
[info] ArrayOfCharsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        43.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScala                                                                         128  thrpt    5   2877813.563 ±   150903.025   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       980.080 ±       51.685  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.026 ±        0.143  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.014 ±        0.077    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       946.856 ±      572.525  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       517.533 ±      304.989    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.431 ±        3.708    B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfCharsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5   2444433.231 ±     9865.605   ops/s
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfCharsBenchmark.writePlayJson                                                                              128  thrpt    5    305390.053 ±     7625.173   ops/s
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      2496.202 ±       62.611  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     12864.001 ±        0.001    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.006 ±        0.010  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.033 ±        0.053    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2519.052 ±      719.339  MB/sec
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     12980.128 ±     3582.388    B/op
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        37.000                 counts
[info] ArrayOfCharsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        33.000                     ms
[info] ArrayOfDoublesBenchmark.readCirce                                                                                128  thrpt    5     26301.068 ±     1587.948   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1506.337 ±       90.009  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     90144.017 ±        0.007    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.039 ±        0.221  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         2.307 ±       13.152    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1494.980 ±      727.197  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     89426.132 ±    41580.581    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        41.000 ±      353.023    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        22.000                 counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        29.000                     ms
[info] ArrayOfDoublesBenchmark.readDslJsonJava                                                                          128  thrpt    5    100845.096 ±     7362.580   ops/s
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       908.200 ±       66.229  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5     14176.004 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.109 ±        0.942  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.676 ±       14.429    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       939.016 ±      587.179  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     14666.862 ±     9352.546    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.465 ±       11.239  MB/sec
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        22.694 ±      174.020    B/op
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.count                                                                128  thrpt    5        14.000                 counts
[info] ArrayOfDoublesBenchmark.readDslJsonJava:·gc.time                                                                 128  thrpt    5        62.000                     ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                                         128  thrpt    5     59777.596 ±     1520.914   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       987.758 ±       25.794  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     26008.007 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.034 ±        0.189  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.905 ±        4.967    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1014.621 ±       24.586  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     26715.404 ±      166.129    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        24.621 ±      176.430    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        15.000                 counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        44.000                     ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                                        128  thrpt    5    128495.278 ±     2798.605   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       828.154 ±       17.830  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     10144.003 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.009 ±        0.078  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.111 ±        0.952    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       810.920 ±      721.750  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      9933.245 ±     8844.562    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         8.231 ±       70.871    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        12.000                 counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        30.000                     ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                                             128  thrpt    5     33645.734 ±     2043.092   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      1757.501 ±      106.981  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     82216.013 ±        0.008    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.030 ±        0.202  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.434 ±        9.724    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1767.551 ±      565.030  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     82788.275 ±    31959.115    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        38.434 ±      330.928    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        26.000                 counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                                               128  thrpt    5     38613.582 ±     1832.433   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       520.317 ±       24.736  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     21207.801 ±        1.809    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       471.891 ±      710.979  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     19205.059 ±    28548.768    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5         7.000                 counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        24.000                     ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                                        128  thrpt    5     40846.627 ±      299.770   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       368.928 ±        2.792  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     14216.010 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       336.375 ±        0.228  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     12961.645 ±       95.465    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         5.000                 counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        21.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                                                       128  thrpt    5     45540.355 ±     2228.967   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       400.259 ±       19.581  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5     13832.009 ±        0.002    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       403.982 ±      580.345  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     13945.213 ±    19732.027    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.559 ±       39.255    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        20.000                     ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5     45043.193 ±     2899.933   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5       344.342 ±       22.215  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5     12032.009 ±        0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                          128  thrpt    5       403.818 ±      580.783  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5     14125.955 ±    20554.437    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         4.757 ±       40.959    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5         6.000                 counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                      128  thrpt    5        20.000                     ms
[info] ArrayOfDurationsBenchmark.readCirce                                                                              128  thrpt    5     19800.018 ±      907.789   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5       742.656 ±       34.037  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     59040.028 ±        0.050    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       741.542 ±      579.853  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     58964.228 ±    46352.983    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        63.352 ±      438.539    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        11.000                 counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        36.000                     ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                                                       128  thrpt    5     19382.427 ±     1088.075   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       550.190 ±       30.590  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     44676.794 ±       27.550    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       537.944 ±      708.469  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     43605.472 ±    56530.697    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.133 ±        1.146  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        10.683 ±       91.983    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         8.000                 counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                                                      128  thrpt    5     76718.844 ±      775.720   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       199.632 ±        2.008  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       202.211 ±      710.808  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      4156.740 ±    14611.711    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.400 ±        3.441  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         8.210 ±       70.694    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         3.000                 counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5         9.000                     ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                                           128  thrpt    5     16130.297 ±      388.415   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1046.076 ±       25.356  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5    102080.027 ±        0.010    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.036 ±        0.198  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         3.452 ±       19.232    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1082.722 ±      600.322  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5    105609.074 ±    56599.164    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        77.869 ±      670.479    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        48.000                     ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                                             128  thrpt    5     56610.406 ±     1215.573   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1036.669 ±       22.049  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     28824.007 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.013 ±        0.076  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.373 ±        2.104    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1015.743 ±       19.291  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     28242.283 ±      145.578    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        18.532 ±      159.566    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] ArrayOfDurationsBenchmark.writeJacksonScala                                                                      128  thrpt    5     85621.282 ±     4816.974   ops/s
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1015.218 ±       57.306  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     18664.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.020 ±        0.113  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.368 ±        2.074    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1014.658 ±       23.598  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     18655.680 ±      660.056    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        14.690 ±      126.481    B/op
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5        15.000                 counts
[info] ArrayOfDurationsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        41.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    213014.529 ±     3270.062   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       337.809 ±        5.091  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      2496.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.520 ±        1.107  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      2486.514 ±       39.408    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.981 ±        8.450    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        16.000                     ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    249706.273 ±      906.763   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.002 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                                          128  thrpt    5     78376.640 ±     5450.194   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1069.269 ±       74.716  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     21472.005 ±        0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.015 ±        0.088  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.307 ±        1.749    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1082.783 ±      600.425  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21741.316 ±    11847.547    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.884  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        15.959 ±      137.412    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        16.000                 counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        40.000                     ms
[info] ArrayOfEnumsBenchmark.readCirce                                                                                  128  thrpt    5     27397.198 ±      640.098   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       569.812 ±       13.555  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     32736.016 ±        0.008    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       606.681 ±      580.485  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     34837.572 ±    33132.962    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5         9.000                 counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        31.000                     ms
[info] ArrayOfEnumsBenchmark.readJacksonScala                                                                           128  thrpt    5     28134.794 ±      782.532   ops/s
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       369.775 ±       10.395  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     20687.780 ±        2.018    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       403.486 ±      579.406  MB/sec
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     22617.351 ±    33242.718    B/op
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfEnumsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        26.000                     ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                                          128  thrpt    5    121418.206 ±     2906.348   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       473.975 ±       11.127  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      6144.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       471.899 ±      711.047  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      6126.249 ±     9344.378    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        22.000                     ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                                               128  thrpt    5     21246.343 ±     1899.776   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1173.149 ±      105.674  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     86904.045 ±        0.211    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.012 ±        0.086  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.905 ±        6.331    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1151.173 ±      711.036  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     85312.852 ±    53271.374    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        80.914 ±      593.711    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        17.000                 counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        44.000                     ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                                                 128  thrpt    5    164476.758 ±     6320.618   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5       824.303 ±       31.904  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.006 ±        0.051  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.056 ±        0.486    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5       878.309 ±      717.782  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5      8398.576 ±     6728.712    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         6.349 ±       54.669    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        13.000                 counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        37.000                     ms
[info] ArrayOfEnumsBenchmark.writeJacksonScala                                                                          128  thrpt    5    283241.998 ±     8705.697   ops/s
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       286.507 ±        8.815  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       268.991 ±      579.024  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1498.220 ±     3225.389    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.737 ±        6.342    B/op
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         4.000                 counts
[info] ArrayOfEnumsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        17.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    548806.178 ±     8530.742   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       421.167 ±        6.725  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       470.874 ±      709.204  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1351.715 ±     2050.118    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        23.000                     ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    542734.294 ±    17942.610   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                                              128  thrpt    5    278196.437 ±     1456.520   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5       766.362 ±        4.021  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5      4336.002 ±        0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.011 ±        0.092  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.061 ±        0.523    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5       808.354 ±      717.533  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      4574.110 ±     4071.454    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         1.199 ±        7.565  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         6.790 ±       42.862    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        12.000                 counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        48.000                     ms
[info] ArrayOfFloatsBenchmark.readCirce                                                                                 128  thrpt    5     37490.584 ±      953.214   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      1672.042 ±       42.016  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     70199.835 ±        1.517    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.019 ±        0.079  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.818 ±        3.366    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1699.772 ±       16.479  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     71365.724 ±     1294.013    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        28.235 ±      243.115    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        25.000                 counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        29.000                     ms
[info] ArrayOfFloatsBenchmark.readDslJsonJava                                                                           128  thrpt    5    308933.922 ±     3674.937   ops/s
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       320.385 ±        4.258  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       266.722 ±      574.144  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1358.825 ±     2925.148    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.145  MB/sec
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.674 ±        5.804    B/op
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        20.000                     ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                                          128  thrpt    5     97149.130 ±     5853.670   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1073.617 ±       64.104  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     17392.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.037 ±        0.315  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.587 ±        5.050    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1083.739 ±      589.731  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     17547.852 ±     9126.917    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        12.807 ±      110.271    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5        16.000                 counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        38.000                     ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                                         128  thrpt    5    420009.782 ±     2447.837   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       273.234 ±        1.678  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       269.620 ±      580.378  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1011.018 ±     2176.297    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5        12.000                     ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                                              128  thrpt    5     38241.740 ±     2218.798   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      2041.398 ±      118.818  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     84016.011 ±        0.005    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.037 ±        0.259  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         1.547 ±       10.736    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      2042.319 ±      927.051  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     83991.897 ±    34986.898    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        30.000                 counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        30.000                     ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                                                128  thrpt    5     87787.668 ±     2070.341   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5       561.313 ±       13.316  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10064.005 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       539.266 ±      710.767  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      9682.015 ±    12905.059    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5         8.000                 counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        27.000                     ms
[info] ArrayOfFloatsBenchmark.writeDslJsonJava                                                                          128  thrpt    5    113370.022 ±     4868.308   ops/s
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       346.879 ±       14.847  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       333.449 ±        1.487  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4629.989 ±      193.088    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         1.873 ±       16.126    B/op
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        24.000                     ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                                         128  thrpt    5     99781.375 ±     2896.220   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       329.675 ±        9.578  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5200.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       336.397 ±        0.118  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5306.269 ±      154.630    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         5.000                 counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        21.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                                        128  thrpt    5    113390.731 ±    12464.373   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       346.918 ±       38.081  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      4816.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       403.604 ±      579.007  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      5594.692 ±     7827.229    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.825 ±       15.713    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         6.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        19.000                     ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    114807.205 ±     3481.058   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5       260.818 ±        7.838  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5      3576.004 ±        0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                           128  thrpt    5       269.086 ±      579.228  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      3694.005 ±     7952.716    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.815 ±       15.629    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5         4.000                 counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                       128  thrpt    5        12.000                     ms
[info] ArrayOfInstantsBenchmark.readCirce                                                                               128  thrpt    5      9054.765 ±      276.789   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                                                128  thrpt    5      1489.348 ±       45.309  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                                           128  thrpt    5    258856.053 ±        0.052    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.018 ±        0.130  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         3.191 ±       22.489    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1494.418 ±      724.419  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5    259675.970 ±   123171.038    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5       115.533 ±      994.773    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                                                     128  thrpt    5        22.000                 counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                                                      128  thrpt    5        33.000                     ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                                        128  thrpt    5      9177.255 ±      297.941   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1431.751 ±       46.777  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5    245560.045 ±        0.006    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.025 ±        0.201  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         4.254 ±       34.741    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1425.282 ±      595.754  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    244414.290 ±    99957.829    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       160.986 ±     1153.924    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                                              128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                                               128  thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                                                       128  thrpt    5    115291.092 ±     2012.492   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       300.012 ±        5.307  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      4096.004 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       337.700 ±        0.172  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      4610.620 ±       80.592    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                                             128  thrpt    5         5.000                 counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                                              128  thrpt    5        15.000                     ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                                            128  thrpt    5      4901.292 ±      277.345   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                                             128  thrpt    5      1301.679 ±       74.244  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5    418024.086 ±        0.016    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.022 ±        0.128  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         7.101 ±       41.317    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1287.648 ±      574.694  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    413866.405 ±   195408.359    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       257.109 ±     2213.786    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                                                  128  thrpt    5        19.000                 counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                                                   128  thrpt    5        41.000                     ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                                              128  thrpt    5     24828.588 ±     2383.039   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                                               128  thrpt    5      1396.294 ±      133.823  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     88512.595 ±       45.766    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.014 ±        0.091  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.889 ±        5.889    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1425.608 ±      558.800  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     90544.597 ±    42784.709    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        43.137 ±      371.423    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                                                    128  thrpt    5        21.000                 counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                                                     128  thrpt    5        35.000                     ms
[info] ArrayOfInstantsBenchmark.writeJacksonScala                                                                       128  thrpt    5     28631.828 ±     2335.774   ops/s
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate                                                        128  thrpt    5      1455.588 ±      119.291  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5     80016.015 ±        0.006    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.030 ±        0.248  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         1.624 ±       13.558    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1493.637 ±      725.599  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     82064.336 ±    37443.215    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        43.698 ±      376.255    B/op
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.count                                                             128  thrpt    5        22.000                 counts
[info] ArrayOfInstantsBenchmark.writeJacksonScala:·gc.time                                                              128  thrpt    5        37.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                                                      128  thrpt    5    371279.042 ±     7507.282   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       820.873 ±       16.548  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      3480.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.026 ±        0.220  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.108 ±        0.926    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       877.095 ±      717.186  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3718.076 ±     3033.609    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.933 ±        6.688  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         3.953 ±       28.335    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                                            128  thrpt    5        13.000                 counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                                             128  thrpt    5        36.000                     ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                                              128  thrpt    5    404197.190 ±     1999.222   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                               128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                          128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                    128  thrpt    5           ≈ 0                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                                           128  thrpt    5     28244.421 ±      849.481   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                                            128  thrpt    5      1486.178 ±       44.940  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     82824.016 ±        0.010    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.023 ±        0.186  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         1.262 ±       10.308    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1493.540 ±      697.084  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     83300.114 ±    41411.103    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        44.987 ±      387.353    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                                                 128  thrpt    5        22.000                 counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                                                  128  thrpt    5        36.000                     ms
[info] ArrayOfIntsBenchmark.readCirce                                                                                   128  thrpt    5    132865.349 ±     1104.191   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                    128  thrpt    5      2164.519 ±       18.187  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                               128  thrpt    5     25640.003 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        128  thrpt    5         0.020 ±        0.122  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   128  thrpt    5         0.239 ±        1.444    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                              128  thrpt    5      2178.510 ±      716.715  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                         128  thrpt    5     25803.567 ±     8360.915    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                                         128  thrpt    5        32.000                 counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                                          128  thrpt    5        28.000                     ms
[info] ArrayOfIntsBenchmark.readDslJsonJava                                                                             128  thrpt    5    477462.047 ±    10940.271   ops/s
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate                                                              128  thrpt    5       495.068 ±       11.325  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                         128  thrpt    5      1632.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       467.059 ±      703.028  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1539.808 ±     2319.152    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.441 ±        3.796    B/op
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.count                                                                   128  thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.readDslJsonJava:·gc.time                                                                    128  thrpt    5        35.000                     ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                                            128  thrpt    5    277861.290 ±     2700.622   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                             128  thrpt    5       398.266 ±        3.842  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                        128  thrpt    5      2256.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       336.377 ±        0.192  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      1905.436 ±       18.579    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                                                  128  thrpt    5         5.000                 counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                                                   128  thrpt    5        21.000                     ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                                           128  thrpt    5    702497.995 ±    36514.857   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                            128  thrpt    5       456.988 ±       23.721  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1024.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       404.408 ±      580.315  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       905.367 ±     1282.763    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                                                 128  thrpt    5         6.000                 counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                                                  128  thrpt    5        18.000                     ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                                                128  thrpt    5     69864.914 ±     2243.280   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                 128  thrpt    5      3060.488 ±       97.789  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                            128  thrpt    5     68952.006 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.010 ±        0.010  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.217 ±        0.216    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      3063.175 ±        1.012  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     69016.318 ±     2198.596    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                                                      128  thrpt    5        45.000                 counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                                                       128  thrpt    5        39.000                     ms
[info] ArrayOfIntsBenchmark.writeCirce                                                                                  128  thrpt    5    218333.249 ±    13686.772   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                   128  thrpt    5      1535.879 ±       96.299  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     11072.002 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.021 ±        0.093  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.148 ±        0.664    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      1563.070 ±      708.030  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     11268.236 ±     5069.679    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5         4.802 ±       41.349    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                                        128  thrpt    5        23.000                 counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                                         128  thrpt    5        37.000                     ms
[info] ArrayOfIntsBenchmark.writeDslJsonJava                                                                            128  thrpt    5    946836.123 ±    22444.204   ops/s
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       514.925 ±       12.270  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       467.213 ±      703.856  MB/sec
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       777.519 ±     1181.709    B/op
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.count                                                                  128  thrpt    5         7.000                 counts
[info] ArrayOfIntsBenchmark.writeDslJsonJava:·gc.time                                                                   128  thrpt    5        34.000                     ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                                           128  thrpt    5    821580.944 ±    43057.949   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       647.201 ±       33.840  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      1240.001 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       605.287 ±      578.881  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1156.730 ±     1068.761    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.254 ±        2.183    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                                                  128  thrpt    5        39.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                                          128  thrpt    5   1067297.198 ±    18709.709   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       580.462 ±       10.533  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5       856.000 ±        0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       538.340 ±      709.799  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       794.539 ±     1054.732    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         0.198 ±        1.705    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                128  thrpt    5         8.000                 counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                 128  thrpt    5        26.000                     ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                  128  thrpt    5   1114283.689 ±    35206.451   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                   128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                              128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                        128  thrpt    5           ≈ 0                 counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                                               128  thrpt    5     26433.798 ±     1290.786   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                128  thrpt    5      1631.264 ±       79.038  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     97132.819 ±       27.560    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.046 ±        0.237  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         2.719 ±       13.935    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1631.342 ±      606.895  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     97174.719 ±    37523.225    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        47.315 ±      407.395    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                                                     128  thrpt    5        24.000                 counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                                                      128  thrpt    5        31.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readCirce                                                                              128  thrpt    5    122946.333 ±     3116.832   ops/s
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1517.296 ±       39.040  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     19424.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.009 ±        0.032  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.120 ±        0.407    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1495.042 ±      728.295  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     19137.716 ±     9255.147    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         8.523 ±       73.386    B/op
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        22.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                                                       128  thrpt    5    171837.415 ±     5535.052   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       916.995 ±       29.680  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      8400.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.026 ±        0.170  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.239 ±        1.548    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       945.646 ±      570.712  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      8667.607 ±     5345.768    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         8.568 ±       61.534    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        14.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        48.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                                                      128  thrpt    5    271047.780 ±     3503.093   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       705.290 ±        9.188  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       674.017 ±        0.194  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      3914.416 ±       50.547    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         3.877 ±       33.386    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        10.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        30.000                     ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                                           128  thrpt    5     65129.351 ±     2896.355   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      2748.796 ±      122.772  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     66432.006 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.007 ±        0.008  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.176 ±        0.209    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      2790.944 ±      585.684  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     67443.491 ±    13065.610    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        41.000                 counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        39.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeCirce                                                                             128  thrpt    5    165498.890 ±     8292.328   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       829.330 ±       41.705  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      7888.003 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.025 ±        0.214  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.234 ±        2.019    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       878.235 ±      717.907  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      8360.244 ±     6966.445    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         6.327 ±       54.476    B/op
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        38.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                                                      128  thrpt    5    548038.065 ±     6598.780   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       554.275 ±        6.566  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1592.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       537.888 ±      709.621  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1545.088 ±     2040.010    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.384 ±        3.307    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        35.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    525030.191 ±    34623.336   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       402.923 ±       26.739  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      1208.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       403.626 ±      579.227  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      1212.556 ±     1780.020    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.388 ±        3.338    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         6.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        19.000                     ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    538867.552 ±     3057.709   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                                          128  thrpt    5    290165.544 ±     5926.767   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       796.334 ±       16.123  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      4320.001 ±        0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.004 ±        0.031  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.020 ±        0.170    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       741.296 ±      575.123  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      4021.781 ±     3128.552    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         5.755 ±       42.200    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        11.000                 counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        43.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                                         128  thrpt    5      8794.296 ±      416.253   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5      1124.646 ±       53.732  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    201266.285 ±       19.256    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.019 ±        0.147  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         3.539 ±       26.856    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1084.821 ±      589.660  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    194439.386 ±   116724.401    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.666 ±        4.442  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       121.229 ±      812.932    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        32.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      9013.583 ±      611.660   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5      1068.512 ±       72.799  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    186576.047 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.022 ±        0.156  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         3.813 ±       27.166    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1015.222 ±       23.633  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    177328.758 ±    15891.945    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.933 ±        8.029  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       162.768 ±     1401.483    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        40.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5    153985.087 ±     5353.010   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5      1001.819 ±       35.155  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     10240.003 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.011 ±        0.060  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.116 ±        0.615    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1016.876 ±       15.969  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     10394.363 ±      259.894    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5         5.425 ±       46.712    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        29.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      7229.690 ±      385.625   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5      1346.362 ±       71.869  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    293128.058 ±        0.010    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.025 ±        0.211  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         5.513 ±       46.651    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1356.495 ±       27.686  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    295366.189 ±    11713.753    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       177.050 ±     1524.450    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     22173.344 ±      744.457   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5      1010.744 ±       33.335  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     71745.165 ±       41.027    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.012 ±        0.064  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.866 ±        4.564    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1015.505 ±       20.053  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     72085.047 ±     1235.260    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.665 ±        5.729  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        47.598 ±      409.830    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        40.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     25984.241 ±     1874.311   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       999.551 ±       72.330  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     60552.018 ±        0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.033 ±        0.186  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.993 ±       11.485    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1014.628 ±       23.740  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     61478.636 ±     3530.419    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        49.670 ±      427.674    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        42.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    708046.140 ±    50232.370   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5      1277.604 ±       90.519  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      2840.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.030 ±        0.216  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.068 ±        0.484    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1288.651 ±      576.162  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      2867.274 ±     1361.076    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         1.793 ±       15.440    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        30.000                     ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    787092.759 ±     2184.376   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     24168.315 ±      805.621   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5      1051.438 ±       35.182  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     68469.994 ±       31.647    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.028 ±        0.159  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.835 ±       10.402    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1082.850 ±      600.060  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     70494.954 ±    38159.235    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        52.622 ±      453.089    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        16.000                 counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        39.000                     ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                                             128  thrpt    5     24079.270 ±     1334.072   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1307.227 ±       72.653  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5     85440.018 ±        0.007    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.016 ±        0.090  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.062 ±        5.909    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1289.508 ±      578.239  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     84208.687 ±    34899.386    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        43.453 ±      374.148    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        19.000                 counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        36.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                                                      128  thrpt    5     27426.451 ±     1502.286   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1252.607 ±       68.892  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5     71888.029 ±        0.120    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.025 ±        0.174  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         1.488 ±       10.245    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1220.353 ±      715.316  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5     69953.430 ±    38286.784    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5        54.610 ±      393.503    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                                                     128  thrpt    5    265428.107 ±    10627.514   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       690.835 ±       27.701  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.002 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       743.088 ±      582.068  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4403.915 ±     3386.170    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         3.167 ±       27.267    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        11.000                 counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                                          128  thrpt    5     16088.405 ±      477.968   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1656.191 ±       48.948  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    162024.027 ±        0.010    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.016 ±        0.064  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         1.599 ±        6.337    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1698.722 ±       27.384  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    166189.498 ±     3511.347    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        78.984 ±      680.074    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        25.000                 counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        37.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                                            128  thrpt    5     52748.828 ±     2797.714   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1391.933 ±       73.880  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     41528.008 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.021 ±        0.164  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.636 ±        4.850    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1358.328 ±       22.973  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     40530.947 ±     2046.587    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.737  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.719 ±      169.783    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala                                                                     128  thrpt    5    162291.063 ±    14194.225   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1058.296 ±       92.918  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     10264.003 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.011 ±        0.087  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.103 ±        0.839    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1015.240 ±       24.268  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      9849.678 ±      701.692    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.066 ±        7.822  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        10.361 ±       75.588    B/op
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        15.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        38.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1141291.266 ±   103824.514   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1223.920 ±      111.433  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1688.000 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.028 ±        0.144  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.039 ±        0.199    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1220.771 ±      716.720  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1684.877 ±     1015.758    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±        6.687  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         1.259 ±        9.041    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        18.000                 counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        30.000                     ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1177935.110 ±     6681.840   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                                         128  thrpt    5     60208.679 ±     1433.130   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1399.364 ±       33.172  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     36584.007 ±        0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.018 ±        0.145  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.482 ±        3.806    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1357.403 ±       26.773  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     35487.445 ±      615.111    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        20.915 ±      180.085    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        20.000                 counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        34.000                     ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                                             128  thrpt    5     14041.920 ±     1126.553   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                                              128  thrpt    5      1253.309 ±      101.174  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                         128  thrpt    5    140474.451 ±       29.952    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.019 ±        0.095  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         2.117 ±       10.622    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1221.422 ±      722.067  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5    136747.902 ±    75459.479    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.736  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        74.557 ±      641.962    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                                                   128  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                                                    128  thrpt    5        31.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                                                      128  thrpt    5     13882.908 ±      923.148   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                       128  thrpt    5      1103.665 ±       73.571  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5    125124.346 ±       62.085    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.020 ±        0.168  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         2.245 ±       18.629    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5      1083.437 ±      562.198  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    122884.844 ±    65204.861    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.932 ±        8.027  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       106.032 ±      912.963    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                                            128  thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                                             128  thrpt    5        40.000                     ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                                                     128  thrpt    5    279278.778 ±    27890.649   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       726.816 ±       72.831  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5      4096.001 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.005 ±        0.047  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.030 ±        0.262    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       743.529 ±      580.313  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      4207.963 ±     3744.879    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.533 ±        4.589  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         2.947 ±       25.378    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                                           128  thrpt    5        11.000                 counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                                            128  thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                                          128  thrpt    5      9930.085 ±      715.936   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                                           128  thrpt    5      1371.061 ±       99.149  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5    217320.948 ±        6.766    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.020 ±        0.137  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         3.153 ±       21.573    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1424.718 ±      596.998  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5    225861.269 ±    94638.183    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5       126.208 ±     1086.687    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                                                128  thrpt    5        21.000                 counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                                                 128  thrpt    5        43.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                                            128  thrpt    5     37519.337 ±     1342.086   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                                             128  thrpt    5      1234.022 ±       44.590  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     51769.035 ±        8.817    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.013 ±        0.070  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.551 ±        2.909    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1221.341 ±      721.928  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     51193.226 ±    28899.975    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        27.971 ±      240.839    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                                                  128  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala                                                                     128  thrpt    5     44744.614 ±     3419.866   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1186.916 ±       91.041  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5     41752.009 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.037 ±        0.195  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         1.278 ±        6.779    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1152.319 ±      713.615  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     40575.116 ±    26135.178    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.933 ±        8.031  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5        32.953 ±      283.738    B/op
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJacksonScala:·gc.time                                                            128  thrpt    5        36.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                                                    128  thrpt    5   1328394.612 ±    31425.071   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5      1208.525 ±       28.689  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      1432.000 ±        0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.025 ±        0.130  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.030 ±        0.155    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1220.644 ±      715.982  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1446.611 ±      855.552    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         0.950 ±        8.179    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                                          128  thrpt    5        18.000                 counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                                           128  thrpt    5        29.000                     ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                                            128  thrpt    5   1335677.261 ±     7989.345   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                             128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                        128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                  128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                                         128  thrpt    5     34997.054 ±     2643.933   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                                          128  thrpt    5      1058.757 ±       79.619  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     47617.552 ±       13.264    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.030 ±        0.171  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         1.322 ±        7.571    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1082.766 ±      600.327  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     48659.288 ±    25070.996    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        35.263 ±      303.625    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                                                128  thrpt    5        40.000                     ms
[info] ArrayOfLongsBenchmark.readCirce                                                                                  128  thrpt    5    127135.836 ±     6292.764   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5      2180.960 ±      107.511  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     27000.003 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.014 ±        0.093  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.181 ±        1.173    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2246.502 ±      717.438  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     27827.810 ±     9678.241    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        33.000                 counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        28.000                     ms
[info] ArrayOfLongsBenchmark.readDslJsonJava                                                                            128  thrpt    5    332249.866 ±     2807.081   ops/s
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate                                                             128  thrpt    5       665.309 ±        5.752  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                        128  thrpt    5      3152.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       667.249 ±        1.091  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      3161.205 ±       28.609    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         0.630 ±        5.428    B/op
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.count                                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfLongsBenchmark.readDslJsonJava:·gc.time                                                                   128  thrpt    5        48.000                     ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                                           128  thrpt    5    237418.466 ±     2824.833   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       526.132 ±        6.259  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5      3488.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       470.920 ±      709.454  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      3124.889 ±     4744.101    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5         7.000                 counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        30.000                     ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                                          128  thrpt    5    502139.235 ±     8252.313   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       632.949 ±       10.538  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1984.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       606.683 ±      580.439  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1902.509 ±     1830.183    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        27.000                     ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                                               128  thrpt    5     67153.313 ±     3255.547   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      2998.236 ±      145.476  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     70264.006 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.007 ±        0.014  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.166 ±        0.336    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      2995.662 ±      587.497  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     70194.309 ±    12524.386    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        44.000                 counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        38.000                     ms
[info] ArrayOfLongsBenchmark.writeCirce                                                                                 128  thrpt    5    194498.437 ±    10905.747   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1673.900 ±       94.545  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     13544.002 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.020 ±        0.161  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.165 ±        1.332    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1632.010 ±      581.204  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     13208.894 ±     4832.365    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5         5.525 ±       47.573    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        24.000                 counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        29.000                     ms
[info] ArrayOfLongsBenchmark.writeDslJsonJava                                                                           128  thrpt    5    721545.893 ±     7584.446   ops/s
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       564.774 ±        6.008  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       600.421 ±      574.174  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      1309.720 ±     1251.962    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         0.580 ±        3.058    B/op
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.count                                                                 128  thrpt    5         9.000                 counts
[info] ArrayOfLongsBenchmark.writeDslJsonJava:·gc.time                                                                  128  thrpt    5        44.000                     ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                                          128  thrpt    5    469769.952 ±    13622.054   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       482.257 ±       14.148  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1616.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       538.144 ±      709.304  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1803.419 ±     2378.440    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        33.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    692878.484 ±    54449.571   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       542.307 ±       42.631  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      1232.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       538.310 ±      708.726  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      1218.982 ±     1557.637    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.300 ±        2.581    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5         8.000                 counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        25.000                     ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    703076.723 ±    12712.285   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                                              128  thrpt    5     27834.747 ±     1610.024   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1426.930 ±       82.393  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     80692.219 ±       26.743    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.015 ±        0.119  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.811 ±        6.630    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1425.498 ±      595.400  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     80562.222 ±    30636.422    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        44.685 ±      384.753    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        21.000                 counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        35.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                                        128  thrpt    5      6860.307 ±      143.543   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                                         128  thrpt    5      1056.102 ±       22.042  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                    128  thrpt    5    242296.062 ±        0.016    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.006 ±        0.029  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.312 ±        6.625    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1015.701 ±       19.341  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    233035.421 ±     8286.543    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       151.792 ±     1306.971    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                                              128  thrpt    5        15.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                                               128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala                                                                 128  thrpt    5      6539.101 ±      340.278   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       942.521 ±       48.932  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5    226864.063 ±        0.010    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.016 ±        0.138  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         3.908 ±       33.651    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       945.519 ±      570.261  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5    227482.396 ±   134579.246    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.066 ±        7.824  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       253.942 ±     1858.591    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.count                                                       128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJacksonScala:·gc.time                                                        128  thrpt    5        44.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                                                128  thrpt    5     97455.943 ±     2555.177   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       944.010 ±       24.856  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5     15248.004 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.010 ±        0.059  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.167 ±        0.952    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       948.139 ±      575.717  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     15318.168 ±     9375.394    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.533 ±        4.588  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         8.631 ±       74.313    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                                                      128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                                                       128  thrpt    5        31.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                                                     128  thrpt    5      6379.725 ±      337.279   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                      128  thrpt    5      1160.529 ±       60.981  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5    286312.068 ±        0.013    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.024 ±        0.206  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         5.849 ±       50.112    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1151.564 ±      709.339  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    284212.746 ±   177658.374    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       198.125 ±     1705.915    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                                           128  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                                            128  thrpt    5        40.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                                                       128  thrpt    5     17656.425 ±     1105.007   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                        128  thrpt    5       880.913 ±       54.847  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                   128  thrpt    5     78534.507 ±       78.703    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.035 ±        0.206  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         3.075 ±       18.122    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       878.878 ±      714.438  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     78236.422 ±    60967.568    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        61.056 ±      525.711    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                                             128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                                              128  thrpt    5        36.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala                                                                128  thrpt    5     20632.686 ±      830.445   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                 128  thrpt    5       874.252 ±       35.354  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                            128  thrpt    5     66696.021 ±        0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.034 ±        0.196  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         2.582 ±       15.072    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5       877.719 ±      713.695  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     66963.520 ±    54432.108    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        61.611 ±      530.493    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.count                                                      128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJacksonScala:·gc.time                                                       128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                                               128  thrpt    5    491809.717 ±    24439.227   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                128  thrpt    5      1114.801 ±       55.321  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                           128  thrpt    5      3568.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                    128  thrpt    5         0.029 ±        0.251  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm               128  thrpt    5         0.096 ±        0.814    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                          128  thrpt    5      1151.876 ±      710.156  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                     128  thrpt    5      3684.272 ±     2185.700    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                   128  thrpt    5         1.066 ±        7.821  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                              128  thrpt    5         3.415 ±       25.110    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                                                     128  thrpt    5        17.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                                                      128  thrpt    5        33.000                     ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                                                       128  thrpt    5    502715.541 ±     3477.714   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                        128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                   128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                             128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                                                    128  thrpt    5     19296.928 ±     1433.292   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                     128  thrpt    5       914.744 ±       68.010  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                128  thrpt    5     74615.889 ±       30.605    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.036 ±        0.293  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         2.991 ±       24.267    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                               128  thrpt    5       877.689 ±      706.705  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     71580.013 ±    57120.423    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        66.177 ±      569.805    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                                          128  thrpt    5        13.000                 counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                                           128  thrpt    5        41.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                                            128  thrpt    5     12070.510 ±      644.819   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1157.603 ±       61.148  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5    150944.034 ±        0.004    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.025 ±        0.200  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         3.263 ±       25.930    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1152.447 ±      711.352  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5    150431.709 ±    97314.589    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        5.559  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5       104.011 ±      726.366    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        17.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        33.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                                                     128  thrpt    5     11785.966 ±      432.793   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5      1078.845 ±       40.156  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5    144070.792 ±       62.535    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.024 ±        0.189  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         3.182 ±       25.241    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5      1083.634 ±      599.094  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5    144770.530 ±    82175.755    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       106.816 ±      919.717    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        39.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                                                    128  thrpt    5    162627.452 ±    10785.216   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       940.549 ±       62.338  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      9104.003 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.022 ±        0.185  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.205 ±        1.744    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       947.624 ±      589.255  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      9173.569 ±     5715.801    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5         6.406 ±       55.156    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        30.000                     ms
[info] ArrayOfOffsetTimesBenchmark.readPlayJson                                                                         128  thrpt    5     10431.943 ±      561.742   ops/s
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      1305.720 ±       70.476  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5    197000.042 ±        0.007    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.007 ±        0.049  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.979 ±        7.212    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1288.447 ±      601.305  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    194368.064 ±    89481.770    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       141.576 ±     1219.016    B/op
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        42.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                                           128  thrpt    5     27987.241 ±     1144.882   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5      1042.388 ±       42.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     58621.637 ±       40.156    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.013 ±        0.065  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.716 ±        3.630    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1083.452 ±      596.493  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     60994.310 ±    35893.439    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        5.560  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        44.438 ±      308.592    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        16.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        37.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala                                                                    128  thrpt    5     81273.658 ±     4054.533   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5      1293.709 ±       64.777  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     25056.005 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.040 ±        0.331  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.773 ±        6.382    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1289.183 ±      603.453  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     24967.648 ±    11629.820    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.932 ±        8.027  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        17.989 ±      154.888    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5        19.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        34.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                                                   128  thrpt    5    690120.873 ±    57722.287   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       946.990 ±       79.197  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      2160.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.024 ±        0.210  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.054 ±        0.469    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       946.561 ±      589.981  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      2157.629 ±     1305.065    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.839 ±       15.835    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        14.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        33.000                     ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5    794698.402 ±    14923.897   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson                                                                        128  thrpt    5     71555.053 ±     3213.051   ops/s
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5      1402.832 ±       63.006  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5     30856.006 ±        0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.006 ±        0.048  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.136 ±        1.075    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1425.367 ±      596.705  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     31344.307 ±    12633.690    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.066 ±        6.687  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        23.581 ±      148.661    B/op
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        21.000                 counts
[info] ArrayOfOffsetTimesBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        40.000                     ms
[info] ArrayOfPeriodsBenchmark.readCirce                                                                                128  thrpt    5     18225.885 ±     3997.391   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5       682.892 ±      149.720  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     58968.039 ±        0.123    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5       674.145 ±        0.588  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     58371.770 ±    13447.711    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        10.000                 counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        33.000                     ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                                         128  thrpt    5     16422.123 ±     1418.132   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       459.987 ±       39.867  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     44088.213 ±        1.603    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       470.896 ±      709.393  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     45295.396 ±    70083.177    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        30.000                     ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                                        128  thrpt    5    104916.443 ±     6293.487   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       263.441 ±       15.831  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3952.004 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       270.191 ±      581.607  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      4044.667 ±     8711.110    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5         4.000                 counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        12.000                     ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                                             128  thrpt    5     14511.756 ±      424.168   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5       916.340 ±       26.774  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     99392.118 ±        0.750    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.082 ±        0.708  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         8.884 ±       76.496    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       877.680 ±      713.809  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     95285.068 ±    79175.209    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        86.314 ±      743.193    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        13.000                 counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        43.000                     ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                                               128  thrpt    5     55007.927 ±     2391.762   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5      1191.333 ±       52.239  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     34088.008 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.007 ±        0.049  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.192 ±        1.395    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1220.650 ±      718.828  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     34941.233 ±    20943.796    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        19.098 ±      164.440    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        34.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                                        128  thrpt    5     80500.652 ±     6118.815   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5      1301.037 ±       99.194  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5     25440.005 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.012 ±        0.077  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.240 ±        1.510    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1289.180 ±      586.544  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     25210.031 ±    11440.222    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.932 ±        6.688  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        18.317 ±      131.367    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5        19.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        37.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    258908.138 ±    19826.131   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       496.127 ±       38.064  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      3016.002 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       471.060 ±      708.865  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2863.902 ±     4304.722    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5         7.000                 counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        22.000                     ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    324737.377 ±     1838.332   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                                            128  thrpt    5     69006.607 ±     6787.826   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5      1238.366 ±      121.993  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5     28248.006 ±        0.002    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.023 ±        0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.523 ±        2.873    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1220.439 ±      722.363  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     27885.155 ±    17625.222    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5        19.039 ±      163.932    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        18.000                 counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        35.000                     ms
[info] ArrayOfShortsBenchmark.readCirce                                                                                 128  thrpt    5    155560.746 ±     8361.049   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                                                  128  thrpt    5      2251.883 ±      121.363  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     22784.003 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.006 ±        0.029  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.056 ±        0.296    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      2246.508 ±      717.168  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     22733.689 ±     7398.978    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                                                       128  thrpt    5        33.000                 counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                                        128  thrpt    5        26.000                     ms
[info] ArrayOfShortsBenchmark.readDslJsonJava                                                                           128  thrpt    5    660361.270 ±    52317.328   ops/s
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            128  thrpt    5       365.825 ±       28.975  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       128  thrpt    5       872.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       333.694 ±        0.078  MB/sec
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5       795.681 ±       62.873    B/op
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.count                                                                 128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readDslJsonJava:·gc.time                                                                  128  thrpt    5        25.000                     ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                                          128  thrpt    5    352040.822 ±    13049.559   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                                           128  thrpt    5       366.809 ±       13.767  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5      1640.001 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       403.640 ±      579.079  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      1808.168 ±     2654.765    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                                                128  thrpt    5         6.000                 counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                                                 128  thrpt    5        25.000                     ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                                         128  thrpt    5    954031.702 ±     5822.351   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       329.732 ±        2.164  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       544.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       337.038 ±        0.231  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       556.055 ±        3.374    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         5.000                 counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5        15.000                     ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                                              128  thrpt    5     74904.609 ±     1435.700   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3210.706 ±       61.692  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     67472.006 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.009 ±        0.021  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.189 ±        0.445    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3199.201 ±      717.643  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     67236.512 ±    15543.524    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        47.000                 counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        41.000                     ms
[info] ArrayOfShortsBenchmark.writeCirce                                                                                128  thrpt    5    259181.493 ±    13284.981   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                                                 128  thrpt    5      1524.549 ±       78.360  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                                            128  thrpt    5      9256.002 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.029 ±        0.136  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.176 ±        0.823    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1563.476 ±      709.806  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5      9495.289 ±     4404.945    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.666 ±        5.738  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5         3.970 ±       34.180    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                                                      128  thrpt    5        23.000                 counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                                                       128  thrpt    5        31.000                     ms
[info] ArrayOfShortsBenchmark.writeDslJsonJava                                                                          128  thrpt    5   1355354.204 ±     8639.086   ops/s
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           128  thrpt    5       461.553 ±        2.834  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       467.227 ±      704.116  MB/sec
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5       542.653 ±      818.572    B/op
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.count                                                                128  thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeDslJsonJava:·gc.time                                                                 128  thrpt    5        34.000                     ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                                         128  thrpt    5   1233636.107 ±    58349.620   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       721.022 ±       34.252  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       920.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.017 ±        0.149  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.022 ±        0.190    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       740.775 ±      577.432  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       947.215 ±      794.140    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         1.014 ±        8.733    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5        11.000                 counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        43.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                                        128  thrpt    5   1352269.044 ±    33261.472   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       460.462 ±       11.328  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       536.000 ±        0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       471.014 ±      708.876  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       548.429 ±      827.029    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.309 ±        1.632    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         7.000                 counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        22.000                     ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5   1446480.028 ±    61212.258   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                                             128  thrpt    5     36186.920 ±     1375.661   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1677.723 ±       63.695  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     72977.773 ±       15.166    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.039 ±        0.193  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         1.723 ±        8.477    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1698.545 ±       27.676  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     73886.892 ±     1703.779    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        35.369 ±      304.539    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        25.000                 counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        35.000                     ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                                                  128  thrpt    5     39834.356 ±     2379.445   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                                                   128  thrpt    5       795.287 ±       47.322  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                                              128  thrpt    5     31424.011 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.020 ±        0.174  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.793 ±        6.828    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                             128  thrpt    5       810.242 ±      706.236  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     32016.184 ±    27892.122    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                      128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                 128  thrpt    5        26.821 ±      230.933    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                                        128  thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                                         128  thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                                           128  thrpt    5     77530.141 ±     3553.125   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                                            128  thrpt    5       817.335 ±       37.554  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                       128  thrpt    5     16592.005 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.028 ±        0.162  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.585 ±        3.343    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       809.478 ±      707.544  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     16441.121 ±    14546.362    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         1.066 ±        6.437  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        21.887 ±      132.997    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                                                 128  thrpt    5        12.000                 counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                                                  128  thrpt    5        42.000                     ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                                          128  thrpt    5    265435.520 ±     4375.216   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                                           128  thrpt    5       863.404 ±       14.167  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                      128  thrpt    5      5120.002 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.005 ±        0.029  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.032 ±        0.171    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       878.938 ±      714.443  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      5214.788 ±     4291.289    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5         3.947 ±       33.984    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                                                128  thrpt    5        13.000                 counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                                                 128  thrpt    5        30.000                     ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                                               128  thrpt    5     22631.327 ±     1521.913   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                                                128  thrpt    5      1063.382 ±       71.675  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                           128  thrpt    5     73960.092 ±        0.621    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.019 ±        0.097  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         1.283 ±        6.610    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                          128  thrpt    5      1015.479 ±       23.464  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     70646.433 ±     5251.074    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        54.448 ±      468.813    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                                                     128  thrpt    5        15.000                 counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                                                      128  thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                                                 128  thrpt    5     50749.800 ±     2019.907   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                                                  128  thrpt    5      1075.656 ±       42.785  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                                             128  thrpt    5     33360.008 ±        0.002    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.008 ±        0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         0.242 ±        2.062    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1083.897 ±      569.436  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     33655.452 ±    19210.061    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        20.556 ±      176.992    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                                                       128  thrpt    5        16.000                 counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                                        128  thrpt    5        35.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                                          128  thrpt    5     96372.511 ±     2128.184   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                                           128  thrpt    5      1320.157 ±       29.153  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                      128  thrpt    5     21560.004 ±        0.080    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.028 ±        0.237  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         0.459 ±        3.855    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1289.202 ±      587.695  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     21058.564 ±     9728.206    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.933 ±        8.030  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        15.179 ±      130.696    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                                                128  thrpt    5        19.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                                         128  thrpt    5    289937.129 ±    23776.363   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5       924.012 ±       75.606  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5      5016.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.021 ±        0.138  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.110 ±        0.733    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       945.879 ±      571.101  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      5144.456 ±     3308.878    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.799 ±        6.881  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         4.406 ±       37.941    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                                               128  thrpt    5        14.000                 counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                                                128  thrpt    5        33.000                     ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                                                 128  thrpt    5    319394.958 ±      811.017   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                  128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                             128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                       128  thrpt    5           ≈ 0                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                                              128  thrpt    5     78537.536 ±     2266.479   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                                               128  thrpt    5      1163.866 ±       33.741  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     23328.000 ±        0.082    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.039 ±        0.329  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.788 ±        6.584    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1151.499 ±      709.862  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     23086.501 ±    14413.617    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.799 ±        6.880  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        16.132 ±      138.899    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                                                    128  thrpt    5        17.000                 counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                                                     128  thrpt    5        38.000                     ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                                                128  thrpt    5     74075.061 ±     2117.360   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      1415.916 ±       40.746  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     30080.006 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.040 ±        0.315  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.836 ±        6.651    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      1425.695 ±      586.633  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     30281.321 ±    12081.740    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                    128  thrpt    5         0.933 ±        6.689  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                               128  thrpt    5        19.703 ±      141.291    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        21.000                 counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                                         128  thrpt    5     82164.293 ±     4564.925   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       929.649 ±       51.042  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5     17808.005 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.032 ±        0.275  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.621 ±        5.345    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       877.287 ±      708.106  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     16817.524 ±    13800.798    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.066 ±        7.823  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5        20.459 ±      150.454    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        13.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        43.000                     ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                                        128  thrpt    5     99761.662 ±     3061.929   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5      1071.921 ±       32.976  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5     16912.004 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.023 ±        0.181  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.368 ±        2.888    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1082.792 ±      565.384  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5     17080.251 ±     8760.356    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.799 ±        6.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5        12.772 ±      109.975    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        16.000                 counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        34.000                     ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                                             128  thrpt    5     44238.628 ±     2967.973   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      2112.896 ±      142.849  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     75176.010 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.024 ±        0.152  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.847 ±        5.312    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      2110.262 ±      586.001  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     75121.127 ±    22840.916    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        31.000                 counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        29.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                                               128  thrpt    5    118648.284 ±     4806.092   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       818.940 ±       33.541  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5     10864.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.038 ±        0.329  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.503 ±        4.329    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       808.473 ±      704.000  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5     10731.213 ±     9468.571    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         1.199 ±        6.124  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5        15.869 ±       80.660    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5        12.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        43.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                                        128  thrpt    5    162729.933 ±    15310.946   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       241.533 ±       22.670  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      2336.003 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       268.437 ±      577.832  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      2610.372 ±     5626.356    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.133 ±        1.147  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.278 ±       11.007    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         4.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        18.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                                                       128  thrpt    5    773261.186 ±    26609.826   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5       958.964 ±       32.832  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1952.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.025 ±        0.138  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.051 ±        0.284    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       946.639 ±      572.567  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      1927.193 ±     1171.986    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.799 ±        6.882  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.646 ±       14.171    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        14.000                 counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        33.000                     ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5    797772.995 ±    27507.019   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                                            128  thrpt    5    200670.503 ±    12363.745   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       653.785 ±       40.512  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      5128.002 ±        0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       671.144 ±        1.206  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      5265.281 ±      334.428    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         2.076 ±       10.949    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5        10.000                 counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        43.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readCirce                                                                            128  thrpt    5    126041.119 ±     6346.676   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate                                                             128  thrpt    5      1552.141 ±       78.101  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.alloc.rate.norm                                                        128  thrpt    5     19384.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 128  thrpt    5         0.027 ±        0.129  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            128  thrpt    5         0.335 ±        1.611    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       128  thrpt    5      1562.970 ±      708.785  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5     19539.224 ±     9557.380    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                128  thrpt    5         0.666 ±        5.734  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                           128  thrpt    5         8.416 ±       72.465    B/op
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.count                                                                  128  thrpt    5        23.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readCirce:·gc.time                                                                   128  thrpt    5        32.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                                                     128  thrpt    5    163446.002 ±     7268.821   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                                                      128  thrpt    5       872.340 ±       39.044  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 128  thrpt    5      8400.003 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.030 ±        0.209  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.291 ±        2.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       877.840 ±      706.525  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5      8462.495 ±     6994.562    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.800 ±        6.884  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         7.661 ±       65.962    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                                            128  thrpt    5        42.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                                                    128  thrpt    5    316477.544 ±    24455.212   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     128  thrpt    5       614.521 ±       47.288  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                128  thrpt    5      3056.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       606.737 ±      580.380  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      3012.521 ±     2822.155    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                                          128  thrpt    5         9.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                                           128  thrpt    5        27.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson                                                                         128  thrpt    5     64035.514 ±     2261.425   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate                                                          128  thrpt    5      2702.729 ±       94.390  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     128  thrpt    5     66432.006 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.005 ±        0.016  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.132 ±        0.385    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      2654.846 ±      584.824  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5     65236.565 ±    12668.724    B/op
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.count                                                               128  thrpt    5        39.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.readPlayJson:·gc.time                                                                128  thrpt    5        36.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeCirce                                                                           128  thrpt    5    168703.301 ±     2358.044   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate                                                            128  thrpt    5       828.213 ±       11.699  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       128  thrpt    5      7728.002 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.037 ±        0.319  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.344 ±        2.961    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5       878.210 ±      717.892  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5      8194.782 ±     6702.491    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5         6.221 ±       53.563    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.count                                                                 128  thrpt    5        13.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeCirce:·gc.time                                                                  128  thrpt    5        38.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                                                    128  thrpt    5    285632.563 ±    24542.451   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       281.629 ±       24.246  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5      1552.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       269.093 ±      579.243  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5      1468.769 ±     3161.899    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                                          128  thrpt    5         4.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                                           128  thrpt    5        17.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                                                   128  thrpt    5   1240575.522 ±    63974.637   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5       920.494 ±       47.315  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5      1168.000 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.022 ±        0.149  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.028 ±        0.193    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5       945.886 ±      571.095  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5      1198.766 ±      686.657    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.932 ±        8.028  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         1.189 ±       10.239    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                                         128  thrpt    5        14.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                                          128  thrpt    5        34.000                     ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                                           128  thrpt    5   1173324.961 ±    97981.660   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       128  thrpt    5        ≈ 10⁻³                   B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson                                                                        128  thrpt    5    293479.521 ±     7824.210   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate                                                         128  thrpt    5       798.056 ±       21.590  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5      4280.001 ±        0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.014 ±        0.118  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.075 ±        0.643    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       740.972 ±      574.275  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3974.037 ±     3081.047    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.466 ±        7.118  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         7.820 ±       37.875    B/op
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.count                                                              128  thrpt    5        11.000                 counts
[info] ArrayOfZoneOffsetsBenchmark.writePlayJson:·gc.time                                                               128  thrpt    5        44.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                                         128  thrpt    5      4458.267 ±      119.056   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                                          128  thrpt    5       877.640 ±       23.331  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                                                     128  thrpt    5    309840.096 ±        0.023    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.030 ±        0.255  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5        10.339 ±       89.025    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       872.708 ±      696.528  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5    308336.653 ±   250885.263    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         1.199 ±       10.322  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5       426.250 ±     3670.145    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                                               128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                                                128  thrpt    5        52.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala                                                                  128  thrpt    5      4367.303 ±      359.704   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                                                   128  thrpt    5       811.389 ±       67.028  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              128  thrpt    5    292392.096 ±        0.021    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.001 ±        0.009  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.383 ±        3.298    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       871.475 ±      717.750  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5    314851.007 ±   274007.971    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         1.332 ±       10.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5       473.812 ±     3585.973    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.count                                                        128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJacksonScala:·gc.time                                                         128  thrpt    5        59.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                                                 128  thrpt    5     30509.099 ±     1536.845   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                                                  128  thrpt    5       500.084 ±       25.175  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             128  thrpt    5     25800.014 ±        0.006    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       468.396 ±      705.525  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     24202.682 ±    36905.669    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        13.816 ±       72.858    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                                                       128  thrpt    5         7.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                                        128  thrpt    5        28.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                                                      128  thrpt    5      3821.404 ±      202.117   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                                                       128  thrpt    5       973.776 ±       51.878  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  128  thrpt    5    400992.108 ±        0.013    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.008 ±        0.069  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         3.283 ±       28.266    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       941.560 ±      591.870  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5    388191.376 ±   254104.342    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         1.332 ±       10.096  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5       548.275 ±     4155.925    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                                            128  thrpt    5        14.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                                             128  thrpt    5        49.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                                        128  thrpt    5     13503.967 ±      763.328   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                                         128  thrpt    5       846.912 ±       47.146  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                                    128  thrpt    5     98712.065 ±      126.870    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.046 ±        0.400  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         5.544 ±       47.732    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       872.790 ±      696.616  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    101661.818 ±    79491.369    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±       10.323  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       140.080 ±     1206.130    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                                              128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                                               128  thrpt    5        45.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala                                                                 128  thrpt    5     15544.944 ±     1444.726   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate                                                  128  thrpt    5       805.218 ±       75.000  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             128  thrpt    5     81536.025 ±        0.468    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.020 ±        0.170  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         1.927 ±       16.588    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            128  thrpt    5       804.676 ±      724.545  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     81394.372 ±    71044.901    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.332 ±       10.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5       133.900 ±     1019.053    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.count                                                       128  thrpt    5        12.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJacksonScala:·gc.time                                                        128  thrpt    5        51.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                                                128  thrpt    5    277550.254 ±    11089.636   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 128  thrpt    5       979.116 ±       39.052  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            128  thrpt    5      5552.002 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.014 ±        0.121  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.082 ±        0.689    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1012.161 ±       33.329  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5      5740.246 ±      408.433    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.332 ±        8.700  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5         7.545 ±       49.392    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                                                      128  thrpt    5        15.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                                                       128  thrpt    5        42.000                     ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                                        128  thrpt    5    317092.209 ±     4978.471   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    128  thrpt    5         0.001 ±        0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              128  thrpt    5           ≈ 0                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                                                     128  thrpt    5     14841.173 ±      140.001   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                                                      128  thrpt    5       843.584 ±        7.540  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 128  thrpt    5     89463.345 ±        5.846    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.051 ±        0.438  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         5.420 ±       46.671    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                128  thrpt    5       871.928 ±      719.524  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5     92487.623 ±    76693.681    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         1.732 ±        9.175  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5       183.421 ±      970.744    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                                            128  thrpt    5        54.000                     ms
[info] BitSetBenchmark.readJsoniterScala                                                                                N/A  thrpt    5    644313.576 ±    47499.517   ops/s
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                                 N/A  thrpt    5        42.576 ±        3.112  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5       104.001 ±        0.001    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5        68.234 ±      587.516  MB/sec
[info] BitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5       172.523 ±     1485.478    B/op
[info] BitSetBenchmark.readJsoniterScala:·gc.count                                                                      N/A  thrpt    5         1.000                 counts
[info] BitSetBenchmark.readJsoniterScala:·gc.time                                                                       N/A  thrpt    5         3.000                     ms
[info] BitSetBenchmark.readPlayJson                                                                                     N/A  thrpt    5     68378.255 ±     3034.603   ops/s
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate                                                                      N/A  thrpt    5      3084.996 ±      136.788  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                 N/A  thrpt    5     71008.006 ±        0.001    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.008 ±        0.023  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5         0.188 ±        0.526    B/op
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      3063.591 ±        2.383  MB/sec
[info] BitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5     70522.893 ±     3164.334    B/op
[info] BitSetBenchmark.readPlayJson:·gc.count                                                                           N/A  thrpt    5        45.000                 counts
[info] BitSetBenchmark.readPlayJson:·gc.time                                                                            N/A  thrpt    5        45.000                     ms
[info] BitSetBenchmark.writeJacksonScala                                                                                N/A  thrpt    5    978244.965 ±    66006.286   ops/s
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                                 N/A  thrpt    5       561.839 ±       38.072  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                            N/A  thrpt    5       904.000 ±        0.001    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5       537.663 ±      708.844  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5       864.303 ±     1130.617    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.400 ±        1.405  MB/sec
[info] BitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         0.640 ±        2.250    B/op
[info] BitSetBenchmark.writeJacksonScala:·gc.count                                                                      N/A  thrpt    5         8.000                 counts
[info] BitSetBenchmark.writeJacksonScala:·gc.time                                                                       N/A  thrpt    5        34.000                     ms
[info] BitSetBenchmark.writeJsoniterScala                                                                               N/A  thrpt    5    735775.779 ±    61240.669   ops/s
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                N/A  thrpt    5       198.203 ±       16.598  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                           N/A  thrpt    5       424.001 ±        0.001    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5       201.439 ±      708.092  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5       428.869 ±     1508.448    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                   N/A  thrpt    5         0.400 ±        3.441  MB/sec
[info] BitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                              N/A  thrpt    5         0.863 ±        7.429    B/op
[info] BitSetBenchmark.writeJsoniterScala:·gc.count                                                                     N/A  thrpt    5         3.000                 counts
[info] BitSetBenchmark.writeJsoniterScala:·gc.time                                                                      N/A  thrpt    5         9.000                     ms
[info] BitSetBenchmark.writeJsoniterScalaPrealloc                                                                       N/A  thrpt    5    881639.187 ±    78572.189   ops/s
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                        N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                   N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] BitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                             N/A  thrpt    5           ≈ 0                 counts
[info] BitSetBenchmark.writePlayJson                                                                                    N/A  thrpt    5     40347.505 ±     2174.097   ops/s
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate                                                                     N/A  thrpt    5      1693.713 ±       91.369  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                N/A  thrpt    5     66063.091 ±        7.915    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.004 ±        0.007  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.143 ±        0.289    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1699.560 ±       21.635  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5     66300.408 ±     3269.136    B/op
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.933 ±        8.031  MB/sec
[info] BitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5        36.798 ±      316.839    B/op
[info] BitSetBenchmark.writePlayJson:·gc.count                                                                          N/A  thrpt    5        25.000                 counts
[info] BitSetBenchmark.writePlayJson:·gc.time                                                                           N/A  thrpt    5        34.000                     ms
[info] ExtractFieldsBenchmark.readCirce                                                                                 N/A  thrpt    5    737983.576 ±    17193.433   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      2412.033 ±       58.027  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5      5144.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.003 ±        0.006  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.007 ±        0.012    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      2382.816 ±        2.034  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5      5081.845 ±      118.304    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        35.000                 counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        28.000                     ms
[info] ExtractFieldsBenchmark.readDslJsonJava                                                                           N/A  thrpt    5   5460867.650 ±   162265.673   ops/s
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       333.062 ±        9.908  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5        96.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       333.562 ±      908.575  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5        95.929 ±      260.415    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.038 ±        0.329    B/op
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        25.000                     ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                                          N/A  thrpt    5    770021.399 ±    66945.579   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       954.939 ±       83.062  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5      1952.001 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.045 ±        0.351  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.092 ±        0.725    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       945.304 ±      588.705  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5      1931.822 ±     1185.508    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.332 ±        7.257  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         2.749 ±       14.963    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5        14.000                 counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        48.000                     ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                                         N/A  thrpt    5   7732824.126 ±   144580.296   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       353.698 ±        6.589  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5        72.000 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       337.016 ±        0.053  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5        68.605 ±        1.284    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         5.000                 counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        14.000                     ms
[info] ExtractFieldsBenchmark.readPlayJson                                                                              N/A  thrpt    5    269931.507 ±     6011.187   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1392.603 ±       31.090  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5      8120.002 ±        0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.033 ±        0.282  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5         0.191 ±        1.642    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1423.657 ±      600.734  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5      8298.987 ±     3391.433    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         1.066 ±        7.823  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5         6.256 ±       45.923    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        21.000                 counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        47.000                     ms
[info] GoogleMapsAPIBenchmark.readCirce                                                                                 N/A  thrpt    5      7266.664 ±      278.755   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                                                  N/A  thrpt    5      1749.657 ±       67.213  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                             N/A  thrpt    5    378984.058 ±        0.008    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.100 ±        0.175  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5        21.563 ±       37.566    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1767.780 ±      591.007  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    383005.561 ±   132772.901    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       143.542 ±     1235.942    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                                                       N/A  thrpt    5        26.000                 counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                                        N/A  thrpt    5        35.000                     ms
[info] GoogleMapsAPIBenchmark.readDslJsonJava                                                                           N/A  thrpt    5     11772.688 ±      214.031   ops/s
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate                                                            N/A  thrpt    5       271.391 ±        5.046  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                       N/A  thrpt    5     36280.037 ±        0.004    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       265.913 ±      572.414  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     35591.558 ±    76621.708    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.666 ±        4.444  MB/sec
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5        88.853 ±      592.367    B/op
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.count                                                                 N/A  thrpt    5         4.000                 counts
[info] GoogleMapsAPIBenchmark.readDslJsonJava:·gc.time                                                                  N/A  thrpt    5        20.000                     ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                                          N/A  thrpt    5     13011.503 ±     1263.005   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                           N/A  thrpt    5       330.624 ±       32.166  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                      N/A  thrpt    5     39992.033 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       335.712 ±        0.260  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     40628.293 ±     3973.754    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                                                N/A  thrpt    5         5.000                 counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                                                 N/A  thrpt    5        24.000                     ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                                         N/A  thrpt    5     22905.694 ±      394.217   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                          N/A  thrpt    5       429.291 ±        7.107  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     29496.019 ±        0.010    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       404.494 ±      580.687  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     27814.688 ±    40326.494    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                                               N/A  thrpt    5         6.000                 counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                                                N/A  thrpt    5        19.000                     ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                                              N/A  thrpt    5      2197.552 ±       60.482   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                                               N/A  thrpt    5      1371.966 ±       37.901  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          N/A  thrpt    5    982665.788 ±       13.769    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   N/A  thrpt    5         0.054 ±        0.177  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              N/A  thrpt    5        38.350 ±      126.981    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         N/A  thrpt    5      1355.441 ±       32.792  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    N/A  thrpt    5    970837.831 ±    11327.101    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                  N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                             N/A  thrpt    5       667.883 ±     5750.672    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                                                    N/A  thrpt    5        20.000                 counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                                                     N/A  thrpt    5        44.000                     ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                                                N/A  thrpt    5      7089.618 ±      391.425   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                                                 N/A  thrpt    5      1561.488 ±       85.635  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                                            N/A  thrpt    5    346632.059 ±        0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.024 ±        0.138  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         5.400 ±       30.801    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1562.841 ±      707.890  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5    346589.865 ±   141843.609    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5       177.775 ±     1530.696    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                                                      N/A  thrpt    5        23.000                 counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                                                       N/A  thrpt    5        32.000                     ms
[info] GoogleMapsAPIBenchmark.writeDslJsonJava                                                                          N/A  thrpt    5     52508.437 ±     1934.771   ops/s
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate                                                           N/A  thrpt    5       518.626 ±       19.159  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                      N/A  thrpt    5     15544.008 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       533.735 ±      703.997  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     16023.659 ±    21423.707    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5         3.982 ±       34.289    B/op
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.count                                                                N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeDslJsonJava:·gc.time                                                                 N/A  thrpt    5        40.000                     ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                                         N/A  thrpt    5     38062.714 ±      366.098   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                          N/A  thrpt    5       566.636 ±        5.558  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     N/A  thrpt    5     23431.871 ±        0.322    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       536.983 ±      707.565  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5     22218.974 ±    29422.672    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         5.515 ±       47.490    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                                               N/A  thrpt    5         8.000                 counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                                                N/A  thrpt    5        38.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                                        N/A  thrpt    5     75562.035 ±     4125.444   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         N/A  thrpt    5       568.002 ±       30.757  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5     11832.005 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       605.463 ±      579.375  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5     12622.671 ±    12201.080    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                                              N/A  thrpt    5         9.000                 counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                                               N/A  thrpt    5        30.000                     ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                                                N/A  thrpt    5    103497.575 ±     1057.032   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            N/A  thrpt    5         0.004 ±        0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      N/A  thrpt    5           ≈ 0                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                                             N/A  thrpt    5      5769.132 ±      222.931   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                                              N/A  thrpt    5      1652.087 ±       63.805  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         N/A  thrpt    5    450743.979 ±        3.223    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.065 ±        0.143  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5        17.661 ±       38.884    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1697.797 ±       32.669  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5    463249.885 ±    18879.257    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.933 ±        8.030  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5       255.128 ±     2196.729    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                                                   N/A  thrpt    5        25.000                 counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                                                    N/A  thrpt    5        41.000                     ms
[info] IntBenchmark.readCirce                                                                                           N/A  thrpt    5   6671240.423 ±   106259.202   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                                            N/A  thrpt    5      4137.009 ±       64.591  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                                                       N/A  thrpt    5       976.000 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                                N/A  thrpt    5         0.002 ±        0.003  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                           N/A  thrpt    5         0.001 ±        0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                      N/A  thrpt    5      4152.851 ±      584.706  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                                 N/A  thrpt    5       979.770 ±      141.388    B/op
[info] IntBenchmark.readCirce:·gc.count                                                                                 N/A  thrpt    5        61.000                 counts
[info] IntBenchmark.readCirce:·gc.time                                                                                  N/A  thrpt    5        59.000                     ms
[info] IntBenchmark.readDslJsonJava                                                                                     N/A  thrpt    5  38365085.954 ±  2812105.466   ops/s
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate                                                                      N/A  thrpt    5       389.991 ±       28.536  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                                 N/A  thrpt    5        16.000 ±        0.001    B/op
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5       400.460 ±      574.774  MB/sec
[info] IntBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5        16.395 ±       22.841    B/op
[info] IntBenchmark.readDslJsonJava:·gc.count                                                                           N/A  thrpt    5         6.000                 counts
[info] IntBenchmark.readDslJsonJava:·gc.time                                                                            N/A  thrpt    5        29.000                     ms
[info] IntBenchmark.readJacksonScala                                                                                    N/A  thrpt    5   7208270.632 ±   185864.301   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                                                     N/A  thrpt    5      2711.003 ±       68.911  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                                N/A  thrpt    5       592.000 ±        0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.002 ±        0.002  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5        ≈ 10⁻³                   B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      2722.786 ±        1.020  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5       594.594 ±       15.230    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                                          N/A  thrpt    5        40.000                 counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                                           N/A  thrpt    5        34.000                     ms
[info] IntBenchmark.readJsoniterScala                                                                                   N/A  thrpt    5  38105046.949 ±   818150.779   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                                                    N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                                         N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.readNaiveScala                                                                                      N/A  thrpt    5  26185359.095 ±   902443.065   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                                                       N/A  thrpt    5      1331.133 ±       46.939  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                                                  N/A  thrpt    5        80.000 ±        0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                           N/A  thrpt    5         0.025 ±        0.209  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                      N/A  thrpt    5         0.001 ±        0.013    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen                                                                 N/A  thrpt    5      1290.314 ±      580.055  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Old_Gen.norm                                                            N/A  thrpt    5        77.501 ±       33.114    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space                                                          N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.G1_Survivor_Space.norm                                                     N/A  thrpt    5         0.040 ±        0.345    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                                            N/A  thrpt    5        19.000                 counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                                             N/A  thrpt    5        26.000                     ms
[info] IntBenchmark.readPlayJson                                                                                        N/A  thrpt    5   6218048.855 ±   265014.763   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                                         N/A  thrpt    5      3002.647 ±      128.366  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                                                    N/A  thrpt    5       760.000 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                             N/A  thrpt    5         0.002 ±        0.002  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                        N/A  thrpt    5         0.001 ±        0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                                   N/A  thrpt    5      2995.564 ±      587.157  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                              N/A  thrpt    5       757.995 ±      124.626    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                                              N/A  thrpt    5        44.000                 counts
[info] IntBenchmark.readPlayJson:·gc.time                                                                               N/A  thrpt    5        38.000                     ms
[info] IntBenchmark.writeCirce                                                                                          N/A  thrpt    5  19499267.327 ±   666613.361   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                                           N/A  thrpt    5      2279.501 ±       78.553  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                                                      N/A  thrpt    5       184.000 ±        0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                               N/A  thrpt    5         0.027 ±        0.215  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                          N/A  thrpt    5         0.002 ±        0.017    B/op
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                                     N/A  thrpt    5      2314.544 ±      586.202  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                                N/A  thrpt    5       186.888 ±       50.813    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                                                N/A  thrpt    5        34.000                 counts
[info] IntBenchmark.writeCirce:·gc.time                                                                                 N/A  thrpt    5        29.000                     ms
[info] IntBenchmark.writeDslJsonJava                                                                                    N/A  thrpt    5  56101332.981 ±  2488738.281   ops/s
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate                                                                     N/A  thrpt    5      1711.052 ±       76.199  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                                N/A  thrpt    5        48.000 ±        0.001    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.123 ±        1.049  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.003 ±        0.029    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1693.302 ±       58.307  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5        47.503 ±        0.700    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         1.466 ±       11.243  MB/sec
[info] IntBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         0.041 ±        0.316    B/op
[info] IntBenchmark.writeDslJsonJava:·gc.count                                                                          N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.writeDslJsonJava:·gc.time                                                                           N/A  thrpt    5        50.000                     ms
[info] IntBenchmark.writeJacksonScala                                                                                   N/A  thrpt    5  11364490.737 ±   352295.258   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                                                    N/A  thrpt    5      2252.660 ±       69.725  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                               N/A  thrpt    5       312.000 ±        0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.049 ±        0.409  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.007 ±        0.056    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      2246.148 ±      716.778  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5       311.067 ±       96.998    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                                         N/A  thrpt    5        33.000                 counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                                          N/A  thrpt    5        30.000                     ms
[info] IntBenchmark.writeJsoniterScala                                                                                  N/A  thrpt    5  41449614.228 ± 12461549.896   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                                                   N/A  thrpt    5       842.654 ±      253.179  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                              N/A  thrpt    5        32.000 ±        0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       N/A  thrpt    5         0.038 ±        0.209  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  N/A  thrpt    5         0.002 ±        0.009    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                             N/A  thrpt    5       809.930 ±      701.128  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                        N/A  thrpt    5        30.657 ±       21.844    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                                      N/A  thrpt    5         0.933 ±        6.689  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                                 N/A  thrpt    5         0.037 ±        0.269    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                                        N/A  thrpt    5        12.000                 counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                                         N/A  thrpt    5        32.000                     ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                                          N/A  thrpt    5  47691677.205 ±   244306.301   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                           N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                      N/A  thrpt    5        ≈ 10⁻⁵                   B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                                N/A  thrpt    5           ≈ 0                 counts
[info] IntBenchmark.writeNaiveScala                                                                                     N/A  thrpt    5  32373547.332 ±  1676402.780   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                                                      N/A  thrpt    5      2468.161 ±      127.250  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                                                 N/A  thrpt    5       120.000 ±        0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          N/A  thrpt    5         0.001 ±        0.004  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen                                                                N/A  thrpt    5      2450.686 ±      587.954  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.G1_Old_Gen.norm                                                           N/A  thrpt    5       119.177 ±       29.986    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                                           N/A  thrpt    5        36.000                 counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                                            N/A  thrpt    5        33.000                     ms
[info] IntBenchmark.writePlayJson                                                                                       N/A  thrpt    5   2184403.831 ±    83942.293   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                                        N/A  thrpt    5      1754.229 ±       67.077  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                                                   N/A  thrpt    5      1264.000 ±        0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                            N/A  thrpt    5         0.039 ±        0.315  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                       N/A  thrpt    5         0.028 ±        0.229    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                                  N/A  thrpt    5      1699.523 ±       20.767  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                             N/A  thrpt    5      1224.662 ±       41.059    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                           N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                      N/A  thrpt    5         0.582 ±        5.008    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                                             N/A  thrpt    5        25.000                 counts
[info] IntBenchmark.writePlayJson:·gc.time                                                                              N/A  thrpt    5        30.000                     ms
[info] IntMapOfBooleansBenchmark.readJsoniterScala                                                                      N/A  thrpt    5    142556.900 ±     6288.497   ops/s
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       N/A  thrpt    5      2614.855 ±      115.014  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     28872.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.005 ±        0.012  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.052 ±        0.135    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      2586.706 ±      717.488  MB/sec
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     28567.133 ±     8212.443    B/op
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            N/A  thrpt    5        38.000                 counts
[info] IntMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             N/A  thrpt    5        32.000                     ms
[info] IntMapOfBooleansBenchmark.readPlayJson                                                                           N/A  thrpt    5     20108.992 ±     1198.663   ops/s
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            N/A  thrpt    5      1589.680 ±       95.526  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       N/A  thrpt    5    124424.031 ±        0.075    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.009 ±        0.046  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.663 ±        3.565    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1562.177 ±      737.958  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5    122243.531 ±    56337.460    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         1.066 ±        9.175  MB/sec
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5        83.406 ±      718.155    B/op
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.count                                                                 N/A  thrpt    5        23.000                 counts
[info] IntMapOfBooleansBenchmark.readPlayJson:·gc.time                                                                  N/A  thrpt    5        38.000                     ms
[info] IntMapOfBooleansBenchmark.writeJacksonScala                                                                      N/A  thrpt    5    131436.142 ±     3137.733   ops/s
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       N/A  thrpt    5      1460.293 ±       35.463  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  N/A  thrpt    5     17488.003 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.026 ±        0.224  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.315 ±        2.665    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5      1493.044 ±      694.290  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5     17887.349 ±     8592.978    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.932 ±        8.028  MB/sec
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5        11.273 ±       97.066    B/op
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            N/A  thrpt    5        22.000                 counts
[info] IntMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             N/A  thrpt    5        39.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScala                                                                     N/A  thrpt    5    496783.046 ±    33867.256   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      N/A  thrpt    5      1027.702 ±       70.419  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5      3256.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.012 ±        0.093  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.037 ±        0.301    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5      1082.848 ±      565.737  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5      3428.317 ±     1667.793    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         2.578 ±       22.197    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           N/A  thrpt    5        16.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            N/A  thrpt    5        36.000                     ms
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             N/A  thrpt    5    539028.791 ±    13896.853   ops/s
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              N/A  thrpt    5       525.980 ±       13.444  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         N/A  thrpt    5      1536.001 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       538.179 ±      709.374  MB/sec
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5      1569.860 ±     2049.340    B/op
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   N/A  thrpt    5         8.000                 counts
[info] IntMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                    N/A  thrpt    5        26.000                     ms
[info] IntMapOfBooleansBenchmark.writePlayJson                                                                          N/A  thrpt    5     44905.346 ±     1313.642   ops/s
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           N/A  thrpt    5       930.735 ±       27.792  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      N/A  thrpt    5     32624.009 ±        0.001    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               N/A  thrpt    5         0.014 ±        0.074  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          N/A  thrpt    5         0.488 ±        2.580    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     N/A  thrpt    5       944.723 ±      568.355  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                N/A  thrpt    5     33133.013 ±    20347.396    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              N/A  thrpt    5         1.066 ±        7.821  MB/sec
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         N/A  thrpt    5        37.596 ±      275.950    B/op
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.count                                                                N/A  thrpt    5        14.000                 counts
[info] IntMapOfBooleansBenchmark.writePlayJson:·gc.time                                                                 N/A  thrpt    5        46.000                     ms
[info] ListOfBooleansBenchmark.readCirce                                                                                128  thrpt    5    338663.191 ±    18370.895   ops/s
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                                 128  thrpt    5      2297.903 ±      125.600  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                            128  thrpt    5     10680.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     128  thrpt    5         0.005 ±        0.015  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                128  thrpt    5         0.024 ±        0.071    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                           128  thrpt    5      2314.522 ±      585.847  MB/sec
[info] ListOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                      128  thrpt    5     10763.033 ±     3039.349    B/op
[info] ListOfBooleansBenchmark.readCirce:·gc.count                                                                      128  thrpt    5        34.000                 counts
[info] ListOfBooleansBenchmark.readCirce:·gc.time                                                                       128  thrpt    5        28.000                     ms
[info] ListOfBooleansBenchmark.readJacksonScala                                                                         128  thrpt    5    397502.354 ±    29423.612   ops/s
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                          128  thrpt    5      1052.726 ±       78.276  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5      4168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                              128  thrpt    5         0.021 ±        0.116  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         128  thrpt    5         0.081 ±        0.450    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5      1082.798 ±      582.857  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5      4283.371 ±     2120.715    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.933 ±        8.032  MB/sec
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         3.627 ±       31.229    B/op
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.count                                                               128  thrpt    5        16.000                 counts
[info] ListOfBooleansBenchmark.readJacksonScala:·gc.time                                                                128  thrpt    5        43.000                     ms
[info] ListOfBooleansBenchmark.readJsoniterScala                                                                        128  thrpt    5    441048.257 ±     3890.310   ops/s
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       869.777 ±        7.222  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5      3104.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.016 ±        0.102  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         0.058 ±        0.364    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       878.989 ±      714.869  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      3137.218 ±     2558.498    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         2.374 ±       20.441    B/op
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.count                                                              128  thrpt    5        13.000                 counts
[info] ListOfBooleansBenchmark.readJsoniterScala:·gc.time                                                               128  thrpt    5        30.000                     ms
[info] ListOfBooleansBenchmark.readPlayJson                                                                             128  thrpt    5     97270.413 ±     7312.344   ops/s
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                              128  thrpt    5      3521.127 ±      265.037  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     56984.004 ±        0.001    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.004 ±        0.003  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.066 ±        0.051    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      3539.383 ±      717.440  MB/sec
[info] ListOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     57311.409 ±    13576.722    B/op
[info] ListOfBooleansBenchmark.readPlayJson:·gc.count                                                                   128  thrpt    5        52.000                 counts
[info] ListOfBooleansBenchmark.readPlayJson:·gc.time                                                                    128  thrpt    5        44.000                     ms
[info] ListOfBooleansBenchmark.writeCirce                                                                               128  thrpt    5    335513.548 ±    22521.329   ops/s
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                                128  thrpt    5       825.323 ±       55.505  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                           128  thrpt    5      3872.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    128  thrpt    5         0.034 ±        0.289  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               128  thrpt    5         0.156 ±        1.341    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                          128  thrpt    5       878.278 ±      718.160  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                     128  thrpt    5      4122.385 ±     3401.632    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                   128  thrpt    5         0.666 ±        5.735  MB/sec
[info] ListOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                              128  thrpt    5         3.083 ±       26.547    B/op
[info] ListOfBooleansBenchmark.writeCirce:·gc.count                                                                     128  thrpt    5        13.000                 counts
[info] ListOfBooleansBenchmark.writeCirce:·gc.time                                                                      128  thrpt    5        38.000                     ms
[info] ListOfBooleansBenchmark.writeJacksonScala                                                                        128  thrpt    5    590108.979 ±    43782.144   ops/s
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                         128  thrpt    5       437.369 ±       28.380  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                    128  thrpt    5      1168.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       468.985 ±      701.743  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5      1249.552 ±     1833.004    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.266 ±        1.405  MB/sec
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         0.717 ±        3.778    B/op
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.count                                                              128  thrpt    5         7.000                 counts
[info] ListOfBooleansBenchmark.writeJacksonScala:·gc.time                                                               128  thrpt    5        32.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScala                                                                       128  thrpt    5   2524969.670 ±   147032.318   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                        128  thrpt    5      1167.940 ±       68.124  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                   128  thrpt    5       728.000 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.029 ±        0.245  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.018 ±        0.156    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1220.069 ±      718.912  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5       761.259 ±      468.859    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         1.066 ±        6.690  MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         0.656 ±        4.110    B/op
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                             128  thrpt    5        18.000                 counts
[info] ListOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                              128  thrpt    5        44.000                     ms
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                               128  thrpt    5   2507332.544 ±    69137.674   ops/s
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                           128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] ListOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                     128  thrpt    5           ≈ 0                 counts
[info] ListOfBooleansBenchmark.writePlayJson                                                                            128  thrpt    5    433643.341 ±    10350.193   ops/s
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                             128  thrpt    5       623.709 ±       15.001  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                        128  thrpt    5      2264.001 ±        0.001    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       605.428 ±      579.138  MB/sec
[info] ListOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5      2200.175 ±     2134.232    B/op
[info] ListOfBooleansBenchmark.writePlayJson:·gc.count                                                                  128  thrpt    5         9.000                 counts
[info] ListOfBooleansBenchmark.writePlayJson:·gc.time                                                                   128  thrpt    5        36.000                     ms
[info] MapOfIntsToBooleansBenchmark.readCirce                                                                           128  thrpt    5     38929.986 ±     2138.133   ops/s
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                            128  thrpt    5      1312.842 ±       72.136  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                       128  thrpt    5     53080.011 ±        0.003    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.022 ±        0.132  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.880 ±        5.369    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1357.462 ±       23.106  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     54892.875 ±     3131.127    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        27.082 ±      233.188    B/op
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                                 128  thrpt    5        20.000                 counts
[info] MapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                                  128  thrpt    5        32.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJacksonScala                                                                    128  thrpt    5     52961.796 ±     3450.398   ops/s
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                     128  thrpt    5       954.172 ±       61.810  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                128  thrpt    5     28352.008 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.015 ±        0.125  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.438 ±        3.750    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                               128  thrpt    5       946.276 ±      590.611  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     28113.225 ±    17424.019    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         1.199 ±        7.566  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        35.724 ±      226.289    B/op
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                          128  thrpt    5        14.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                           128  thrpt    5        43.000                     ms
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala                                                                   128  thrpt    5     74629.498 ±     3582.436   ops/s
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                    128  thrpt    5      1144.363 ±       55.307  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                               128  thrpt    5     24136.006 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.023 ±        0.183  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.477 ±        3.875    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1152.589 ±      710.992  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     24291.975 ±    14374.647    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5        14.333 ±      123.410    B/op
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                         128  thrpt    5        17.000                 counts
[info] MapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                          128  thrpt    5        30.000                     ms
[info] MapOfIntsToBooleansBenchmark.readPlayJson                                                                        128  thrpt    5     18681.128 ±     1318.989   ops/s
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                         128  thrpt    5      1347.380 ±       94.864  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                    128  thrpt    5    113520.065 ±        0.359    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             128  thrpt    5         0.020 ±        0.129  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        128  thrpt    5         1.737 ±       10.992    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                   128  thrpt    5      1356.266 ±       29.522  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5    114295.101 ±     7320.013    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         1.199 ±        7.782  MB/sec
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5       102.052 ±      662.380    B/op
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                              128  thrpt    5        20.000                 counts
[info] MapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                               128  thrpt    5        46.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala                                                                   128  thrpt    5    150628.187 ±    12715.088   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                    128  thrpt    5      1387.262 ±      117.166  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                               128  thrpt    5     14496.003 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.034 ±        0.277  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.349 ±        2.873    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1356.723 ±       31.258  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     14182.543 ±     1287.254    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         0.933 ±        8.030  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5         9.676 ±       83.315    B/op
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                         128  thrpt    5        20.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                          128  thrpt    5        39.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala                                                                  128  thrpt    5    562609.509 ±    35238.920   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                   128  thrpt    5       620.456 ±       38.682  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                              128  thrpt    5      1736.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                             128  thrpt    5       605.417 ±      579.310  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5      1697.485 ±     1665.399    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                        128  thrpt    5         9.000                 counts
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                         128  thrpt    5        29.000                     ms
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                          128  thrpt    5    502825.965 ±    27750.315   ops/s
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                           128  thrpt    5         5.112 ±        0.283  MB/sec
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                      128  thrpt    5        16.001 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                128  thrpt    5           ≈ 0                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson                                                                       128  thrpt    5     61653.116 ±     3515.676   ops/s
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                        128  thrpt    5       993.765 ±       56.686  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                   128  thrpt    5     25368.007 ±        0.001    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                            128  thrpt    5         0.018 ±        0.147  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                       128  thrpt    5         0.444 ±        3.672    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                  128  thrpt    5      1013.612 ±       27.330  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5     25878.412 ±     1388.744    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.932 ±        8.028  MB/sec
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5        23.916 ±      205.927    B/op
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                             128  thrpt    5        15.000                 counts
[info] MapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                              128  thrpt    5        45.000                     ms
[info] MissingReqFieldBenchmark.readCirce                                                                               N/A  thrpt    5   2182106.180 ±   106180.408   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                                                N/A  thrpt    5      3105.176 ±      151.560  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                                           N/A  thrpt    5      2240.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                    N/A  thrpt    5         0.003 ±        0.007  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                               N/A  thrpt    5         0.002 ±        0.005    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                          N/A  thrpt    5      3063.077 ±        0.601  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                     N/A  thrpt    5      2209.913 ±      107.102    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                                                     N/A  thrpt    5        45.000                 counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                                                      N/A  thrpt    5        37.000                     ms
[info] MissingReqFieldBenchmark.readDslJsonJava                                                                         N/A  thrpt    5    761663.484 ±    37363.091   ops/s
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate                                                          N/A  thrpt    5       360.066 ±       17.555  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                     N/A  thrpt    5       744.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5       333.622 ±        0.964  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       689.444 ±       32.145    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         0.280 ±        2.410    B/op
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.count                                                               N/A  thrpt    5         5.000                 counts
[info] MissingReqFieldBenchmark.readDslJsonJava:·gc.time                                                                N/A  thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                                        N/A  thrpt    5    270947.462 ±     5371.646   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                                         N/A  thrpt    5       504.064 ±        9.709  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                    N/A  thrpt    5      2928.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5       470.823 ±      710.015  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      2737.858 ±     4165.131    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.777 ±        6.688    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                                              N/A  thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                                               N/A  thrpt    5        31.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                                                       N/A  thrpt    5    680680.760 ±     7619.968   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                                        N/A  thrpt    5       428.963 ±        4.848  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                   N/A  thrpt    5       992.001 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                  N/A  thrpt    5       471.822 ±      710.841  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                             N/A  thrpt    5      1091.883 ±     1654.597    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                                             N/A  thrpt    5         7.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                                              N/A  thrpt    5        20.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                                                   N/A  thrpt    5   3816041.677 ±   383809.628   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                                                    N/A  thrpt    5      1221.928 ±      123.222  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                                               N/A  thrpt    5       504.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.016 ±        0.098  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.007 ±        0.042    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5      1221.340 ±      716.181  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       503.835 ±      294.730    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.272 ±        2.339    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                                         N/A  thrpt    5        18.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                                          N/A  thrpt    5        32.000                     ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                                             N/A  thrpt    5   7200951.138 ±   390740.460   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                                              N/A  thrpt    5       585.583 ±       31.507  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                                         N/A  thrpt    5       128.000 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen                                        N/A  thrpt    5       606.655 ±      580.194  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.G1_Old_Gen.norm                                   N/A  thrpt    5       132.274 ±      122.305    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                                                   N/A  thrpt    5         9.000                 counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                                                    N/A  thrpt    5        24.000                     ms
[info] MissingReqFieldBenchmark.readPlayJson                                                                            N/A  thrpt    5    183691.000 ±    13189.236   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                                             N/A  thrpt    5      1228.692 ±       88.267  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                                        N/A  thrpt    5     10528.002 ±        0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.036 ±        0.314  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.319 ±        2.744    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      1218.129 ±      717.145  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     10440.461 ±     6195.437    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         1.066 ±        7.821  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         9.273 ±       68.339    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                                                  N/A  thrpt    5        18.000                 counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                                                   N/A  thrpt    5        49.000                     ms
[info] MutableBitSetBenchmark.readJsoniterScala                                                                         128  thrpt    5    823045.108 ±    57338.165   ops/s
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate                                                          128  thrpt    5        79.477 ±        5.542  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                     128  thrpt    5       152.001 ±        0.001    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5        68.208 ±      587.293  MB/sec
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       126.382 ±     1088.185    B/op
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.count                                                               128  thrpt    5         1.000                 counts
[info] MutableBitSetBenchmark.readJsoniterScala:·gc.time                                                                128  thrpt    5         4.000                     ms
[info] MutableBitSetBenchmark.readPlayJson                                                                              128  thrpt    5     65158.442 ±     2069.856   ops/s
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate                                                               128  thrpt    5      3027.469 ±       96.973  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.alloc.rate.norm                                                          128  thrpt    5     73136.006 ±        0.001    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.013 ±        0.010  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.321 ±        0.257    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      3063.203 ±        1.280  MB/sec
[info] MutableBitSetBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     74003.315 ±     2346.191    B/op
[info] MutableBitSetBenchmark.readPlayJson:·gc.count                                                                    128  thrpt    5        45.000                 counts
[info] MutableBitSetBenchmark.readPlayJson:·gc.time                                                                     128  thrpt    5        42.000                     ms
[info] MutableBitSetBenchmark.writeJacksonScala                                                                         128  thrpt    5   1028056.281 ±    91107.309   ops/s
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate                                                          128  thrpt    5       574.740 ±       50.965  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                     128  thrpt    5       880.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                    128  thrpt    5       605.156 ±      578.635  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                               128  thrpt    5       928.943 ±      915.596    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                             128  thrpt    5         0.266 ±        1.405  MB/sec
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                        128  thrpt    5         0.402 ±        2.119    B/op
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.count                                                               128  thrpt    5         9.000                 counts
[info] MutableBitSetBenchmark.writeJacksonScala:·gc.time                                                                128  thrpt    5        43.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScala                                                                        128  thrpt    5    795154.646 ±    10664.072   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate                                                         128  thrpt    5       222.299 ±        3.088  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                    128  thrpt    5       440.001 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                   128  thrpt    5       268.856 ±      578.744  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                              128  thrpt    5       531.983 ±     1145.224    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                            128  thrpt    5         0.533 ±        4.589  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                       128  thrpt    5         1.053 ±        9.062    B/op
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.count                                                              128  thrpt    5         4.000                 counts
[info] MutableBitSetBenchmark.writeJsoniterScala:·gc.time                                                               128  thrpt    5        13.000                     ms
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc                                                                128  thrpt    5    922856.605 ±    54037.149   ops/s
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                 128  thrpt    5         9.381 ±        0.555  MB/sec
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                            128  thrpt    5        16.000 ±        0.001    B/op
[info] MutableBitSetBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                      128  thrpt    5           ≈ 0                 counts
[info] MutableBitSetBenchmark.writePlayJson                                                                             128  thrpt    5     40523.250 ±     2975.071   ops/s
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate                                                              128  thrpt    5      1700.310 ±      124.591  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.alloc.rate.norm                                                         128  thrpt    5     66048.011 ±        0.004    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.007 ±        0.041  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.290 ±        1.635    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1698.920 ±       24.354  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     66011.263 ±     4446.612    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.932 ±        8.028  MB/sec
[info] MutableBitSetBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5        36.832 ±      317.133    B/op
[info] MutableBitSetBenchmark.writePlayJson:·gc.count                                                                   128  thrpt    5        25.000                 counts
[info] MutableBitSetBenchmark.writePlayJson:·gc.time                                                                    128  thrpt    5        34.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala                                                              128  thrpt    5    244466.247 ±    15014.267   ops/s
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                               128  thrpt    5       956.696 ±       58.861  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                          128  thrpt    5      6160.002 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.007 ±        0.063  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.046 ±        0.397    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5       947.630 ±      589.059  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5      6101.815 ±     3785.802    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5         4.336 ±       37.337    B/op
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.count                                                    128  thrpt    5        14.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readJsoniterScala:·gc.time                                                     128  thrpt    5        30.000                     ms
[info] MutableLongMapOfBooleansBenchmark.readPlayJson                                                                   128  thrpt    5     16365.242 ±      652.971   ops/s
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                    128  thrpt    5       966.110 ±       38.827  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                               128  thrpt    5     92912.027 ±        0.010    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                        128  thrpt    5         0.010 ±        0.080  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   128  thrpt    5         0.924 ±        7.615    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                              128  thrpt    5      1013.147 ±       28.677  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                         128  thrpt    5     97438.842 ±     1989.786    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                       128  thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                  128  thrpt    5       103.420 ±      758.631    B/op
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.count                                                         128  thrpt    5        15.000                 counts
[info] MutableLongMapOfBooleansBenchmark.readPlayJson:·gc.time                                                          128  thrpt    5        49.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala                                                              128  thrpt    5    131666.941 ±     7723.156   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                               128  thrpt    5      1608.904 ±       95.231  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                          128  thrpt    5     19232.003 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                   128  thrpt    5         0.018 ±        0.087  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm              128  thrpt    5         0.214 ±        1.050    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                         128  thrpt    5      1630.413 ±      579.755  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                    128  thrpt    5     19479.830 ±     6404.264    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                  128  thrpt    5         0.932 ±        8.028  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                             128  thrpt    5        11.356 ±       97.779    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.count                                                    128  thrpt    5        24.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJacksonScala:·gc.time                                                     128  thrpt    5        38.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala                                                             128  thrpt    5    354691.318 ±     5239.555   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                              128  thrpt    5      1689.120 ±       25.507  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                         128  thrpt    5      7496.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                  128  thrpt    5         0.035 ±        0.283  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm             128  thrpt    5         0.154 ±        1.263    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5      1699.989 ±      925.543  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5      7542.844 ±     4049.323    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.799 ±        6.881  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         3.568 ±       30.720    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                   128  thrpt    5        25.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                    128  thrpt    5        26.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                     128  thrpt    5    398680.555 ±    28295.339   ops/s
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                      128  thrpt    5      1365.670 ±       97.140  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                 128  thrpt    5      5392.001 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'          128  thrpt    5         0.032 ±        0.269  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm     128  thrpt    5         0.129 ±        1.092    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                128  thrpt    5      1357.382 ±       26.654  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                           128  thrpt    5      5360.797 ±      409.084    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space                         128  thrpt    5         0.799 ±        6.881  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Survivor_Space.norm                    128  thrpt    5         3.242 ±       27.911    B/op
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                           128  thrpt    5        20.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.time                                            128  thrpt    5        30.000                     ms
[info] MutableLongMapOfBooleansBenchmark.writePlayJson                                                                  128  thrpt    5     53629.771 ±     2017.472   ops/s
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                   128  thrpt    5      1306.504 ±       49.371  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                              128  thrpt    5     38344.008 ±        0.001    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                       128  thrpt    5         0.017 ±        0.071  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  128  thrpt    5         0.512 ±        2.079    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                             128  thrpt    5      1288.207 ±      575.839  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                        128  thrpt    5     37824.988 ±    17464.137    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                      128  thrpt    5         0.932 ±        6.687  MB/sec
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                 128  thrpt    5        27.553 ±      197.327    B/op
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.count                                                        128  thrpt    5        19.000                 counts
[info] MutableLongMapOfBooleansBenchmark.writePlayJson:·gc.time                                                         128  thrpt    5        41.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readCirce                                                                    128  thrpt    5     55629.199 ±     4829.614   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate                                                     128  thrpt    5      1252.539 ±      109.425  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                128  thrpt    5     35440.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                         128  thrpt    5         0.019 ±        0.091  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                    128  thrpt    5         0.544 ±        2.604    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                               128  thrpt    5      1221.330 ±      716.286  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                          128  thrpt    5     34492.683 ±    18021.062    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                        128  thrpt    5         0.666 ±        5.734  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                   128  thrpt    5        19.258 ±      165.817    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.count                                                          128  thrpt    5        18.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readCirce:·gc.time                                                           128  thrpt    5        38.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala                                                             128  thrpt    5     92382.193 ±     7132.258   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                              128  thrpt    5       627.411 ±       48.207  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                         128  thrpt    5     10688.005 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                        128  thrpt    5       672.187 ±        0.332  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                   128  thrpt    5     11454.380 ±      870.950    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                 128  thrpt    5         0.533 ±        1.147  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                            128  thrpt    5         9.102 ±       19.610    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.count                                                   128  thrpt    5        10.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJacksonScala:·gc.time                                                    128  thrpt    5        45.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala                                                            128  thrpt    5    197441.968 ±     9481.745   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                             128  thrpt    5       812.788 ±       38.974  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                        128  thrpt    5      6480.002 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.019 ±        0.165  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.155 ±        1.336    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5       878.221 ±      717.933  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5      7002.978 ±     5745.314    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5         5.244 ±       45.154    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.count                                                  128  thrpt    5        13.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readJsoniterScala:·gc.time                                                   128  thrpt    5        34.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson                                                                 128  thrpt    5     21800.179 ±     1422.986   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                  128  thrpt    5      1223.586 ±       79.353  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                             128  thrpt    5     88344.021 ±        0.007    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                      128  thrpt    5         0.014 ±        0.103  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 128  thrpt    5         0.993 ±        7.412    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                            128  thrpt    5      1218.893 ±      720.816  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                       128  thrpt    5     88026.539 ±    52419.916    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                     128  thrpt    5         1.065 ±        7.820  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                128  thrpt    5        77.094 ±      563.482    B/op
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.count                                                       128  thrpt    5        18.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.readPlayJson:·gc.time                                                        128  thrpt    5        45.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala                                                            128  thrpt    5    162377.834 ±     8326.683   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                             128  thrpt    5      1044.853 ±       53.908  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                        128  thrpt    5     10128.003 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                 128  thrpt    5         0.022 ±        0.119  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm            128  thrpt    5         0.218 ±        1.153    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                       128  thrpt    5      1081.864 ±      602.283  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                  128  thrpt    5     10477.817 ±     5437.637    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                128  thrpt    5         1.066 ±        7.821  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                           128  thrpt    5        10.368 ±       75.895    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.count                                                  128  thrpt    5        16.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJacksonScala:·gc.time                                                   128  thrpt    5        49.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala                                                           128  thrpt    5    548546.165 ±     8358.709   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                            128  thrpt    5       610.602 ±        9.197  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                       128  thrpt    5      1752.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                      128  thrpt    5       605.506 ±      579.347  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                 128  thrpt    5      1737.765 ±     1667.275    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.count                                                 128  thrpt    5         9.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScala:·gc.time                                                  128  thrpt    5        29.000                     ms
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc                                                   128  thrpt    5    572410.346 ±     3648.667   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                    128  thrpt    5        11.639 ±        0.076  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                               128  thrpt    5        32.001 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                         128  thrpt    5           ≈ 0                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson                                                                128  thrpt    5     62295.322 ±     3327.929   ops/s
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                 128  thrpt    5      1230.076 ±       65.600  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                            128  thrpt    5     31080.007 ±        0.001    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                     128  thrpt    5         0.017 ±        0.138  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                128  thrpt    5         0.423 ±        3.468    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                           128  thrpt    5      1220.252 ±      722.222  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                      128  thrpt    5     30830.074 ±    18138.713    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                    128  thrpt    5         1.066 ±        7.820  MB/sec
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                               128  thrpt    5        27.420 ±      201.530    B/op
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.count                                                      128  thrpt    5        18.000                 counts
[info] MutableMapOfIntsToBooleansBenchmark.writePlayJson:·gc.time                                                       128  thrpt    5        43.000                     ms
[info] MutableSetOfIntsBenchmark.readCirce                                                                              128  thrpt    5    105492.903 ±     5517.941   ops/s
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1845.033 ±       96.535  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5     27528.004 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.025 ±        0.199  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.374 ±        3.009    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1837.350 ±      720.727  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     27400.707 ±     9999.147    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        10.086 ±       86.845    B/op
[info] MutableSetOfIntsBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        27.000                 counts
[info] MutableSetOfIntsBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        27.000                     ms
[info] MutableSetOfIntsBenchmark.readJacksonScala                                                                       128  thrpt    5    149636.060 ±     1696.311   ops/s
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       639.731 ±        7.504  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      6728.003 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       672.320 ±        1.154  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      7070.793 ±       82.645    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.400 ±        1.405  MB/sec
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         4.206 ±       14.786    B/op
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5        10.000                 counts
[info] MutableSetOfIntsBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        45.000                     ms
[info] MutableSetOfIntsBenchmark.readJsoniterScala                                                                      128  thrpt    5    247217.772 ±    15194.718   ops/s
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       880.791 ±       54.315  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5      5608.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                           128  thrpt    5         0.011 ±        0.072  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      128  thrpt    5         0.073 ±        0.464    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       878.940 ±      708.729  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      5603.459 ±     4654.624    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.666 ±        5.735  MB/sec
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         4.324 ±       37.233    B/op
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5        13.000                 counts
[info] MutableSetOfIntsBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        35.000                     ms
[info] MutableSetOfIntsBenchmark.readPlayJson                                                                           128  thrpt    5     40963.529 ±     3165.625   ops/s
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      1697.984 ±      131.136  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     65248.010 ±        0.002    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.020 ±        0.137  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.790 ±        5.453    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      1699.318 ±       20.585  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     65317.522 ±     4384.851    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                               128  thrpt    5         0.799 ±        6.882  MB/sec
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                          128  thrpt    5        31.806 ±      273.855    B/op
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        25.000                 counts
[info] MutableSetOfIntsBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        36.000                     ms
[info] MutableSetOfIntsBenchmark.writeCirce                                                                             128  thrpt    5    240269.409 ±     8263.759   ops/s
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5      1382.514 ±       47.896  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      9056.002 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.025 ±        0.204  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.164 ±        1.326    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1358.283 ±       22.639  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      8897.672 ±      238.846    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.737  MB/sec
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         4.337 ±       37.341    B/op
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        20.000                 counts
[info] MutableSetOfIntsBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        31.000                     ms
[info] MutableSetOfIntsBenchmark.writeJacksonScala                                                                      128  thrpt    5    512608.064 ±    10630.756   ops/s
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       411.631 ±        8.436  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1264.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       402.958 ±      577.837  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1236.969 ±     1766.243    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±        1.147  MB/sec
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.406 ±        3.497    B/op
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         6.000                 counts
[info] MutableSetOfIntsBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        28.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScala                                                                     128  thrpt    5    673389.066 ±    53282.131   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       362.867 ±       28.839  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       848.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       336.441 ±        0.149  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       786.510 ±       61.819    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5         5.000                 counts
[info] MutableSetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        16.000                     ms
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5    706213.972 ±     9968.237   ops/s
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5         7.179 ±        0.097  MB/sec
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        16.001 ±        0.001    B/op
[info] MutableSetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson                                                                          128  thrpt    5     31094.068 ±     1219.211   ops/s
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5      1549.312 ±       61.044  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5     78418.827 ±       24.222    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                               128  thrpt    5         0.043 ±        0.356  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                          128  thrpt    5         2.134 ±       17.804    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5      1562.629 ±      734.929  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5     79081.096 ±    36635.614    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                              128  thrpt    5         0.799 ±        6.882  MB/sec
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                         128  thrpt    5        40.308 ±      347.063    B/op
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5        23.000                 counts
[info] MutableSetOfIntsBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        33.000                     ms
[info] PrimitivesBenchmark.readCirce                                                                                    N/A  thrpt    5    612857.658 ±    38601.720   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1896.899 ±      119.986  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5      4872.001 ±        0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.020 ±        0.161  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.050 ±        0.413    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1903.974 ±      710.871  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5      4888.842 ±     1731.938    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.666 ±        5.734  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5         1.707 ±       14.694    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        28.000                 counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        31.000                     ms
[info] PrimitivesBenchmark.readJacksonScala                                                                             N/A  thrpt    5   1327263.962 ±    95981.809   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5      1005.212 ±       72.820  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5      1192.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  N/A  thrpt    5         0.052 ±        0.451  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             N/A  thrpt    5         0.061 ±        0.526    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5      1013.866 ±       25.671  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5      1202.513 ±       66.845    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.933 ±        6.690  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5         1.105 ±        7.918    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5        15.000                 counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        48.000                     ms
[info] PrimitivesBenchmark.readJsoniterScala                                                                            N/A  thrpt    5   7621756.020 ±   514696.713   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       232.430 ±       15.779  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5        48.000 ±        0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       202.222 ±      710.840  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5        41.797 ±      146.974    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         3.000                 counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5         9.000                     ms
[info] PrimitivesBenchmark.readPlayJson                                                                                 N/A  thrpt    5    202896.892 ±     3837.610   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5      1437.588 ±       27.269  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5     11152.002 ±        0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.037 ±        0.263  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         0.286 ±        2.051    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5      1424.643 ±      597.349  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5     11048.016 ±     4445.360    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.932 ±        6.688  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5         7.261 ±       52.069    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        21.000                 counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        44.000                     ms
[info] PrimitivesBenchmark.writeCirce                                                                                   N/A  thrpt    5    835574.812 ±    43999.486   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                                                    N/A  thrpt    5      1359.059 ±       71.964  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                                               N/A  thrpt    5      2560.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                        N/A  thrpt    5         0.029 ±        0.251  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                   N/A  thrpt    5         0.054 ±        0.469    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                              N/A  thrpt    5      1357.556 ±       23.531  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                         N/A  thrpt    5      2557.616 ±      161.332    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                       N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                  N/A  thrpt    5         1.245 ±       10.718    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                                         N/A  thrpt    5        20.000                 counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                                          N/A  thrpt    5        33.000                     ms
[info] PrimitivesBenchmark.writeJacksonScala                                                                            N/A  thrpt    5   2146519.606 ±   222129.629   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       883.666 ±       91.175  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5       648.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.035 ±        0.300  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.026 ±        0.222    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       876.383 ±      714.011  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5       643.768 ±      542.473    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.932 ±        8.029  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5         0.700 ±        6.025    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        13.000                 counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        46.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5   5955667.399 ±   282231.912   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       665.960 ±       31.622  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5       176.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       672.760 ±        0.127  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       177.819 ±        8.489    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5        10.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        32.000                     ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5   5872219.917 ±    64966.184   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5       358.148 ±        3.858  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5        96.000 ±        0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       403.636 ±      579.207  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       108.190 ±      155.183    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5         6.000                 counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                                          N/A  thrpt    5        19.000                     ms
[info] PrimitivesBenchmark.writePlayJson                                                                                N/A  thrpt    5    313266.338 ±    24482.855   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                                                 N/A  thrpt    5      1614.654 ±      125.819  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                                            N/A  thrpt    5      8112.001 ±        0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                     N/A  thrpt    5         0.039 ±        0.320  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                N/A  thrpt    5         0.200 ±        1.654    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                           N/A  thrpt    5      1629.541 ±      613.768  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                      N/A  thrpt    5      8183.467 ±     2887.439    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                    N/A  thrpt    5         1.066 ±        7.823  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                               N/A  thrpt    5         5.494 ±       40.377    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                                                      N/A  thrpt    5        24.000                 counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                                                       N/A  thrpt    5        41.000                     ms
[info] SetOfIntsBenchmark.readCirce                                                                                     128  thrpt    5     67008.969 ±     3633.949   ops/s
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate                                                                      128  thrpt    5      1916.140 ±      103.516  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                                                 128  thrpt    5     45008.006 ±        0.001    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                          128  thrpt    5         0.031 ±        0.179  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                     128  thrpt    5         0.722 ±        4.252    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                                128  thrpt    5      1905.458 ±      716.096  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                           128  thrpt    5     44777.764 ±    17614.303    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                         128  thrpt    5         0.666 ±        5.735  MB/sec
[info] SetOfIntsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                    128  thrpt    5        15.824 ±      136.251    B/op
[info] SetOfIntsBenchmark.readCirce:·gc.count                                                                           128  thrpt    5        28.000                 counts
[info] SetOfIntsBenchmark.readCirce:·gc.time                                                                            128  thrpt    5        27.000                     ms
[info] SetOfIntsBenchmark.readJacksonScala                                                                              128  thrpt    5     64849.234 ±     5073.828   ops/s
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                                               128  thrpt    5       997.313 ±       78.210  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                          128  thrpt    5     24208.006 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.020 ±        0.102  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.473 ±        2.455    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1013.844 ±       27.149  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5     24614.813 ±     1330.230    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.932 ±        6.688  MB/sec
[info] SetOfIntsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5        22.541 ±      160.835    B/op
[info] SetOfIntsBenchmark.readJacksonScala:·gc.count                                                                    128  thrpt    5        15.000                 counts
[info] SetOfIntsBenchmark.readJacksonScala:·gc.time                                                                     128  thrpt    5        43.000                     ms
[info] SetOfIntsBenchmark.readJsoniterScala                                                                             128  thrpt    5    111635.645 ±     6153.159   ops/s
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                                              128  thrpt    5      1640.936 ±       90.227  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                         128  thrpt    5     23136.004 ±        0.001    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.028 ±        0.206  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.395 ±        2.931    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5      1632.456 ±      597.838  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5     23009.345 ±     8039.594    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.666 ±        5.735  MB/sec
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         9.496 ±       81.762    B/op
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.count                                                                   128  thrpt    5        24.000                 counts
[info] SetOfIntsBenchmark.readJsoniterScala:·gc.time                                                                    128  thrpt    5        24.000                     ms
[info] SetOfIntsBenchmark.readPlayJson                                                                                  128  thrpt    5     47956.250 ±     3094.914   ops/s
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                                                   128  thrpt    5      2463.005 ±      159.938  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                              128  thrpt    5     80840.009 ±        0.003    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                       128  thrpt    5         0.010 ±        0.019  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                  128  thrpt    5         0.320 ±        0.617    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                             128  thrpt    5      2450.598 ±      585.070  MB/sec
[info] SetOfIntsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                        128  thrpt    5     80486.310 ±    22586.486    B/op
[info] SetOfIntsBenchmark.readPlayJson:·gc.count                                                                        128  thrpt    5        36.000                 counts
[info] SetOfIntsBenchmark.readPlayJson:·gc.time                                                                         128  thrpt    5        33.000                     ms
[info] SetOfIntsBenchmark.writeCirce                                                                                    128  thrpt    5    213931.796 ±     8492.491   ops/s
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate                                                                     128  thrpt    5      1247.244 ±       49.237  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                                                128  thrpt    5      9176.002 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         128  thrpt    5         0.015 ±        0.091  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    128  thrpt    5         0.110 ±        0.670    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                               128  thrpt    5      1221.426 ±      716.677  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                          128  thrpt    5      8991.810 ±     5435.697    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                        128  thrpt    5         0.666 ±        5.734  MB/sec
[info] SetOfIntsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                                   128  thrpt    5         4.892 ±       42.121    B/op
[info] SetOfIntsBenchmark.writeCirce:·gc.count                                                                          128  thrpt    5        18.000                 counts
[info] SetOfIntsBenchmark.writeCirce:·gc.time                                                                           128  thrpt    5        31.000                     ms
[info] SetOfIntsBenchmark.writeJacksonScala                                                                             128  thrpt    5    468457.865 ±    48478.381   ops/s
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                                              128  thrpt    5       411.958 ±       42.306  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                         128  thrpt    5      1384.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       403.053 ±      578.342  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      1360.957 ±     2064.642    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.133 ±        1.147  MB/sec
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         0.435 ±        3.749    B/op
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.count                                                                   128  thrpt    5         6.000                 counts
[info] SetOfIntsBenchmark.writeJacksonScala:·gc.time                                                                    128  thrpt    5        28.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScala                                                                            128  thrpt    5    788111.350 ±    45878.700   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                             128  thrpt    5       424.623 ±       24.897  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                        128  thrpt    5       848.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                       128  thrpt    5       470.971 ±      709.804  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  128  thrpt    5       938.254 ±     1384.410    B/op
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.count                                                                  128  thrpt    5         7.000                 counts
[info] SetOfIntsBenchmark.writeJsoniterScala:·gc.time                                                                   128  thrpt    5        23.000                     ms
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc                                                                    128  thrpt    5    818566.114 ±     7993.030   ops/s
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                     128  thrpt    5         8.321 ±        0.082  MB/sec
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                                128  thrpt    5        16.001 ±        0.001    B/op
[info] SetOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                          128  thrpt    5           ≈ 0                 counts
[info] SetOfIntsBenchmark.writePlayJson                                                                                 128  thrpt    5     30028.077 ±     2459.254   ops/s
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                                                  128  thrpt    5      1495.986 ±      121.964  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                             128  thrpt    5     78419.243 ±       27.505    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      128  thrpt    5         0.039 ±        0.334  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 128  thrpt    5         2.020 ±       17.244    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                            128  thrpt    5      1561.611 ±      704.533  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                       128  thrpt    5     82020.412 ±    42300.127    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                                     128  thrpt    5         0.799 ±        6.882  MB/sec
[info] SetOfIntsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                                128  thrpt    5        43.182 ±      371.813    B/op
[info] SetOfIntsBenchmark.writePlayJson:·gc.count                                                                       128  thrpt    5        23.000                 counts
[info] SetOfIntsBenchmark.writePlayJson:·gc.time                                                                        128  thrpt    5        41.000                     ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                                            N/A  thrpt    5   4310400.375 ±   167800.713   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                             N/A  thrpt    5      3176.762 ±      125.186  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                        N/A  thrpt    5      1160.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                 N/A  thrpt    5         0.003 ±        0.008  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                            N/A  thrpt    5         0.001 ±        0.003    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5      3199.528 ±      717.630  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5      1168.295 ±      256.156    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                                                  N/A  thrpt    5        47.000                 counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                                                   N/A  thrpt    5        40.000                     ms
[info] StringOfAsciiCharsBenchmark.readDslJsonJava                                                                      N/A  thrpt    5   7530513.617 ±   296210.801   ops/s
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                       N/A  thrpt    5       803.790 ±       31.812  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                                  N/A  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       801.439 ±      700.672  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5       167.715 ±      150.957    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         1.599 ±       12.380  MB/sec
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         0.336 ±        2.600    B/op
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                            N/A  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                             N/A  thrpt    5        58.000                     ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                                                     N/A  thrpt    5   3758943.829 ±   122444.217   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                      N/A  thrpt    5      1948.940 ±       63.803  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                 N/A  thrpt    5       816.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.025 ±        0.201  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.011 ±        0.085    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5      1972.738 ±      583.678  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       825.949 ±      242.338    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.339 ±        2.921    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                                           N/A  thrpt    5        29.000                 counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                                            N/A  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                                                    N/A  thrpt    5   6630862.398 ±   399618.935   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                     N/A  thrpt    5       707.768 ±       42.638  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       168.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       674.097 ±        0.226  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5       160.039 ±        9.598    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space                                        N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                   N/A  thrpt    5         0.160 ±        1.377    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                          N/A  thrpt    5        10.000                 counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                           N/A  thrpt    5        27.000                     ms
[info] StringOfAsciiCharsBenchmark.readPlayJson                                                                         N/A  thrpt    5   4298531.716 ±   390337.822   ops/s
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                          N/A  thrpt    5      2315.824 ±      210.108  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                     N/A  thrpt    5       848.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.022 ±        0.182  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.008 ±        0.066    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      2314.473 ±      586.298  MB/sec
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5       848.266 ±      251.583    B/op
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.count                                                               N/A  thrpt    5        34.000                 counts
[info] StringOfAsciiCharsBenchmark.readPlayJson:·gc.time                                                                N/A  thrpt    5        31.000                     ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                                           N/A  thrpt    5   2786664.982 ±   152111.463   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                            N/A  thrpt    5      1161.412 ±       64.113  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                       N/A  thrpt    5       656.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                N/A  thrpt    5         0.026 ±        0.223  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           N/A  thrpt    5         0.015 ±        0.127    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5      1220.010 ±      716.992  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5       689.666 ±      420.139    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                               N/A  thrpt    5         0.666 ±        5.735  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                          N/A  thrpt    5         0.378 ±        3.258    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                                                 N/A  thrpt    5        18.000                 counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                                                  N/A  thrpt    5        34.000                     ms
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava                                                                     N/A  thrpt    5   8414381.342 ±   362916.832   ops/s
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                      N/A  thrpt    5       812.549 ±       34.981  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                                 N/A  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5       801.555 ±      700.333  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       149.877 ±      129.232    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         1.465 ±       11.239  MB/sec
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.279 ±        2.145    B/op
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                           N/A  thrpt    5        12.000                 counts
[info] StringOfAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                            N/A  thrpt    5        56.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                                                    N/A  thrpt    5   1855276.816 ±    34725.524   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                     N/A  thrpt    5       575.221 ±       10.908  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                N/A  thrpt    5       488.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                               N/A  thrpt    5       538.224 ±      709.632  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                          N/A  thrpt    5       456.408 ±      599.443    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                          N/A  thrpt    5         8.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                           N/A  thrpt    5        33.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                                                   N/A  thrpt    5   8795256.918 ±   630789.424   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                    N/A  thrpt    5       849.304 ±       61.028  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                               N/A  thrpt    5       152.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.035 ±        0.299  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.006 ±        0.053    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       876.937 ±      718.095  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       156.917 ±      127.464    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.141 ±        1.212    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                         N/A  thrpt    5        13.000                 counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                          N/A  thrpt    5        36.000                     ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                           N/A  thrpt    5   8142491.542 ±    60075.148   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                            N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                       N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                 N/A  thrpt    5           ≈ 0                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                                        N/A  thrpt    5   3149778.892 ±    48106.882   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                         N/A  thrpt    5      1008.566 ±       15.264  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                    N/A  thrpt    5       504.000 ±        0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.027 ±        0.146  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.013 ±        0.073    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1014.704 ±       23.695  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5       507.077 ±       16.316    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.400 ±        3.440    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                                              N/A  thrpt    5        15.000                 counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                                               N/A  thrpt    5        35.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                                         N/A  thrpt    5    955336.771 ±    41059.919   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                                          N/A  thrpt    5      1602.290 ±       68.605  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                                     N/A  thrpt    5      2640.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                              N/A  thrpt    5         0.017 ±        0.129  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                         N/A  thrpt    5         0.028 ±        0.213    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                    N/A  thrpt    5      1631.042 ±      580.957  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                               N/A  thrpt    5      2688.777 ±     1014.247    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                             N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                        N/A  thrpt    5         1.105 ±        9.512    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                                               N/A  thrpt    5        24.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                                                N/A  thrpt    5        29.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava                                                                   N/A  thrpt    5   2920801.109 ±   128089.409   ops/s
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate                                                    N/A  thrpt    5       816.565 ±       36.136  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.alloc.rate.norm                                               N/A  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'                        N/A  thrpt    5         0.096 ±        0.824  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                   N/A  thrpt    5         0.052 ±        0.448    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen                                              N/A  thrpt    5       869.852 ±      711.553  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Old_Gen.norm                                         N/A  thrpt    5       468.988 ±      388.866    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space                                       N/A  thrpt    5         1.332 ±       11.471  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.churn.G1_Survivor_Space.norm                                  N/A  thrpt    5         0.725 ±        6.239    B/op
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.count                                                         N/A  thrpt    5        13.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readDslJsonJava:·gc.time                                                          N/A  thrpt    5        59.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                                                  N/A  thrpt    5   1063070.950 ±    24001.729   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                                                   N/A  thrpt    5       735.007 ±       16.420  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                              N/A  thrpt    5      1088.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                       N/A  thrpt    5         0.013 ±        0.111  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                  N/A  thrpt    5         0.019 ±        0.165    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       740.190 ±      572.337  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5      1095.571 ±      843.518    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                      N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                 N/A  thrpt    5         1.183 ±       10.184    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                                        N/A  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                                         N/A  thrpt    5        43.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                                                 N/A  thrpt    5   1957515.680 ±    17722.759   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                                                  N/A  thrpt    5       547.185 ±        4.982  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       440.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       539.232 ±      710.813  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5       433.842 ±      574.480    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                                                       N/A  thrpt    5         8.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                                        N/A  thrpt    5        21.000                     ms
[info] StringOfNonAsciiCharsBenchmark.readPlayJson                                                                      N/A  thrpt    5   1098376.861 ±    54288.309   ops/s
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate                                                       N/A  thrpt    5       781.514 ±       38.836  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.alloc.rate.norm                                                  N/A  thrpt    5      1120.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                           N/A  thrpt    5         0.020 ±        0.169  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                      N/A  thrpt    5         0.028 ±        0.239    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                 N/A  thrpt    5       740.765 ±      577.450  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                            N/A  thrpt    5      1060.989 ±      806.283    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                          N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                     N/A  thrpt    5         1.132 ±        9.746    B/op
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.count                                                            N/A  thrpt    5        11.000                 counts
[info] StringOfNonAsciiCharsBenchmark.readPlayJson:·gc.time                                                             N/A  thrpt    5        42.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                                        N/A  thrpt    5   1688157.279 ±    49966.128   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                                         N/A  thrpt    5      1372.950 ±       40.312  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                                                    N/A  thrpt    5      1280.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                             N/A  thrpt    5         0.021 ±        0.131  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                        N/A  thrpt    5         0.019 ±        0.121    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                   N/A  thrpt    5      1425.713 ±      595.212  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                              N/A  thrpt    5      1329.490 ±      568.255    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                            N/A  thrpt    5         0.666 ±        5.736  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                       N/A  thrpt    5         0.619 ±        5.328    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                                              N/A  thrpt    5        21.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                                               N/A  thrpt    5        38.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava                                                                  N/A  thrpt    5   2902637.257 ±    10108.761   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate                                                   N/A  thrpt    5       678.627 ±        2.297  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.alloc.rate.norm                                              N/A  thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen                                             N/A  thrpt    5       667.414 ±        0.128  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.churn.G1_Old_Gen.norm                                        N/A  thrpt    5       361.920 ±        1.252    B/op
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.count                                                        N/A  thrpt    5        10.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeDslJsonJava:·gc.time                                                         N/A  thrpt    5        48.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                                                 N/A  thrpt    5   2461286.336 ±    70930.912   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                                                  N/A  thrpt    5       988.221 ±       28.362  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                             N/A  thrpt    5       632.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                      N/A  thrpt    5         0.031 ±        0.177  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                 N/A  thrpt    5         0.020 ±        0.115    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                            N/A  thrpt    5       946.342 ±      572.213  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                       N/A  thrpt    5       605.274 ±      367.250    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                     N/A  thrpt    5         1.066 ±        6.437  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                N/A  thrpt    5         0.686 ±        4.168    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                                                       N/A  thrpt    5        14.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                                        N/A  thrpt    5        39.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                                                N/A  thrpt    5   2704108.897 ±   194850.815   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                                                 N/A  thrpt    5       632.171 ±       45.612  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                            N/A  thrpt    5       368.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                           N/A  thrpt    5       605.540 ±      579.454  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                      N/A  thrpt    5       352.366 ±      335.595    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                    N/A  thrpt    5         0.133 ±        1.147  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                               N/A  thrpt    5         0.079 ±        0.678    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                                      N/A  thrpt    5         9.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                                       N/A  thrpt    5        28.000                     ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                                        N/A  thrpt    5   2994985.239 ±    12306.167   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                         N/A  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                    N/A  thrpt    5        ≈ 10⁻⁴                   B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                              N/A  thrpt    5           ≈ 0                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                                                     N/A  thrpt    5   2292553.862 ±    80475.902   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                                      N/A  thrpt    5      1048.713 ±       36.452  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                                                 N/A  thrpt    5       720.000 ±        0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                          N/A  thrpt    5         0.012 ±        0.065  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     N/A  thrpt    5         0.008 ±        0.045    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                N/A  thrpt    5      1014.719 ±       23.448  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                           N/A  thrpt    5       696.722 ±       35.108    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space                                         N/A  thrpt    5         0.799 ±        6.881  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.G1_Survivor_Space.norm                                    N/A  thrpt    5         0.546 ±        4.703    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                                           N/A  thrpt    5        15.000                 counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                                            N/A  thrpt    5        35.000                     ms
[info] TwitterAPIBenchmark.readCirce                                                                                    N/A  thrpt    5     10747.582 ±     1994.416   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                                                     N/A  thrpt    5      1574.713 ±      285.356  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                                                N/A  thrpt    5    230601.515 ±      936.647    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                         N/A  thrpt    5         0.005 ±        0.028  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                    N/A  thrpt    5         0.744 ±        4.128    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                               N/A  thrpt    5      1561.721 ±      726.809  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                          N/A  thrpt    5    228395.505 ±    83942.487    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                        N/A  thrpt    5         0.799 ±        6.883  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                                   N/A  thrpt    5       116.014 ±      998.918    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                                          N/A  thrpt    5        23.000                 counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                                           N/A  thrpt    5        43.000                     ms
[info] TwitterAPIBenchmark.readJacksonScala                                                                             N/A  thrpt    5     14175.445 ±     1155.955   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                                              N/A  thrpt    5       200.231 ±       16.586  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                         N/A  thrpt    5     22233.469 ±       33.203    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                        N/A  thrpt    5       201.135 ±      707.019  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                                   N/A  thrpt    5     22474.195 ±    79028.328    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                                 N/A  thrpt    5         0.266 ±        2.294  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                            N/A  thrpt    5        30.144 ±      259.553    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                                                   N/A  thrpt    5         3.000                 counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                                                    N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                                            N/A  thrpt    5     36955.869 ±     3260.628   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                                             N/A  thrpt    5       342.251 ±       30.435  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     14576.012 ±        0.007    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       337.058 ±        0.260  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     14360.882 ±     1260.900    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                                                  N/A  thrpt    5         5.000                 counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                                                   N/A  thrpt    5        15.000                     ms
[info] TwitterAPIBenchmark.readPlayJson                                                                                 N/A  thrpt    5      2888.941 ±      866.570   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                                                  N/A  thrpt    5       916.612 ±      274.309  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                                             N/A  thrpt    5    499195.362 ±      417.337    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                      N/A  thrpt    5         0.008 ±        0.071  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                                 N/A  thrpt    5         4.294 ±       36.973    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                            N/A  thrpt    5       943.843 ±      586.382  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                       N/A  thrpt    5    511056.183 ±   187316.346    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space                                                     N/A  thrpt    5         0.933 ±        8.031  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.G1_Survivor_Space.norm                                                N/A  thrpt    5       494.778 ±     4260.188    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                                                       N/A  thrpt    5        14.000                 counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                                        N/A  thrpt    5        90.000                     ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                                            N/A  thrpt    5     56335.056 ±     3487.627   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                                             N/A  thrpt    5       719.362 ±       44.661  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                        N/A  thrpt    5     20100.027 ±        0.191    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                       N/A  thrpt    5       670.026 ±        0.163  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                                  N/A  thrpt    5     18725.409 ±     1166.013    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                                N/A  thrpt    5         0.799 ±        6.882  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                           N/A  thrpt    5        21.943 ±      188.935    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                                                  N/A  thrpt    5        10.000                 counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                                                   N/A  thrpt    5        50.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                                           N/A  thrpt    5     85421.142 ±     8656.120   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                                            N/A  thrpt    5       560.036 ±       56.688  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                       N/A  thrpt    5     10320.005 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                      N/A  thrpt    5       605.428 ±      579.166  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                                 N/A  thrpt    5     11136.902 ±    10406.776    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                                                 N/A  thrpt    5         9.000                 counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                                                  N/A  thrpt    5        29.000                     ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                                                   N/A  thrpt    5    106581.604 ±      462.807   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                                    N/A  thrpt    5        16.252 ±        0.075  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                               N/A  thrpt    5       240.004 ±        0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                         N/A  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.readCirce                                                                              128  thrpt    5    315404.107 ±    19110.765   ops/s
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate                                                               128  thrpt    5      1689.483 ±      102.200  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                                          128  thrpt    5      8432.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                   128  thrpt    5         0.024 ±        0.173  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                              128  thrpt    5         0.117 ±        0.856    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen                                                         128  thrpt    5      1700.370 ±       11.716  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Old_Gen.norm                                                    128  thrpt    5      8488.070 ±      535.640    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space                                                  128  thrpt    5         0.666 ±        5.734  MB/sec
[info] VectorOfBooleansBenchmark.readCirce:·gc.churn.G1_Survivor_Space.norm                                             128  thrpt    5         3.303 ±       28.440    B/op
[info] VectorOfBooleansBenchmark.readCirce:·gc.count                                                                    128  thrpt    5        25.000                 counts
[info] VectorOfBooleansBenchmark.readCirce:·gc.time                                                                     128  thrpt    5        26.000                     ms
[info] VectorOfBooleansBenchmark.readJacksonScala                                                                       128  thrpt    5    404718.877 ±    33256.600   ops/s
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                                        128  thrpt    5       493.704 ±       40.680  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                                                   128  thrpt    5      1920.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen                                                  128  thrpt    5       537.395 ±      707.677  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Old_Gen.norm                                             128  thrpt    5      2090.789 ±     2761.509    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space                                           128  thrpt    5         0.266 ±        1.405  MB/sec
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.churn.G1_Survivor_Space.norm                                      128  thrpt    5         1.039 ±        5.482    B/op
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.count                                                             128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.readJacksonScala:·gc.time                                                              128  thrpt    5        35.000                     ms
[info] VectorOfBooleansBenchmark.readJsoniterScala                                                                      128  thrpt    5   1140654.920 ±    23702.422   ops/s
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                                       128  thrpt    5       597.147 ±       12.043  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                                  128  thrpt    5       824.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       539.288 ±      711.051  MB/sec
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5       744.802 ±      989.006    B/op
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.readJsoniterScala:·gc.time                                                             128  thrpt    5        23.000                     ms
[info] VectorOfBooleansBenchmark.readPlayJson                                                                           128  thrpt    5     98781.810 ±     2681.223   ops/s
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                                            128  thrpt    5      3433.664 ±       91.652  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                                       128  thrpt    5     54704.004 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'                                128  thrpt    5         0.003 ±        0.006  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                           128  thrpt    5         0.045 ±        0.096    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen                                                      128  thrpt    5      3472.242 ±      586.099  MB/sec
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.churn.G1_Old_Gen.norm                                                 128  thrpt    5     55316.390 ±     8937.761    B/op
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.count                                                                 128  thrpt    5        51.000                 counts
[info] VectorOfBooleansBenchmark.readPlayJson:·gc.time                                                                  128  thrpt    5        44.000                     ms
[info] VectorOfBooleansBenchmark.writeCirce                                                                             128  thrpt    5    338408.352 ±     8925.160   ops/s
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                                              128  thrpt    5       846.256 ±       22.377  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                                         128  thrpt    5      3936.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'                                  128  thrpt    5         0.029 ±        0.192  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                             128  thrpt    5         0.132 ±        0.891    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen                                                        128  thrpt    5       810.796 ±      710.650  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Old_Gen.norm                                                   128  thrpt    5      3770.211 ±     3284.332    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space                                                 128  thrpt    5         0.799 ±        5.561  MB/sec
[info] VectorOfBooleansBenchmark.writeCirce:·gc.churn.G1_Survivor_Space.norm                                            128  thrpt    5         3.737 ±       25.970    B/op
[info] VectorOfBooleansBenchmark.writeCirce:·gc.count                                                                   128  thrpt    5        12.000                 counts
[info] VectorOfBooleansBenchmark.writeCirce:·gc.time                                                                    128  thrpt    5        39.000                     ms
[info] VectorOfBooleansBenchmark.writeJacksonScala                                                                      128  thrpt    5    714406.377 ±    68583.831   ops/s
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                                       128  thrpt    5       544.841 ±       53.069  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                                  128  thrpt    5      1200.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen                                                 128  thrpt    5       537.652 ±      708.679  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Old_Gen.norm                                            128  thrpt    5      1185.721 ±     1578.136    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space                                          128  thrpt    5         0.133 ±        1.147  MB/sec
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.churn.G1_Survivor_Space.norm                                     128  thrpt    5         0.286 ±        2.465    B/op
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.count                                                            128  thrpt    5         8.000                 counts
[info] VectorOfBooleansBenchmark.writeJacksonScala:·gc.time                                                             128  thrpt    5        36.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScala                                                                     128  thrpt    5   1869358.786 ±   130363.999   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                                                      128  thrpt    5       864.577 ±       60.632  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                                 128  thrpt    5       728.000 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'                          128  thrpt    5         0.013 ±        0.081  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.CodeHeap_'non-profiled_nmethods'.norm                     128  thrpt    5         0.011 ±        0.067    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen                                                128  thrpt    5       877.690 ±      706.922  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Old_Gen.norm                                           128  thrpt    5       737.022 ±      548.306    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space                                         128  thrpt    5         0.799 ±        6.882  MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.churn.G1_Survivor_Space.norm                                    128  thrpt    5         0.661 ±        5.693    B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.count                                                           128  thrpt    5        13.000                 counts
[info] VectorOfBooleansBenchmark.writeJsoniterScala:·gc.time                                                            128  thrpt    5        32.000                     ms
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc                                                             128  thrpt    5   2009377.644 ±    25510.219   ops/s
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                              128  thrpt    5        ≈ 10⁻⁴                 MB/sec
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                                         128  thrpt    5        ≈ 10⁻⁴                   B/op
[info] VectorOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                                                   128  thrpt    5           ≈ 0                 counts
[info] VectorOfBooleansBenchmark.writePlayJson                                                                          128  thrpt    5    416481.386 ±    12283.280   ops/s
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                                           128  thrpt    5       622.343 ±       18.496  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                                                      128  thrpt    5      2352.001 ±        0.001    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen                                                     128  thrpt    5       605.496 ±      579.365  MB/sec
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.churn.G1_Old_Gen.norm                                                128  thrpt    5      2286.577 ±     2166.553    B/op
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.count                                                                128  thrpt    5         9.000                 counts
[info] VectorOfBooleansBenchmark.writePlayJson:·gc.time                                                                 128  thrpt    5        36.000                     ms
[info] Benchmark result is saved to jdk9.json
[success] Total time: 5350 s, completed Apr 15, 2018 2:33:36 PM
