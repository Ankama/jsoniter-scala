[info] Loading settings from idea.sbt,build.sbt ...
[info] Loading global plugins from /home/andriy/.sbt/1.0/plugins
[info] Loading settings from plugins.sbt ...
[info] Loading project definition from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/project
[info] Loading settings from release.sbt,build.sbt,version.sbt ...
[info] Set current project to jsoniter-scala (in build file:/home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/)
[success] Total time: 0 s, completed Feb 28, 2018, 9:48:09 PM
[info] Updating core...
[info] Done updating.
[info] Updating macros...
[info] Done updating.
[info] Updating benchmark...
[info] Done updating.
[info] Compiling 5 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/classes ...
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonReader.scala:1045:69: constructor String in class String is deprecated: see corresponding Javadoc for more information.
[warn]   private[this] def toDouble: Double = java.lang.Double.parseDouble(new String(buf, 0, mark, head - mark))
[warn]                                                                     ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:446:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:454:7: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]     s.getBytes(0, len, buf, pos + 1)
[warn]       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/core/JsonWriter.scala:946:14: method getBytes in class String is deprecated: see corresponding Javadoc for more information.
[warn]       zoneId.getBytes(0, len, buf, pos)
[warn]              ^
[warn] four warnings found
[info] Done compiling.
[info] Compiling 1 Scala source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/classes ...
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/core/target/scala-2.12/core_2.12-0.18.1-SNAPSHOT.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/macros/target/scala-2.12/macros_2.12-0.18.1-SNAPSHOT.jar ...
[info] Compiling 47 Scala sources and 1 Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done packaging.
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:14:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "bd");
[info]       private[this] def d1(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs): com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _bd: scala.math.BigDecimal = null;
[info]           var _os: Option[String] = None;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3138 => if (in.isCharBufEqualsTo(l, "bd"))
[info]                       {
[info]                         _bd = in.readBigDecimal(_bd);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556 => if (in.isCharBufEqualsTo(l, "os"))
[info]                       _os = d1(in, _os)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs(s = _s, bd = _bd, os = _os)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefs, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bd");
[info]           out.writeVal(x.bd)
[info]         };
[info]         {
[info]           val v = x.os;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("os");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val anyRefsCodec: JsonValueCodec[AnyRefs] = make[AnyRefs](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:15:66: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Arrays':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Arrays] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Array[Int]] = new Array[Array[Int]](0);
[info]       private[this] val v1: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] val v2: Array[Int] = new Array[Int](0);
[info]       private[this] def d1(in: JsonReader, default: Array[Array[Int]]): Array[Array[Int]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Array[Int]](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Array[Int]](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intArrayCodec.decodeValue(in, v2));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Array[Int]](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays): com.github.plokhotnyuk.jsoniter_scala.macros.Arrays = if (in.isNextToken('{'))
[info]         {
[info]           var _aa: Array[Array[Int]] = v0;
[info]           var _a: Array[BigInt] = v1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3104 => if (in.isCharBufEqualsTo(l, "aa"))
[info]                       _aa = d1(in, _aa)
[info]                     else
[info]                       in.skip()
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       _a = JsoniterCodecs.this.bigIntArrayCodec.decodeValue(in, _a)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Arrays(aa = _aa, a = _a)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Array[Array[Int]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intArrayCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Arrays, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.aa;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("aa");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.a;
[info]           if (v.length.>(0))
[info]             {
[info]               out.writeNonEscapedAsciiKey("a");
[info]               JsoniterCodecs.this.bigIntArrayCodec.encodeValue(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val arraysCodec: JsonValueCodec[Arrays] = make[Arrays](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:16:97: Generated JSON codec for type 'Array[BigDecimal]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigDecimal]] {
[info]       def nullValue: Array[BigDecimal] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = d0(in, default);
[info]       def encodeValue(x: Array[BigDecimal], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigDecimal] = new Array[scala.math.BigDecimal](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigDecimal]): Array[BigDecimal] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigDecimal](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigDecimal](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigDecimal(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigDecimal](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigDecimal], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigDecimalArrayCodec: JsonValueCodec[Array[BigDecimal]] = make[Array[BigDecimal]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:17:85: Generated JSON codec for type 'Array[BigInt]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[BigInt]] {
[info]       def nullValue: Array[BigInt] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[BigInt]): Array[BigInt] = d0(in, default);
[info]       def encodeValue(x: Array[BigInt], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[BigInt] = new Array[scala.math.BigInt](0);
[info]       private[this] def d0(in: JsonReader, default: Array[BigInt]): Array[BigInt] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[scala.math.BigInt](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[scala.math.BigInt](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBigInt(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[scala.math.BigInt](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[BigInt], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bigIntArrayCodec: JsonValueCodec[Array[BigInt]] = make[Array[BigInt]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:18:69: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.BitSets':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.BitSets] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.BitSet): scala.collection.immutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = BitSet.newBuilder;
[info]             do 
[info]               x.+=(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.BitSet): scala.collection.mutable.BitSet = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               BitSet.empty;
[info]             do 
[info]               x.add(in.readInt())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets): com.github.plokhotnyuk.jsoniter_scala.macros.BitSets = if (in.isNextToken('{'))
[info]         {
[info]           var _bs: scala.collection.immutable.BitSet = BitSet.empty;
[info]           var _mbs: scala.collection.mutable.BitSet = BitSet.empty;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3153 => if (in.isCharBufEqualsTo(l, "bs"))
[info]                       _bs = d1(in, _bs)
[info]                     else
[info]                       in.skip()
[info]                     case 107902 => if (in.isCharBufEqualsTo(l, "mbs"))
[info]                       _mbs = d2(in, _mbs)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.BitSets(bs = _bs, mbs = _mbs)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.BitSet, out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.BitSets, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.bs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("bs");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mbs;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mbs");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val bitSetsCodec: JsonValueCodec[BitSets] = make[BitSets](CodecMakerConfig())
[info]                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:19:88: Generated JSON codec for type 'Array[Boolean]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Boolean]] {
[info]       def nullValue: Array[Boolean] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Boolean]): Array[Boolean] = d0(in, default);
[info]       def encodeValue(x: Array[Boolean], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Boolean] = new Array[Boolean](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Boolean]): Array[Boolean] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Boolean](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Boolean](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readBoolean());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Boolean](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Boolean], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val booleanArrayCodec: JsonValueCodec[Array[Boolean]] = make[Array[Boolean]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:20:79: Generated JSON codec for type 'Array[Byte]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Byte]] {
[info]       def nullValue: Array[Byte] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Byte]): Array[Byte] = d0(in, default);
[info]       def encodeValue(x: Array[Byte], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Byte] = new Array[Byte](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Byte]): Array[Byte] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Byte](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Byte](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readByte());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Byte](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Byte], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val byteArrayCodec: JsonValueCodec[Array[Byte]] = make[Array[Byte]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:21:85: Generated JSON codec for type 'Array[Double]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Double]] {
[info]       def nullValue: Array[Double] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Double]): Array[Double] = d0(in, default);
[info]       def encodeValue(x: Array[Double], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Double] = new Array[Double](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Double]): Array[Double] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Double](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Double](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDouble());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Double](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Double], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val doubleArrayCodec: JsonValueCodec[Array[Double]] = make[Array[Double]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:22:91: Generated JSON codec for type 'Array[java.time.Duration]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Duration]] {
[info]       def nullValue: Array[java.time.Duration] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Duration], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Duration] = new Array[java.time.Duration](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Duration]): Array[java.time.Duration] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Duration](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Duration](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readDuration(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Duration](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Duration], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val durationArrayCodec: JsonValueCodec[Array[Duration]] = make[Array[Duration]](CodecMakerConfig())
[info]                                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:23:82: Generated JSON codec for type 'Array[Float]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Float]] {
[info]       def nullValue: Array[Float] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Float]): Array[Float] = d0(in, default);
[info]       def encodeValue(x: Array[Float], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Float] = new Array[Float](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Float]): Array[Float] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Float](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Float](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readFloat());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Float](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Float], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val floatArrayCodec: JsonValueCodec[Array[Float]] = make[Array[Float]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:24:88: Generated JSON codec for type 'Array[java.time.Instant]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Instant]] {
[info]       def nullValue: Array[java.time.Instant] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Instant], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Instant] = new Array[java.time.Instant](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Instant]): Array[java.time.Instant] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Instant](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Instant](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readInstant(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Instant](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Instant], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val instantArrayCodec: JsonValueCodec[Array[Instant]] = make[Array[Instant]](CodecMakerConfig())
[info]                                                                                        ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:25:94: Generated JSON codec for type 'Array[java.time.LocalDate]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDate]] {
[info]       def nullValue: Array[java.time.LocalDate] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDate], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDate] = new Array[java.time.LocalDate](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDate]): Array[java.time.LocalDate] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDate](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDate](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDate(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDate](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDate], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateArrayCodec: JsonValueCodec[Array[LocalDate]] = make[Array[LocalDate]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:26:106: Generated JSON codec for type 'Array[java.time.LocalDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalDateTime]] {
[info]       def nullValue: Array[java.time.LocalDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalDateTime] = new Array[java.time.LocalDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalDateTime]): Array[java.time.LocalDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localDateTimeArrayCodec: JsonValueCodec[Array[LocalDateTime]] = make[Array[LocalDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:27:109: Generated JSON codec for type 'Array[java.time.OffsetDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetDateTime]] {
[info]       def nullValue: Array[java.time.OffsetDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetDateTime] = new Array[java.time.OffsetDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetDateTime]): Array[java.time.OffsetDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetDateTimeArrayCodec: JsonValueCodec[Array[OffsetDateTime]] = make[Array[OffsetDateTime]](CodecMakerConfig())
[info]                                                                                                             ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:28:97: Generated JSON codec for type 'Array[java.time.OffsetTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.OffsetTime]] {
[info]       def nullValue: Array[java.time.OffsetTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.OffsetTime] = new Array[java.time.OffsetTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.OffsetTime]): Array[java.time.OffsetTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.OffsetTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.OffsetTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readOffsetTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.OffsetTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.OffsetTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val offsetTimeArrayCodec: JsonValueCodec[Array[OffsetTime]] = make[Array[OffsetTime]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:29:94: Generated JSON codec for type 'Array[java.time.LocalTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.LocalTime]] {
[info]       def nullValue: Array[java.time.LocalTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.LocalTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.LocalTime] = new Array[java.time.LocalTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.LocalTime]): Array[java.time.LocalTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.LocalTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.LocalTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLocalTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.LocalTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.LocalTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val localTimeArrayCodec: JsonValueCodec[Array[LocalTime]] = make[Array[LocalTime]](CodecMakerConfig())
[info]                                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:30:85: Generated JSON codec for type 'Array[java.time.Period]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.Period]] {
[info]       def nullValue: Array[java.time.Period] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.Period], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.Period] = new Array[java.time.Period](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.Period]): Array[java.time.Period] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.Period](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.Period](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readPeriod(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.Period](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.Period], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val periodArrayCodec: JsonValueCodec[Array[Period]] = make[Array[Period]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:31:106: Generated JSON codec for type 'Array[java.time.ZonedDateTime]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZonedDateTime]] {
[info]       def nullValue: Array[java.time.ZonedDateTime] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZonedDateTime] = new Array[java.time.ZonedDateTime](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZonedDateTime]): Array[java.time.ZonedDateTime] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZonedDateTime](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZonedDateTime](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZonedDateTime(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZonedDateTime](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZonedDateTime], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zonedDateTimeArrayCodec: JsonValueCodec[Array[ZonedDateTime]] = make[Array[ZonedDateTime]](CodecMakerConfig())
[info]                                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:32:97: Generated JSON codec for type 'Array[java.time.ZoneOffset]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneOffset]] {
[info]       def nullValue: Array[java.time.ZoneOffset] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneOffset] = new Array[java.time.ZoneOffset](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneOffset]): Array[java.time.ZoneOffset] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneOffset](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneOffset](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneOffset(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneOffset](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneOffset], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneOffsetArrayCodec: JsonValueCodec[Array[ZoneOffset]] = make[Array[ZoneOffset]](CodecMakerConfig())
[info]                                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:33:85: Generated JSON codec for type 'Array[java.time.ZoneId]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.time.ZoneId]] {
[info]       def nullValue: Array[java.time.ZoneId] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = d0(in, default);
[info]       def encodeValue(x: Array[java.time.ZoneId], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.time.ZoneId] = new Array[java.time.ZoneId](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.time.ZoneId]): Array[java.time.ZoneId] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.time.ZoneId](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.time.ZoneId](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readZoneId(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.time.ZoneId](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.time.ZoneId], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val zoneIdArrayCodec: JsonValueCodec[Array[ZoneId]] = make[Array[ZoneId]](CodecMakerConfig())
[info]                                                                                     ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:34:83: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Suit): com.github.plokhotnyuk.jsoniter_scala.macros.Suit = {
[info]         val v = in.readString();
[info]         try {
[info]           Suit.valueOf(v)
[info]         } catch {
[info]           case ((_): IllegalArgumentException) => in.enumValueError(v)
[info]         }
[info]       };
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Suit, out: JsonWriter): Unit = out.writeVal(x.name);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.Suit], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val javaEnumArrayCodec: JsonValueCodec[Array[Suit]] = make[Array[Suit]](CodecMakerConfig())
[info]                                                                                   ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:35:87: Generated JSON codec for type 'Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]] {
[info]       def nullValue: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = d0(in, default);
[info]       def encodeValue(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](0);
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value): com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value = if (in.isNextToken('\"'))
[info]         {
[info]           in.rollbackToken();
[info]           val len = in.readStringAsCharBuf();
[info]           SuitEnum.values.iterator.find(((e) => in.isCharBufEqualsTo(len, e.toString))).getOrElse(in.enumValueError(len))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '\"');
[info]       private[this] def d0(in: JsonReader, default: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum]): Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, d1(in, null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.Value, out: JsonWriter): Unit = out.writeVal(x.toString);
[info]       private[this] def e0(x: Array[com.github.plokhotnyuk.jsoniter_scala.macros.SuitEnum.SuitEnum], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             e1(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val enumArrayCodec: JsonValueCodec[Array[SuitEnum]] = make[Array[SuitEnum]](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:36:76: Generated JSON codec for type 'Array[Int]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Int]] {
[info]       def nullValue: Array[Int] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Int]): Array[Int] = d0(in, default);
[info]       def encodeValue(x: Array[Int], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Int] = new Array[Int](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Int]): Array[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Int](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Int](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, JsoniterCodecs.this.intCodec.decodeValue(in, 0));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Int](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             JsoniterCodecs.this.intCodec.encodeValue(x(i), out);
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intArrayCodec: JsonValueCodec[Array[Int]] = make[Array[Int]](CodecMakerConfig())
[info]                                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:37:82: Generated JSON codec for type 'Array[Short]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Short]] {
[info]       def nullValue: Array[Short] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Short]): Array[Short] = d0(in, default);
[info]       def encodeValue(x: Array[Short], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Short] = new Array[Short](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Short]): Array[Short] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Short](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Short](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readShort());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Short](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Short], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val shortArrayCodec: JsonValueCodec[Array[Short]] = make[Array[Short]](CodecMakerConfig())
[info]                                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:38:79: Generated JSON codec for type 'Array[Long]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[Long]] {
[info]       def nullValue: Array[Long] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[Long]): Array[Long] = d0(in, default);
[info]       def encodeValue(x: Array[Long], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[Long] = new Array[Long](0);
[info]       private[this] def d0(in: JsonReader, default: Array[Long]): Array[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[Long](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[Long](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readLong());
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[Long](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val longArrayCodec: JsonValueCodec[Array[Long]] = make[Array[Long]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:39:79: Generated JSON codec for type 'Array[java.util.UUID]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Array[java.util.UUID]] {
[info]       def nullValue: Array[java.util.UUID] = v0;
[info]       def decodeValue(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = d0(in, default);
[info]       def encodeValue(x: Array[java.util.UUID], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val v0: Array[java.util.UUID] = new Array[java.util.UUID](0);
[info]       private[this] def d0(in: JsonReader, default: Array[java.util.UUID]): Array[java.util.UUID] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = new Array[java.util.UUID](16);
[info]             var i = 0;
[info]             do 
[info]               {
[info]                 if (i.==(x.length))
[info]                   {
[info]                     val y = new Array[java.util.UUID](i.<<(1));
[info]                     System.arraycopy(x, 0, y, 0, i);
[info]                     x = y
[info]                   }
[info]                 else
[info]                   ();
[info]                 x.update(i, in.readUUID(null));
[info]                 i.+=(1)
[info]               }
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               if (i.==(x.length))
[info]                 x
[info]               else
[info]                 {
[info]                   val y = new Array[java.util.UUID](i);
[info]                   System.arraycopy(x, 0, y, 0, i);
[info]                   y
[info]                 }
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e0(x: Array[java.util.UUID], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         val l = x.length;
[info]         var i = 0;
[info]         while (i.<(l)) 
[info]           {
[info]             out.writeComma();
[info]             out.writeVal(x(i));
[info]             i.+=(1)
[info]           }
[info]         ;
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val uuidArrayCodec: JsonValueCodec[Array[UUID]] = make[Array[UUID]](CodecMakerConfig())
[info]                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:40:75: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Iterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Iterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.Vector[String]): scala.collection.immutable.Vector[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Vector.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Set[Int]): scala.collection.immutable.Set[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Set.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.immutable.HashSet[Long]): scala.collection.immutable.HashSet[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = HashSet.newBuilder[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: List[scala.collection.immutable.HashSet[Long]]): List[scala.collection.immutable.HashSet[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = List.newBuilder[scala.collection.immutable.HashSet[Long]];
[info]             do 
[info]               x.+=(d4(in, HashSet.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables): com.github.plokhotnyuk.jsoniter_scala.macros.Iterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.immutable.Vector[String] = Vector.empty[String];
[info]           var _s: scala.collection.immutable.Set[Int] = Set.empty[Int];
[info]           var _ls: List[scala.collection.immutable.HashSet[Long]] = List.empty[scala.collection.immutable.HashSet[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Iterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.Vector[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Set[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.immutable.HashSet[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: List[scala.collection.immutable.HashSet[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Iterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val iterablesCodec: JsonValueCodec[Iterables] = make[Iterables](CodecMakerConfig())
[info]                                                                           ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:41:60: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Maps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Maps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Maps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.HashMap[String,Double]): scala.collection.immutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[String, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.HashMap[Long,Double]): scala.collection.immutable.HashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = HashMap.empty[Long, Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]]): scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), d3(in, HashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Maps): com.github.plokhotnyuk.jsoniter_scala.macros.Maps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]] = Map.empty[Int, scala.collection.immutable.HashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Maps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.HashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.immutable.Map[Int,scala.collection.immutable.HashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Maps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mapsCodec: JsonValueCodec[Maps] = make[Maps](CodecMakerConfig())
[info]                                                            ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:42:95: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "i");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields): com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _i: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields(s = _s, i = _i)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val missingReqFieldCodec: JsonValueCodec[MissingReqFields] = make[MissingReqFields](CodecMakerConfig())
[info]                                                                                               ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:43:96: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.ArrayBuffer[String]): scala.collection.mutable.ArrayBuffer[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               ArrayBuffer.empty[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.TreeSet[Int]): scala.collection.mutable.TreeSet[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               TreeSet.empty[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d4(in: JsonReader, default: scala.collection.mutable.Set[Long]): scala.collection.mutable.Set[Long] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Set.empty[Long];
[info]             do 
[info]               x.+=(in.readLong())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]]): scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = ResizableArray.newBuilder[scala.collection.mutable.Set[Long]];
[info]             do 
[info]               x.+=(d4(in, Set.empty[Long]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables): com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables = if (in.isNextToken('{'))
[info]         {
[info]           var _l: scala.collection.mutable.ArrayBuffer[String] = ArrayBuffer.empty[String];
[info]           var _s: scala.collection.mutable.TreeSet[Int] = TreeSet.empty[Int];
[info]           var _ls: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]] = ResizableArray.empty[scala.collection.mutable.Set[Long]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       _l = d1(in, _l)
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       _s = d2(in, _s)
[info]                     else
[info]                       in.skip()
[info]                     case 3463 => if (in.isCharBufEqualsTo(l, "ls"))
[info]                       _ls = d3(in, _ls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables(l = _l, s = _s, ls = _ls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.ArrayBuffer[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.TreeSet[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e4(x: scala.collection.mutable.Set[Long], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           out.writeVal(x)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.ResizableArray[scala.collection.mutable.Set[Long]], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e4(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterables, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.l;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("l");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.s;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("s");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.ls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("ls");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableIterablesCodec: JsonValueCodec[MutableIterables] = make[MutableIterables](CodecMakerConfig())
[info]                                                                                                ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:44:81: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.mutable.HashMap[String,Double]): scala.collection.mutable.HashMap[String,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               HashMap.empty[String, Double];
[info]             do 
[info]               x.update(in.readKeyAsString(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.mutable.OpenHashMap[Long,Double]): scala.collection.mutable.OpenHashMap[Long,Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               OpenHashMap.empty[Long, Double];
[info]             do 
[info]               x.update(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]]): scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]             do 
[info]               x.update(in.readKeyAsInt(), d3(in, OpenHashMap.empty[Long, Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps): com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.mutable.HashMap[String,Double] = HashMap.empty[String, Double];
[info]           var _mm: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]] = Map.empty[Int, scala.collection.mutable.OpenHashMap[Long,Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.mutable.HashMap[String,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.mutable.OpenHashMap[Long,Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.Map[Int,scala.collection.mutable.OpenHashMap[Long,Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val mutableMapsCodec: JsonValueCodec[MutableMaps] = make[MutableMaps](CodecMakerConfig())
[info]                                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:45:90: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] def d1(in: JsonReader, default: scala.collection.immutable.IntMap[Double]): scala.collection.immutable.IntMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = IntMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsInt(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: scala.collection.immutable.LongMap[Double]): scala.collection.immutable.LongMap[Double] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             var x = LongMap.empty[Double];
[info]             do 
[info]               x = x.updated(in.readKeyAsLong(), in.readDouble())
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]]): scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = if (in.isNextToken('{'))
[info]         if (in.isNextToken('}'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = if (default.isEmpty)
[info]               default
[info]             else
[info]               LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]             do 
[info]               x.update(in.readKeyAsLong(), d3(in, LongMap.empty[Double]))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken('}'))
[info]               x
[info]             else
[info]               in.objectEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps): com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps = if (in.isNextToken('{'))
[info]         {
[info]           var _m: scala.collection.immutable.IntMap[Double] = IntMap.empty[Double];
[info]           var _mm: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]] = LongMap.empty[scala.collection.immutable.LongMap[Double]];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 109 => if (in.isCharBufEqualsTo(l, "m"))
[info]                       _m = d1(in, _m)
[info]                     else
[info]                       in.skip()
[info]                     case 3488 => if (in.isCharBufEqualsTo(l, "mm"))
[info]                       _mm = d2(in, _mm)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps(m = _m, mm = _mm)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: scala.collection.immutable.IntMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: scala.collection.immutable.LongMap[Double], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           out.writeVal(kv._2)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: scala.collection.mutable.LongMap[scala.collection.immutable.LongMap[Double]], out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         x.foreach(((kv) => {
[info]           out.writeKey(kv._1);
[info]           e3(kv._2, out)
[info]         }));
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMaps, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.m;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("m");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.mm;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("mm");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intAndLongMapsCodec: JsonValueCodec[IntAndLongMaps] = make[IntAndLongMaps](CodecMakerConfig())
[info]                                                                                          ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:46:57: Generated JSON codec for type 'Int':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Int] {
[info]       def nullValue: Int = 0;
[info]       def decodeValue(in: JsonReader, default: Int): Int = in.readInt();
[info]       def encodeValue(x: Int, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val intCodec: JsonValueCodec[Int] = make[Int](CodecMakerConfig())
[info]                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:47:78: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.Primitives':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.Primitives] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("b", "s", "i", "l", "bl", "ch", "dbl", "f");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives): com.github.plokhotnyuk.jsoniter_scala.macros.Primitives = if (in.isNextToken('{'))
[info]         {
[info]           var _b: Byte = ((0): Byte);
[info]           var _s: Short = ((0): Short);
[info]           var _i: Int = 0;
[info]           var _l: Long = 0L;
[info]           var _bl: Boolean = false;
[info]           var _ch: Char = '\u0000';
[info]           var _dbl: Double = 0.0;
[info]           var _f: Float = 0.0F;
[info]           var req0 = 255;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = in.readByte();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = in.readShort();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 105 => if (in.isCharBufEqualsTo(l, "i"))
[info]                       {
[info]                         _i = JsoniterCodecs.this.intCodec.decodeValue(in, _i);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3146 => if (in.isCharBufEqualsTo(l, "bl"))
[info]                       {
[info]                         _bl = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3173 => if (in.isCharBufEqualsTo(l, "ch"))
[info]                       {
[info]                         _ch = in.readChar();
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 99246 => if (in.isCharBufEqualsTo(l, "dbl"))
[info]                       {
[info]                         _dbl = in.readDouble();
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102 => if (in.isCharBufEqualsTo(l, "f"))
[info]                       {
[info]                         _f = in.readFloat();
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Primitives(b = _b, s = _s, i = _i, l = _l, bl = _bl, ch = _ch, dbl = _dbl, f = _f)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.Primitives, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           out.writeVal(x.b)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           out.writeVal(x.s)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("i");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.i, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("bl");
[info]           out.writeVal(x.bl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("ch");
[info]           out.writeVal(x.ch)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("dbl");
[info]           out.writeVal(x.dbl)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("f");
[info]           out.writeVal(x.f)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val primitivesCodec: JsonValueCodec[Primitives] = make[Primitives](CodecMakerConfig())
[info]                                                                              ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:48:87: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("s", "l");
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields): com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields = if (in.isNextToken('{'))
[info]         {
[info]           var _s: String = null;
[info]           var _l: Long = 0L;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 115 => if (in.isCharBufEqualsTo(l, "s"))
[info]                       {
[info]                         _s = JsoniterCodecs.this.stringCodec.decodeValue(in, _s);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields(s = _s, l = _l)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFields, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("s");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.s, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           out.writeVal(x.l)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val extractFieldsCodec: JsonValueCodec[ExtractFields] = make[ExtractFields](CodecMakerConfig())
[info]                                                                                       ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:49:65: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("a");
[info]       private[this] val r1: Array[String] = Array("b");
[info]       private[this] val r2: Array[String] = Array("l", "r");
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.A): com.github.plokhotnyuk.jsoniter_scala.macros.A = if (in.isNextToken('{'))
[info]         {
[info]           var _a: Int = 0;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 97 => if (in.isCharBufEqualsTo(l, "a"))
[info]                       {
[info]                         _a = JsoniterCodecs.this.intCodec.decodeValue(in, _a);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.A(a = _a)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.B): com.github.plokhotnyuk.jsoniter_scala.macros.B = if (in.isNextToken('{'))
[info]         {
[info]           var _b: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 98 => if (in.isCharBufEqualsTo(l, "b"))
[info]                       {
[info]                         _b = JsoniterCodecs.this.stringCodec.decodeValue(in, _b);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.B(b = _b)
[info]           else
[info]             in.requiredFieldError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.C): com.github.plokhotnyuk.jsoniter_scala.macros.C = if (in.isNextToken('{'))
[info]         {
[info]           var _l: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var _r: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 108 => if (in.isCharBufEqualsTo(l, "l"))
[info]                       {
[info]                         _l = JsoniterCodecs.this.adtCodec.decodeValue(in, _l);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 114 => if (in.isCharBufEqualsTo(l, "r"))
[info]                       {
[info]                         _r = JsoniterCodecs.this.adtCodec.decodeValue(in, _r);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3575610 => in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.C(l = _l, r = _r)
[info]           else
[info]             in.requiredFieldError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase): com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase = {
[info]         in.setMark();
[info]         if (in.isNextToken('{'))
[info]           if (in.skipToKey("type"))
[info]             {
[info]               val l = in.readStringAsCharBuf();
[info]               (in.charBufToHashCode(l): @switch) match {
[info]                 case 65 => if (in.isCharBufEqualsTo(l, "A"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d1(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 66 => if (in.isCharBufEqualsTo(l, "B"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d2(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case 67 => if (in.isCharBufEqualsTo(l, "C"))
[info]                   {
[info]                     in.rollbackToMark();
[info]                     d3(in, null)
[info]                   }
[info]                 else
[info]                   in.discriminatorValueError("type")
[info]                 case _ => in.discriminatorValueError("type")
[info]               }
[info]             }
[info]           else
[info]             in.requiredFieldError("type")
[info]         else
[info]           in.readNullOrTokenError(default, '{')
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.A, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("A")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("a");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.a, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.B, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("B")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("b");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.b, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.C, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("type");
[info]           out.writeNonEscapedAsciiVal("C")
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("l");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.l, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("r");
[info]           JsoniterCodecs.this.adtCodec.encodeValue(x.r, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBase, out: JsonWriter): Unit = x match {
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.A)) => e1(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.B)) => e2(x, out)
[info]         case (x @ ((_): com.github.plokhotnyuk.jsoniter_scala.macros.C)) => e3(x, out)
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val adtCodec: JsonValueCodec[AdtBase] = make[AdtBase](CodecMakerConfig())
[info]                                                                 ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:50:66: Generated JSON codec for type 'String':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[String] {
[info]       def nullValue: String = null;
[info]       def decodeValue(in: JsonReader, default: String): String = in.readString(default);
[info]       def encodeValue(x: String, out: JsonWriter): Unit = out.writeVal(x)
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val stringCodec: JsonValueCodec[String] = make[String](CodecMakerConfig())
[info]                                                                  ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:51:89: Generated JSON codec for type 'com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix] {
[info]       def nullValue: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = null;
[info]       def decodeValue(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = d0(in, default);
[info]       def encodeValue(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("status");
[info]       private[this] val r1: Array[String] = Array("distance", "duration", "status");
[info]       private[this] val r2: Array[String] = Array("text", "value");
[info]       private[this] def d1(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Value): com.github.plokhotnyuk.jsoniter_scala.macros.Value = if (in.isNextToken('{'))
[info]         {
[info]           var _text: String = null;
[info]           var _value: Int = 0;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 111972721 => if (in.isCharBufEqualsTo(l, "value"))
[info]                       {
[info]                         _value = JsoniterCodecs.this.intCodec.decodeValue(in, _value);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Value(text = _text, value = _value)
[info]           else
[info]             in.requiredFieldError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Elements): com.github.plokhotnyuk.jsoniter_scala.macros.Elements = if (in.isNextToken('{'))
[info]         {
[info]           var _distance: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _duration: com.github.plokhotnyuk.jsoniter_scala.macros.Value = null;
[info]           var _status: String = null;
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 288459765 => if (in.isCharBufEqualsTo(l, "distance"))
[info]                       {
[info]                         _distance = d6(in, _distance);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1992012396 => if (in.isCharBufEqualsTo(l, "duration"))
[info]                       {
[info]                         _duration = d6(in, _duration);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Elements(distance = _distance, duration = _duration, status = _status)
[info]           else
[info]             in.requiredFieldError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d3(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Rows): com.github.plokhotnyuk.jsoniter_scala.macros.Rows = if (in.isNextToken('{'))
[info]         {
[info]           var _elements: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Elements];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -8339209 => if (in.isCharBufEqualsTo(l, "elements"))
[info]                       _elements = d4(in, _elements)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Rows(elements = _elements)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d2(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]             do 
[info]               x.+=(d3(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d0(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix): com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix = if (in.isNextToken('{'))
[info]         {
[info]           var _destination_addresses: Seq[String] = Seq.empty[String];
[info]           var _origin_addresses: Seq[String] = Seq.empty[String];
[info]           var _rows: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Rows];
[info]           var _status: String = null;
[info]           var req0 = 1;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 715423921 => if (in.isCharBufEqualsTo(l, "destination_addresses"))
[info]                       _destination_addresses = d1(in, _destination_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 1780936137 => if (in.isCharBufEqualsTo(l, "origin_addresses"))
[info]                       _origin_addresses = d1(in, _origin_addresses)
[info]                     else
[info]                       in.skip()
[info]                     case 3506649 => if (in.isCharBufEqualsTo(l, "rows"))
[info]                       _rows = d2(in, _rows)
[info]                     else
[info]                       in.skip()
[info]                     case -892481550 => if (in.isCharBufEqualsTo(l, "status"))
[info]                       {
[info]                         _status = JsoniterCodecs.this.stringCodec.decodeValue(in, _status);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix(destination_addresses = _destination_addresses, origin_addresses = _origin_addresses, rows = _rows, status = _status)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def e1(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: com.github.plokhotnyuk.jsoniter_scala.macros.Value, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("value");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.value, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.Elements, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("distance");
[info]           e6(x.distance, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("duration");
[info]           e6(x.duration, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Elements], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e3(x: com.github.plokhotnyuk.jsoniter_scala.macros.Rows, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.elements;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("elements");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e2(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Rows], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e3(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e0(x: com.github.plokhotnyuk.jsoniter_scala.macros.DistanceMatrix, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.destination_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("destination_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.origin_addresses;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("origin_addresses");
[info]               e1(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.rows;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("rows");
[info]               e2(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("status");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.status, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val googleMapsAPICodec: JsonValueCodec[DistanceMatrix] = make[DistanceMatrix](CodecMakerConfig())
[info]                                                                                         ^
[info] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/JsoniterCodecs.scala:52:78: Generated JSON codec for type 'Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]':
[info] {
[info]   import com.github.plokhotnyuk.jsoniter_scala.core._;
[info]   import scala.annotation.switch;
[info]   {
[info]     final class $anon extends JsonValueCodec[Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]] {
[info]       def nullValue: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]       def decodeValue(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = d0(in, default);
[info]       def encodeValue(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = e0(x, out);
[info]       private[this] val r0: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "retweeted_status", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] val r1: Array[String] = Array("screen_name", "name", "id", "id_str");
[info]       private[this] val r2: Array[String] = Array("url", "expanded_url", "display_url");
[info]       private[this] val r3: Array[String] = Array("id", "id_str", "name", "screen_name", "location", "description", "url", "entities", "protected", "followers_count", "friends_count", "listed_count", "created_at", "favourites_count", "utc_offset", "time_zone", "geo_enabled", "verified", "statuses_count", "lang", "contributors_enabled", "is_translator", "is_translation_enabled", "profile_background_color", "profile_background_image_url", "profile_background_image_url_https", "profile_background_tile", "profile_image_url", "profile_image_url_https", "profile_banner_url", "profile_link_color", "profile_sidebar_border_color", "profile_sidebar_fill_color", "profile_text_color", "profile_use_background_image", "has_extended_profile", "default_profile", "default_profile_image", "following", "follow_request_sent", "notifications", "translator_type");
[info]       private[this] val r4: Array[String] = Array("url", "description");
[info]       private[this] val r5: Array[String] = Array("created_at", "id", "id_str", "text", "truncated", "entities", "source", "user", "is_quote_status", "retweet_count", "favorite_count", "favorited", "retweeted", "possibly_sensitive", "lang");
[info]       private[this] def d3(in: JsonReader, default: Seq[String]): Seq[String] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[String];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d6(in: JsonReader, default: Seq[Int]): Seq[Int] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[Int];
[info]             do 
[info]               x.+=(JsoniterCodecs.this.intCodec.decodeValue(in, 0))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d5(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions): com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions = if (in.isNextToken('{'))
[info]         {
[info]           var _screen_name: String = null;
[info]           var _name: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 15;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions(screen_name = _screen_name, name = _name, id = _id, id_str = _id_str, indices = _indices)
[info]           else
[info]             in.requiredFieldError(r1, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d4(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]             do 
[info]               x.+=(d5(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d8(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Urls): com.github.plokhotnyuk.jsoniter_scala.macros.Urls = if (in.isNextToken('{'))
[info]         {
[info]           var _url: String = null;
[info]           var _expanded_url: String = null;
[info]           var _display_url: String = null;
[info]           var _indices: Seq[Int] = Seq.empty[Int];
[info]           var req0 = 7;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -518939415 => if (in.isCharBufEqualsTo(l, "expanded_url"))
[info]                       {
[info]                         _expanded_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _expanded_url);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1714674802 => if (in.isCharBufEqualsTo(l, "display_url"))
[info]                       {
[info]                         _display_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _display_url);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1943391143 => if (in.isCharBufEqualsTo(l, "indices"))
[info]                       _indices = d6(in, _indices)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Urls(url = _url, expanded_url = _expanded_url, display_url = _display_url, indices = _indices)
[info]           else
[info]             in.requiredFieldError(r2, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d7(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]             do 
[info]               x.+=(d8(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def d2(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Entities): com.github.plokhotnyuk.jsoniter_scala.macros.Entities = if (in.isNextToken('{'))
[info]         {
[info]           var _hashtags: Seq[String] = Seq.empty[String];
[info]           var _symbols: Seq[String] = Seq.empty[String];
[info]           var _user_mentions: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions];
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 149143079 => if (in.isCharBufEqualsTo(l, "hashtags"))
[info]                       _hashtags = d3(in, _hashtags)
[info]                     else
[info]                       in.skip()
[info]                     case -1743438373 => if (in.isCharBufEqualsTo(l, "symbols"))
[info]                       _symbols = d3(in, _symbols)
[info]                     else
[info]                       in.skip()
[info]                     case -553518659 => if (in.isCharBufEqualsTo(l, "user_mentions"))
[info]                       _user_mentions = d4(in, _user_mentions)
[info]                     else
[info]                       in.skip()
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Entities(hashtags = _hashtags, symbols = _symbols, user_mentions = _user_mentions, urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d9(in: JsonReader, default: Option[String]): Option[String] = if (in.isNextToken('n'))
[info]         in.readNullOrError(default, "expected value or null")
[info]       else
[info]         {
[info]           in.rollbackToken();
[info]           Some(JsoniterCodecs.this.stringCodec.decodeValue(in, null))
[info]         };
[info]       private[this] def d12(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Url): com.github.plokhotnyuk.jsoniter_scala.macros.Url = if (in.isNextToken('{'))
[info]         {
[info]           var _urls: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls] = Seq.empty[com.github.plokhotnyuk.jsoniter_scala.macros.Urls];
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3598564 => if (in.isCharBufEqualsTo(l, "urls"))
[info]                       _urls = d7(in, _urls)
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           new com.github.plokhotnyuk.jsoniter_scala.macros.Url(urls = _urls)
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d11(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities): com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = if (in.isNextToken('{'))
[info]         {
[info]           var _url: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var _description: com.github.plokhotnyuk.jsoniter_scala.macros.Url = null;
[info]           var req0 = 3;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = d12(in, _url);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = d12(in, _description);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities(url = _url, description = _description)
[info]           else
[info]             in.requiredFieldError(r4, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d10(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.User): com.github.plokhotnyuk.jsoniter_scala.macros.User = if (in.isNextToken('{'))
[info]         {
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _name: String = null;
[info]           var _screen_name: String = null;
[info]           var _location: String = null;
[info]           var _description: String = null;
[info]           var _url: String = null;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities = null;
[info]           var _protected: Boolean = false;
[info]           var _followers_count: Int = 0;
[info]           var _friends_count: Int = 0;
[info]           var _listed_count: Int = 0;
[info]           var _created_at: String = null;
[info]           var _favourites_count: Int = 0;
[info]           var _utc_offset: Int = 0;
[info]           var _time_zone: String = null;
[info]           var _geo_enabled: Boolean = false;
[info]           var _verified: Boolean = false;
[info]           var _statuses_count: Int = 0;
[info]           var _lang: String = null;
[info]           var _contributors_enabled: Boolean = false;
[info]           var _is_translator: Boolean = false;
[info]           var _is_translation_enabled: Boolean = false;
[info]           var _profile_background_color: String = null;
[info]           var _profile_background_image_url: String = null;
[info]           var _profile_background_image_url_https: String = null;
[info]           var _profile_background_tile: Boolean = false;
[info]           var _profile_image_url: String = null;
[info]           var _profile_image_url_https: String = null;
[info]           var _profile_banner_url: String = null;
[info]           var _profile_link_color: String = null;
[info]           var _profile_sidebar_border_color: String = null;
[info]           var _profile_sidebar_fill_color: String = null;
[info]           var _profile_text_color: String = null;
[info]           var _profile_use_background_image: Boolean = false;
[info]           var _has_extended_profile: Boolean = false;
[info]           var _default_profile: Boolean = false;
[info]           var _default_profile_image: Boolean = false;
[info]           var _following: Boolean = false;
[info]           var _follow_request_sent: Boolean = false;
[info]           var _notifications: Boolean = false;
[info]           var _translator_type: String = null;
[info]           var req0 = -1;
[info]           var req1 = 1023;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3373707 => if (in.isCharBufEqualsTo(l, "name"))
[info]                       {
[info]                         _name = JsoniterCodecs.this.stringCodec.decodeValue(in, _name);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -43264386 => if (in.isCharBufEqualsTo(l, "screen_name"))
[info]                       {
[info]                         _screen_name = JsoniterCodecs.this.stringCodec.decodeValue(in, _screen_name);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1901043637 => if (in.isCharBufEqualsTo(l, "location"))
[info]                       {
[info]                         _location = JsoniterCodecs.this.stringCodec.decodeValue(in, _location);
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1724546052 => if (in.isCharBufEqualsTo(l, "description"))
[info]                       {
[info]                         _description = JsoniterCodecs.this.stringCodec.decodeValue(in, _description);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 116079 => if (in.isCharBufEqualsTo(l, "url"))
[info]                       {
[info]                         _url = JsoniterCodecs.this.stringCodec.decodeValue(in, _url);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d11(in, _entities);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -608539730 => if (in.isCharBufEqualsTo(l, "protected"))
[info]                       {
[info]                         _protected = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -460163995 => if (in.isCharBufEqualsTo(l, "followers_count"))
[info]                       {
[info]                         _followers_count = JsoniterCodecs.this.intCodec.decodeValue(in, _followers_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1666926107 => if (in.isCharBufEqualsTo(l, "friends_count"))
[info]                       {
[info]                         _friends_count = JsoniterCodecs.this.intCodec.decodeValue(in, _friends_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1974943731 => if (in.isCharBufEqualsTo(l, "listed_count"))
[info]                       {
[info]                         _listed_count = JsoniterCodecs.this.intCodec.decodeValue(in, _listed_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 226316666 => if (in.isCharBufEqualsTo(l, "favourites_count"))
[info]                       {
[info]                         _favourites_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favourites_count);
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1699658638 => if (in.isCharBufEqualsTo(l, "utc_offset"))
[info]                       {
[info]                         _utc_offset = JsoniterCodecs.this.intCodec.decodeValue(in, _utc_offset);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 36848094 => if (in.isCharBufEqualsTo(l, "time_zone"))
[info]                       {
[info]                         _time_zone = JsoniterCodecs.this.stringCodec.decodeValue(in, _time_zone);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1085743021 => if (in.isCharBufEqualsTo(l, "geo_enabled"))
[info]                       {
[info]                         _geo_enabled = in.readBoolean();
[info]                         req0.&=(-65537)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1994383672 => if (in.isCharBufEqualsTo(l, "verified"))
[info]                       {
[info]                         _verified = in.readBoolean();
[info]                         req0.&=(-131073)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1824078800 => if (in.isCharBufEqualsTo(l, "statuses_count"))
[info]                       {
[info]                         _statuses_count = JsoniterCodecs.this.intCodec.decodeValue(in, _statuses_count);
[info]                         req0.&=(-262145)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-524289)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 647263482 => if (in.isCharBufEqualsTo(l, "contributors_enabled"))
[info]                       {
[info]                         _contributors_enabled = in.readBoolean();
[info]                         req0.&=(-1048577)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 583435343 => if (in.isCharBufEqualsTo(l, "is_translator"))
[info]                       {
[info]                         _is_translator = in.readBoolean();
[info]                         req0.&=(-2097153)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1690715422 => if (in.isCharBufEqualsTo(l, "is_translation_enabled"))
[info]                       {
[info]                         _is_translation_enabled = in.readBoolean();
[info]                         req0.&=(-4194305)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1592986856 => if (in.isCharBufEqualsTo(l, "profile_background_color"))
[info]                       {
[info]                         _profile_background_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_color);
[info]                         req0.&=(-8388609)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1189803120 => if (in.isCharBufEqualsTo(l, "profile_background_image_url"))
[info]                       {
[info]                         _profile_background_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url);
[info]                         req0.&=(-16777217)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 594447228 => if (in.isCharBufEqualsTo(l, "profile_background_image_url_https"))
[info]                       {
[info]                         _profile_background_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_background_image_url_https);
[info]                         req0.&=(-33554433)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1021718665 => if (in.isCharBufEqualsTo(l, "profile_background_tile"))
[info]                       {
[info]                         _profile_background_tile = in.readBoolean();
[info]                         req0.&=(-67108865)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -174080651 => if (in.isCharBufEqualsTo(l, "profile_image_url"))
[info]                       {
[info]                         _profile_image_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url);
[info]                         req0.&=(-134217729)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -782008927 => if (in.isCharBufEqualsTo(l, "profile_image_url_https"))
[info]                       {
[info]                         _profile_image_url_https = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_image_url_https);
[info]                         req0.&=(-268435457)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -690137550 => if (in.isCharBufEqualsTo(l, "profile_banner_url"))
[info]                       {
[info]                         _profile_banner_url = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_banner_url);
[info]                         req0.&=(-536870913)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1512257332 => if (in.isCharBufEqualsTo(l, "profile_link_color"))
[info]                       {
[info]                         _profile_link_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_link_color);
[info]                         req0.&=(-1073741825)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1412739479 => if (in.isCharBufEqualsTo(l, "profile_sidebar_border_color"))
[info]                       {
[info]                         _profile_sidebar_border_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_border_color);
[info]                         req0.&=(2147483647)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 486184128 => if (in.isCharBufEqualsTo(l, "profile_sidebar_fill_color"))
[info]                       {
[info]                         _profile_sidebar_fill_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_sidebar_fill_color);
[info]                         req1.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1774134745 => if (in.isCharBufEqualsTo(l, "profile_text_color"))
[info]                       {
[info]                         _profile_text_color = JsoniterCodecs.this.stringCodec.decodeValue(in, _profile_text_color);
[info]                         req1.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -101767272 => if (in.isCharBufEqualsTo(l, "profile_use_background_image"))
[info]                       {
[info]                         _profile_use_background_image = in.readBoolean();
[info]                         req1.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 284519336 => if (in.isCharBufEqualsTo(l, "has_extended_profile"))
[info]                       {
[info]                         _has_extended_profile = in.readBoolean();
[info]                         req1.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -312724053 => if (in.isCharBufEqualsTo(l, "default_profile"))
[info]                       {
[info]                         _default_profile = in.readBoolean();
[info]                         req1.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 545330631 => if (in.isCharBufEqualsTo(l, "default_profile_image"))
[info]                       {
[info]                         _default_profile_image = in.readBoolean();
[info]                         req1.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 765915793 => if (in.isCharBufEqualsTo(l, "following"))
[info]                       {
[info]                         _following = in.readBoolean();
[info]                         req1.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 585125142 => if (in.isCharBufEqualsTo(l, "follow_request_sent"))
[info]                       {
[info]                         _follow_request_sent = in.readBoolean();
[info]                         req1.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1272354024 => if (in.isCharBufEqualsTo(l, "notifications"))
[info]                       {
[info]                         _notifications = in.readBoolean();
[info]                         req1.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -475640257 => if (in.isCharBufEqualsTo(l, "translator_type"))
[info]                       {
[info]                         _translator_type = JsoniterCodecs.this.stringCodec.decodeValue(in, _translator_type);
[info]                         req1.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0).&&(req1.==(0)))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.User(id = _id, id_str = _id_str, name = _name, screen_name = _screen_name, location = _location, description = _description, url = _url, entities = _entities, `protected` = _protected, followers_count = _followers_count, friends_count = _friends_count, listed_count = _listed_count, created_at = _created_at, favourites_count = _favourites_count, utc_offset = _utc_offset, time_zone = _time_zone, geo_enabled = _geo_enabled, verified = _verified, statuses_count = _statuses_count, lang = _lang, contributors_enabled = _contributors_enabled, is_translator = _is_translator, is_translation_enabled = _is_translation_enabled, profile_background_color = _profile_background_color, profile_background_image_url = _profile_background_image_url, profile_background_image_url_https = _profile_background_image_url_https, profile_background_tile = _profile_background_tile, profile_image_url = _profile_image_url, profile_image_url_https = _profile_image_url_https, profile_banner_url = _profile_banner_url, profile_link_color = _profile_link_color, profile_sidebar_border_color = _profile_sidebar_border_color, profile_sidebar_fill_color = _profile_sidebar_fill_color, profile_text_color = _profile_text_color, profile_use_background_image = _profile_use_background_image, has_extended_profile = _has_extended_profile, default_profile = _default_profile, default_profile_image = _default_profile_image, following = _following, follow_request_sent = _follow_request_sent, notifications = _notifications, translator_type = _translator_type)
[info]           else
[info]             in.requiredFieldError(r3, Array(req0, req1))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d13(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus): com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 32767;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredFieldError(r5, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d1(in: JsonReader, default: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet): com.github.plokhotnyuk.jsoniter_scala.macros.Tweet = if (in.isNextToken('{'))
[info]         {
[info]           var _created_at: String = null;
[info]           var _id: Long = 0L;
[info]           var _id_str: String = null;
[info]           var _text: String = null;
[info]           var _truncated: Boolean = false;
[info]           var _entities: com.github.plokhotnyuk.jsoniter_scala.macros.Entities = null;
[info]           var _source: String = null;
[info]           var _in_reply_to_status_id: Option[String] = None;
[info]           var _in_reply_to_status_id_str: Option[String] = None;
[info]           var _in_reply_to_user_id: Option[String] = None;
[info]           var _in_reply_to_user_id_str: Option[String] = None;
[info]           var _in_reply_to_screen_name: Option[String] = None;
[info]           var _user: com.github.plokhotnyuk.jsoniter_scala.macros.User = null;
[info]           var _geo: Option[String] = None;
[info]           var _coordinates: Option[String] = None;
[info]           var _place: Option[String] = None;
[info]           var _contributors: Option[String] = None;
[info]           var _retweeted_status: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus = null;
[info]           var _is_quote_status: Boolean = false;
[info]           var _retweet_count: Int = 0;
[info]           var _favorite_count: Int = 0;
[info]           var _favorited: Boolean = false;
[info]           var _retweeted: Boolean = false;
[info]           var _possibly_sensitive: Boolean = false;
[info]           var _lang: String = null;
[info]           var req0 = 65535;
[info]           if (in.isNextToken('}').`unary_!`)
[info]             {
[info]               in.rollbackToken();
[info]               do 
[info]                 {
[info]                   val l = in.readKeyAsCharBuf();
[info]                   (in.charBufToHashCode(l): @switch) match {
[info]                     case 1369680106 => if (in.isCharBufEqualsTo(l, "created_at"))
[info]                       {
[info]                         _created_at = JsoniterCodecs.this.stringCodec.decodeValue(in, _created_at);
[info]                         req0.&=(-2)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3355 => if (in.isCharBufEqualsTo(l, "id"))
[info]                       {
[info]                         _id = in.readLong();
[info]                         req0.&=(-3)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1193609971 => if (in.isCharBufEqualsTo(l, "id_str"))
[info]                       {
[info]                         _id_str = JsoniterCodecs.this.stringCodec.decodeValue(in, _id_str);
[info]                         req0.&=(-5)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3556653 => if (in.isCharBufEqualsTo(l, "text"))
[info]                       {
[info]                         _text = JsoniterCodecs.this.stringCodec.decodeValue(in, _text);
[info]                         req0.&=(-9)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1607950270 => if (in.isCharBufEqualsTo(l, "truncated"))
[info]                       {
[info]                         _truncated = in.readBoolean();
[info]                         req0.&=(-17)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -2102114367 => if (in.isCharBufEqualsTo(l, "entities"))
[info]                       {
[info]                         _entities = d2(in, _entities);
[info]                         req0.&=(-33)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -896505829 => if (in.isCharBufEqualsTo(l, "source"))
[info]                       {
[info]                         _source = JsoniterCodecs.this.stringCodec.decodeValue(in, _source);
[info]                         req0.&=(-65)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1960224851 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id"))
[info]                       _in_reply_to_status_id = d9(in, _in_reply_to_status_id)
[info]                     else
[info]                       in.skip()
[info]                     case 1577137221 => if (in.isCharBufEqualsTo(l, "in_reply_to_status_id_str"))
[info]                       _in_reply_to_status_id_str = d9(in, _in_reply_to_status_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case 2047002778 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id"))
[info]                       _in_reply_to_user_id = d9(in, _in_reply_to_user_id)
[info]                     else
[info]                       in.skip()
[info]                     case -1274685172 => if (in.isCharBufEqualsTo(l, "in_reply_to_user_id_str"))
[info]                       _in_reply_to_user_id_str = d9(in, _in_reply_to_user_id_str)
[info]                     else
[info]                       in.skip()
[info]                     case -866290807 => if (in.isCharBufEqualsTo(l, "in_reply_to_screen_name"))
[info]                       _in_reply_to_screen_name = d9(in, _in_reply_to_screen_name)
[info]                     else
[info]                       in.skip()
[info]                     case 3599307 => if (in.isCharBufEqualsTo(l, "user"))
[info]                       {
[info]                         _user = d10(in, _user);
[info]                         req0.&=(-129)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 102225 => if (in.isCharBufEqualsTo(l, "geo"))
[info]                       _geo = d9(in, _geo)
[info]                     else
[info]                       in.skip()
[info]                     case 1871919611 => if (in.isCharBufEqualsTo(l, "coordinates"))
[info]                       _coordinates = d9(in, _coordinates)
[info]                     else
[info]                       in.skip()
[info]                     case 106748167 => if (in.isCharBufEqualsTo(l, "place"))
[info]                       _place = d9(in, _place)
[info]                     else
[info]                       in.skip()
[info]                     case 1375976184 => if (in.isCharBufEqualsTo(l, "contributors"))
[info]                       _contributors = d9(in, _contributors)
[info]                     else
[info]                       in.skip()
[info]                     case 364396852 => if (in.isCharBufEqualsTo(l, "retweeted_status"))
[info]                       {
[info]                         _retweeted_status = d13(in, _retweeted_status);
[info]                         req0.&=(-257)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -920773622 => if (in.isCharBufEqualsTo(l, "is_quote_status"))
[info]                       {
[info]                         _is_quote_status = in.readBoolean();
[info]                         req0.&=(-513)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 1612760494 => if (in.isCharBufEqualsTo(l, "retweet_count"))
[info]                       {
[info]                         _retweet_count = JsoniterCodecs.this.intCodec.decodeValue(in, _retweet_count);
[info]                         req0.&=(-1025)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1435051860 => if (in.isCharBufEqualsTo(l, "favorite_count"))
[info]                       {
[info]                         _favorite_count = JsoniterCodecs.this.intCodec.decodeValue(in, _favorite_count);
[info]                         req0.&=(-2049)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -1785238968 => if (in.isCharBufEqualsTo(l, "favorited"))
[info]                       {
[info]                         _favorited = in.readBoolean();
[info]                         req0.&=(-4097)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -881681091 => if (in.isCharBufEqualsTo(l, "retweeted"))
[info]                       {
[info]                         _retweeted = in.readBoolean();
[info]                         req0.&=(-8193)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case -4566948 => if (in.isCharBufEqualsTo(l, "possibly_sensitive"))
[info]                       {
[info]                         _possibly_sensitive = in.readBoolean();
[info]                         req0.&=(-16385)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case 3314158 => if (in.isCharBufEqualsTo(l, "lang"))
[info]                       {
[info]                         _lang = JsoniterCodecs.this.stringCodec.decodeValue(in, _lang);
[info]                         req0.&=(-32769)
[info]                       }
[info]                     else
[info]                       in.skip()
[info]                     case _ => in.skip()
[info]                   }
[info]                 }
[info]                while (in.isNextToken(',')) ;
[info]               if (in.isCurrentToken('}').`unary_!`)
[info]                 in.objectEndOrCommaError()
[info]               else
[info]                 ()
[info]             }
[info]           else
[info]             ();
[info]           if (req0.==(0))
[info]             new com.github.plokhotnyuk.jsoniter_scala.macros.Tweet(created_at = _created_at, id = _id, id_str = _id_str, text = _text, truncated = _truncated, entities = _entities, source = _source, in_reply_to_status_id = _in_reply_to_status_id, in_reply_to_status_id_str = _in_reply_to_status_id_str, in_reply_to_user_id = _in_reply_to_user_id, in_reply_to_user_id_str = _in_reply_to_user_id_str, in_reply_to_screen_name = _in_reply_to_screen_name, user = _user, geo = _geo, coordinates = _coordinates, place = _place, contributors = _contributors, retweeted_status = _retweeted_status, is_quote_status = _is_quote_status, retweet_count = _retweet_count, favorite_count = _favorite_count, favorited = _favorited, retweeted = _retweeted, possibly_sensitive = _possibly_sensitive, lang = _lang)
[info]           else
[info]             in.requiredFieldError(r0, Array(req0))
[info]         }
[info]       else
[info]         in.readNullOrTokenError(default, '{');
[info]       private[this] def d0(in: JsonReader, default: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet]): Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet] = if (in.isNextToken('['))
[info]         if (in.isNextToken(']'))
[info]           default
[info]         else
[info]           {
[info]             in.rollbackToken();
[info]             val x = Seq.newBuilder[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet];
[info]             do 
[info]               x.+=(d1(in, null))
[info]              while (in.isNextToken(',')) ;
[info]             if (in.isCurrentToken(']'))
[info]               x.result()
[info]             else
[info]               in.arrayEndOrCommaError()
[info]           }
[info]       else
[info]         in.readNullOrTokenError(default, '[');
[info]       private[this] def e3(x: Seq[String], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e6(x: Seq[Int], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           JsoniterCodecs.this.intCodec.encodeValue(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e5(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e4(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.UserMentions], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e5(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e8(x: com.github.plokhotnyuk.jsoniter_scala.macros.Urls, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("expanded_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.expanded_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("display_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.display_url, out)
[info]         };
[info]         {
[info]           val v = x.indices;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("indices");
[info]               e6(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e7(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Urls], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e8(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       };
[info]       private[this] def e2(x: com.github.plokhotnyuk.jsoniter_scala.macros.Entities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.hashtags;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("hashtags");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.symbols;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("symbols");
[info]               e3(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.user_mentions;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("user_mentions");
[info]               e4(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e11(x: com.github.plokhotnyuk.jsoniter_scala.macros.Url, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           val v = x.urls;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("urls");
[info]               e7(v, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e10(x: com.github.plokhotnyuk.jsoniter_scala.macros.UserEntities, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           e11(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           e11(x.description, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e9(x: com.github.plokhotnyuk.jsoniter_scala.macros.User, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("screen_name");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.screen_name, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("location");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.location, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("description");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.description, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e10(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("protected");
[info]           out.writeVal(x.`protected`)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("followers_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.followers_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("friends_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.friends_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("listed_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.listed_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favourites_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favourites_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("utc_offset");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.utc_offset, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("time_zone");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.time_zone, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("geo_enabled");
[info]           out.writeVal(x.geo_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("verified");
[info]           out.writeVal(x.verified)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("statuses_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.statuses_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("contributors_enabled");
[info]           out.writeVal(x.contributors_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translator");
[info]           out.writeVal(x.is_translator)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_translation_enabled");
[info]           out.writeVal(x.is_translation_enabled)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_background_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_background_tile");
[info]           out.writeVal(x.profile_background_tile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_image_url_https");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_image_url_https, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_banner_url");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_banner_url, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_link_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_link_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_border_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_border_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_sidebar_fill_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_sidebar_fill_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_text_color");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.profile_text_color, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("profile_use_background_image");
[info]           out.writeVal(x.profile_use_background_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("has_extended_profile");
[info]           out.writeVal(x.has_extended_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile");
[info]           out.writeVal(x.default_profile)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("default_profile_image");
[info]           out.writeVal(x.default_profile_image)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("following");
[info]           out.writeVal(x.following)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("follow_request_sent");
[info]           out.writeVal(x.follow_request_sent)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("notifications");
[info]           out.writeVal(x.notifications)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("translator_type");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.translator_type, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e12(x: com.github.plokhotnyuk.jsoniter_scala.macros.RetweetedStatus, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e1(x: com.github.plokhotnyuk.jsoniter_scala.macros.Tweet, out: JsonWriter): Unit = {
[info]         out.writeObjectStart();
[info]         {
[info]           out.writeNonEscapedAsciiKey("created_at");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.created_at, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id");
[info]           out.writeVal(x.id)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("id_str");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.id_str, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("text");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.text, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("truncated");
[info]           out.writeVal(x.truncated)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("entities");
[info]           e2(x.entities, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("source");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.source, out)
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_status_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_status_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_user_id_str;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_user_id_str");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.in_reply_to_screen_name;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("in_reply_to_screen_name");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("user");
[info]           e9(x.user, out)
[info]         };
[info]         {
[info]           val v = x.geo;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("geo");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.coordinates;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("coordinates");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.place;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("place");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           val v = x.contributors;
[info]           if (v.isEmpty.`unary_!`)
[info]             {
[info]               out.writeNonEscapedAsciiKey("contributors");
[info]               JsoniterCodecs.this.stringCodec.encodeValue(v.get, out)
[info]             }
[info]           else
[info]             ()
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted_status");
[info]           e12(x.retweeted_status, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("is_quote_status");
[info]           out.writeVal(x.is_quote_status)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweet_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.retweet_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorite_count");
[info]           JsoniterCodecs.this.intCodec.encodeValue(x.favorite_count, out)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("favorited");
[info]           out.writeVal(x.favorited)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("retweeted");
[info]           out.writeVal(x.retweeted)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("possibly_sensitive");
[info]           out.writeVal(x.possibly_sensitive)
[info]         };
[info]         {
[info]           out.writeNonEscapedAsciiKey("lang");
[info]           JsoniterCodecs.this.stringCodec.encodeValue(x.lang, out)
[info]         };
[info]         out.writeObjectEnd()
[info]       };
[info]       private[this] def e0(x: Seq[com.github.plokhotnyuk.jsoniter_scala.macros.Tweet], out: JsonWriter): Unit = {
[info]         out.writeArrayStart();
[info]         x.foreach(((x) => {
[info]           out.writeComma();
[info]           e1(x, out)
[info]         }));
[info]         out.writeArrayEnd()
[info]       }
[info]     };
[info]     new $anon()
[info]   }
[info] }
[info]   implicit val twitterAPICodec: JsonValueCodec[Seq[Tweet]] = make[Seq[Tweet]](CodecMakerConfig())
[info]                                                                              ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:15:18: local val v1 in value arraysFormat is never used
[warn]     implicit val v1: Format[Array[BigInt]] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:21:18: local val v1 in value bitSetsFormat is never used
[warn]     implicit val v1: Reads[BitSet] = Reads[BitSet](js => JsSuccess(BitSet(js.as[Array[Int]]: _*)))
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:22:18: local val v2 in value bitSetsFormat is never used
[warn]     implicit val v2: Reads[mutable.BitSet] =
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:29:18: local val v1 in value mapsFormat is never used
[warn]     implicit val v1: OFormat[HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:32:18: local val v2 in value mapsFormat is never used
[warn]     implicit val v2: OFormat[Map[Int, HashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:44:18: local val v1 in value mutableMapsFormat is never used
[warn]     implicit val v1: OFormat[mutable.HashMap[String, Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:47:18: local val v2 in value mutableMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.Map[Int, mutable.OpenHashMap[Long, Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:64:18: local val v1 in value intAndLongMapsFormat is never used
[warn]     implicit val v1: OFormat[IntMap[Double]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:69:18: local val v2 in value intAndLongMapsFormat is never used
[warn]     implicit val v2: OFormat[mutable.LongMap[LongMap[Double]]] = OFormat(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:81:18: local val v1 in value primitivesFormat is never used
[warn]     implicit val v1: Format[Char] = Format(
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:88:23: local val v1 in value adtFormat is never used
[warn]     implicit lazy val v1: OFormat[A] = Json.format[A]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:89:23: local val v2 in value adtFormat is never used
[warn]     implicit lazy val v2: OFormat[B] = Json.format[B]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:90:23: local val v3 in value adtFormat is never used
[warn]     implicit lazy val v3: OFormat[C] = Json.format[C]
[warn]                       ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:95:18: local val v1 in value googleMapsAPIFormat is never used
[warn]     implicit val v1: OFormat[Value] = Json.format[Value]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:96:18: local val v2 in value googleMapsAPIFormat is never used
[warn]     implicit val v2: OFormat[Elements] = Json.format[Elements]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:97:18: local val v3 in value googleMapsAPIFormat is never used
[warn]     implicit val v3: OFormat[Rows] = Json.format[Rows]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:101:18: local val v1 in value twitterAPIFormat is never used
[warn]     implicit val v1: OFormat[Urls] = Json.format[Urls]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:102:18: local val v2 in value twitterAPIFormat is never used
[warn]     implicit val v2: OFormat[Url] = Json.format[Url]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:103:18: local val v3 in value twitterAPIFormat is never used
[warn]     implicit val v3: OFormat[UserEntities] = Json.format[UserEntities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:104:18: local val v4 in value twitterAPIFormat is never used
[warn]     implicit val v4: OFormat[UserMentions] = Json.format[UserMentions]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:105:18: local val v5 in value twitterAPIFormat is never used
[warn]     implicit val v5: OFormat[Entities] = Json.format[Entities]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:106:18: local val v6 in value twitterAPIFormat is never used
[warn]     implicit val v6: Format[User] = Jsonx.formatCaseClass[User]
[warn]                  ^
[warn] /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/src/main/scala/com/github/plokhotnyuk/jsoniter_scala/macros/PlayJsonFormats.scala:107:18: local val v7 in value twitterAPIFormat is never used
[warn]     implicit val v7: Format[RetweetedStatus] = Jsonx.formatCaseClass[RetweetedStatus]
[warn]                  ^
[warn] 23 warnings found
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.18.1-SNAPSHOT.jar ...
Processing 332 classes from /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes with "reflection" generator
Writing out Java source to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/src_managed/jmh and resources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/resource_managed/jmh
[info] Compiling 41 Scala sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/test-classes ...
[info] Done packaging.
[info] Compiling 463 Java sources to /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/classes ...
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.18.1-SNAPSHOT-tests.jar ...
[info] Done packaging.
[info] Done compiling.
[info] Packaging /home/andriy/Projects/com/github/plokhotnyuk/jsoniter-scala/benchmark/target/scala-2.12/benchmark_2.12-0.18.1-SNAPSHOT-jmh.jar ...
[info] Done packaging.
[info] Running (fork) org.openjdk.jmh.Main -prof gc -rf json -rff jdk9.json .*Benchmark.*
[error] WARNING: An illegal reflective access operation has occurred
[error] WARNING: Illegal reflective access by org.openjdk.jmh.util.Utils (file:/tmp/sbt_81752680/target/5f9f9839/jmh-core-1.20.jar) to field java.io.PrintStream.charOut
[error] WARNING: Please consider reporting this to the maintainers of org.openjdk.jmh.util.Utils
[error] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[error] WARNING: All illegal access operations will be denied in a future release
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce
[info] # Run progress: 0.00% complete, ETA 00:40:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 380414.688 ops/s
[info] # Warmup Iteration   2: 748340.718 ops/s
[info] # Warmup Iteration   3: 753767.838 ops/s
[info] Iteration   1: 757140.607 ops/s
[info]                  ·gc.alloc.rate:                   2001.031 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.216 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1970.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4095.816 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 759508.760 ops/s
[info]                  ·gc.alloc.rate:                   2007.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4125.904 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 754546.887 ops/s
[info]                  ·gc.alloc.rate:                   1994.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4190.342 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 755742.453 ops/s
[info]                  ·gc.alloc.rate:                   1997.685 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.854 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4210.330 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 756171.830 ops/s
[info]                  ·gc.alloc.rate:                   1998.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4223.131 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce":
[info]   756622.108 ±(99.9%) 7174.166 ops/s [Average]
[info]   (min, avg, max) = (754546.887, 756622.108, 759508.760), stdev = 1863.108
[info]   CI (99.9%): [749447.941, 763796.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate":
[info]   1999.614 ±(99.9%) 19.047 MB/sec [Average]
[info]   (min, avg, max) = (1994.041, 1999.614, 2007.271), stdev = 4.946
[info]   CI (99.9%): [1980.567, 2018.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.000, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.182 ±(99.9%) 0.140 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.182, 0.217), stdev = 0.036
[info]   CI (99.9%): [0.042, 0.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2003.956 ±(99.9%) 91.378 MB/sec [Average]
[info]   (min, avg, max) = (1970.157, 2003.956, 2028.365), stdev = 23.731
[info]   CI (99.9%): [1912.578, 2095.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4169.105 ±(99.9%) 213.588 B/op [Average]
[info]   (min, avg, max) = (4095.816, 4169.105, 4223.131), stdev = 55.468
[info]   CI (99.9%): [3955.517, 4382.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala
[info] # Run progress: 0.33% complete, ETA 01:04:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459867.389 ops/s
[info] # Warmup Iteration   2: 1666237.117 ops/s
[info] # Warmup Iteration   3: 1671961.006 ops/s
[info] Iteration   1: 1654798.144 ops/s
[info]                  ·gc.alloc.rate:                   1177.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245.521 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1673632.815 ops/s
[info]                  ·gc.alloc.rate:                   1190.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 930.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1667434.777 ops/s
[info]                  ·gc.alloc.rate:                   1186.253 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1253.353 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1612396.545 ops/s
[info]                  ·gc.alloc.rate:                   1146.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.817 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 977.265 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1652371.877 ops/s
[info]                  ·gc.alloc.rate:                   1175.642 MB/sec
[info]                  ·gc.alloc.rate.norm:              1120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1277.832 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala":
[info]   1652126.832 ±(99.9%) 91983.899 ops/s [Average]
[info]   (min, avg, max) = (1612396.545, 1652126.832, 1673632.815), stdev = 23887.927
[info]   CI (99.9%): [1560142.932, 1744110.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1175.343 ±(99.9%) 65.669 MB/sec [Average]
[info]   (min, avg, max) = (1146.992, 1175.343, 1190.753), stdev = 17.054
[info]   CI (99.9%): [1109.674, 1241.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1120.000, 1120.000, 1120.000), stdev = 0.001
[info]   CI (99.9%): [1120.000, 1120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.075 ±(99.9%) 0.084 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.075, 0.099), stdev = 0.022
[info]   CI (99.9%): [≈ 0, 0.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.599 ±(99.9%) 699.334 MB/sec [Average]
[info]   (min, avg, max) = (989.376, 1193.599, 1341.315), stdev = 181.615
[info]   CI (99.9%): [494.265, 1892.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1136.912 ±(99.9%) 647.977 B/op [Average]
[info]   (min, avg, max) = (930.589, 1136.912, 1277.832), stdev = 168.278
[info]   CI (99.9%): [488.935, 1784.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.342
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala
[info] # Run progress: 0.66% complete, ETA 01:03:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2560068.440 ops/s
[info] # Warmup Iteration   2: 3480692.897 ops/s
[info] # Warmup Iteration   3: 3569280.635 ops/s
[info] Iteration   1: 3585463.201 ops/s
[info]                  ·gc.alloc.rate:                   236.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.025 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3587235.566 ops/s
[info]                  ·gc.alloc.rate:                   236.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.235 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3571014.365 ops/s
[info]                  ·gc.alloc.rate:                   235.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3584512.482 ops/s
[info]                  ·gc.alloc.rate:                   236.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.308 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3576342.703 ops/s
[info]                  ·gc.alloc.rate:                   236.316 MB/sec
[info]                  ·gc.alloc.rate.norm:              104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 145.989 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala":
[info]   3580913.663 ±(99.9%) 26713.176 ops/s [Average]
[info]   (min, avg, max) = (3571014.365, 3580913.663, 3587235.566), stdev = 6937.327
[info]   CI (99.9%): [3554200.487, 3607626.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   236.569 ±(99.9%) 1.735 MB/sec [Average]
[info]   (min, avg, max) = (235.901, 236.569, 236.988), stdev = 0.451
[info]   CI (99.9%): [234.834, 238.304] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (104.000, 104.000, 104.000), stdev = 0.001
[info]   CI (99.9%): [104.000, 104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.640 ±(99.9%) 5.455 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.640, 3.174), stdev = 1.417
[info]   CI (99.9%): [≈ 0, 6.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.282 ±(99.9%) 2.401 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.282, 1.397), stdev = 0.623
[info]   CI (99.9%): [≈ 0, 2.682] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   270.922 ±(99.9%) 130.884 MB/sec [Average]
[info]   (min, avg, max) = (255.673, 270.922, 331.725), stdev = 33.990
[info]   CI (99.9%): [140.037, 401.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   119.110 ±(99.9%) 57.865 B/op [Average]
[info]   (min, avg, max) = (112.235, 119.110, 145.989), stdev = 15.027
[info]   CI (99.9%): [61.245, 176.974] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson
[info] # Run progress: 0.99% complete, ETA 01:03:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24371.464 ops/s
[info] # Warmup Iteration   2: 173364.905 ops/s
[info] # Warmup Iteration   3: 176078.229 ops/s
[info] Iteration   1: 177636.664 ops/s
[info]                  ·gc.alloc.rate:                   1487.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.369 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.803 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14544.949 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 174606.873 ops/s
[info]                  ·gc.alloc.rate:                   1462.291 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11949.002 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 174232.369 ops/s
[info]                  ·gc.alloc.rate:                   1459.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15076.277 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 178474.042 ops/s
[info]                  ·gc.alloc.rate:                   1494.652 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.551 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11838.610 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 173513.391 ops/s
[info]                  ·gc.alloc.rate:                   1452.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              13184.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12230.406 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson":
[info]   175692.668 ±(99.9%) 8518.508 ops/s [Average]
[info]   (min, avg, max) = (173513.391, 175692.668, 178474.042), stdev = 2212.229
[info]   CI (99.9%): [167174.160, 184211.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1471.237 ±(99.9%) 71.255 MB/sec [Average]
[info]   (min, avg, max) = (1452.912, 1471.237, 1494.652), stdev = 18.505
[info]   CI (99.9%): [1399.982, 1542.493] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   13184.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13184.002, 13184.002, 13184.002), stdev = 0.001
[info]   CI (99.9%): [13184.002, 13184.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.673 ±(99.9%) 1.108 B/op [Average]
[info]   (min, avg, max) = (0.369, 0.673, 1.126), stdev = 0.288
[info]   CI (99.9%): [≈ 0, 1.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1464.907 ±(99.9%) 668.749 MB/sec [Average]
[info]   (min, avg, max) = (1325.313, 1464.907, 1668.471), stdev = 173.672
[info]   CI (99.9%): [796.158, 2133.657] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   13127.849 ±(99.9%) 5984.552 B/op [Average]
[info]   (min, avg, max) = (11838.610, 13127.849, 15076.277), stdev = 1554.169
[info]   CI (99.9%): [7143.297, 19112.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala
[info] # Run progress: 1.32% complete, ETA 01:03:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 658768.910 ops/s
[info] # Warmup Iteration   2: 2111565.120 ops/s
[info] # Warmup Iteration   3: 2101422.146 ops/s
[info] Iteration   1: 2103258.304 ops/s
[info]                  ·gc.alloc.rate:                   876.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 730.974 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2098262.121 ops/s
[info]                  ·gc.alloc.rate:                   874.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.680 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 491.162 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2089763.882 ops/s
[info]                  ·gc.alloc.rate:                   870.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.595 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.225 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2103594.640 ops/s
[info]                  ·gc.alloc.rate:                   876.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.396 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 743.335 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2104701.671 ops/s
[info]                  ·gc.alloc.rate:                   877.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      664.820 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 497.136 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala":
[info]   2099916.124 ±(99.9%) 23846.559 ops/s [Average]
[info]   (min, avg, max) = (2089763.882, 2099916.124, 2104701.671), stdev = 6192.876
[info]   CI (99.9%): [2076069.564, 2123762.683] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   875.078 ±(99.9%) 10.081 MB/sec [Average]
[info]   (min, avg, max) = (870.808, 875.078, 877.269), stdev = 2.618
[info]   CI (99.9%): [864.997, 885.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.062 ±(99.9%) 0.112 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.062, 0.094), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   855.174 ±(99.9%) 687.480 MB/sec [Average]
[info]   (min, avg, max) = (654.680, 855.174, 993.396), stdev = 178.536
[info]   CI (99.9%): [167.695, 1542.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   641.166 ±(99.9%) 517.213 B/op [Average]
[info]   (min, avg, max) = (491.162, 641.166, 743.335), stdev = 134.319
[info]   CI (99.9%): [123.953, 1158.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala
[info] # Run progress: 1.65% complete, ETA 01:03:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5103923.041 ops/s
[info] # Warmup Iteration   2: 6658376.426 ops/s
[info] # Warmup Iteration   3: 6676920.634 ops/s
[info] Iteration   1: 6414415.491 ops/s
[info]                  ·gc.alloc.rate:                   326.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.011 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 6663411.348 ops/s
[info]                  ·gc.alloc.rate:                   338.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 60.420 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6639698.105 ops/s
[info]                  ·gc.alloc.rate:                   337.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.765 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.931 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.760 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6604124.135 ops/s
[info]                  ·gc.alloc.rate:                   335.593 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78.183 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6655434.241 ops/s
[info]                  ·gc.alloc.rate:                   338.203 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.185 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala":
[info]   6595416.664 ±(99.9%) 399352.235 ops/s [Average]
[info]   (min, avg, max) = (6414415.491, 6595416.664, 6663411.348), stdev = 103710.507
[info]   CI (99.9%): [6196064.429, 6994768.900] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   335.154 ±(99.9%) 20.186 MB/sec [Average]
[info]   (min, avg, max) = (326.007, 335.154, 338.592), stdev = 5.242
[info]   CI (99.9%): [314.968, 355.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.764 ±(99.9%) 6.462 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.764, 3.765), stdev = 1.678
[info]   CI (99.9%): [≈ 0, 7.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.181 ±(99.9%) 1.532 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.181, 0.893), stdev = 0.398
[info]   CI (99.9%): [≈ 0, 1.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   349.893 ±(99.9%) 367.919 MB/sec [Average]
[info]   (min, avg, max) = (255.722, 349.893, 511.539), stdev = 95.547
[info]   CI (99.9%): [≈ 0, 717.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   83.815 ±(99.9%) 94.315 B/op [Average]
[info]   (min, avg, max) = (60.420, 83.815, 125.529), stdev = 24.493
[info]   CI (99.9%): [≈ 0, 178.130] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson
[info] # Run progress: 1.98% complete, ETA 01:02:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 70841.978 ops/s
[info] # Warmup Iteration   2: 312762.335 ops/s
[info] # Warmup Iteration   3: 318309.060 ops/s
[info] Iteration   1: 316635.041 ops/s
[info]                  ·gc.alloc.rate:                   1033.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.852 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4875.365 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 312980.338 ops/s
[info]                  ·gc.alloc.rate:                   1021.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.523 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4955.973 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 316994.211 ops/s
[info]                  ·gc.alloc.rate:                   1034.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.723 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4919.592 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 317826.316 ops/s
[info]                  ·gc.alloc.rate:                   1037.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4937.945 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 314423.166 ops/s
[info]                  ·gc.alloc.rate:                   1025.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              5136.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5011.478 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson":
[info]   315771.814 ±(99.9%) 7718.496 ops/s [Average]
[info]   (min, avg, max) = (312980.338, 315771.814, 317826.316), stdev = 2004.469
[info]   CI (99.9%): [308053.319, 323490.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1030.306 ±(99.9%) 25.315 MB/sec [Average]
[info]   (min, avg, max) = (1021.113, 1030.306, 1037.015), stdev = 6.574
[info]   CI (99.9%): [1004.990, 1055.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5136.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5136.001, 5136.001, 5136.001), stdev = 0.001
[info]   CI (99.9%): [5136.001, 5136.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.478 ±(99.9%) 0.726 B/op [Average]
[info]   (min, avg, max) = (0.206, 0.478, 0.723), stdev = 0.189
[info]   CI (99.9%): [≈ 0, 1.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   990.972 ±(99.9%) 31.781 MB/sec [Average]
[info]   (min, avg, max) = (980.852, 990.972, 1001.039), stdev = 8.253
[info]   CI (99.9%): [959.191, 1022.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4940.071 ±(99.9%) 192.172 B/op [Average]
[info]   (min, avg, max) = (4875.365, 4940.071, 5011.478), stdev = 49.906
[info]   CI (99.9%): [4747.899, 5132.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AdtBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce
[info] # Run progress: 2.31% complete, ETA 01:02:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1015317.344 ops/s
[info] # Warmup Iteration   2: 1617914.194 ops/s
[info] # Warmup Iteration   3: 1614896.591 ops/s
[info] Iteration   1: 1650533.147 ops/s
[info]                  ·gc.alloc.rate:                   2557.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2657.773 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2535.327 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 1635011.131 ops/s
[info]                  ·gc.alloc.rate:                   2533.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2347.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2260.968 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1639579.076 ops/s
[info]                  ·gc.alloc.rate:                   2541.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2701.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2593.971 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1647678.680 ops/s
[info]                  ·gc.alloc.rate:                   2553.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2267.005 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1617775.900 ops/s
[info]                  ·gc.alloc.rate:                   2507.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              2440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2644.021 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce":
[info]   1638115.587 ±(99.9%) 49877.764 ops/s [Average]
[info]   (min, avg, max) = (1617775.900, 1638115.587, 1650533.147), stdev = 12953.097
[info]   CI (99.9%): [1588237.823, 1687993.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate":
[info]   2538.813 ±(99.9%) 77.213 MB/sec [Average]
[info]   (min, avg, max) = (2507.344, 2538.813, 2557.842), stdev = 20.052
[info]   CI (99.9%): [2461.600, 2616.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2440.000, 2440.000, 2440.000), stdev = 0.001
[info]   CI (99.9%): [2440.000, 2440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.088 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.088, 0.122), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2559.405 ±(99.9%) 705.533 MB/sec [Average]
[info]   (min, avg, max) = (2347.920, 2559.405, 2716.996), stdev = 183.225
[info]   CI (99.9%): [1853.872, 3264.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2460.258 ±(99.9%) 705.695 B/op [Average]
[info]   (min, avg, max) = (2260.968, 2460.258, 2644.021), stdev = 183.267
[info]   CI (99.9%): [1754.564, 3165.953] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala
[info] # Run progress: 2.64% complete, ETA 01:02:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 911810.790 ops/s
[info] # Warmup Iteration   2: 2569510.412 ops/s
[info] # Warmup Iteration   3: 2571518.047 ops/s
[info] Iteration   1: 2625958.499 ops/s
[info]                  ·gc.alloc.rate:                   1841.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 991.942 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2628104.010 ops/s
[info]                  ·gc.alloc.rate:                   1843.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.075 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200.824 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 2627713.663 ops/s
[info]                  ·gc.alloc.rate:                   1842.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1007.833 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2619366.237 ops/s
[info]                  ·gc.alloc.rate:                   1836.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217.963 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2604108.576 ops/s
[info]                  ·gc.alloc.rate:                   1826.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              1104.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1024.131 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala":
[info]   2621050.197 ±(99.9%) 38894.540 ops/s [Average]
[info]   (min, avg, max) = (2604108.576, 2621050.197, 2628104.010), stdev = 10100.789
[info]   CI (99.9%): [2582155.657, 2659944.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1838.045 ±(99.9%) 27.488 MB/sec [Average]
[info]   (min, avg, max) = (1826.135, 1838.045, 1843.198), stdev = 7.138
[info]   CI (99.9%): [1810.558, 1865.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1104.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1104.000, 1104.000, 1104.000), stdev = 0.001
[info]   CI (99.9%): [1104.000, 1104.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.166), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.062 ±(99.9%) 0.102 B/op [Average]
[info]   (min, avg, max) = (0.037, 0.062, 0.100), stdev = 0.026
[info]   CI (99.9%): [≈ 0, 0.164] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1812.388 ±(99.9%) 716.973 MB/sec [Average]
[info]   (min, avg, max) = (1654.517, 1812.388, 2026.308), stdev = 186.196
[info]   CI (99.9%): [1095.415, 2529.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1088.539 ±(99.9%) 427.712 B/op [Average]
[info]   (min, avg, max) = (991.942, 1088.539, 1217.963), stdev = 111.075
[info]   CI (99.9%): [660.827, 1516.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 8.000), stdev = 1.140
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala
[info] # Run progress: 2.97% complete, ETA 01:02:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9292758.205 ops/s
[info] # Warmup Iteration   2: 10285469.845 ops/s
[info] # Warmup Iteration   3: 10385110.028 ops/s
[info] Iteration   1: 10325542.615 ops/s
[info]                  ·gc.alloc.rate:                   1311.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 201.028 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 10443684.945 ops/s
[info]                  ·gc.alloc.rate:                   1326.714 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.620 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10504384.871 ops/s
[info]                  ·gc.alloc.rate:                   1334.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.449 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 10514554.961 ops/s
[info]                  ·gc.alloc.rate:                   1335.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 10373244.678 ops/s
[info]                  ·gc.alloc.rate:                   1318.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              200.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 203.703 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala":
[info]   10432282.414 ±(99.9%) 316224.347 ops/s [Average]
[info]   (min, avg, max) = (10325542.615, 10432282.414, 10514554.961), stdev = 82122.459
[info]   CI (99.9%): [10116058.067, 10748506.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1325.346 ±(99.9%) 39.839 MB/sec [Average]
[info]   (min, avg, max) = (1311.649, 1325.346, 1335.709), stdev = 10.346
[info]   CI (99.9%): [1285.507, 1365.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   200.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (200.000, 200.000, 200.000), stdev = 0.001
[info]   CI (99.9%): [200.000, 200.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.010 ±(99.9%) 0.026 B/op [Average]
[info]   (min, avg, max) = (0.006, 0.010, 0.022), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1330.690 ±(99.9%) 37.709 MB/sec [Average]
[info]   (min, avg, max) = (1318.391, 1330.690, 1342.694), stdev = 9.793
[info]   CI (99.9%): [1292.980, 1368.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   200.813 ±(99.9%) 6.664 B/op [Average]
[info]   (min, avg, max) = (199.449, 200.813, 203.703), stdev = 1.731
[info]   CI (99.9%): [194.148, 207.477] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson
[info] # Run progress: 3.30% complete, ETA 01:01:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 149418.386 ops/s
[info] # Warmup Iteration   2: 652929.986 ops/s
[info] # Warmup Iteration   3: 643483.314 ops/s
[info] Iteration   1: 650632.903 ops/s
[info]                  ·gc.alloc.rate:                   1718.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4790.490 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 655228.869 ops/s
[info]                  ·gc.alloc.rate:                   1731.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.250 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.890 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4002.583 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 651270.027 ops/s
[info]                  ·gc.alloc.rate:                   1721.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4054.983 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 646744.326 ops/s
[info]                  ·gc.alloc.rate:                   1709.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4102.845 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 652758.635 ops/s
[info]                  ·gc.alloc.rate:                   1725.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              4160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4078.541 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson":
[info]   651326.952 ±(99.9%) 11986.592 ops/s [Average]
[info]   (min, avg, max) = (646744.326, 651326.952, 655228.869), stdev = 3112.880
[info]   CI (99.9%): [639340.360, 663313.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1721.147 ±(99.9%) 31.743 MB/sec [Average]
[info]   (min, avg, max) = (1709.143, 1721.147, 1731.407), stdev = 8.243
[info]   CI (99.9%): [1689.404, 1752.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   4160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4160.001, 4160.001, 4160.001), stdev = 0.001
[info]   CI (99.9%): [4160.001, 4160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.231 ±(99.9%) 0.107 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.231, 0.253), stdev = 0.028
[info]   CI (99.9%): [0.124, 0.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.003 ±(99.9%) 516.628 MB/sec [Average]
[info]   (min, avg, max) = (1665.890, 1740.003, 1979.391), stdev = 134.167
[info]   CI (99.9%): [1223.376, 2256.631] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4205.888 ±(99.9%) 1266.476 B/op [Average]
[info]   (min, avg, max) = (4002.583, 4205.888, 4790.490), stdev = 328.900
[info]   CI (99.9%): [2939.412, 5472.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.600, 10.000), stdev = 1.949
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce
[info] # Run progress: 3.63% complete, ETA 01:01:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1190753.977 ops/s
[info] # Warmup Iteration   2: 1991245.534 ops/s
[info] # Warmup Iteration   3: 2001914.482 ops/s
[info] Iteration   1: 2027881.405 ops/s
[info]                  ·gc.alloc.rate:                   1854.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1274.630 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2000304.703 ops/s
[info]                  ·gc.alloc.rate:                   1829.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.098 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1564.835 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2033670.201 ops/s
[info]                  ·gc.alloc.rate:                   1860.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1292.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2011567.037 ops/s
[info]                  ·gc.alloc.rate:                   1840.052 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1579.171 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1981874.574 ops/s
[info]                  ·gc.alloc.rate:                   1813.066 MB/sec
[info]                  ·gc.alloc.rate.norm:              1440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.099 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1340.885 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce":
[info]   2011059.584 ±(99.9%) 80815.455 ops/s [Average]
[info]   (min, avg, max) = (1981874.574, 2011059.584, 2033670.201), stdev = 20987.517
[info]   CI (99.9%): [1930244.130, 2091875.039] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1839.495 ±(99.9%) 73.449 MB/sec [Average]
[info]   (min, avg, max) = (1813.066, 1839.495, 1860.176), stdev = 19.075
[info]   CI (99.9%): [1766.045, 1912.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1440.000, 1440.000, 1440.000), stdev = 0.001
[info]   CI (99.9%): [1440.000, 1440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.170 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.125), stdev = 0.044
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.065 ±(99.9%) 0.135 B/op [Average]
[info]   (min, avg, max) = (0.016, 0.065, 0.099), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1801.215 ±(99.9%) 713.373 MB/sec [Average]
[info]   (min, avg, max) = (1641.659, 1801.215, 2017.886), stdev = 185.261
[info]   CI (99.9%): [1087.842, 2514.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1410.479 ±(99.9%) 575.706 B/op [Average]
[info]   (min, avg, max) = (1274.630, 1410.479, 1579.171), stdev = 149.509
[info]   CI (99.9%): [834.773, 1986.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 1.095
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala
[info] # Run progress: 3.96% complete, ETA 01:01:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 2012885.024 ops/s
[info] # Warmup Iteration   2: 6527773.903 ops/s
[info] # Warmup Iteration   3: 6568552.246 ops/s
[info] Iteration   1: 6563019.330 ops/s
[info]                  ·gc.alloc.rate:                   1800.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1979.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.895 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 6611084.838 ops/s
[info]                  ·gc.alloc.rate:                   1814.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.400 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 397.016 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 6533776.360 ops/s
[info]                  ·gc.alloc.rate:                   1792.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 485.200 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 6409219.357 ops/s
[info]                  ·gc.alloc.rate:                   1759.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 414.247 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 6469947.683 ops/s
[info]                  ·gc.alloc.rate:                   1776.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 411.732 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala":
[info]   6517409.514 ±(99.9%) 304912.473 ops/s [Average]
[info]   (min, avg, max) = (6409219.357, 6517409.514, 6611084.838), stdev = 79184.801
[info]   CI (99.9%): [6212497.040, 6822321.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1788.603 ±(99.9%) 83.046 MB/sec [Average]
[info]   (min, avg, max) = (1759.015, 1788.603, 1814.328), stdev = 21.567
[info]   CI (99.9%): [1705.556, 1871.649] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (432.000, 432.000, 432.000), stdev = 0.001
[info]   CI (99.9%): [432.000, 432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.034 B/op [Average]
[info]   (min, avg, max) = (0.015, 0.024, 0.035), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.058] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1808.012 ±(99.9%) 665.510 MB/sec [Average]
[info]   (min, avg, max) = (1667.400, 1808.012, 2013.626), stdev = 172.831
[info]   CI (99.9%): [1142.502, 2473.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   436.618 ±(99.9%) 155.385 B/op [Average]
[info]   (min, avg, max) = (397.016, 436.618, 485.200), stdev = 40.353
[info]   CI (99.9%): [281.233, 592.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJacksonScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.200, 7.000), stdev = 0.837
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala
[info] # Run progress: 4.29% complete, ETA 01:01:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 14571019.263 ops/s
[info] # Warmup Iteration   2: 21076825.700 ops/s
[info] # Warmup Iteration   3: 22071931.850 ops/s
[info] Iteration   1: 21167780.692 ops/s
[info]                  ·gc.alloc.rate:                   645.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.778 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.281 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 20842899.790 ops/s
[info]                  ·gc.alloc.rate:                   635.499 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20771319.387 ops/s
[info]                  ·gc.alloc.rate:                   633.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.361 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20370561.237 ops/s
[info]                  ·gc.alloc.rate:                   621.331 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.187 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50.384 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20768066.725 ops/s
[info]                  ·gc.alloc.rate:                   633.232 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49.520 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala":
[info]   20784125.566 ±(99.9%) 1092699.522 ops/s [Average]
[info]   (min, avg, max) = (20370561.237, 20784125.566, 21167780.692), stdev = 283770.596
[info]   CI (99.9%): [19691426.044, 21876825.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   633.794 ±(99.9%) 33.288 MB/sec [Average]
[info]   (min, avg, max) = (621.331, 633.794, 645.630), stdev = 8.645
[info]   CI (99.9%): [600.506, 667.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.797 ±(99.9%) 6.416 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.797, 3.778), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.059 ±(99.9%) 0.477 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.059, 0.281), stdev = 0.124
[info]   CI (99.9%): [≈ 0, 0.536] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.094 ±(99.9%) 7.201 MB/sec [Average]
[info]   (min, avg, max) = (651.234, 653.094, 656.165), stdev = 1.870
[info]   CI (99.9%): [645.893, 660.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   49.468 ±(99.9%) 2.239 B/op [Average]
[info]   (min, avg, max) = (48.783, 49.468, 50.384), stdev = 0.582
[info]   CI (99.9%): [47.229, 51.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 4.62% complete, ETA 01:01:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12069731.542 ops/s
[info] # Warmup Iteration   2: 22176368.849 ops/s
[info] # Warmup Iteration   3: 22284167.757 ops/s
[info] Iteration   1: 22242349.960 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 22447259.265 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 22405566.403 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 22371314.247 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 22471733.387 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc":
[info]   22387644.653 ±(99.9%) 346147.168 ops/s [Average]
[info]   (min, avg, max) = (22242349.960, 22387644.653, 22471733.387), stdev = 89893.320
[info]   CI (99.9%): [22041497.485, 22733791.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson
[info] # Run progress: 4.95% complete, ETA 01:00:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 343324.606 ops/s
[info] # Warmup Iteration   2: 1178573.920 ops/s
[info] # Warmup Iteration   3: 1162141.839 ops/s
[info] Iteration   1: 1175854.455 ops/s
[info]                  ·gc.alloc.rate:                   1750.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2212.522 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1167646.291 ops/s
[info]                  ·gc.alloc.rate:                   1738.501 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2247.005 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1174806.283 ops/s
[info]                  ·gc.alloc.rate:                   1749.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2698.514 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1155035.236 ops/s
[info]                  ·gc.alloc.rate:                   1719.631 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2298.141 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1177796.650 ops/s
[info]                  ·gc.alloc.rate:                   1754.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              2344.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.962 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2260.852 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson":
[info]   1170227.783 ±(99.9%) 35884.792 ops/s [Average]
[info]   (min, avg, max) = (1155035.236, 1170227.783, 1177796.650), stdev = 9319.166
[info]   CI (99.9%): [1134342.991, 1206112.574] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1742.452 ±(99.9%) 54.057 MB/sec [Average]
[info]   (min, avg, max) = (1719.631, 1742.452, 1754.189), stdev = 14.038
[info]   CI (99.9%): [1688.395, 1796.508] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   2344.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2344.000, 2344.000, 2344.000), stdev = 0.001
[info]   CI (99.9%): [2344.000, 2344.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.125), stdev = 0.019
[info]   CI (99.9%): [0.041, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.151 ±(99.9%) 0.096 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.151, 0.168), stdev = 0.025
[info]   CI (99.9%): [0.055, 0.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1742.161 ±(99.9%) 587.782 MB/sec [Average]
[info]   (min, avg, max) = (1652.518, 1742.161, 2013.777), stdev = 152.645
[info]   CI (99.9%): [1154.380, 2329.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2343.407 ±(99.9%) 773.465 B/op [Average]
[info]   (min, avg, max) = (2212.522, 2343.407, 2698.514), stdev = 200.866
[info]   CI (99.9%): [1569.942, 3116.872] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.AnyRefsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce
[info] # Run progress: 5.28% complete, ETA 01:00:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16506.885 ops/s
[info] # Warmup Iteration   2: 21365.354 ops/s
[info] # Warmup Iteration   3: 21481.737 ops/s
[info] Iteration   1: 21288.955 ops/s
[info]                  ·gc.alloc.rate:                   1331.751 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.791 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96708.301 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 21327.512 ops/s
[info]                  ·gc.alloc.rate:                   1334.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.289 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97036.661 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 21108.642 ops/s
[info]                  ·gc.alloc.rate:                   1320.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.656 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.461 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98634.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21467.625 ops/s
[info]                  ·gc.alloc.rate:                   1342.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122110.855 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 21421.884 ops/s
[info]                  ·gc.alloc.rate:                   1340.055 MB/sec
[info]                  ·gc.alloc.rate.norm:              98480.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.646 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.470 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 98437.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce":
[info]   21322.924 ±(99.9%) 537.104 ops/s [Average]
[info]   (min, avg, max) = (21108.642, 21322.924, 21467.625), stdev = 139.484
[info]   CI (99.9%): [20785.820, 21860.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate":
[info]   1333.889 ±(99.9%) 33.780 MB/sec [Average]
[info]   (min, avg, max) = (1320.389, 1333.889, 1342.992), stdev = 8.773
[info]   CI (99.9%): [1300.109, 1367.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   98480.030 ±(99.9%) 0.054 B/op [Average]
[info]   (min, avg, max) = (98480.019, 98480.030, 98480.052), stdev = 0.014
[info]   CI (99.9%): [98479.976, 98480.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.167), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.837 ±(99.9%) 16.397 B/op [Average]
[info]   (min, avg, max) = (1.539, 5.837, 12.289), stdev = 4.258
[info]   CI (99.9%): [≈ 0, 22.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1389.935 ±(99.9%) 594.378 MB/sec [Average]
[info]   (min, avg, max) = (1307.791, 1389.935, 1665.250), stdev = 154.358
[info]   CI (99.9%): [795.557, 1984.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   102585.490 ±(99.9%) 42154.879 B/op [Average]
[info]   (min, avg, max) = (96708.301, 102585.490, 122110.855), stdev = 10947.488
[info]   CI (99.9%): [60430.611, 144740.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 6.000), stdev = 1.140
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala
[info] # Run progress: 5.61% complete, ETA 01:00:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20432.527 ops/s
[info] # Warmup Iteration   2: 32082.554 ops/s
[info] # Warmup Iteration   3: 32398.509 ops/s
[info] Iteration   1: 31771.755 ops/s
[info]                  ·gc.alloc.rate:                   796.086 MB/sec
[info]                  ·gc.alloc.rate.norm:              39448.832 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48487.442 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 32263.482 ops/s
[info]                  ·gc.alloc.rate:                   807.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.837 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32007.418 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 31613.899 ops/s
[info]                  ·gc.alloc.rate:                   791.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49228.687 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 31916.340 ops/s
[info]                  ·gc.alloc.rate:                   799.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32683.827 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31319.105 ops/s
[info]                  ·gc.alloc.rate:                   784.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              39424.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      665.313 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33441.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala":
[info]   31776.916 ±(99.9%) 1350.992 ops/s [Average]
[info]   (min, avg, max) = (31319.105, 31776.916, 32263.482), stdev = 350.848
[info]   CI (99.9%): [30425.925, 33127.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   795.800 ±(99.9%) 33.610 MB/sec [Average]
[info]   (min, avg, max) = (784.329, 795.800, 807.804), stdev = 8.729
[info]   CI (99.9%): [762.189, 829.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39428.977 ±(99.9%) 42.739 B/op [Average]
[info]   (min, avg, max) = (39424.013, 39428.977, 39448.832), stdev = 11.099
[info]   CI (99.9%): [39386.238, 39471.716] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.042), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.101] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.438 ±(99.9%) 3.540 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.438, 2.073), stdev = 0.919
[info]   CI (99.9%): [≈ 0, 4.979] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   790.131 ±(99.9%) 679.919 MB/sec [Average]
[info]   (min, avg, max) = (655.837, 790.131, 988.475), stdev = 176.573
[info]   CI (99.9%): [110.212, 1470.050] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39169.812 ±(99.9%) 34126.488 B/op [Average]
[info]   (min, avg, max) = (32007.418, 39169.812, 49228.687), stdev = 8862.541
[info]   CI (99.9%): [5043.324, 73296.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 7.000), stdev = 1.924
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala
[info] # Run progress: 5.94% complete, ETA 01:00:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26507.582 ops/s
[info] # Warmup Iteration   2: 28532.901 ops/s
[info] # Warmup Iteration   3: 28824.778 ops/s
[info] Iteration   1: 29541.009 ops/s
[info]                  ·gc.alloc.rate:                   396.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.379 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27255.098 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 29587.444 ops/s
[info]                  ·gc.alloc.rate:                   397.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.300 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     175.587 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17504.614 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 28863.100 ops/s
[info]                  ·gc.alloc.rate:                   387.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17942.381 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 29084.053 ops/s
[info]                  ·gc.alloc.rate:                   390.621 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.623 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17733.986 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 29576.863 ops/s
[info]                  ·gc.alloc.rate:                   397.263 MB/sec
[info]                  ·gc.alloc.rate.norm:              21144.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.641 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17438.460 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala":
[info]   29330.494 ±(99.9%) 1291.871 ops/s [Average]
[info]   (min, avg, max) = (28863.100, 29330.494, 29587.444), stdev = 335.495
[info]   CI (99.9%): [28038.623, 30622.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   393.915 ±(99.9%) 17.318 MB/sec [Average]
[info]   (min, avg, max) = (387.644, 393.915, 397.330), stdev = 4.497
[info]   CI (99.9%): [376.597, 411.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   21144.015 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (21144.014, 21144.015, 21144.017), stdev = 0.001
[info]   CI (99.9%): [21144.009, 21144.020] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.681 ±(99.9%) 5.638 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.681, 3.300), stdev = 1.464
[info]   CI (99.9%): [≈ 0, 6.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   36.249 ±(99.9%) 299.990 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 36.249, 175.587), stdev = 77.906
[info]   CI (99.9%): [≈ 0, 336.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   364.906 ±(99.9%) 315.305 MB/sec [Average]
[info]   (min, avg, max) = (327.623, 364.906, 511.379), stdev = 81.884
[info]   CI (99.9%): [49.602, 680.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19574.908 ±(99.9%) 16549.929 B/op [Average]
[info]   (min, avg, max) = (17438.460, 19574.908, 27255.098), stdev = 4297.964
[info]   CI (99.9%): [3024.979, 36124.837] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson
[info] # Run progress: 6.27% complete, ETA 01:00:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13425.065 ops/s
[info] # Warmup Iteration   2: 25735.461 ops/s
[info] # Warmup Iteration   3: 25865.306 ops/s
[info] Iteration   1: 26174.229 ops/s
[info]                  ·gc.alloc.rate:                   1352.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              81336.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.503 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79381.140 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 26278.437 ops/s
[info]                  ·gc.alloc.rate:                   1357.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              81336.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.740 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79671.509 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 26342.216 ops/s
[info]                  ·gc.alloc.rate:                   1361.074 MB/sec
[info]                  ·gc.alloc.rate.norm:              81336.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79952.527 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 26187.139 ops/s
[info]                  ·gc.alloc.rate:                   1352.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              81336.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80789.034 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 25925.389 ops/s
[info]                  ·gc.alloc.rate:                   1339.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              81336.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1348.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81885.249 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson":
[info]   26181.482 ±(99.9%) 611.586 ops/s [Average]
[info]   (min, avg, max) = (25925.389, 26181.482, 26342.216), stdev = 158.827
[info]   CI (99.9%): [25569.896, 26793.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1352.655 ±(99.9%) 31.604 MB/sec [Average]
[info]   (min, avg, max) = (1339.483, 1352.655, 1361.074), stdev = 8.207
[info]   CI (99.9%): [1321.051, 1384.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81336.017 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (81336.016, 81336.017, 81336.019), stdev = 0.002
[info]   CI (99.9%): [81336.011, 81336.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.257 ±(99.9%) 6.304 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.257, 3.791), stdev = 1.637
[info]   CI (99.9%): [≈ 0, 8.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1335.957 ±(99.9%) 43.914 MB/sec [Average]
[info]   (min, avg, max) = (1319.786, 1335.957, 1348.528), stdev = 11.404
[info]   CI (99.9%): [1292.043, 1379.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80335.892 ±(99.9%) 3901.222 B/op [Average]
[info]   (min, avg, max) = (79381.140, 80335.892, 81885.249), stdev = 1013.135
[info]   CI (99.9%): [76434.670, 84237.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce
[info] # Run progress: 6.60% complete, ETA 01:00:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18689.433 ops/s
[info] # Warmup Iteration   2: 29591.426 ops/s
[info] # Warmup Iteration   3: 29692.888 ops/s
[info] Iteration   1: 29581.025 ops/s
[info]                  ·gc.alloc.rate:                   1739.112 MB/sec
[info]                  ·gc.alloc.rate.norm:              92528.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87183.458 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 30040.452 ops/s
[info]                  ·gc.alloc.rate:                   1765.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              92526.702 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.119 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 103995.623 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 30051.086 ops/s
[info]                  ·gc.alloc.rate:                   1766.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              92528.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.864 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87410.406 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 30174.236 ops/s
[info]                  ·gc.alloc.rate:                   1773.453 MB/sec
[info]                  ·gc.alloc.rate.norm:              92528.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 87572.426 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30214.151 ops/s
[info]                  ·gc.alloc.rate:                   1775.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              92528.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.084 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105447.467 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce":
[info]   30012.190 ±(99.9%) 972.739 ops/s [Average]
[info]   (min, avg, max) = (29581.025, 30012.190, 30214.151), stdev = 252.617
[info]   CI (99.9%): [29039.452, 30984.929] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1764.063 ±(99.9%) 56.398 MB/sec [Average]
[info]   (min, avg, max) = (1739.112, 1764.063, 1775.873), stdev = 14.646
[info]   CI (99.9%): [1707.665, 1820.461] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   92527.752 ±(99.9%) 2.261 B/op [Average]
[info]   (min, avg, max) = (92526.702, 92527.752, 92528.017), stdev = 0.587
[info]   CI (99.9%): [92525.491, 92530.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.805 ±(99.9%) 8.684 B/op [Average]
[info]   (min, avg, max) = (1.084, 4.805, 6.543), stdev = 2.255
[info]   CI (99.9%): [≈ 0, 13.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1798.789 ±(99.9%) 725.495 MB/sec [Average]
[info]   (min, avg, max) = (1638.658, 1798.789, 2023.834), stdev = 188.409
[info]   CI (99.9%): [1073.294, 2524.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   94321.876 ±(99.9%) 36613.564 B/op [Average]
[info]   (min, avg, max) = (87183.458, 94321.876, 105447.467), stdev = 9508.426
[info]   CI (99.9%): [57708.312, 130935.439] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala
[info] # Run progress: 6.93% complete, ETA 00:59:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 11909.308 ops/s
[info] # Warmup Iteration   2: 28547.465 ops/s
[info] # Warmup Iteration   3: 28601.757 ops/s
[info] Iteration   1: 28337.884 ops/s
[info]                  ·gc.alloc.rate:                   1561.186 MB/sec
[info]                  ·gc.alloc.rate.norm:              86744.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.468 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91536.771 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 28551.234 ops/s
[info]                  ·gc.alloc.rate:                   1551.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              85572.349 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91744.892 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 28931.420 ops/s
[info]                  ·gc.alloc.rate:                   1556.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              84696.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72887.229 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28575.007 ops/s
[info]                  ·gc.alloc.rate:                   1537.537 MB/sec
[info]                  ·gc.alloc.rate.norm:              84696.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92670.316 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 28844.737 ops/s
[info]                  ·gc.alloc.rate:                   1551.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              84696.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.494 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73704.150 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala":
[info]   28648.057 ±(99.9%) 923.144 ops/s [Average]
[info]   (min, avg, max) = (28337.884, 28648.057, 28931.420), stdev = 239.738
[info]   CI (99.9%): [27724.913, 29571.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1551.824 ±(99.9%) 34.102 MB/sec [Average]
[info]   (min, avg, max) = (1537.537, 1551.824, 1561.186), stdev = 8.856
[info]   CI (99.9%): [1517.722, 1585.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   85280.882 ±(99.9%) 3471.950 B/op [Average]
[info]   (min, avg, max) = (84696.014, 85280.882, 86744.016), stdev = 901.654
[info]   CI (99.9%): [81808.932, 88752.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.352 ±(99.9%) 9.575 B/op [Average]
[info]   (min, avg, max) = (1.132, 4.352, 8.025), stdev = 2.487
[info]   CI (99.9%): [≈ 0, 13.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1536.734 ±(99.9%) 675.835 MB/sec [Average]
[info]   (min, avg, max) = (1339.490, 1536.734, 1682.299), stdev = 175.512
[info]   CI (99.9%): [860.898, 2212.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   84508.672 ±(99.9%) 39465.115 B/op [Average]
[info]   (min, avg, max) = (72887.229, 84508.672, 92670.316), stdev = 10248.965
[info]   CI (99.9%): [45043.557, 123973.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.600, 7.000), stdev = 1.140
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala
[info] # Run progress: 7.26% complete, ETA 00:59:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 24686.109 ops/s
[info] # Warmup Iteration   2: 33764.894 ops/s
[info] # Warmup Iteration   3: 33471.532 ops/s
[info] Iteration   1: 33153.062 ops/s
[info]                  ·gc.alloc.rate:                   1688.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              80208.836 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.953 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.275 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77802.878 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 33595.463 ops/s
[info]                  ·gc.alloc.rate:                   1712.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              80272.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.826 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.418 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92993.169 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 33222.402 ops/s
[info]                  ·gc.alloc.rate:                   1693.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              80272.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.917 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79061.305 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 33122.079 ops/s
[info]                  ·gc.alloc.rate:                   1688.919 MB/sec
[info]                  ·gc.alloc.rate.norm:              80272.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.891 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79747.864 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 33558.294 ops/s
[info]                  ·gc.alloc.rate:                   1711.092 MB/sec
[info]                  ·gc.alloc.rate.norm:              80272.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.929 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79066.492 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala":
[info]   33330.260 ±(99.9%) 879.566 ops/s [Average]
[info]   (min, avg, max) = (33122.079, 33330.260, 33595.463), stdev = 228.421
[info]   CI (99.9%): [32450.693, 34209.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1699.144 ±(99.9%) 45.994 MB/sec [Average]
[info]   (min, avg, max) = (1688.919, 1699.144, 1712.957), stdev = 11.945
[info]   CI (99.9%): [1653.149, 1745.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   80259.377 ±(99.9%) 108.795 B/op [Average]
[info]   (min, avg, max) = (80208.836, 80259.377, 80272.013), stdev = 28.254
[info]   CI (99.9%): [80150.583, 80368.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.146), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.123 ±(99.9%) 8.990 B/op [Average]
[info]   (min, avg, max) = (0.989, 4.123, 6.826), stdev = 2.335
[info]   CI (99.9%): [≈ 0, 13.112] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1730.849 ±(99.9%) 550.166 MB/sec [Average]
[info]   (min, avg, max) = (1638.275, 1730.849, 1984.418), stdev = 142.876
[info]   CI (99.9%): [1180.683, 2281.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81734.342 ±(99.9%) 24386.029 B/op [Average]
[info]   (min, avg, max) = (77802.878, 81734.342, 92993.169), stdev = 6332.974
[info]   CI (99.9%): [57348.313, 106120.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 7.59% complete, ETA 00:59:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 25682.773 ops/s
[info] # Warmup Iteration   2: 34561.211 ops/s
[info] # Warmup Iteration   3: 35365.323 ops/s
[info] Iteration   1: 34416.778 ops/s
[info]                  ·gc.alloc.rate:                   1643.763 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.435 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74948.328 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 34937.181 ops/s
[info]                  ·gc.alloc.rate:                   1668.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.564 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1652.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74465.310 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 35340.875 ops/s
[info]                  ·gc.alloc.rate:                   1687.846 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.927 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.653 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74203.312 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 35417.998 ops/s
[info]                  ·gc.alloc.rate:                   1691.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74498.710 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 35651.309 ops/s
[info]                  ·gc.alloc.rate:                   1702.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              75192.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.051 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74368.969 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc":
[info]   35152.828 ±(99.9%) 1869.084 ops/s [Average]
[info]   (min, avg, max) = (34416.778, 35152.828, 35651.309), stdev = 485.395
[info]   CI (99.9%): [33283.744, 37021.912] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1678.919 ±(99.9%) 89.373 MB/sec [Average]
[info]   (min, avg, max) = (1643.763, 1678.919, 1702.689), stdev = 23.210
[info]   CI (99.9%): [1589.546, 1768.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   75192.021 ±(99.9%) 0.079 B/op [Average]
[info]   (min, avg, max) = (75192.011, 75192.021, 75192.057), stdev = 0.021
[info]   CI (99.9%): [75191.942, 75192.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.274 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.166), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.353] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   3.536 ±(99.9%) 12.247 B/op [Average]
[info]   (min, avg, max) = (0.927, 3.536, 7.400), stdev = 3.181
[info]   CI (99.9%): [≈ 0, 15.784] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1663.342 ±(99.9%) 70.476 MB/sec [Average]
[info]   (min, avg, max) = (1638.435, 1663.342, 1684.051), stdev = 18.302
[info]   CI (99.9%): [1592.866, 1733.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   74496.926 ±(99.9%) 1067.380 B/op [Average]
[info]   (min, avg, max) = (74203.312, 74496.926, 74948.328), stdev = 277.195
[info]   CI (99.9%): [73429.545, 75564.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson
[info] # Run progress: 7.92% complete, ETA 00:59:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4923.446 ops/s
[info] # Warmup Iteration   2: 8333.661 ops/s
[info] # Warmup Iteration   3: 8613.729 ops/s
[info] Iteration   1: 8679.793 ops/s
[info]                  ·gc.alloc.rate:                   1118.716 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175769.016 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8678.802 ops/s
[info]                  ·gc.alloc.rate:                   1118.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.324 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1297.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 235298.473 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8686.040 ops/s
[info]                  ·gc.alloc.rate:                   1119.367 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 177357.554 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8708.739 ops/s
[info]                  ·gc.alloc.rate:                   1122.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.762 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178093.008 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8533.288 ops/s
[info]                  ·gc.alloc.rate:                   1099.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              202880.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243963.441 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson":
[info]   8657.332 ±(99.9%) 271.048 ops/s [Average]
[info]   (min, avg, max) = (8533.288, 8657.332, 8708.739), stdev = 70.390
[info]   CI (99.9%): [8386.285, 8928.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1115.716 ±(99.9%) 34.935 MB/sec [Average]
[info]   (min, avg, max) = (1099.712, 1115.716, 1122.267), stdev = 9.072
[info]   CI (99.9%): [1080.781, 1150.651] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   202880.049 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (202880.047, 202880.049, 202880.051), stdev = 0.002
[info]   CI (99.9%): [202880.041, 202880.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   8.352 ±(99.9%) 19.307 B/op [Average]
[info]   (min, avg, max) = (3.762, 8.352, 15.355), stdev = 5.014
[info]   CI (99.9%): [≈ 0, 27.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1110.515 ±(99.9%) 701.779 MB/sec [Average]
[info]   (min, avg, max) = (969.221, 1110.515, 1322.404), stdev = 182.250
[info]   CI (99.9%): [408.736, 1812.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   202096.299 ±(99.9%) 132505.398 B/op [Average]
[info]   (min, avg, max) = (175769.016, 202096.299, 243963.441), stdev = 34411.231
[info]   CI (99.9%): [69590.901, 334601.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce
[info] # Run progress: 8.25% complete, ETA 00:59:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15255.166 ops/s
[info] # Warmup Iteration   2: 20893.532 ops/s
[info] # Warmup Iteration   3: 20741.199 ops/s
[info] Iteration   1: 20964.961 ops/s
[info]                  ·gc.alloc.rate:                   1600.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.375 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123478.062 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 20885.709 ops/s
[info]                  ·gc.alloc.rate:                   1595.008 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.981 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124816.134 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 20668.273 ops/s
[info]                  ·gc.alloc.rate:                   1578.533 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.025 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.382 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 127083.982 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 21025.406 ops/s
[info]                  ·gc.alloc.rate:                   1606.516 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.669 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 125425.726 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 21124.640 ops/s
[info]                  ·gc.alloc.rate:                   1613.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              120240.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100445.730 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce":
[info]   20933.798 ±(99.9%) 663.049 ops/s [Average]
[info]   (min, avg, max) = (20668.273, 20933.798, 21124.640), stdev = 172.192
[info]   CI (99.9%): [20270.749, 21596.847] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   1598.866 ±(99.9%) 50.965 MB/sec [Average]
[info]   (min, avg, max) = (1578.533, 1598.866, 1613.344), stdev = 13.235
[info]   CI (99.9%): [1547.901, 1649.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   120240.024 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (120240.019, 120240.024, 120240.035), stdev = 0.006
[info]   CI (99.9%): [120239.999, 120240.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.527 ±(99.9%) 13.204 B/op [Average]
[info]   (min, avg, max) = (3.102, 7.527, 10.981), stdev = 3.429
[info]   CI (99.9%): [≈ 0, 20.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1598.337 ±(99.9%) 541.428 MB/sec [Average]
[info]   (min, avg, max) = (1347.750, 1598.337, 1675.802), stdev = 140.607
[info]   CI (99.9%): [1056.909, 2139.765] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   120249.927 ±(99.9%) 42920.887 B/op [Average]
[info]   (min, avg, max) = (100445.730, 120249.927, 127083.982), stdev = 11146.418
[info]   CI (99.9%): [77329.040, 163170.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala
[info] # Run progress: 8.58% complete, ETA 00:58:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27014.191 ops/s
[info] # Warmup Iteration   2: 41844.365 ops/s
[info] # Warmup Iteration   3: 42594.335 ops/s
[info] Iteration   1: 43063.994 ops/s
[info]                  ·gc.alloc.rate:                   1061.127 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35944.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 43010.223 ops/s
[info]                  ·gc.alloc.rate:                   1059.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.809 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48312.937 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 43211.862 ops/s
[info]                  ·gc.alloc.rate:                   1064.773 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36307.126 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 42569.918 ops/s
[info]                  ·gc.alloc.rate:                   1048.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37051.590 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 43264.714 ops/s
[info]                  ·gc.alloc.rate:                   1066.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              38792.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.543 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.362 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36576.824 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala":
[info]   43024.142 ±(99.9%) 1056.676 ops/s [Average]
[info]   (min, avg, max) = (42569.918, 43024.142, 43264.714), stdev = 274.415
[info]   CI (99.9%): [41967.466, 44080.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1060.162 ±(99.9%) 26.417 MB/sec [Average]
[info]   (min, avg, max) = (1048.808, 1060.162, 1066.249), stdev = 6.860
[info]   CI (99.9%): [1033.745, 1086.579] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   38792.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (38792.009, 38792.010, 38792.010), stdev = 0.001
[info]   CI (99.9%): [38792.008, 38792.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.204 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.267] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.284 ±(99.9%) 7.450 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.284, 4.543), stdev = 1.935
[info]   CI (99.9%): [≈ 0, 9.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1061.377 ±(99.9%) 557.592 MB/sec [Average]
[info]   (min, avg, max) = (983.226, 1061.377, 1319.976), stdev = 144.805
[info]   CI (99.9%): [503.785, 1618.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   38838.526 ±(99.9%) 20453.617 B/op [Average]
[info]   (min, avg, max) = (35944.152, 38838.526, 48312.937), stdev = 5311.739
[info]   CI (99.9%): [18384.909, 59292.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 5.000), stdev = 0.837
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala
[info] # Run progress: 8.91% complete, ETA 00:58:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 55017.535 ops/s
[info] # Warmup Iteration   2: 60268.766 ops/s
[info] # Warmup Iteration   3: 60706.726 ops/s
[info] Iteration   1: 61022.825 ops/s
[info]                  ·gc.alloc.rate:                   788.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.611 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.234 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17007.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 61010.859 ops/s
[info]                  ·gc.alloc.rate:                   788.059 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25518.024 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 61123.449 ops/s
[info]                  ·gc.alloc.rate:                   789.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.520 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16988.314 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 61020.926 ops/s
[info]                  ·gc.alloc.rate:                   788.287 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17042.195 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 60875.768 ops/s
[info]                  ·gc.alloc.rate:                   786.425 MB/sec
[info]                  ·gc.alloc.rate.norm:              20336.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.691 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.939 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25702.080 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala":
[info]   61010.765 ±(99.9%) 339.919 ops/s [Average]
[info]   (min, avg, max) = (60875.768, 61010.765, 61123.449), stdev = 88.276
[info]   CI (99.9%): [60670.846, 61350.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   788.098 ±(99.9%) 4.208 MB/sec [Average]
[info]   (min, avg, max) = (786.425, 788.098, 789.484), stdev = 1.093
[info]   CI (99.9%): [783.890, 792.306] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   20336.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (20336.007, 20336.007, 20336.007), stdev = 0.001
[info]   CI (99.9%): [20336.006, 20336.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.933 ±(99.9%) 4.531 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.933, 2.691), stdev = 1.177
[info]   CI (99.9%): [≈ 0, 6.464] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   792.435 ±(99.9%) 699.447 MB/sec [Average]
[info]   (min, avg, max) = (659.234, 792.435, 993.939), stdev = 181.644
[info]   CI (99.9%): [92.988, 1491.882] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   20451.690 ±(99.9%) 18134.255 B/op [Average]
[info]   (min, avg, max) = (16988.314, 20451.690, 25702.080), stdev = 4709.408
[info]   CI (99.9%): [2317.435, 38585.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala
[info] # Run progress: 9.24% complete, ETA 00:58:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18064.375 ops/s
[info] # Warmup Iteration   2: 34008.940 ops/s
[info] # Warmup Iteration   3: 33950.708 ops/s
[info] Iteration   1: 34238.757 ops/s
[info]                  ·gc.alloc.rate:                   1939.108 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1661.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76402.856 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34318.998 ops/s
[info]                  ·gc.alloc.rate:                   1943.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.728 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.787 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92250.984 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34044.082 ops/s
[info]                  ·gc.alloc.rate:                   1927.746 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.849 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93519.479 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 34328.026 ops/s
[info]                  ·gc.alloc.rate:                   1943.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.863 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93112.425 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 34463.648 ops/s
[info]                  ·gc.alloc.rate:                   1951.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              89144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1696.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77477.389 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala":
[info]   34278.702 ±(99.9%) 593.124 ops/s [Average]
[info]   (min, avg, max) = (34044.082, 34278.702, 34463.648), stdev = 154.032
[info]   CI (99.9%): [33685.579, 34871.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1941.076 ±(99.9%) 33.665 MB/sec [Average]
[info]   (min, avg, max) = (1927.746, 1941.076, 1951.708), stdev = 8.743
[info]   CI (99.9%): [1907.411, 1974.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   89144.013 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (89144.012, 89144.013, 89144.017), stdev = 0.002
[info]   CI (99.9%): [89144.005, 89144.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.205 ±(99.9%) 4.193 B/op [Average]
[info]   (min, avg, max) = (2.863, 4.205, 5.728), stdev = 1.089
[info]   CI (99.9%): [0.012, 8.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1884.334 ±(99.9%) 723.369 MB/sec [Average]
[info]   (min, avg, max) = (1661.955, 1884.334, 2030.284), stdev = 187.857
[info]   CI (99.9%): [1160.965, 2607.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   86552.627 ±(99.9%) 33866.903 B/op [Average]
[info]   (min, avg, max) = (76402.856, 86552.627, 93519.479), stdev = 8795.127
[info]   CI (99.9%): [52685.723, 120419.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala
[info] # Run progress: 9.57% complete, ETA 00:58:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41038.342 ops/s
[info] # Warmup Iteration   2: 48939.935 ops/s
[info] # Warmup Iteration   3: 49447.135 ops/s
[info] Iteration   1: 49457.044 ops/s
[info]                  ·gc.alloc.rate:                   1899.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.650 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1974.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62873.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 49431.374 ops/s
[info]                  ·gc.alloc.rate:                   1898.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.314 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63523.709 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 48940.833 ops/s
[info]                  ·gc.alloc.rate:                   1880.664 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.347 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64681.823 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 49415.729 ops/s
[info]                  ·gc.alloc.rate:                   1898.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.989 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53676.297 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 49127.670 ops/s
[info]                  ·gc.alloc.rate:                   1887.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              60480.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.376 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65001.170 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala":
[info]   49274.530 ±(99.9%) 883.911 ops/s [Average]
[info]   (min, avg, max) = (48940.833, 49274.530, 49457.044), stdev = 229.549
[info]   CI (99.9%): [48390.619, 50158.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1893.005 ±(99.9%) 33.043 MB/sec [Average]
[info]   (min, avg, max) = (1880.664, 1893.005, 1899.817), stdev = 8.581
[info]   CI (99.9%): [1859.962, 1926.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   60480.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (60480.008, 60480.009, 60480.009), stdev = 0.001
[info]   CI (99.9%): [60480.007, 60480.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.020, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.927 ±(99.9%) 2.318 B/op [Average]
[info]   (min, avg, max) = (1.989, 2.927, 3.347), stdev = 0.602
[info]   CI (99.9%): [0.609, 5.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1938.784 ±(99.9%) 551.739 MB/sec [Average]
[info]   (min, avg, max) = (1684.932, 1938.784, 2028.376), stdev = 143.285
[info]   CI (99.9%): [1387.044, 2490.523] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   61951.202 ±(99.9%) 18118.003 B/op [Average]
[info]   (min, avg, max) = (53676.297, 61951.202, 65001.170), stdev = 4705.188
[info]   CI (99.9%): [43833.199, 80069.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.200, 6.000), stdev = 0.837
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 9.90% complete, ETA 00:58:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39667.948 ops/s
[info] # Warmup Iteration   2: 48246.804 ops/s
[info] # Warmup Iteration   3: 48747.336 ops/s
[info] Iteration   1: 48811.912 ops/s
[info]                  ·gc.alloc.rate:                   1948.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.322 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63808.437 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 48487.938 ops/s
[info]                  ·gc.alloc.rate:                   1936.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.703 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54022.335 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 47538.103 ops/s
[info]                  ·gc.alloc.rate:                   1897.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66589.031 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 48337.269 ops/s
[info]                  ·gc.alloc.rate:                   1929.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.033 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65870.831 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 48434.827 ops/s
[info]                  ·gc.alloc.rate:                   1934.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              62856.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.706 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65974.314 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   48322.010 ±(99.9%) 1821.446 ops/s [Average]
[info]   (min, avg, max) = (47538.103, 48322.010, 48811.912), stdev = 473.024
[info]   CI (99.9%): [46500.564, 50143.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1929.483 ±(99.9%) 73.337 MB/sec [Average]
[info]   (min, avg, max) = (1897.850, 1929.483, 1948.793), stdev = 19.045
[info]   CI (99.9%): [1856.145, 2002.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   62856.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (62856.008, 62856.008, 62856.009), stdev = 0.001
[info]   CI (99.9%): [62856.008, 62856.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.015
[info]   CI (99.9%): [0.027, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   2.714 ±(99.9%) 1.925 B/op [Average]
[info]   (min, avg, max) = (2.033, 2.714, 3.446), stdev = 0.500
[info]   CI (99.9%): [0.789, 4.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   1941.194 ±(99.9%) 600.144 MB/sec [Average]
[info]   (min, avg, max) = (1664.642, 1941.194, 2030.265), stdev = 155.856
[info]   CI (99.9%): [1341.050, 2541.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   63252.989 ±(99.9%) 20275.513 B/op [Average]
[info]   (min, avg, max) = (54022.335, 63252.989, 66589.031), stdev = 5265.486
[info]   CI (99.9%): [42977.477, 83528.502] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce
[info] # Run progress: 10.23% complete, ETA 00:57:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 305606.194 ops/s
[info] # Warmup Iteration   2: 364095.472 ops/s
[info] # Warmup Iteration   3: 368958.952 ops/s
[info] Iteration   1: 366650.349 ops/s
[info]                  ·gc.alloc.rate:                   1853.913 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.447 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1978.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8494.557 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 366692.231 ops/s
[info]                  ·gc.alloc.rate:                   1854.073 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.226 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7140.649 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 369797.047 ops/s
[info]                  ·gc.alloc.rate:                   1870.097 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8559.144 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 370402.650 ops/s
[info]                  ·gc.alloc.rate:                   1872.998 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.366 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7158.336 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 365467.752 ops/s
[info]                  ·gc.alloc.rate:                   1848.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              7960.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.269 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.769 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8740.787 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce":
[info]   367802.006 ±(99.9%) 8336.931 ops/s [Average]
[info]   (min, avg, max) = (365467.752, 367802.006, 370402.650), stdev = 2165.074
[info]   CI (99.9%): [359465.075, 376138.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate":
[info]   1859.908 ±(99.9%) 42.019 MB/sec [Average]
[info]   (min, avg, max) = (1848.456, 1859.908, 1872.998), stdev = 10.912
[info]   CI (99.9%): [1817.889, 1901.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   7960.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7960.001, 7960.001, 7960.001), stdev = 0.001
[info]   CI (99.9%): [7960.001, 7960.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.445 ±(99.9%) 0.542 B/op [Average]
[info]   (min, avg, max) = (0.269, 0.445, 0.625), stdev = 0.141
[info]   CI (99.9%): [≈ 0, 0.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1873.326 ±(99.9%) 705.521 MB/sec [Average]
[info]   (min, avg, max) = (1663.226, 1873.326, 2029.769), stdev = 183.222
[info]   CI (99.9%): [1167.805, 2578.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8018.695 ±(99.9%) 3075.173 B/op [Average]
[info]   (min, avg, max) = (7140.649, 8018.695, 8740.787), stdev = 798.613
[info]   CI (99.9%): [4943.521, 11093.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala
[info] # Run progress: 10.56% complete, ETA 00:57:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 462646.850 ops/s
[info] # Warmup Iteration   2: 716088.168 ops/s
[info] # Warmup Iteration   3: 717284.878 ops/s
[info] Iteration   1: 711744.391 ops/s
[info]                  ·gc.alloc.rate:                   589.465 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.588 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 715.833 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 720798.134 ops/s
[info]                  ·gc.alloc.rate:                   597.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.412 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1422.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 715064.004 ops/s
[info]                  ·gc.alloc.rate:                   592.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1441.236 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 718494.467 ops/s
[info]                  ·gc.alloc.rate:                   595.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1440.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 717736.003 ops/s
[info]                  ·gc.alloc.rate:                   594.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1447.559 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala":
[info]   716767.400 ±(99.9%) 13380.634 ops/s [Average]
[info]   (min, avg, max) = (711744.391, 716767.400, 720798.134), stdev = 3474.908
[info]   CI (99.9%): [703386.766, 730148.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   593.684 ±(99.9%) 11.270 MB/sec [Average]
[info]   (min, avg, max) = (589.465, 593.684, 597.122), stdev = 2.927
[info]   CI (99.9%): [582.414, 604.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.000, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.062), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.064 ±(99.9%) 0.236 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.064, 0.137), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   589.353 ±(99.9%) 572.209 MB/sec [Average]
[info]   (min, avg, max) = (323.588, 589.353, 659.959), stdev = 148.601
[info]   CI (99.9%): [17.144, 1161.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1293.477 ±(99.9%) 1243.936 B/op [Average]
[info]   (min, avg, max) = (715.833, 1293.477, 1447.559), stdev = 323.046
[info]   CI (99.9%): [49.541, 2537.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala
[info] # Run progress: 10.89% complete, ETA 00:57:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1628779.245 ops/s
[info] # Warmup Iteration   2: 1773696.613 ops/s
[info] # Warmup Iteration   3: 1797380.986 ops/s
[info] Iteration   1: 1767714.120 ops/s
[info]                  ·gc.alloc.rate:                   341.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 227.682 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1808580.422 ops/s
[info]                  ·gc.alloc.rate:                   349.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.692 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 222.601 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1802610.514 ops/s
[info]                  ·gc.alloc.rate:                   348.084 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.259 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1806114.208 ops/s
[info]                  ·gc.alloc.rate:                   348.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.303 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 287.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1812864.849 ops/s
[info]                  ·gc.alloc.rate:                   350.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 284.518 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala":
[info]   1799576.822 ±(99.9%) 70077.725 ops/s [Average]
[info]   (min, avg, max) = (1767714.120, 1799576.822, 1812864.849), stdev = 18198.963
[info]   CI (99.9%): [1729499.097, 1869654.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   347.486 ±(99.9%) 13.557 MB/sec [Average]
[info]   (min, avg, max) = (341.320, 347.486, 350.067), stdev = 3.521
[info]   CI (99.9%): [333.929, 361.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.672 ±(99.9%) 5.570 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.672, 3.259), stdev = 1.446
[info]   CI (99.9%): [≈ 0, 6.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.587 ±(99.9%) 4.865 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.587, 2.847), stdev = 1.263
[info]   CI (99.9%): [≈ 0, 5.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   299.510 ±(99.9%) 154.154 MB/sec [Average]
[info]   (min, avg, max) = (255.633, 299.510, 329.303), stdev = 40.033
[info]   CI (99.9%): [145.356, 453.664] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   261.885 ±(99.9%) 129.419 B/op [Average]
[info]   (min, avg, max) = (222.601, 261.885, 287.588), stdev = 33.610
[info]   CI (99.9%): [132.466, 391.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson
[info] # Run progress: 11.22% complete, ETA 00:57:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 60511.378 ops/s
[info] # Warmup Iteration   2: 102903.004 ops/s
[info] # Warmup Iteration   3: 105242.554 ops/s
[info] Iteration   1: 102126.777 ops/s
[info]                  ·gc.alloc.rate:                   3709.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3716.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57284.735 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 104167.829 ops/s
[info]                  ·gc.alloc.rate:                   3784.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4074.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61555.429 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 103792.579 ops/s
[info]                  ·gc.alloc.rate:                   3769.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3742.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56764.409 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   4: 104589.470 ops/s
[info]                  ·gc.alloc.rate:                   3798.018 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3742.616 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 56341.966 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 105443.194 ops/s
[info]                  ·gc.alloc.rate:                   3829.426 MB/sec
[info]                  ·gc.alloc.rate.norm:              57176.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.175 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3743.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55887.862 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson":
[info]   104023.970 ±(99.9%) 4719.030 ops/s [Average]
[info]   (min, avg, max) = (102126.777, 104023.970, 105443.194), stdev = 1225.517
[info]   CI (99.9%): [99304.940, 108742.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3778.150 ±(99.9%) 171.321 MB/sec [Average]
[info]   (min, avg, max) = (3709.040, 3778.150, 3829.426), stdev = 44.492
[info]   CI (99.9%): [3606.828, 3949.471] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   57176.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (57176.004, 57176.004, 57176.004), stdev = 0.001
[info]   CI (99.9%): [57176.003, 57176.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.699 ±(99.9%) 1.804 B/op [Average]
[info]   (min, avg, max) = (1.253, 1.699, 2.202), stdev = 0.468
[info]   CI (99.9%): [≈ 0, 3.503] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3803.776 ±(99.9%) 584.721 MB/sec [Average]
[info]   (min, avg, max) = (3716.093, 3803.776, 4074.630), stdev = 151.850
[info]   CI (99.9%): [3219.055, 4388.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   57566.880 ±(99.9%) 8812.762 B/op [Average]
[info]   (min, avg, max) = (55887.862, 57566.880, 61555.429), stdev = 2288.646
[info]   CI (99.9%): [48754.118, 66379.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.count":
[info]   56.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (11.000, 11.200, 12.000), stdev = 0.447
[info]   CI (99.9%): [56.000, 56.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.readPlayJson:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.000, 13.000), stdev = 1.225
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce
[info] # Run progress: 11.55% complete, ETA 00:57:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270384.945 ops/s
[info] # Warmup Iteration   2: 348341.278 ops/s
[info] # Warmup Iteration   3: 356435.663 ops/s
[info] Iteration   1: 353187.996 ops/s
[info]                  ·gc.alloc.rate:                   872.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4351.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 357991.024 ops/s
[info]                  ·gc.alloc.rate:                   884.204 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4293.410 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 357483.669 ops/s
[info]                  ·gc.alloc.rate:                   882.760 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2874.048 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 357610.947 ops/s
[info]                  ·gc.alloc.rate:                   883.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.366 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4328.271 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 353216.929 ops/s
[info]                  ·gc.alloc.rate:                   872.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              3888.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4402.951 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce":
[info]   355898.113 ±(99.9%) 9502.892 ops/s [Average]
[info]   (min, avg, max) = (353187.996, 355898.113, 357991.024), stdev = 2467.871
[info]   CI (99.9%): [346395.221, 365401.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate":
[info]   878.905 ±(99.9%) 23.468 MB/sec [Average]
[info]   (min, avg, max) = (872.184, 878.905, 884.204), stdev = 6.095
[info]   CI (99.9%): [855.436, 902.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3888.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3888.001, 3888.001, 3888.001), stdev = 0.001
[info]   CI (99.9%): [3888.001, 3888.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.369 ±(99.9%) 0.441 B/op [Average]
[info]   (min, avg, max) = (0.183, 0.369, 0.464), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.810] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   915.207 ±(99.9%) 565.713 MB/sec [Average]
[info]   (min, avg, max) = (652.545, 915.207, 987.861), stdev = 146.914
[info]   CI (99.9%): [349.494, 1480.921] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4050.059 ±(99.9%) 2536.089 B/op [Average]
[info]   (min, avg, max) = (2874.048, 4050.059, 4402.951), stdev = 658.614
[info]   CI (99.9%): [1513.970, 6586.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala
[info] # Run progress: 11.88% complete, ETA 00:56:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 719766.273 ops/s
[info] # Warmup Iteration   2: 1111763.601 ops/s
[info] # Warmup Iteration   3: 1130552.096 ops/s
[info] Iteration   1: 1118902.344 ops/s
[info]                  ·gc.alloc.rate:                   790.339 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1364.666 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1128574.844 ops/s
[info]                  ·gc.alloc.rate:                   797.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 907.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1093332.150 ops/s
[info]                  ·gc.alloc.rate:                   772.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.206 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1412.886 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1097072.155 ops/s
[info]                  ·gc.alloc.rate:                   774.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 945.078 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1097152.501 ops/s
[info]                  ·gc.alloc.rate:                   774.981 MB/sec
[info]                  ·gc.alloc.rate.norm:              1112.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.832 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala":
[info]   1107006.799 ±(99.9%) 60563.080 ops/s [Average]
[info]   (min, avg, max) = (1093332.150, 1107006.799, 1128574.844), stdev = 15728.039
[info]   CI (99.9%): [1046443.719, 1167569.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   781.931 ±(99.9%) 42.883 MB/sec [Average]
[info]   (min, avg, max) = (772.250, 781.931, 797.213), stdev = 11.136
[info]   CI (99.9%): [739.049, 824.814] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1112.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1112.000, 1112.000, 1112.000), stdev = 0.001
[info]   CI (99.9%): [1112.000, 1112.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.106 ±(99.9%) 0.100 B/op [Average]
[info]   (min, avg, max) = (0.060, 0.106, 0.119), stdev = 0.026
[info]   CI (99.9%): [0.006, 0.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.328 ±(99.9%) 672.555 MB/sec [Average]
[info]   (min, avg, max) = (650.697, 784.328, 981.206), stdev = 174.660
[info]   CI (99.9%): [111.773, 1456.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1115.819 ±(99.9%) 963.725 B/op [Average]
[info]   (min, avg, max) = (907.631, 1115.819, 1412.886), stdev = 250.276
[info]   CI (99.9%): [152.094, 2079.543] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala
[info] # Run progress: 12.21% complete, ETA 00:56:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2041516.952 ops/s
[info] # Warmup Iteration   2: 2265368.858 ops/s
[info] # Warmup Iteration   3: 2413743.576 ops/s
[info] Iteration   1: 2408107.351 ops/s
[info]                  ·gc.alloc.rate:                   1113.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.851 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 639.111 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2420834.110 ops/s
[info]                  ·gc.alloc.rate:                   1119.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.499 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 637.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2427058.610 ops/s
[info]                  ·gc.alloc.rate:                   1122.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.433 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2420998.963 ops/s
[info]                  ·gc.alloc.rate:                   1119.632 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 644.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2419783.238 ops/s
[info]                  ·gc.alloc.rate:                   1119.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              728.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 865.176 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala":
[info]   2419356.455 ±(99.9%) 26603.532 ops/s [Average]
[info]   (min, avg, max) = (2408107.351, 2419356.455, 2427058.610), stdev = 6908.853
[info]   CI (99.9%): [2392752.923, 2445959.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1118.843 ±(99.9%) 11.889 MB/sec [Average]
[info]   (min, avg, max) = (1113.853, 1118.843, 1122.349), stdev = 3.087
[info]   CI (99.9%): [1106.954, 1130.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   728.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (728.000, 728.000, 728.000), stdev = 0.001
[info]   CI (99.9%): [728.000, 728.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.049 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.049, 0.068), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1118.672 ±(99.9%) 715.362 MB/sec [Average]
[info]   (min, avg, max) = (977.851, 1118.672, 1329.853), stdev = 185.777
[info]   CI (99.9%): [403.310, 1834.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   727.748 ±(99.9%) 461.109 B/op [Average]
[info]   (min, avg, max) = (637.676, 727.748, 865.176), stdev = 119.749
[info]   CI (99.9%): [266.639, 1188.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 1.000
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 12.54% complete, ETA 00:56:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2165645.131 ops/s
[info] # Warmup Iteration   2: 2496439.639 ops/s
[info] # Warmup Iteration   3: 2551140.362 ops/s
[info] Iteration   1: 2536416.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2550776.064 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2550478.911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2559040.539 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2558164.877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc":
[info]   2550975.289 ±(99.9%) 34921.956 ops/s [Average]
[info]   (min, avg, max) = (2536416.054, 2550975.289, 2559040.539), stdev = 9069.121
[info]   CI (99.9%): [2516053.333, 2585897.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson
[info] # Run progress: 12.87% complete, ETA 00:56:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 399366.772 ops/s
[info] # Warmup Iteration   2: 535819.271 ops/s
[info] # Warmup Iteration   3: 557600.544 ops/s
[info] Iteration   1: 559350.576 ops/s
[info]                  ·gc.alloc.rate:                   659.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.928 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.189 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1827.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 560540.811 ops/s
[info]                  ·gc.alloc.rate:                   660.754 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1818.029 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 549727.922 ops/s
[info]                  ·gc.alloc.rate:                   647.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1849.858 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 559131.368 ops/s
[info]                  ·gc.alloc.rate:                   659.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.176 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2735.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 561599.427 ops/s
[info]                  ·gc.alloc.rate:                   662.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              1856.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1821.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson":
[info]   558070.021 ±(99.9%) 18358.165 ops/s [Average]
[info]   (min, avg, max) = (549727.922, 558070.021, 561599.427), stdev = 4767.557
[info]   CI (99.9%): [539711.855, 576428.186] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate":
[info]   657.880 ±(99.9%) 21.825 MB/sec [Average]
[info]   (min, avg, max) = (647.976, 657.880, 662.165), stdev = 5.668
[info]   CI (99.9%): [636.056, 679.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1856.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1856.001, 1856.001, 1856.001), stdev = 0.001
[info]   CI (99.9%): [1856.001, 1856.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.827 ±(99.9%) 6.676 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.827, 3.928), stdev = 1.734
[info]   CI (99.9%): [≈ 0, 7.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.330 ±(99.9%) 18.792 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.330, 11.058), stdev = 4.880
[info]   CI (99.9%): [≈ 0, 21.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   712.728 ±(99.9%) 557.395 MB/sec [Average]
[info]   (min, avg, max) = (645.831, 712.728, 971.656), stdev = 144.754
[info]   CI (99.9%): [155.333, 1270.123] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   2010.460 ±(99.9%) 1562.092 B/op [Average]
[info]   (min, avg, max) = (1818.029, 2010.460, 2735.804), stdev = 405.670
[info]   CI (99.9%): [448.369, 3572.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBooleansBenchmark.writePlayJson:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 5.000), stdev = 1.225
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce
[info] # Run progress: 13.20% complete, ETA 00:56:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 144361.849 ops/s
[info] # Warmup Iteration   2: 174555.343 ops/s
[info] # Warmup Iteration   3: 176552.295 ops/s
[info] Iteration   1: 176767.852 ops/s
[info]                  ·gc.alloc.rate:                   2124.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2317.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20642.708 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 177015.090 ops/s
[info]                  ·gc.alloc.rate:                   2127.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2005.683 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17839.734 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 177000.946 ops/s
[info]                  ·gc.alloc.rate:                   2126.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17957.888 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 176392.463 ops/s
[info]                  ·gc.alloc.rate:                   2119.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2366.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21119.029 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 176871.499 ops/s
[info]                  ·gc.alloc.rate:                   2125.719 MB/sec
[info]                  ·gc.alloc.rate.norm:              18920.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.741 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2034.089 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18104.445 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce":
[info]   176809.570 ±(99.9%) 978.733 ops/s [Average]
[info]   (min, avg, max) = (176392.463, 176809.570, 177015.090), stdev = 254.174
[info]   CI (99.9%): [175830.837, 177788.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate":
[info]   2124.789 ±(99.9%) 11.426 MB/sec [Average]
[info]   (min, avg, max) = (2119.930, 2124.789, 2127.135), stdev = 2.967
[info]   CI (99.9%): [2113.363, 2136.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   18920.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (18920.002, 18920.002, 18920.002), stdev = 0.001
[info]   CI (99.9%): [18920.002, 18920.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.107 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.852 ±(99.9%) 0.953 B/op [Average]
[info]   (min, avg, max) = (0.557, 0.852, 1.111), stdev = 0.248
[info]   CI (99.9%): [≈ 0, 1.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2148.501 ±(99.9%) 684.329 MB/sec [Average]
[info]   (min, avg, max) = (2005.683, 2148.501, 2366.325), stdev = 177.718
[info]   CI (99.9%): [1464.171, 2832.830] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   19132.761 ±(99.9%) 6189.507 B/op [Average]
[info]   (min, avg, max) = (17839.734, 19132.761, 21119.029), stdev = 1607.395
[info]   CI (99.9%): [12943.254, 25322.268] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readCirce:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala
[info] # Run progress: 13.53% complete, ETA 00:55:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 267235.482 ops/s
[info] # Warmup Iteration   2: 415082.148 ops/s
[info] # Warmup Iteration   3: 427868.458 ops/s
[info] Iteration   1: 428658.526 ops/s
[info]                  ·gc.alloc.rate:                   355.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.350 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1878.200 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 426723.064 ops/s
[info]                  ·gc.alloc.rate:                   353.463 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1194.060 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 424226.837 ops/s
[info]                  ·gc.alloc.rate:                   351.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.647 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1201.019 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 427026.130 ops/s
[info]                  ·gc.alloc.rate:                   353.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200.561 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 421133.663 ops/s
[info]                  ·gc.alloc.rate:                   348.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              1304.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1217.266 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala":
[info]   425553.644 ±(99.9%) 11304.231 ops/s [Average]
[info]   (min, avg, max) = (421133.663, 425553.644, 428658.526), stdev = 2935.673
[info]   CI (99.9%): [414249.413, 436857.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   352.474 ±(99.9%) 9.259 MB/sec [Average]
[info]   (min, avg, max) = (348.848, 352.474, 355.021), stdev = 2.405
[info]   CI (99.9%): [343.215, 361.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1304.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1304.001, 1304.001, 1304.001), stdev = 0.001
[info]   CI (99.9%): [1304.001, 1304.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.123 ±(99.9%) 0.337 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.123, 0.230), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.460] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   361.978 ±(99.9%) 321.555 MB/sec [Average]
[info]   (min, avg, max) = (323.647, 361.978, 511.350), stdev = 83.507
[info]   CI (99.9%): [40.423, 683.534] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1338.221 ±(99.9%) 1162.812 B/op [Average]
[info]   (min, avg, max) = (1194.060, 1338.221, 1878.200), stdev = 301.979
[info]   CI (99.9%): [175.409, 2501.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala
[info] # Run progress: 13.86% complete, ETA 00:55:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1045182.460 ops/s
[info] # Warmup Iteration   2: 1078319.900 ops/s
[info] # Warmup Iteration   3: 1066652.445 ops/s
[info] Iteration   1: 1098879.524 ops/s
[info]                  ·gc.alloc.rate:                   212.189 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.038 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366.333 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1077970.457 ops/s
[info]                  ·gc.alloc.rate:                   208.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.473 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1088826.858 ops/s
[info]                  ·gc.alloc.rate:                   210.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.045 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.724 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1076548.249 ops/s
[info]                  ·gc.alloc.rate:      207.884 MB/sec
[info]                  ·gc.alloc.rate.norm: 304.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1077009.243 ops/s
[info]                  ·gc.alloc.rate:                   207.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              304.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.716 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373.779 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala":
[info]   1083846.866 ±(99.9%) 37794.036 ops/s [Average]
[info]   (min, avg, max) = (1076548.249, 1083846.866, 1098879.524), stdev = 9814.991
[info]   CI (99.9%): [1046052.830, 1121640.902] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   209.285 ±(99.9%) 7.284 MB/sec [Average]
[info]   (min, avg, max) = (207.884, 209.285, 212.189), stdev = 1.892
[info]   CI (99.9%): [202.001, 216.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   304.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (304.000, 304.000, 304.000), stdev = 0.001
[info]   CI (99.9%): [304.000, 304.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.016 ±(99.9%) 0.087 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.016, 0.045), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.024 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.024, 0.065), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.149] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.561 ±(99.9%) 440.333 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.561, 255.716), stdev = 114.353
[info]   CI (99.9%): [≈ 0, 644.895] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   296.662 ±(99.9%) 638.695 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 296.662, 373.779), stdev = 165.867
[info]   CI (99.9%): [≈ 0, 935.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson
[info] # Run progress: 14.19% complete, ETA 00:55:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 45200.647 ops/s
[info] # Warmup Iteration   2: 80301.256 ops/s
[info] # Warmup Iteration   3: 81123.412 ops/s
[info] Iteration   1: 81930.721 ops/s
[info]                  ·gc.alloc.rate:                   3379.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.599 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3369.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64757.085 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 82420.732 ops/s
[info]                  ·gc.alloc.rate:                   3400.604 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3389.888 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64747.329 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 81459.211 ops/s
[info]                  ·gc.alloc.rate:                   3362.124 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3398.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65651.028 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 82114.796 ops/s
[info]                  ·gc.alloc.rate:                   3387.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.567 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.250 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.788 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.954 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65240.757 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 82048.083 ops/s
[info]                  ·gc.alloc.rate:                   3384.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              64952.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.795 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65290.840 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson":
[info]   81994.709 ±(99.9%) 1347.199 ops/s [Average]
[info]   (min, avg, max) = (81459.211, 81994.709, 82420.732), stdev = 349.863
[info]   CI (99.9%): [80647.509, 83341.908] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3383.024 ±(99.9%) 53.926 MB/sec [Average]
[info]   (min, avg, max) = (3362.124, 3383.024, 3400.604), stdev = 14.004
[info]   CI (99.9%): [3329.099, 3436.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64952.117 ±(99.9%) 0.968 B/op [Average]
[info]   (min, avg, max) = (64952.005, 64952.117, 64952.567), stdev = 0.251
[info]   CI (99.9%): [64951.150, 64953.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.150 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.150, 0.250), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.875 ±(99.9%) 4.768 B/op [Average]
[info]   (min, avg, max) = (1.599, 2.875, 4.788), stdev = 1.238
[info]   CI (99.9%): [≈ 0, 7.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3392.627 ±(99.9%) 53.706 MB/sec [Average]
[info]   (min, avg, max) = (3369.506, 3392.627, 3402.954), stdev = 13.947
[info]   CI (99.9%): [3338.921, 3446.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   65137.408 ±(99.9%) 1484.914 B/op [Average]
[info]   (min, avg, max) = (64747.329, 65137.408, 65651.028), stdev = 385.628
[info]   CI (99.9%): [63652.493, 66622.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.count":
[info]   50.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.000, 10.000), stdev = 0.001
[info]   CI (99.9%): [50.000, 50.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 10.200, 11.000), stdev = 0.447
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce
[info] # Run progress: 14.52% complete, ETA 00:55:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247729.243 ops/s
[info] # Warmup Iteration   2: 318927.885 ops/s
[info] # Warmup Iteration   3: 319770.149 ops/s
[info] Iteration   1: 321300.486 ops/s
[info]                  ·gc.alloc.rate:                   1592.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.510 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1636.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8015.119 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 325199.000 ops/s
[info]                  ·gc.alloc.rate:                   1611.469 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1650.049 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7986.740 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 325915.605 ops/s
[info]                  ·gc.alloc.rate:                   1615.151 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.097 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8036.378 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 320202.070 ops/s
[info]                  ·gc.alloc.rate:                   1586.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.307 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8232.567 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 325889.922 ops/s
[info]                  ·gc.alloc.rate:                   1614.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              7800.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.302 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.778 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8134.095 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce":
[info]   323701.417 ±(99.9%) 10535.723 ops/s [Average]
[info]   (min, avg, max) = (320202.070, 323701.417, 325915.605), stdev = 2736.094
[info]   CI (99.9%): [313165.694, 334237.139] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1604.037 ±(99.9%) 52.074 MB/sec [Average]
[info]   (min, avg, max) = (1586.597, 1604.037, 1615.151), stdev = 13.523
[info]   CI (99.9%): [1551.964, 1656.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7800.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7800.001, 7800.001, 7800.001), stdev = 0.001
[info]   CI (99.9%): [7800.001, 7800.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.425 ±(99.9%) 0.506 B/op [Average]
[info]   (min, avg, max) = (0.302, 0.425, 0.604), stdev = 0.131
[info]   CI (99.9%): [≈ 0, 0.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1661.755 ±(99.9%) 73.109 MB/sec [Average]
[info]   (min, avg, max) = (1636.264, 1661.755, 1683.778), stdev = 18.986
[info]   CI (99.9%): [1588.645, 1734.864] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   8080.980 ±(99.9%) 389.886 B/op [Average]
[info]   (min, avg, max) = (7986.740, 8080.980, 8232.567), stdev = 101.252
[info]   CI (99.9%): [7691.094, 8470.866] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 6.000), stdev = 0.894
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala
[info] # Run progress: 14.85% complete, ETA 00:55:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1693211.170 ops/s
[info] # Warmup Iteration   2: 1901906.285 ops/s
[info] # Warmup Iteration   3: 1879395.892 ops/s
[info] Iteration   1: 1935577.870 ops/s
[info]                  ·gc.alloc.rate:                   521.282 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.703 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.709 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1902520.026 ops/s
[info]                  ·gc.alloc.rate:                   512.409 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.069 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 541.423 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1940821.254 ops/s
[info]                  ·gc.alloc.rate:                   522.655 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.674 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1936547.283 ops/s
[info]                  ·gc.alloc.rate:                   521.602 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 529.435 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1937388.409 ops/s
[info]                  ·gc.alloc.rate:                   521.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              424.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264.871 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala":
[info]   1930570.968 ±(99.9%) 60859.260 ops/s [Average]
[info]   (min, avg, max) = (1902520.026, 1930570.968, 1940821.254), stdev = 15804.957
[info]   CI (99.9%): [1869711.708, 1991430.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   519.952 ±(99.9%) 16.353 MB/sec [Average]
[info]   (min, avg, max) = (512.409, 519.952, 522.655), stdev = 4.247
[info]   CI (99.9%): [503.599, 536.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   424.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (424.000, 424.000, 424.000), stdev = 0.001
[info]   CI (99.9%): [424.000, 424.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.770 ±(99.9%) 6.315 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.770, 3.703), stdev = 1.640
[info]   CI (99.9%): [≈ 0, 7.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.626 ±(99.9%) 5.136 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.626, 3.012), stdev = 1.334
[info]   CI (99.9%): [≈ 0, 5.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   508.296 ±(99.9%) 649.574 MB/sec [Average]
[info]   (min, avg, max) = (325.973, 508.296, 654.316), stdev = 168.692
[info]   CI (99.9%): [≈ 0, 1157.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   415.022 ±(99.9%) 536.954 B/op [Average]
[info]   (min, avg, max) = (264.674, 415.022, 541.423), stdev = 139.445
[info]   CI (99.9%): [≈ 0, 951.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 15.18% complete, ETA 00:54:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1688971.834 ops/s
[info] # Warmup Iteration   2: 1831176.044 ops/s
[info] # Warmup Iteration   3: 1838039.827 ops/s
[info] Iteration   1: 1831617.122 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1838908.638 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1838220.912 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1831850.930 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1832012.891 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc":
[info]   1834522.099 ±(99.9%) 14251.688 ops/s [Average]
[info]   (min, avg, max) = (1831617.122, 1834522.099, 1838908.638), stdev = 3701.118
[info]   CI (99.9%): [1820270.411, 1848773.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson
[info] # Run progress: 15.51% complete, ETA 00:54:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 31171.615 ops/s
[info] # Warmup Iteration   2: 46821.913 ops/s
[info] # Warmup Iteration   3: 46984.468 ops/s
[info] Iteration   1: 47033.610 ops/s
[info]                  ·gc.alloc.rate:                   1990.387 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1963.793 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65733.826 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 47476.838 ops/s
[info]                  ·gc.alloc.rate:                   2008.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.289 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65904.498 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 47341.207 ops/s
[info]                  ·gc.alloc.rate:                   2003.926 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66702.801 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 47852.411 ops/s
[info]                  ·gc.alloc.rate:                   2024.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.685 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66438.368 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 47576.783 ops/s
[info]                  ·gc.alloc.rate:                   2013.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              66624.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.754 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67121.204 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson":
[info]   47456.170 ±(99.9%) 1161.202 ops/s [Average]
[info]   (min, avg, max) = (47033.610, 47456.170, 47852.411), stdev = 301.560
[info]   CI (99.9%): [46294.968, 48617.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2008.341 ±(99.9%) 48.881 MB/sec [Average]
[info]   (min, avg, max) = (1990.387, 2008.341, 2024.962), stdev = 12.694
[info]   CI (99.9%): [1959.460, 2057.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66624.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (66624.009, 66624.009, 66624.009), stdev = 0.001
[info]   CI (99.9%): [66624.007, 66624.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.350 ±(99.9%) 5.190 B/op [Average]
[info]   (min, avg, max) = (0.685, 2.350, 4.140), stdev = 1.348
[info]   CI (99.9%): [≈ 0, 7.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2001.034 ±(99.9%) 99.871 MB/sec [Average]
[info]   (min, avg, max) = (1963.793, 2001.034, 2028.472), stdev = 25.936
[info]   CI (99.9%): [1901.163, 2100.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66380.139 ±(99.9%) 2195.740 B/op [Average]
[info]   (min, avg, max) = (65733.826, 66380.139, 67121.204), stdev = 570.227
[info]   CI (99.9%): [64184.399, 68575.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfBytesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce
[info] # Run progress: 15.84% complete, ETA 00:54:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20443.038 ops/s
[info] # Warmup Iteration   2: 26492.101 ops/s
[info] # Warmup Iteration   3: 26784.462 ops/s
[info] Iteration   1: 27089.057 ops/s
[info]                  ·gc.alloc.rate:                   1586.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 95298.705 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 26995.352 ops/s
[info]                  ·gc.alloc.rate:                   1580.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              92191.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.855 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.799 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96333.065 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27026.475 ops/s
[info]                  ·gc.alloc.rate:                   1583.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.916 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 97010.638 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 27080.307 ops/s
[info]                  ·gc.alloc.rate:                   1585.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.049 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.875 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77887.360 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27366.383 ops/s
[info]                  ·gc.alloc.rate:                   1602.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              92192.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.140 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 96770.413 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce":
[info]   27111.515 ±(99.9%) 568.415 ops/s [Average]
[info]   (min, avg, max) = (26995.352, 27111.515, 27366.383), stdev = 147.616
[info]   CI (99.9%): [26543.100, 27679.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate":
[info]   1587.756 ±(99.9%) 33.012 MB/sec [Average]
[info]   (min, avg, max) = (1580.784, 1587.756, 1602.555), stdev = 8.573
[info]   CI (99.9%): [1554.744, 1620.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   92191.897 ±(99.9%) 1.016 B/op [Average]
[info]   (min, avg, max) = (92191.425, 92191.897, 92192.016), stdev = 0.264
[info]   CI (99.9%): [92190.882, 92192.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.872 ±(99.9%) 7.674 B/op [Average]
[info]   (min, avg, max) = (1.197, 3.872, 6.049), stdev = 1.993
[info]   CI (99.9%): [≈ 0, 11.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1595.901 ±(99.9%) 554.473 MB/sec [Average]
[info]   (min, avg, max) = (1339.875, 1595.901, 1682.140), stdev = 143.995
[info]   CI (99.9%): [1041.428, 2150.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   92660.036 ±(99.9%) 31899.315 B/op [Average]
[info]   (min, avg, max) = (77887.360, 92660.036, 97010.638), stdev = 8284.151
[info]   CI (99.9%): [60760.721, 124559.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala
[info] # Run progress: 16.17% complete, ETA 00:54:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38812.673 ops/s
[info] # Warmup Iteration   2: 62513.109 ops/s
[info] # Warmup Iteration   3: 62552.846 ops/s
[info] Iteration   1: 60738.904 ops/s
[info]                  ·gc.alloc.rate:                   1001.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.697 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25484.724 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 62944.470 ops/s
[info]                  ·gc.alloc.rate:                   1038.728 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24726.166 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 63427.760 ops/s
[info]                  ·gc.alloc.rate:                   1046.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24702.420 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 63270.807 ops/s
[info]                  ·gc.alloc.rate:                   1043.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.801 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24878.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 62874.329 ops/s
[info]                  ·gc.alloc.rate:                   1037.431 MB/sec
[info]                  ·gc.alloc.rate.norm:              25976.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33546.962 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala":
[info]   62651.254 ±(99.9%) 4209.208 ops/s [Average]
[info]   (min, avg, max) = (60738.904, 62651.254, 63427.760), stdev = 1093.118
[info]   CI (99.9%): [58442.046, 66860.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1033.720 ±(99.9%) 69.781 MB/sec [Average]
[info]   (min, avg, max) = (1001.992, 1033.720, 1046.541), stdev = 18.122
[info]   CI (99.9%): [963.938, 1103.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   25976.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25976.006, 25976.007, 25976.007), stdev = 0.001
[info]   CI (99.9%): [25976.006, 25976.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.889 ±(99.9%) 3.967 B/op [Average]
[info]   (min, avg, max) = (0.518, 1.889, 2.697), stdev = 1.030
[info]   CI (99.9%): [≈ 0, 5.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1061.324 ±(99.9%) 599.939 MB/sec [Average]
[info]   (min, avg, max) = (983.042, 1061.324, 1339.800), stdev = 155.802
[info]   CI (99.9%): [461.385, 1661.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   26667.758 ±(99.9%) 14858.290 B/op [Average]
[info]   (min, avg, max) = (24702.420, 26667.758, 33546.962), stdev = 3858.651
[info]   CI (99.9%): [11809.468, 41526.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJacksonScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala
[info] # Run progress: 16.50% complete, ETA 00:54:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69829.248 ops/s
[info] # Warmup Iteration   2: 78453.828 ops/s
[info] # Warmup Iteration   3: 78559.022 ops/s
[info] Iteration   1: 78820.599 ops/s
[info]                  ·gc.alloc.rate:                   507.860 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.302 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     65.945 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.965 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11684.095 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 79014.776 ops/s
[info]                  ·gc.alloc.rate:                   509.195 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.244 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.030 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13089.122 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 78899.495 ops/s
[info]                  ·gc.alloc.rate:                   508.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.830 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6537.075 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   4: 78794.275 ops/s
[info]                  ·gc.alloc.rate:                   507.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13091.900 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 78947.242 ops/s
[info]                  ·gc.alloc.rate:                   508.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              10144.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6532.026 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala":
[info]   78895.277 ±(99.9%) 348.565 ops/s [Average]
[info]   (min, avg, max) = (78794.275, 78895.277, 79014.776), stdev = 90.521
[info]   CI (99.9%): [78546.712, 79243.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   508.381 ±(99.9%) 2.354 MB/sec [Average]
[info]   (min, avg, max) = (507.735, 508.381, 509.195), stdev = 0.611
[info]   CI (99.9%): [506.027, 510.735] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10144.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10144.005, 10144.005, 10144.006), stdev = 0.001
[info]   CI (99.9%): [10144.005, 10144.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.702 ±(99.9%) 5.598 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.702, 3.302), stdev = 1.454
[info]   CI (99.9%): [≈ 0, 6.300] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.020 ±(99.9%) 111.811 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.020, 65.945), stdev = 29.037
[info]   CI (99.9%): [≈ 0, 125.831] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   510.497 ±(99.9%) 652.575 MB/sec [Average]
[info]   (min, avg, max) = (327.599, 510.497, 657.030), stdev = 169.472
[info]   CI (99.9%): [≈ 0, 1163.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10186.843 ±(99.9%) 13027.309 B/op [Average]
[info]   (min, avg, max) = (6532.026, 10186.843, 13091.900), stdev = 3383.151
[info]   CI (99.9%): [≈ 0, 23214.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.200, 6.000), stdev = 2.280
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson
[info] # Run progress: 16.83% complete, ETA 00:53:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17584.685 ops/s
[info] # Warmup Iteration   2: 33573.479 ops/s
[info] # Warmup Iteration   3: 33674.443 ops/s
[info] Iteration   1: 33792.851 ops/s
[info]                  ·gc.alloc.rate:                   1720.328 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.660 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76766.311 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33953.676 ops/s
[info]                  ·gc.alloc.rate:                   1728.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92666.723 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 34174.561 ops/s
[info]                  ·gc.alloc.rate:                   1739.955 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.183 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77306.443 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34063.896 ops/s
[info]                  ·gc.alloc.rate:                   1740.890 MB/sec
[info]                  ·gc.alloc.rate.norm:              80462.743 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.923 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77892.283 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 34093.578 ops/s
[info]                  ·gc.alloc.rate:                   1735.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              80152.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78085.120 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson":
[info]   34015.712 ±(99.9%) 568.324 ops/s [Average]
[info]   (min, avg, max) = (33792.851, 34015.712, 34174.561), stdev = 147.592
[info]   CI (99.9%): [33447.389, 34584.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1733.167 ±(99.9%) 33.243 MB/sec [Average]
[info]   (min, avg, max) = (1720.328, 1733.167, 1740.890), stdev = 8.633
[info]   CI (99.9%): [1699.924, 1766.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   80214.159 ±(99.9%) 535.096 B/op [Average]
[info]   (min, avg, max) = (80152.012, 80214.159, 80462.743), stdev = 138.963
[info]   CI (99.9%): [79679.063, 80749.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.243] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.625 ±(99.9%) 6.654 B/op [Average]
[info]   (min, avg, max) = (1.923, 4.625, 6.755), stdev = 1.728
[info]   CI (99.9%): [≈ 0, 11.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1740.186 ±(99.9%) 560.051 MB/sec [Average]
[info]   (min, avg, max) = (1647.660, 1740.186, 1998.630), stdev = 145.443
[info]   CI (99.9%): [1180.135, 2300.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   80543.376 ±(99.9%) 26172.401 B/op [Average]
[info]   (min, avg, max) = (76766.311, 80543.376, 92666.723), stdev = 6796.889
[info]   CI (99.9%): [54370.975, 106715.776] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.readPlayJson:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce
[info] # Run progress: 17.16% complete, ETA 00:53:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 28936.984 ops/s
[info] # Warmup Iteration   2: 39760.141 ops/s
[info] # Warmup Iteration   3: 38519.632 ops/s
[info] Iteration   1: 39740.303 ops/s
[info]                  ·gc.alloc.rate:                   535.397 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.392 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     134.353 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      582.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23070.413 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 40021.295 ops/s
[info]                  ·gc.alloc.rate:                   539.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.819 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.410 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25658.402 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38814.334 ops/s
[info]                  ·gc.alloc.rate:                   522.837 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13207.131 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 39954.761 ops/s
[info]                  ·gc.alloc.rate:                   538.400 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25633.898 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 39829.266 ops/s
[info]                  ·gc.alloc.rate:                   536.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              21208.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25741.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce":
[info]   39671.992 ±(99.9%) 1893.238 ops/s [Average]
[info]   (min, avg, max) = (38814.334, 39671.992, 40021.295), stdev = 491.668
[info]   CI (99.9%): [37778.753, 41565.230] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate":
[info]   534.500 ±(99.9%) 25.765 MB/sec [Average]
[info]   (min, avg, max) = (522.837, 534.500, 539.251), stdev = 6.691
[info]   CI (99.9%): [508.735, 560.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   21208.011 ±(99.9%) 0.002 B/op [Average]
[info]   (min, avg, max) = (21208.010, 21208.011, 21208.011), stdev = 0.001
[info]   CI (99.9%): [21208.009, 21208.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.712 ±(99.9%) 5.770 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.712, 3.392), stdev = 1.498
[info]   CI (99.9%): [≈ 0, 6.481] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   28.197 ±(99.9%) 228.530 B/op [Average]
[info]   (min, avg, max) = (0.819, 28.197, 134.353), stdev = 59.349
[info]   CI (99.9%): [≈ 0, 256.728] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   572.498 ±(99.9%) 543.826 MB/sec [Average]
[info]   (min, avg, max) = (325.593, 572.498, 652.410), stdev = 141.230
[info]   CI (99.9%): [28.673, 1116.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   22662.227 ±(99.9%) 20812.543 B/op [Average]
[info]   (min, avg, max) = (13207.131, 22662.227, 25741.292), stdev = 5404.951
[info]   CI (99.9%): [1849.685, 43474.770] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala
[info] # Run progress: 17.49% complete, ETA 00:53:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 26385.669 ops/s
[info] # Warmup Iteration   2: 41272.655 ops/s
[info] # Warmup Iteration   3: 42159.759 ops/s
[info] Iteration   1: 42506.759 ops/s
[info]                  ·gc.alloc.rate:                   383.817 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9469.959 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 42342.162 ops/s
[info]                  ·gc.alloc.rate:                   382.386 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11922.108 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 42483.226 ops/s
[info]                  ·gc.alloc.rate:                   383.617 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11881.427 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 42202.100 ops/s
[info]                  ·gc.alloc.rate:                   381.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.439 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24072.358 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 42417.922 ops/s
[info]                  ·gc.alloc.rate:                   383.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              14216.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.772 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.665 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12048.763 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala":
[info]   42390.434 ±(99.9%) 474.338 ops/s [Average]
[info]   (min, avg, max) = (42202.100, 42390.434, 42506.759), stdev = 123.184
[info]   CI (99.9%): [41916.096, 42864.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   382.810 ±(99.9%) 4.135 MB/sec [Average]
[info]   (min, avg, max) = (381.166, 382.810, 383.817), stdev = 1.074
[info]   CI (99.9%): [378.675, 386.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   14216.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (14216.010, 14216.010, 14216.010), stdev = 0.001
[info]   CI (99.9%): [14216.009, 14216.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.928 ±(99.9%) 3.878 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.928, 2.313), stdev = 1.007
[info]   CI (99.9%): [≈ 0, 4.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   373.417 ±(99.9%) 595.929 MB/sec [Average]
[info]   (min, avg, max) = (255.679, 373.417, 645.439), stdev = 154.761
[info]   CI (99.9%): [≈ 0, 969.346] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   13878.923 ±(99.9%) 22329.890 B/op [Average]
[info]   (min, avg, max) = (9469.959, 13878.923, 24072.358), stdev = 5799.002
[info]   CI (99.9%): [≈ 0, 36208.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala
[info] # Run progress: 17.82% complete, ETA 00:53:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38775.372 ops/s
[info] # Warmup Iteration   2: 46595.870 ops/s
[info] # Warmup Iteration   3: 46436.249 ops/s
[info] Iteration   1: 46886.173 ops/s
[info]                  ·gc.alloc.rate:                   411.932 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.743 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17172.176 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 47126.679 ops/s
[info]                  ·gc.alloc.rate:                   414.096 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.708 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     123.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10956.500 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 47108.205 ops/s
[info]                  ·gc.alloc.rate:                   413.875 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.086 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10959.988 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 46845.844 ops/s
[info]                  ·gc.alloc.rate:                   411.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.399 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21930.650 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 46667.622 ops/s
[info]                  ·gc.alloc.rate:                   410.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              13832.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10984.675 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala":
[info]   46926.904 ±(99.9%) 741.278 ops/s [Average]
[info]   (min, avg, max) = (46667.622, 46926.904, 47126.679), stdev = 192.508
[info]   CI (99.9%): [46185.626, 47668.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   412.316 ±(99.9%) 6.492 MB/sec [Average]
[info]   (min, avg, max) = (410.047, 412.316, 414.096), stdev = 1.686
[info]   CI (99.9%): [405.824, 418.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   13832.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13832.009, 13832.009, 13832.009), stdev = 0.001
[info]   CI (99.9%): [13832.008, 13832.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.767 ±(99.9%) 6.332 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.708), stdev = 1.644
[info]   CI (99.9%): [≈ 0, 7.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   25.619 ±(99.9%) 211.503 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 25.619, 123.865), stdev = 54.927
[info]   CI (99.9%): [≈ 0, 237.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.127 ±(99.9%) 570.822 MB/sec [Average]
[info]   (min, avg, max) = (325.638, 429.127, 652.640), stdev = 148.241
[info]   CI (99.9%): [≈ 0, 999.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14400.798 ±(99.9%) 19229.279 B/op [Average]
[info]   (min, avg, max) = (10956.500, 14400.798, 21930.650), stdev = 4993.783
[info]   CI (99.9%): [≈ 0, 33630.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 18.15% complete, ETA 00:52:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38360.829 ops/s
[info] # Warmup Iteration   2: 45599.830 ops/s
[info] # Warmup Iteration   3: 45804.036 ops/s
[info] Iteration   1: 46163.116 ops/s
[info]                  ·gc.alloc.rate:                   352.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.365 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8720.344 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 45581.241 ops/s
[info]                  ·gc.alloc.rate:                   348.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8832.244 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 45895.021 ops/s
[info]                  ·gc.alloc.rate:                   350.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.756 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     128.802 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.041 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11250.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 45974.119 ops/s
[info]                  ·gc.alloc.rate:                   351.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.425 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11230.264 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 46204.010 ops/s
[info]                  ·gc.alloc.rate:                   353.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              12032.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11118.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc":
[info]   45963.502 ±(99.9%) 959.992 ops/s [Average]
[info]   (min, avg, max) = (45581.241, 45963.502, 46204.010), stdev = 249.307
[info]   CI (99.9%): [45003.509, 46923.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   351.320 ±(99.9%) 7.347 MB/sec [Average]
[info]   (min, avg, max) = (348.338, 351.320, 353.114), stdev = 1.908
[info]   CI (99.9%): [343.973, 358.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   12032.009 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12032.009, 12032.009, 12032.009), stdev = 0.001
[info]   CI (99.9%): [12032.009, 12032.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.767 ±(99.9%) 6.433 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.767, 3.756), stdev = 1.671
[info]   CI (99.9%): [≈ 0, 7.200] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   26.318 ±(99.9%) 220.619 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 26.318, 128.802), stdev = 57.294
[info]   CI (99.9%): [≈ 0, 246.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   298.766 ±(99.9%) 151.415 MB/sec [Average]
[info]   (min, avg, max) = (255.695, 298.766, 328.086), stdev = 39.322
[info]   CI (99.9%): [147.352, 450.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   10230.309 ±(99.9%) 5116.977 B/op [Average]
[info]   (min, avg, max) = (8720.344, 10230.309, 11250.080), stdev = 1328.863
[info]   CI (99.9%): [5113.332, 15347.287] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce
[info] # Run progress: 18.48% complete, ETA 00:52:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 15083.537 ops/s
[info] # Warmup Iteration   2: 19272.088 ops/s
[info] # Warmup Iteration   3: 19629.791 ops/s
[info] Iteration   1: 19579.050 ops/s
[info]                  ·gc.alloc.rate:                   734.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              59033.957 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.673 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52685.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 19918.289 ops/s
[info]                  ·gc.alloc.rate:                   746.952 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.580 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77533.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 20048.201 ops/s
[info]                  ·gc.alloc.rate:                   751.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              59039.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51403.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 20047.320 ops/s
[info]                  ·gc.alloc.rate:                   751.880 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 51505.877 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20029.242 ops/s
[info]                  ·gc.alloc.rate:                   751.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              59040.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.542 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77589.914 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce":
[info]   19924.420 ±(99.9%) 771.888 ops/s [Average]
[info]   (min, avg, max) = (19579.050, 19924.420, 20048.201), stdev = 200.457
[info]   CI (99.9%): [19152.532, 20696.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate":
[info]   747.173 ±(99.9%) 29.388 MB/sec [Average]
[info]   (min, avg, max) = (734.020, 747.173, 751.880), stdev = 7.632
[info]   CI (99.9%): [717.785, 776.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   59038.649 ±(99.9%) 10.186 B/op [Average]
[info]   (min, avg, max) = (59033.957, 59038.649, 59040.022), stdev = 2.645
[info]   CI (99.9%): [59028.463, 59048.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.266 ±(99.9%) 12.269 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.266, 6.580), stdev = 3.186
[info]   CI (99.9%): [≈ 0, 16.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   786.750 ±(99.9%) 693.659 MB/sec [Average]
[info]   (min, avg, max) = (654.593, 786.750, 987.209), stdev = 180.141
[info]   CI (99.9%): [93.091, 1480.409] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   62143.867 ±(99.9%) 54231.314 B/op [Average]
[info]   (min, avg, max) = (51403.860, 62143.867, 77589.914), stdev = 14083.700
[info]   CI (99.9%): [7912.554, 116375.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala
[info] # Run progress: 18.81% complete, ETA 00:52:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13097.772 ops/s
[info] # Warmup Iteration   2: 20673.010 ops/s
[info] # Warmup Iteration   3: 20765.243 ops/s
[info] Iteration   1: 20695.365 ops/s
[info]                  ·gc.alloc.rate:                   587.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              44669.403 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.749 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49237.482 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 20701.892 ops/s
[info]                  ·gc.alloc.rate:                   587.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              44680.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.583 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49580.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 20514.335 ops/s
[info]                  ·gc.alloc.rate:                   582.227 MB/sec
[info]                  ·gc.alloc.rate.norm:              44670.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 50233.940 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 20773.566 ops/s
[info]                  ·gc.alloc.rate:                   589.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49860.097 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 20813.679 ops/s
[info]                  ·gc.alloc.rate:                   590.281 MB/sec
[info]                  ·gc.alloc.rate.norm:              44648.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25006.868 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala":
[info]   20699.767 ±(99.9%) 442.535 ops/s [Average]
[info]   (min, avg, max) = (20514.335, 20699.767, 20813.679), stdev = 114.925
[info]   CI (99.9%): [20257.232, 21142.303] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   587.306 ±(99.9%) 11.937 MB/sec [Average]
[info]   (min, avg, max) = (582.227, 587.306, 590.281), stdev = 3.100
[info]   CI (99.9%): [575.369, 599.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   44663.212 ±(99.9%) 55.699 B/op [Average]
[info]   (min, avg, max) = (44648.020, 44663.212, 44680.021), stdev = 14.465
[info]   CI (99.9%): [44607.512, 44718.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.062), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.536 ±(99.9%) 6.956 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.536, 4.749), stdev = 1.806
[info]   CI (99.9%): [≈ 0, 9.492] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.529 ±(99.9%) 555.399 MB/sec [Average]
[info]   (min, avg, max) = (330.610, 588.529, 657.999), stdev = 144.235
[info]   CI (99.9%): [33.130, 1143.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   44783.697 ±(99.9%) 42594.440 B/op [Average]
[info]   (min, avg, max) = (25006.868, 44783.697, 50233.940), stdev = 11061.641
[info]   CI (99.9%): [2189.256, 87378.137] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala
[info] # Run progress: 19.14% complete, ETA 00:52:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 76028.200 ops/s
[info] # Warmup Iteration   2: 77864.975 ops/s
[info] # Warmup Iteration   3: 80326.840 ops/s
[info] Iteration   1: 80340.330 ops/s
[info]                  ·gc.alloc.rate:                   209.019 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5010.056 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 80610.795 ops/s
[info]                  ·gc.alloc.rate:                   209.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4994.272 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 81900.732 ops/s
[info]                  ·gc.alloc.rate:                   213.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.010 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4915.200 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 82098.699 ops/s
[info]                  ·gc.alloc.rate:      213.597 MB/sec
[info]                  ·gc.alloc.rate.norm: 4096.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 81890.021 ops/s
[info]                  ·gc.alloc.rate:                   213.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.007 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.132 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4915.860 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala":
[info]   81368.115 ±(99.9%) 3175.144 ops/s [Average]
[info]   (min, avg, max) = (80340.330, 81368.115, 82098.699), stdev = 824.575
[info]   CI (99.9%): [78192.971, 84543.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   211.698 ±(99.9%) 8.256 MB/sec [Average]
[info]   (min, avg, max) = (209.019, 211.698, 213.597), stdev = 2.144
[info]   CI (99.9%): [203.442, 219.954] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.005, 4096.005, 4096.005), stdev = 0.001
[info]   CI (99.9%): [4096.004, 4096.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.003 ±(99.9%) 0.019 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.010), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.362 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.066, 0.200), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.428] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.559 ±(99.9%) 440.328 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.559, 255.733), stdev = 114.352
[info]   CI (99.9%): [≈ 0, 644.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3967.078 ±(99.9%) 8541.090 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3967.078, 5010.056), stdev = 2218.094
[info]   CI (99.9%): [≈ 0, 12508.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson
[info] # Run progress: 19.47% complete, ETA 00:52:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9505.471 ops/s
[info] # Warmup Iteration   2: 16451.178 ops/s
[info] # Warmup Iteration   3: 16859.167 ops/s
[info] Iteration   1: 16751.439 ops/s
[info]                  ·gc.alloc.rate:                   1063.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.176 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91834.882 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 16698.753 ops/s
[info]                  ·gc.alloc.rate:                   1060.546 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.175 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.886 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.885 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 123679.483 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 16748.353 ops/s
[info]                  ·gc.alloc.rate:                   1063.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.912 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.757 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93114.250 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16670.132 ops/s
[info]                  ·gc.alloc.rate:                   1058.703 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94173.117 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 16819.221 ops/s
[info]                  ·gc.alloc.rate:                   1068.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              99984.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.896 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93713.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson":
[info]   16737.579 ±(99.9%) 219.774 ops/s [Average]
[info]   (min, avg, max) = (16670.132, 16737.579, 16819.221), stdev = 57.075
[info]   CI (99.9%): [16517.805, 16957.354] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1063.044 ±(99.9%) 14.062 MB/sec [Average]
[info]   (min, avg, max) = (1058.703, 1063.044, 1068.229), stdev = 3.652
[info]   CI (99.9%): [1048.982, 1077.105] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   99984.056 ±(99.9%) 0.255 B/op [Average]
[info]   (min, avg, max) = (99984.024, 99984.056, 99984.175), stdev = 0.066
[info]   CI (99.9%): [99983.802, 99984.311] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.062), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.525 ±(99.9%) 8.270 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.525, 5.886), stdev = 2.148
[info]   CI (99.9%): [≈ 0, 11.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1055.644 ±(99.9%) 552.695 MB/sec [Average]
[info]   (min, avg, max) = (977.176, 1055.644, 1311.885), stdev = 143.533
[info]   CI (99.9%): [502.949, 1608.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   99302.949 ±(99.9%) 52581.032 B/op [Average]
[info]   (min, avg, max) = (91834.882, 99302.949, 123679.483), stdev = 13655.127
[info]   CI (99.9%): [46721.917, 151883.981] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.readPlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce
[info] # Run progress: 19.80% complete, ETA 00:51:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 42461.194 ops/s
[info] # Warmup Iteration   2: 56567.877 ops/s
[info] # Warmup Iteration   3: 57168.155 ops/s
[info] Iteration   1: 57659.610 ops/s
[info]                  ·gc.alloc.rate:                   1055.636 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.568 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26727.124 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 58541.444 ops/s
[info]                  ·gc.alloc.rate:                   1071.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26380.059 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 58295.447 ops/s
[info]                  ·gc.alloc.rate:                   1067.357 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.496 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35498.011 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 58502.311 ops/s
[info]                  ·gc.alloc.rate:                   1071.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26673.139 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 58240.019 ops/s
[info]                  ·gc.alloc.rate:                   1066.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              28824.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.812 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.560 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26935.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce":
[info]   58247.766 ±(99.9%) 1360.456 ops/s [Average]
[info]   (min, avg, max) = (57659.610, 58247.766, 58541.444), stdev = 353.306
[info]   CI (99.9%): [56887.310, 59608.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1066.450 ±(99.9%) 24.900 MB/sec [Average]
[info]   (min, avg, max) = (1055.636, 1066.450, 1071.702), stdev = 6.467
[info]   CI (99.9%): [1041.549, 1091.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   28824.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (28824.007, 28824.007, 28824.008), stdev = 0.001
[info]   CI (99.9%): [28824.006, 28824.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.087, 0.166), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.357 ±(99.9%) 5.571 B/op [Average]
[info]   (min, avg, max) = (0.568, 2.357, 4.477), stdev = 1.447
[info]   CI (99.9%): [≈ 0, 7.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.387 ±(99.9%) 564.912 MB/sec [Average]
[info]   (min, avg, max) = (978.840, 1052.387, 1314.496), stdev = 146.706
[info]   CI (99.9%): [487.475, 1617.299] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   28442.810 ±(99.9%) 15206.077 B/op [Average]
[info]   (min, avg, max) = (26380.059, 28442.810, 35498.011), stdev = 3948.970
[info]   CI (99.9%): [13236.733, 43648.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala
[info] # Run progress: 20.13% complete, ETA 00:51:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 231508.308 ops/s
[info] # Warmup Iteration   2: 253454.368 ops/s
[info] # Warmup Iteration   3: 251184.501 ops/s
[info] Iteration   1: 250143.035 ops/s
[info]                  ·gc.alloc.rate:                   396.566 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.036 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.369 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3218.573 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 248641.089 ops/s
[info]                  ·gc.alloc.rate:                   394.198 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.680 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2076.668 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 250429.897 ops/s
[info]                  ·gc.alloc.rate:                   397.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2061.884 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 251610.673 ops/s
[info]                  ·gc.alloc.rate:                   398.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2041.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 239766.492 ops/s
[info]                  ·gc.alloc.rate:                   380.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              2496.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.410 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4280.509 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala":
[info]   248118.237 ±(99.9%) 18433.458 ops/s [Average]
[info]   (min, avg, max) = (239766.492, 248118.237, 251610.673), stdev = 4787.111
[info]   CI (99.9%): [229684.779, 266551.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   393.388 ±(99.9%) 29.036 MB/sec [Average]
[info]   (min, avg, max) = (380.240, 393.388, 398.929), stdev = 7.541
[info]   CI (99.9%): [364.352, 422.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2496.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2496.002, 2496.002, 2496.002), stdev = 0.001
[info]   CI (99.9%): [2496.001, 2496.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.772 ±(99.9%) 6.259 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.772, 3.680), stdev = 1.625
[info]   CI (99.9%): [≈ 0, 7.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.892 ±(99.9%) 39.628 B/op [Average]
[info]   (min, avg, max) = (0.130, 4.892, 23.300), stdev = 10.291
[info]   CI (99.9%): [≈ 0, 44.520] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.138 ±(99.9%) 569.575 MB/sec [Average]
[info]   (min, avg, max) = (326.298, 429.138, 652.091), stdev = 147.917
[info]   CI (99.9%): [≈ 0, 998.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2735.841 ±(99.9%) 3845.715 B/op [Average]
[info]   (min, avg, max) = (2041.571, 2735.841, 4280.509), stdev = 998.720
[info]   CI (99.9%): [≈ 0, 6581.556] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 6.000), stdev = 2.074
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 20.46% complete, ETA 00:51:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 295065.154 ops/s
[info] # Warmup Iteration   2: 324159.919 ops/s
[info] # Warmup Iteration   3: 338164.350 ops/s
[info] Iteration   1: 338596.679 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 338821.631 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 338722.054 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 337706.428 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 338110.581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc":
[info]   338391.475 ±(99.9%) 1810.842 ops/s [Average]
[info]   (min, avg, max) = (337706.428, 338391.475, 338821.631), stdev = 470.270
[info]   CI (99.9%): [336580.632, 340202.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson
[info] # Run progress: 20.79% complete, ETA 00:51:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 50760.392 ops/s
[info] # Warmup Iteration   2: 72985.444 ops/s
[info] # Warmup Iteration   3: 72965.212 ops/s
[info] Iteration   1: 74327.736 ops/s
[info]                  ·gc.alloc.rate:                   1158.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1293.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27389.968 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 74717.986 ops/s
[info]                  ·gc.alloc.rate:                   1164.820 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1299.847 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27389.174 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73872.661 ops/s
[info]                  ·gc.alloc.rate:                   1151.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20912.480 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 74471.855 ops/s
[info]                  ·gc.alloc.rate:                   1161.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.200 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27845.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 74825.405 ops/s
[info]                  ·gc.alloc.rate:                   1166.551 MB/sec
[info]                  ·gc.alloc.rate.norm:              24544.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20925.284 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson":
[info]   74443.129 ±(99.9%) 1442.394 ops/s [Average]
[info]   (min, avg, max) = (73872.661, 74443.129, 74825.405), stdev = 374.585
[info]   CI (99.9%): [73000.735, 75885.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1160.618 ±(99.9%) 22.580 MB/sec [Average]
[info]   (min, avg, max) = (1151.626, 1160.618, 1166.551), stdev = 5.864
[info]   CI (99.9%): [1138.037, 1183.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   24544.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24544.005, 24544.006, 24544.006), stdev = 0.001
[info]   CI (99.9%): [24544.005, 24544.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.191 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.079, 0.125), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.270] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.670 ±(99.9%) 4.045 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.670, 2.645), stdev = 1.051
[info]   CI (99.9%): [≈ 0, 5.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1177.259 ±(99.9%) 666.770 MB/sec [Average]
[info]   (min, avg, max) = (981.231, 1177.259, 1317.506), stdev = 173.158
[info]   CI (99.9%): [510.488, 1844.029] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   24892.437 ±(99.9%) 13985.975 B/op [Average]
[info]   (min, avg, max) = (20912.480, 24892.437, 27845.277), stdev = 3632.113
[info]   CI (99.9%): [10906.462, 38878.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfDurationsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce
[info] # Run progress: 21.12% complete, ETA 00:51:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19634.495 ops/s
[info] # Warmup Iteration   2: 27537.752 ops/s
[info] # Warmup Iteration   3: 27698.711 ops/s
[info] Iteration   1: 27891.377 ops/s
[info]                  ·gc.alloc.rate:                   579.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.469 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     195.822 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.886 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36796.756 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27963.950 ops/s
[info]                  ·gc.alloc.rate:                   581.454 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18296.092 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 27001.538 ops/s
[info]                  ·gc.alloc.rate:                   561.418 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.493 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37891.450 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 27807.720 ops/s
[info]                  ·gc.alloc.rate:                   578.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36793.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 27940.513 ops/s
[info]                  ·gc.alloc.rate:                   581.012 MB/sec
[info]                  ·gc.alloc.rate.norm:              32736.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36673.335 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce":
[info]   27721.020 ±(99.9%) 1565.779 ops/s [Average]
[info]   (min, avg, max) = (27001.538, 27721.020, 27963.950), stdev = 406.628
[info]   CI (99.9%): [26155.240, 29286.799] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate":
[info]   576.457 ±(99.9%) 32.677 MB/sec [Average]
[info]   (min, avg, max) = (561.418, 576.457, 581.454), stdev = 8.486
[info]   CI (99.9%): [543.781, 609.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   32736.018 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (32736.015, 32736.018, 32736.026), stdev = 0.005
[info]   CI (99.9%): [32736.000, 32736.036] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.735 ±(99.9%) 5.889 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.735, 3.469), stdev = 1.529
[info]   CI (99.9%): [≈ 0, 6.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   41.566 ±(99.9%) 332.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 41.566, 195.822), stdev = 86.302
[info]   CI (99.9%): [≈ 0, 373.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   585.548 ±(99.9%) 560.914 MB/sec [Average]
[info]   (min, avg, max) = (324.973, 585.548, 651.886), stdev = 145.668
[info]   CI (99.9%): [24.633, 1146.462] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33290.219 ±(99.9%) 32332.180 B/op [Average]
[info]   (min, avg, max) = (18296.092, 33290.219, 37891.450), stdev = 8396.565
[info]   CI (99.9%): [958.039, 65622.399] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readCirce:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala
[info] # Run progress: 21.45% complete, ETA 00:50:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 109814.987 ops/s
[info] # Warmup Iteration   2: 125493.932 ops/s
[info] # Warmup Iteration   3: 122794.510 ops/s
[info] Iteration   1: 126246.582 ops/s
[info]                  ·gc.alloc.rate:                   492.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.307 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     41.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      584.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7291.582 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 127077.290 ops/s
[info]                  ·gc.alloc.rate:                   496.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.110 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4075.600 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 125455.725 ops/s
[info]                  ·gc.alloc.rate:                   489.585 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8222.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 126539.971 ops/s
[info]                  ·gc.alloc.rate:                   493.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4067.780 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 126860.157 ops/s
[info]                  ·gc.alloc.rate:                   495.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              6144.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.516 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.253 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8119.047 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala":
[info]   126435.945 ±(99.9%) 2434.440 ops/s [Average]
[info]   (min, avg, max) = (125455.725, 126435.945, 127077.290), stdev = 632.216
[info]   CI (99.9%): [124001.505, 128870.386] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   493.449 ±(99.9%) 9.745 MB/sec [Average]
[info]   (min, avg, max) = (489.585, 493.449, 496.137), stdev = 2.531
[info]   CI (99.9%): [483.704, 503.194] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   6144.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6144.003, 6144.003, 6144.003), stdev = 0.001
[info]   CI (99.9%): [6144.003, 6144.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.682 ±(99.9%) 5.650 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.682, 3.307), stdev = 1.467
[info]   CI (99.9%): [≈ 0, 6.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.507 ±(99.9%) 70.459 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.507, 41.237), stdev = 18.298
[info]   CI (99.9%): [≈ 0, 78.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   510.037 ±(99.9%) 649.267 MB/sec [Average]
[info]   (min, avg, max) = (326.913, 510.037, 655.241), stdev = 168.613
[info]   CI (99.9%): [≈ 0, 1159.305] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   6355.378 ±(99.9%) 8146.879 B/op [Average]
[info]   (min, avg, max) = (4067.780, 6355.378, 8222.880), stdev = 2115.719
[info]   CI (99.9%): [≈ 0, 14502.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson
[info] # Run progress: 21.78% complete, ETA 00:50:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9819.179 ops/s
[info] # Warmup Iteration   2: 22314.117 ops/s
[info] # Warmup Iteration   3: 22308.139 ops/s
[info] Iteration   1: 21778.216 ops/s
[info]                  ·gc.alloc.rate:                   1202.140 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.136 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.485 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94826.236 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 22351.765 ops/s
[info]                  ·gc.alloc.rate:                   1234.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69769.046 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22288.854 ops/s
[info]                  ·gc.alloc.rate:                   1230.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.349 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.746 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93922.685 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 22272.761 ops/s
[info]                  ·gc.alloc.rate:                   1229.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.216 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94512.102 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 22333.930 ops/s
[info]                  ·gc.alloc.rate:                   1233.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              86920.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.467 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1007.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71019.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson":
[info]   22205.105 ±(99.9%) 927.218 ops/s [Average]
[info]   (min, avg, max) = (21778.216, 22205.105, 22351.765), stdev = 240.796
[info]   CI (99.9%): [21277.887, 23132.323] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1225.988 ±(99.9%) 51.805 MB/sec [Average]
[info]   (min, avg, max) = (1202.140, 1225.988, 1234.211), stdev = 13.454
[info]   CI (99.9%): [1174.183, 1277.793] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   86920.043 ±(99.9%) 0.200 B/op [Average]
[info]   (min, avg, max) = (86920.018, 86920.043, 86920.136), stdev = 0.052
[info]   CI (99.9%): [86919.843, 86920.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.148 ±(99.9%) 11.784 B/op [Average]
[info]   (min, avg, max) = (1.467, 4.148, 7.521), stdev = 3.060
[info]   CI (99.9%): [≈ 0, 15.931] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1195.343 ±(99.9%) 691.026 MB/sec [Average]
[info]   (min, avg, max) = (990.678, 1195.343, 1337.216), stdev = 179.457
[info]   CI (99.9%): [504.318, 1886.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   84809.832 ±(99.9%) 50717.389 B/op [Average]
[info]   (min, avg, max) = (69769.046, 84809.832, 94826.236), stdev = 13171.145
[info]   CI (99.9%): [34092.443, 135527.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.readPlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce
[info] # Run progress: 22.11% complete, ETA 00:50:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 132463.179 ops/s
[info] # Warmup Iteration   2: 165668.461 ops/s
[info] # Warmup Iteration   3: 168167.202 ops/s
[info] Iteration   1: 167968.317 ops/s
[info]                  ·gc.alloc.rate:                   841.474 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.975 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.711 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9155.716 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 166668.228 ops/s
[info]                  ·gc.alloc.rate:                   835.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6151.851 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 167922.269 ops/s
[info]                  ·gc.alloc.rate:                   841.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9170.927 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 168305.360 ops/s
[info]                  ·gc.alloc.rate:                   843.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.779 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6122.699 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 168015.793 ops/s
[info]                  ·gc.alloc.rate:                   841.865 MB/sec
[info]                  ·gc.alloc.rate.norm:              7888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.585 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9246.911 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce":
[info]   167775.993 ±(99.9%) 2453.000 ops/s [Average]
[info]   (min, avg, max) = (166668.228, 167775.993, 168305.360), stdev = 637.036
[info]   CI (99.9%): [165322.993, 170228.994] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate":
[info]   840.642 ±(99.9%) 11.589 MB/sec [Average]
[info]   (min, avg, max) = (835.416, 840.642, 843.153), stdev = 3.010
[info]   CI (99.9%): [829.052, 852.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   7888.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7888.002, 7888.002, 7888.003), stdev = 0.001
[info]   CI (99.9%): [7888.002, 7888.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.742 ±(99.9%) 0.629 B/op [Average]
[info]   (min, avg, max) = (0.585, 0.742, 0.975), stdev = 0.163
[info]   CI (99.9%): [0.113, 1.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   849.548 ±(99.9%) 691.069 MB/sec [Average]
[info]   (min, avg, max) = (651.541, 849.548, 986.897), stdev = 179.468
[info]   CI (99.9%): [158.479, 1540.617] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   7969.621 ±(99.9%) 6442.451 B/op [Average]
[info]   (min, avg, max) = (6122.699, 7969.621, 9246.911), stdev = 1673.084
[info]   CI (99.9%): [1527.170, 14412.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeCirce:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 22.44% complete, ETA 00:50:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 475216.090 ops/s
[info] # Warmup Iteration   2: 539450.499 ops/s
[info] # Warmup Iteration   3: 545664.932 ops/s
[info] Iteration   1: 543163.242 ops/s
[info]                  ·gc.alloc.rate:                   416.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.004 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.429 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482.362 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 544186.971 ops/s
[info]                  ·gc.alloc.rate:                   417.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.674 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 542918.897 ops/s
[info]                  ·gc.alloc.rate:                   416.541 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 951.021 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 542501.095 ops/s
[info]                  ·gc.alloc.rate:                   416.294 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1893.786 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 545639.144 ops/s
[info]                  ·gc.alloc.rate:                   418.699 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 939.517 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala":
[info]   543681.870 ±(99.9%) 4844.540 ops/s [Average]
[info]   (min, avg, max) = (542501.095, 543681.870, 545639.144), stdev = 1258.112
[info]   CI (99.9%): [538837.330, 548526.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   417.162 ±(99.9%) 3.739 MB/sec [Average]
[info]   (min, avg, max) = (416.294, 417.162, 418.699), stdev = 0.971
[info]   CI (99.9%): [413.424, 420.901] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.761 ±(99.9%) 6.273 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.674), stdev = 1.629
[info]   CI (99.9%): [≈ 0, 7.033] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.201 ±(99.9%) 18.148 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.201, 10.631), stdev = 4.713
[info]   CI (99.9%): [≈ 0, 20.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.114 ±(99.9%) 570.864 MB/sec [Average]
[info]   (min, avg, max) = (325.642, 429.114, 652.626), stdev = 148.251
[info]   CI (99.9%): [≈ 0, 999.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1243.110 ±(99.9%) 1661.461 B/op [Average]
[info]   (min, avg, max) = (939.517, 1243.110, 1893.786), stdev = 431.476
[info]   CI (99.9%): [≈ 0, 2904.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 22.77% complete, ETA 00:50:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 512482.592 ops/s
[info] # Warmup Iteration   2: 568978.599 ops/s
[info] # Warmup Iteration   3: 568471.200 ops/s
[info] Iteration   1: 568122.799 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 569433.873 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 566972.378 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 561336.438 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 566424.720 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   566458.041 ±(99.9%) 11887.746 ops/s [Average]
[info]   (min, avg, max) = (561336.438, 566458.041, 569433.873), stdev = 3087.210
[info]   CI (99.9%): [554570.295, 578345.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson
[info] # Run progress: 23.10% complete, ETA 00:49:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157833.987 ops/s
[info] # Warmup Iteration   2: 290579.653 ops/s
[info] # Warmup Iteration   3: 296779.243 ops/s
[info] Iteration   1: 297493.516 ops/s
[info]                  ·gc.alloc.rate:                   822.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.661 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5181.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 298423.223 ops/s
[info]                  ·gc.alloc.rate:                   825.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.549 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.202 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3460.473 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 296524.033 ops/s
[info]                  ·gc.alloc.rate:                   819.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5241.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 296703.508 ops/s
[info]                  ·gc.alloc.rate:                   820.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.221 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.255 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3508.550 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 296083.921 ops/s
[info]                  ·gc.alloc.rate:                   818.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              4352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5300.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson":
[info]   297045.640 ±(99.9%) 3556.566 ops/s [Average]
[info]   (min, avg, max) = (296083.921, 297045.640, 298423.223), stdev = 923.629
[info]   CI (99.9%): [293489.075, 300602.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   821.172 ±(99.9%) 10.169 MB/sec [Average]
[info]   (min, avg, max) = (818.500, 821.172, 825.261), stdev = 2.641
[info]   CI (99.9%): [811.004, 831.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4352.001, 4352.001, 4352.001), stdev = 0.001
[info]   CI (99.9%): [4352.001, 4352.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.375 ±(99.9%) 0.877 B/op [Average]
[info]   (min, avg, max) = (0.111, 0.375, 0.661), stdev = 0.228
[info]   CI (99.9%): [≈ 0, 1.251] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   856.107 ±(99.9%) 694.277 MB/sec [Average]
[info]   (min, avg, max) = (656.202, 856.107, 996.876), stdev = 180.302
[info]   CI (99.9%): [161.830, 1550.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4538.572 ±(99.9%) 3709.260 B/op [Average]
[info]   (min, avg, max) = (3460.473, 4538.572, 5300.434), stdev = 963.283
[info]   CI (99.9%): [829.311, 8247.832] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfEnumsBenchmark.writePlayJson:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce
[info] # Run progress: 23.43% complete, ETA 00:49:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30693.419 ops/s
[info] # Warmup Iteration   2: 37964.639 ops/s
[info] # Warmup Iteration   3: 38250.351 ops/s
[info] Iteration   1: 38408.314 ops/s
[info]                  ·gc.alloc.rate:                   1712.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              70199.594 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1644.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67415.865 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 38531.197 ops/s
[info]                  ·gc.alloc.rate:                   1717.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67724.671 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38615.894 ops/s
[info]                  ·gc.alloc.rate:                   1721.953 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.241 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.929 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68079.127 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 38072.283 ops/s
[info]                  ·gc.alloc.rate:                   1697.781 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69418.595 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 38406.123 ops/s
[info]                  ·gc.alloc.rate:                   1713.117 MB/sec
[info]                  ·gc.alloc.rate.norm:              70200.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.645 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69156.227 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce":
[info]   38406.762 ±(99.9%) 796.392 ops/s [Average]
[info]   (min, avg, max) = (38072.283, 38406.762, 38615.894), stdev = 206.821
[info]   CI (99.9%): [37610.370, 39203.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate":
[info]   1712.649 ±(99.9%) 35.243 MB/sec [Average]
[info]   (min, avg, max) = (1697.781, 1712.649, 1721.953), stdev = 9.152
[info]   CI (99.9%): [1677.406, 1747.892] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   70199.928 ±(99.9%) 0.719 B/op [Average]
[info]   (min, avg, max) = (70199.594, 70199.928, 70200.011), stdev = 0.187
[info]   CI (99.9%): [70199.209, 70200.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.605 ±(99.9%) 3.716 B/op [Average]
[info]   (min, avg, max) = (3.412, 4.605, 5.952), stdev = 0.965
[info]   CI (99.9%): [0.889, 8.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1667.674 ±(99.9%) 65.824 MB/sec [Average]
[info]   (min, avg, max) = (1644.619, 1667.674, 1687.645), stdev = 17.094
[info]   CI (99.9%): [1601.850, 1733.497] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   68358.897 ±(99.9%) 3405.435 B/op [Average]
[info]   (min, avg, max) = (67415.865, 68358.897, 69418.595), stdev = 884.381
[info]   CI (99.9%): [64953.462, 71764.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readCirce:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala
[info] # Run progress: 23.76% complete, ETA 00:49:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64751.994 ops/s
[info] # Warmup Iteration   2: 105544.828 ops/s
[info] # Warmup Iteration   3: 106496.754 ops/s
[info] Iteration   1: 106162.011 ops/s
[info]                  ·gc.alloc.rate:                   1170.505 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.926 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19492.132 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 106476.056 ops/s
[info]                  ·gc.alloc.rate:                   1174.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.846 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14676.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 106300.032 ops/s
[info]                  ·gc.alloc.rate:                   1172.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.925 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19734.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 104121.355 ops/s
[info]                  ·gc.alloc.rate:                   1147.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.573 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1004.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15188.217 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 103611.208 ops/s
[info]                  ·gc.alloc.rate:                   1142.597 MB/sec
[info]                  ·gc.alloc.rate.norm:              17360.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20419.643 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala":
[info]   105334.132 ±(99.9%) 5223.846 ops/s [Average]
[info]   (min, avg, max) = (103611.208, 105334.132, 106476.056), stdev = 1356.616
[info]   CI (99.9%): [100110.286, 110557.978] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1161.497 ±(99.9%) 57.637 MB/sec [Average]
[info]   (min, avg, max) = (1142.597, 1161.497, 1174.212), stdev = 14.968
[info]   CI (99.9%): [1103.860, 1219.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17360.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17360.004, 17360.004, 17360.004), stdev = 0.001
[info]   CI (99.9%): [17360.003, 17360.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.307 ±(99.9%) 1.558 B/op [Average]
[info]   (min, avg, max) = (0.925, 1.307, 1.846), stdev = 0.405
[info]   CI (99.9%): [≈ 0, 2.865] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1197.558 ±(99.9%) 700.968 MB/sec [Average]
[info]   (min, avg, max) = (992.686, 1197.558, 1343.975), stdev = 182.039
[info]   CI (99.9%): [496.590, 1898.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   17902.090 ±(99.9%) 10544.398 B/op [Average]
[info]   (min, avg, max) = (14676.244, 17902.090, 20419.643), stdev = 2738.347
[info]   CI (99.9%): [7357.692, 28446.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala
[info] # Run progress: 24.09% complete, ETA 00:49:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 148481.161 ops/s
[info] # Warmup Iteration   2: 153488.726 ops/s
[info] # Warmup Iteration   3: 150197.043 ops/s
[info] Iteration   1: 153985.257 ops/s
[info]                  ·gc.alloc.rate:      100.157 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 151895.313 ops/s
[info]                  ·gc.alloc.rate:                   98.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.432 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2650.516 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 154268.658 ops/s
[info]                  ·gc.alloc.rate:      100.347 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 154334.539 ops/s
[info]                  ·gc.alloc.rate:      100.387 MB/sec
[info]                  ·gc.alloc.rate.norm: 1024.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 153616.381 ops/s
[info]                  ·gc.alloc.rate:                   99.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.024 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.243 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.689 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2620.672 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala":
[info]   153620.030 ±(99.9%) 3869.511 ops/s [Average]
[info]   (min, avg, max) = (151895.313, 153620.030, 154334.539), stdev = 1004.900
[info]   CI (99.9%): [149750.519, 157489.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   99.915 ±(99.9%) 2.558 MB/sec [Average]
[info]   (min, avg, max) = (98.776, 99.915, 100.387), stdev = 0.664
[info]   CI (99.9%): [97.357, 102.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.003, 1024.003, 1024.003), stdev = 0.001
[info]   CI (99.9%): [1024.002, 1024.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.491 ±(99.9%) 4.178 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.491, 2.432), stdev = 1.085
[info]   CI (99.9%): [≈ 0, 4.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   5.091 ±(99.9%) 43.317 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.091, 25.214), stdev = 11.249
[info]   CI (99.9%): [≈ 0, 48.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   102.272 ±(99.9%) 539.252 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 102.272, 255.689), stdev = 140.042
[info]   CI (99.9%): [≈ 0, 641.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1054.238 ±(99.9%) 5558.840 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1054.238, 2650.516), stdev = 1443.613
[info]   CI (99.9%): [≈ 0, 6613.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count":
[info]   2.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.400, 1.000), stdev = 0.548
[info]   CI (99.9%): [2.000, 2.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 2.000), stdev = 1.095
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson
[info] # Run progress: 24.42% complete, ETA 00:48:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21338.691 ops/s
[info] # Warmup Iteration   2: 39889.319 ops/s
[info] # Warmup Iteration   3: 39632.046 ops/s
[info] Iteration   1: 39709.547 ops/s
[info]                  ·gc.alloc.rate:                   2067.047 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.300 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78959.990 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 39774.111 ops/s
[info]                  ·gc.alloc.rate:                   2070.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2009.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79546.600 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 39933.666 ops/s
[info]                  ·gc.alloc.rate:                   2078.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.641 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 79700.492 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 39627.376 ops/s
[info]                  ·gc.alloc.rate:                   2062.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94098.565 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 39843.936 ops/s
[info]                  ·gc.alloc.rate:                   2074.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              81952.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.578 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80433.012 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson":
[info]   39777.727 ±(99.9%) 455.483 ops/s [Average]
[info]   (min, avg, max) = (39627.376, 39777.727, 39933.666), stdev = 118.287
[info]   CI (99.9%): [39322.244, 40233.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2070.618 ±(99.9%) 24.209 MB/sec [Average]
[info]   (min, avg, max) = (2062.565, 2070.618, 2078.798), stdev = 6.287
[info]   CI (99.9%): [2046.409, 2094.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   81952.011 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (81952.010, 81952.011, 81952.014), stdev = 0.001
[info]   CI (99.9%): [81952.005, 81952.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.104, 0.166), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.118 ±(99.9%) 8.958 B/op [Average]
[info]   (min, avg, max) = (1.641, 4.118, 6.589), stdev = 2.326
[info]   CI (99.9%): [≈ 0, 13.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2085.400 ±(99.9%) 612.105 MB/sec [Average]
[info]   (min, avg, max) = (1991.580, 2085.400, 2368.269), stdev = 158.962
[info]   CI (99.9%): [1473.295, 2697.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   82547.732 ±(99.9%) 24946.055 B/op [Average]
[info]   (min, avg, max) = (78959.990, 82547.732, 94098.565), stdev = 6478.411
[info]   CI (99.9%): [57601.676, 107493.787] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 10.000), stdev = 1.924
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce
[info] # Run progress: 24.75% complete, ETA 00:48:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63371.724 ops/s
[info] # Warmup Iteration   2: 83012.527 ops/s
[info] # Warmup Iteration   3: 78939.296 ops/s
[info] Iteration   1: 80700.797 ops/s
[info]                  ·gc.alloc.rate:                   619.583 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.457 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     67.437 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.211 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12744.103 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 80918.388 ops/s
[info]                  ·gc.alloc.rate:                   621.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12671.222 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 80752.335 ops/s
[info]                  ·gc.alloc.rate:                   620.040 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.217 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.895 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12670.045 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 80584.991 ops/s
[info]                  ·gc.alloc.rate:                   618.786 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12722.785 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 80294.181 ops/s
[info]                  ·gc.alloc.rate:                   616.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              12088.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.816 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12794.199 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce":
[info]   80650.138 ±(99.9%) 894.639 ops/s [Average]
[info]   (min, avg, max) = (80294.181, 80650.138, 80918.388), stdev = 232.335
[info]   CI (99.9%): [79755.500, 81544.777] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate":
[info]   619.252 ±(99.9%) 6.757 MB/sec [Average]
[info]   (min, avg, max) = (616.564, 619.252, 621.288), stdev = 1.755
[info]   CI (99.9%): [612.495, 626.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   12088.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (12088.005, 12088.005, 12088.005), stdev = 0.001
[info]   CI (99.9%): [12088.004, 12088.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.725 ±(99.9%) 5.881 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.725, 3.457), stdev = 1.527
[info]   CI (99.9%): [≈ 0, 6.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   14.138 ±(99.9%) 114.737 B/op [Average]
[info]   (min, avg, max) = (0.405, 14.138, 67.437), stdev = 29.797
[info]   CI (99.9%): [≈ 0, 128.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   651.647 ±(99.9%) 4.976 MB/sec [Average]
[info]   (min, avg, max) = (649.895, 651.647, 653.211), stdev = 1.292
[info]   CI (99.9%): [646.671, 656.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   12720.471 ±(99.9%) 201.635 B/op [Average]
[info]   (min, avg, max) = (12670.045, 12720.471, 12794.199), stdev = 52.364
[info]   CI (99.9%): [12518.835, 12922.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala
[info] # Run progress: 25.08% complete, ETA 00:48:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 69519.232 ops/s
[info] # Warmup Iteration   2: 101421.786 ops/s
[info] # Warmup Iteration   3: 101871.777 ops/s
[info] Iteration   1: 101732.043 ops/s
[info]                  ·gc.alloc.rate:                   335.985 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.364 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7914.326 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 101799.920 ops/s
[info]                  ·gc.alloc.rate:                   336.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4958.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 101359.190 ops/s
[info]                  ·gc.alloc.rate:                   334.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.970 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.629 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4980.020 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 101420.847 ops/s
[info]                  ·gc.alloc.rate:                   335.017 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5007.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 101730.476 ops/s
[info]                  ·gc.alloc.rate:                   336.048 MB/sec
[info]                  ·gc.alloc.rate.norm:              5200.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4992.777 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala":
[info]   101608.495 ±(99.9%) 780.056 ops/s [Average]
[info]   (min, avg, max) = (101359.190, 101608.495, 101799.920), stdev = 202.578
[info]   CI (99.9%): [100828.439, 102388.551] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   335.619 ±(99.9%) 2.557 MB/sec [Average]
[info]   (min, avg, max) = (334.792, 335.619, 336.252), stdev = 0.664
[info]   CI (99.9%): [333.062, 338.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   5200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5200.004, 5200.004, 5200.004), stdev = 0.001
[info]   CI (99.9%): [5200.004, 5200.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.083), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.452 ±(99.9%) 2.425 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.452, 1.292), stdev = 0.630
[info]   CI (99.9%): [≈ 0, 2.877] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   359.590 ±(99.9%) 326.727 MB/sec [Average]
[info]   (min, avg, max) = (320.629, 359.590, 511.364), stdev = 84.850
[info]   CI (99.9%): [32.864, 686.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5570.790 ±(99.9%) 5045.114 B/op [Average]
[info]   (min, avg, max) = (4958.841, 5570.790, 7914.326), stdev = 1310.200
[info]   CI (99.9%): [525.676, 10615.904] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala
[info] # Run progress: 25.41% complete, ETA 00:48:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 104129.899 ops/s
[info] # Warmup Iteration   2: 117974.050 ops/s
[info] # Warmup Iteration   3: 116940.419 ops/s
[info] Iteration   1: 117567.620 ops/s
[info]                  ·gc.alloc.rate:                   359.681 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.744 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3424.329 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117711.710 ops/s
[info]                  ·gc.alloc.rate:                   360.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.013 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.173 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.682 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3420.141 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 117664.236 ops/s
[info]                  ·gc.alloc.rate:                   359.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.730 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     49.910 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4387.888 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 117277.019 ops/s
[info]                  ·gc.alloc.rate:                   358.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8782.605 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 117434.673 ops/s
[info]                  ·gc.alloc.rate:                   359.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4374.237 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala":
[info]   117531.052 ±(99.9%) 682.157 ops/s [Average]
[info]   (min, avg, max) = (117277.019, 117531.052, 117711.710), stdev = 177.154
[info]   CI (99.9%): [116848.894, 118213.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   359.537 ±(99.9%) 1.991 MB/sec [Average]
[info]   (min, avg, max) = (358.780, 359.537, 360.034), stdev = 0.517
[info]   CI (99.9%): [357.546, 361.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   4816.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.003, 4816.004, 4816.004), stdev = 0.001
[info]   CI (99.9%): [4816.003, 4816.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.769 ±(99.9%) 6.375 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.769, 3.730), stdev = 1.656
[info]   CI (99.9%): [≈ 0, 7.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   10.296 ±(99.9%) 85.302 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.296, 49.910), stdev = 22.153
[info]   CI (99.9%): [≈ 0, 95.598] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   363.990 ±(99.9%) 639.825 MB/sec [Average]
[info]   (min, avg, max) = (255.682, 363.990, 654.282), stdev = 166.161
[info]   CI (99.9%): [≈ 0, 1003.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4877.840 ±(99.9%) 8605.659 B/op [Average]
[info]   (min, avg, max) = (3420.141, 4877.840, 8782.605), stdev = 2234.862
[info]   CI (99.9%): [≈ 0, 13483.499] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 25.74% complete, ETA 00:48:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102304.210 ops/s
[info] # Warmup Iteration   2: 116052.575 ops/s
[info] # Warmup Iteration   3: 116389.100 ops/s
[info] Iteration   1: 116511.030 ops/s
[info]                  ·gc.alloc.rate:                   264.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.018 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3455.153 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 115460.219 ops/s
[info]                  ·gc.alloc.rate:                   262.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.723 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3486.809 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 116393.324 ops/s
[info]                  ·gc.alloc.rate:                   264.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.033 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3458.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 116231.058 ops/s
[info]                  ·gc.alloc.rate:                   264.028 MB/sec
[info]                  ·gc.alloc.rate.norm:              3576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.732 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4442.049 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 116976.537 ops/s
[info]                  ·gc.alloc.rate:      265.718 MB/sec
[info]                  ·gc.alloc.rate.norm: 3576.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc":
[info]   116314.434 ±(99.9%) 2126.490 ops/s [Average]
[info]   (min, avg, max) = (115460.219, 116314.434, 116976.537), stdev = 552.243
[info]   CI (99.9%): [114187.944, 118440.923] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   264.202 ±(99.9%) 4.832 MB/sec [Average]
[info]   (min, avg, max) = (262.264, 264.202, 265.718), stdev = 1.255
[info]   CI (99.9%): [259.370, 269.034] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   3576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3576.003, 3576.004, 3576.004), stdev = 0.001
[info]   CI (99.9%): [3576.003, 3576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.757 ±(99.9%) 6.404 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.757, 3.732), stdev = 1.663
[info]   CI (99.9%): [≈ 0, 7.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   10.246 ±(99.9%) 86.740 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 10.246, 50.541), stdev = 22.526
[info]   CI (99.9%): [≈ 0, 96.986] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   219.015 ±(99.9%) 486.603 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 219.015, 327.971), stdev = 126.369
[info]   CI (99.9%): [≈ 0, 705.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   2968.533 ±(99.9%) 6593.789 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2968.533, 4442.049), stdev = 1712.386
[info]   CI (99.9%): [≈ 0, 9562.322] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.000, 3.000), stdev = 1.225
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce
[info] # Run progress: 26.07% complete, ETA 00:47:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6160.993 ops/s
[info] # Warmup Iteration   2: 9538.886 ops/s
[info] # Warmup Iteration   3: 9815.711 ops/s
[info] Iteration   1: 9780.767 ops/s
[info]                  ·gc.alloc.rate:                   1605.792 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.045 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.397 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1642.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 264448.209 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 9812.592 ops/s
[info]                  ·gc.alloc.rate:                   1611.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.677 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265535.980 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 9827.239 ops/s
[info]                  ·gc.alloc.rate:                   1613.647 MB/sec
[info]                  ·gc.alloc.rate.norm:              258488.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213470.401 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 9794.787 ops/s
[info]                  ·gc.alloc.rate:                   1608.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              258493.497 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269314.299 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 9762.780 ops/s
[info]                  ·gc.alloc.rate:                   1603.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              258504.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.711 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271405.616 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce":
[info]   9795.633 ±(99.9%) 97.938 ops/s [Average]
[info]   (min, avg, max) = (9762.780, 9795.633, 9827.239), stdev = 25.434
[info]   CI (99.9%): [9697.694, 9893.571] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate":
[info]   1608.638 ±(99.9%) 15.628 MB/sec [Average]
[info]   (min, avg, max) = (1603.753, 1608.638, 1613.647), stdev = 4.058
[info]   CI (99.9%): [1593.010, 1624.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   258492.333 ±(99.9%) 26.794 B/op [Average]
[info]   (min, avg, max) = (258488.042, 258492.333, 258504.042), stdev = 6.958
[info]   CI (99.9%): [258465.540, 258519.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   10.033 ±(99.9%) 12.886 B/op [Average]
[info]   (min, avg, max) = (6.677, 10.033, 13.397), stdev = 3.346
[info]   CI (99.9%): [≈ 0, 22.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1598.099 ±(99.9%) 574.859 MB/sec [Average]
[info]   (min, avg, max) = (1332.618, 1598.099, 1683.794), stdev = 149.289
[info]   CI (99.9%): [1023.241, 2172.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   256834.901 ±(99.9%) 93970.549 B/op [Average]
[info]   (min, avg, max) = (213470.401, 256834.901, 271405.616), stdev = 24403.853
[info]   CI (99.9%): [162864.353, 350805.450] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala
[info] # Run progress: 26.40% complete, ETA 00:47:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5039.756 ops/s
[info] # Warmup Iteration   2: 10511.464 ops/s
[info] # Warmup Iteration   3: 10530.011 ops/s
[info] Iteration   1: 10581.678 ops/s
[info]                  ·gc.alloc.rate:                   1633.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1655.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246318.774 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 10567.745 ops/s
[info]                  ·gc.alloc.rate:                   1632.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.039 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1670.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 248751.591 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 10604.331 ops/s
[info]                  ·gc.alloc.rate:                   1637.675 MB/sec
[info]                  ·gc.alloc.rate.norm:              243136.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.642 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249366.735 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 10588.311 ops/s
[info]                  ·gc.alloc.rate:                   1635.135 MB/sec
[info]                  ·gc.alloc.rate.norm:              243157.173 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.082 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 250733.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 10657.460 ops/s
[info]                  ·gc.alloc.rate:                   1646.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              243168.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.074 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1353.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199878.652 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala":
[info]   10599.905 ±(99.9%) 133.849 ops/s [Average]
[info]   (min, avg, max) = (10567.745, 10599.905, 10657.460), stdev = 34.760
[info]   CI (99.9%): [10466.056, 10733.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1637.081 ±(99.9%) 21.101 MB/sec [Average]
[info]   (min, avg, max) = (1632.377, 1637.081, 1646.254), stdev = 5.480
[info]   CI (99.9%): [1615.981, 1658.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   243146.666 ±(99.9%) 57.950 B/op [Average]
[info]   (min, avg, max) = (243136.038, 243146.666, 243168.038), stdev = 15.049
[info]   CI (99.9%): [243088.716, 243204.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   9.901 ±(99.9%) 17.741 B/op [Average]
[info]   (min, avg, max) = (3.074, 9.901, 15.500), stdev = 4.607
[info]   CI (99.9%): [≈ 0, 27.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1608.869 ±(99.9%) 552.180 MB/sec [Average]
[info]   (min, avg, max) = (1353.184, 1608.869, 1686.082), stdev = 143.399
[info]   CI (99.9%): [1056.689, 2161.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   239009.855 ±(99.9%) 84457.405 B/op [Average]
[info]   (min, avg, max) = (199878.652, 239009.855, 250733.521), stdev = 21933.320
[info]   CI (99.9%): [154552.450, 323467.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJacksonScala:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala
[info] # Run progress: 26.73% complete, ETA 00:47:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 102465.538 ops/s
[info] # Warmup Iteration   2: 106207.639 ops/s
[info] # Warmup Iteration   3: 106509.001 ops/s
[info] Iteration   1: 108657.655 ops/s
[info]                  ·gc.alloc.rate:                   282.671 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.667 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3704.704 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 108665.391 ops/s
[info]                  ·gc.alloc.rate:                   282.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3704.841 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 108699.410 ops/s
[info]                  ·gc.alloc.rate:                   282.805 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3703.443 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 108779.579 ops/s
[info]                  ·gc.alloc.rate:                   282.972 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.681 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     38.808 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4784.916 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 108740.480 ops/s
[info]                  ·gc.alloc.rate:                   282.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4786.588 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala":
[info]   108708.503 ±(99.9%) 198.235 ops/s [Average]
[info]   (min, avg, max) = (108657.655, 108708.503, 108779.579), stdev = 51.481
[info]   CI (99.9%): [108510.269, 108906.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   282.826 ±(99.9%) 0.470 MB/sec [Average]
[info]   (min, avg, max) = (282.671, 282.826, 282.972), stdev = 0.122
[info]   CI (99.9%): [282.356, 283.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.004, 4096.004, 4096.004), stdev = 0.001
[info]   CI (99.9%): [4096.003, 4096.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.561 ±(99.9%) 4.565 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.561, 2.681), stdev = 1.186
[info]   CI (99.9%): [≈ 0, 5.126] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   8.124 ±(99.9%) 66.079 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 8.124, 38.808), stdev = 17.160
[info]   CI (99.9%): [≈ 0, 74.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   285.663 ±(99.9%) 157.942 MB/sec [Average]
[info]   (min, avg, max) = (255.667, 285.663, 330.624), stdev = 41.017
[info]   CI (99.9%): [127.720, 443.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4136.898 ±(99.9%) 2280.813 B/op [Average]
[info]   (min, avg, max) = (3703.443, 4136.898, 4786.588), stdev = 592.320
[info]   CI (99.9%): [1856.085, 6417.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson
[info] # Run progress: 27.06% complete, ETA 00:47:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2552.619 ops/s
[info] # Warmup Iteration   2: 5586.348 ops/s
[info] # Warmup Iteration   3: 5636.719 ops/s
[info] Iteration   1: 5687.002 ops/s
[info]                  ·gc.alloc.rate:                   1500.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.072 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.025 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366052.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 5741.736 ops/s
[info]                  ·gc.alloc.rate:                   1515.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     39.940 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456732.172 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 5658.741 ops/s
[info]                  ·gc.alloc.rate:                   1494.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.442 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 373049.296 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5737.549 ops/s
[info]                  ·gc.alloc.rate:                   1514.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.071 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     34.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 461983.693 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 5795.784 ops/s
[info]                  ·gc.alloc.rate:                   1530.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              415600.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.710 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 366856.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson":
[info]   5724.162 ±(99.9%) 204.471 ops/s [Average]
[info]   (min, avg, max) = (5658.741, 5724.162, 5795.784), stdev = 53.101
[info]   CI (99.9%): [5519.691, 5928.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1511.245 ±(99.9%) 53.768 MB/sec [Average]
[info]   (min, avg, max) = (1494.450, 1511.245, 1530.175), stdev = 13.963
[info]   CI (99.9%): [1457.477, 1565.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   415600.072 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (415600.070, 415600.072, 415600.078), stdev = 0.003
[info]   CI (99.9%): [415600.061, 415600.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.146), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.316] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   18.252 ±(99.9%) 68.452 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 18.252, 39.940), stdev = 17.777
[info]   CI (99.9%): [≈ 0, 86.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1472.778 ±(99.9%) 711.861 MB/sec [Average]
[info]   (min, avg, max) = (1322.025, 1472.778, 1683.736), stdev = 184.868
[info]   CI (99.9%): [760.916, 2184.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   404934.890 ±(99.9%) 191721.834 B/op [Average]
[info]   (min, avg, max) = (366052.371, 404934.890, 461983.693), stdev = 49789.551
[info]   CI (99.9%): [213213.056, 596656.724] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.readPlayJson:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce
[info] # Run progress: 27.39% complete, ETA 00:47:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16673.982 ops/s
[info] # Warmup Iteration   2: 24575.012 ops/s
[info] # Warmup Iteration   3: 24685.792 ops/s
[info] Iteration   1: 24459.544 ops/s
[info]                  ·gc.alloc.rate:                   1374.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              88480.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.357 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.987 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105239.041 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24862.405 ops/s
[info]                  ·gc.alloc.rate:                   1397.366 MB/sec
[info]                  ·gc.alloc.rate.norm:              88472.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.589 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83385.975 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24951.690 ops/s
[info]                  ·gc.alloc.rate:                   1401.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.251 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.391 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83624.766 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 24975.390 ops/s
[info]                  ·gc.alloc.rate:                   1403.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1333.530 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84051.455 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 24785.820 ops/s
[info]                  ·gc.alloc.rate:                   1393.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              88456.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.930 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85153.980 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce":
[info]   24806.970 ±(99.9%) 802.040 ops/s [Average]
[info]   (min, avg, max) = (24459.544, 24806.970, 24975.390), stdev = 208.287
[info]   CI (99.9%): [24004.930, 25609.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1394.091 ±(99.9%) 44.727 MB/sec [Average]
[info]   (min, avg, max) = (1374.620, 1394.091, 1403.412), stdev = 11.615
[info]   CI (99.9%): [1349.364, 1438.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   88464.185 ±(99.9%) 44.162 B/op [Average]
[info]   (min, avg, max) = (88456.016, 88464.185, 88480.018), stdev = 11.469
[info]   CI (99.9%): [88420.024, 88508.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.550 ±(99.9%) 7.564 B/op [Average]
[info]   (min, avg, max) = (2.623, 5.550, 7.930), stdev = 1.964
[info]   CI (99.9%): [≈ 0, 13.114] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1390.404 ±(99.9%) 527.619 MB/sec [Average]
[info]   (min, avg, max) = (1317.023, 1390.404, 1634.987), stdev = 137.021
[info]   CI (99.9%): [862.786, 1918.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   88291.043 ±(99.9%) 36575.226 B/op [Average]
[info]   (min, avg, max) = (83385.975, 88291.043, 105239.041), stdev = 9498.470
[info]   CI (99.9%): [51715.817, 124866.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala
[info] # Run progress: 27.72% complete, ETA 00:46:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316423.221 ops/s
[info] # Warmup Iteration   2: 348048.148 ops/s
[info] # Warmup Iteration   3: 342352.095 ops/s
[info] Iteration   1: 346786.313 ops/s
[info]                  ·gc.alloc.rate:                   764.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.585 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2962.583 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 347633.082 ops/s
[info]                  ·gc.alloc.rate:                   766.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.471 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2949.445 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 344466.653 ops/s
[info]                  ·gc.alloc.rate:                   759.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.380 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4472.302 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 347588.891 ops/s
[info]                  ·gc.alloc.rate:                   766.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2961.764 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 347456.751 ops/s
[info]                  ·gc.alloc.rate:                   766.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              3472.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2971.915 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala":
[info]   346786.338 ±(99.9%) 5163.116 ops/s [Average]
[info]   (min, avg, max) = (344466.653, 346786.338, 347633.082), stdev = 1340.845
[info]   CI (99.9%): [341623.222, 351949.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   764.839 ±(99.9%) 11.557 MB/sec [Average]
[info]   (min, avg, max) = (759.651, 764.839, 766.640), stdev = 3.001
[info]   CI (99.9%): [753.282, 776.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3472.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3472.001, 3472.001, 3472.001), stdev = 0.001
[info]   CI (99.9%): [3472.001, 3472.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.302 ±(99.9%) 0.699 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.302, 0.471), stdev = 0.182
[info]   CI (99.9%): [≈ 0, 1.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   718.479 ±(99.9%) 559.781 MB/sec [Average]
[info]   (min, avg, max) = (651.186, 718.479, 978.510), stdev = 145.373
[info]   CI (99.9%): [158.699, 1278.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3263.602 ±(99.9%) 2602.000 B/op [Average]
[info]   (min, avg, max) = (2949.445, 3263.602, 4472.302), stdev = 675.731
[info]   CI (99.9%): [661.602, 5865.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 28.05% complete, ETA 00:46:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 337854.084 ops/s
[info] # Warmup Iteration   2: 360511.561 ops/s
[info] # Warmup Iteration   3: 379402.100 ops/s
[info] Iteration   1: 379166.644 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 380726.238 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 380824.734 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 379555.441 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 379555.287 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc":
[info]   379965.669 ±(99.9%) 2914.559 ops/s [Average]
[info]   (min, avg, max) = (379166.644, 379965.669, 380824.734), stdev = 756.902
[info]   CI (99.9%): [377051.110, 382880.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson
[info] # Run progress: 28.38% complete, ETA 00:46:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17408.245 ops/s
[info] # Warmup Iteration   2: 27799.795 ops/s
[info] # Warmup Iteration   3: 28187.092 ops/s
[info] Iteration   1: 28043.372 ops/s
[info]                  ·gc.alloc.rate:                   1475.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1622.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91073.327 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 28353.921 ops/s
[info]                  ·gc.alloc.rate:                   1490.842 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.988 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 72692.987 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28135.199 ops/s
[info]                  ·gc.alloc.rate:                   1479.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.831 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92430.447 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28297.512 ops/s
[info]                  ·gc.alloc.rate:                   1488.218 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.818 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74091.221 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 27775.678 ops/s
[info]                  ·gc.alloc.rate:                   1460.935 MB/sec
[info]                  ·gc.alloc.rate.norm:              82792.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.718 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75879.568 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson":
[info]   28121.136 ±(99.9%) 884.147 ops/s [Average]
[info]   (min, avg, max) = (27775.678, 28121.136, 28353.921), stdev = 229.610
[info]   CI (99.9%): [27236.989, 29005.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1478.944 ±(99.9%) 45.835 MB/sec [Average]
[info]   (min, avg, max) = (1460.935, 1478.944, 1490.842), stdev = 11.903
[info]   CI (99.9%): [1433.109, 1524.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   82792.016 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (82792.014, 82792.016, 82792.019), stdev = 0.002
[info]   CI (99.9%): [82792.008, 82792.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.355 ±(99.9%) 8.098 B/op [Average]
[info]   (min, avg, max) = (3.473, 5.355, 8.151), stdev = 2.103
[info]   CI (99.9%): [≈ 0, 13.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1450.858 ±(99.9%) 657.820 MB/sec [Average]
[info]   (min, avg, max) = (1308.988, 1450.858, 1651.831), stdev = 170.834
[info]   CI (99.9%): [793.038, 2108.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81233.510 ±(99.9%) 37274.298 B/op [Average]
[info]   (min, avg, max) = (72692.987, 81233.510, 92430.447), stdev = 9680.017
[info]   CI (99.9%): [43959.212, 118507.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfInstantsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce
[info] # Run progress: 28.71% complete, ETA 00:46:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114796.215 ops/s
[info] # Warmup Iteration   2: 138563.750 ops/s
[info] # Warmup Iteration   3: 140087.500 ops/s
[info] Iteration   1: 140333.483 ops/s
[info]                  ·gc.alloc.rate:                   2285.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.868 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.342 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22341.203 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 137972.490 ops/s
[info]                  ·gc.alloc.rate:                   2246.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2343.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26743.650 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 139814.654 ops/s
[info]                  ·gc.alloc.rate:                   2277.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.565 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26569.434 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 137269.990 ops/s
[info]                  ·gc.alloc.rate:                   2235.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.671 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2369.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27176.479 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 139213.696 ops/s
[info]                  ·gc.alloc.rate:                   2267.457 MB/sec
[info]                  ·gc.alloc.rate.norm:              25640.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.941 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.459 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23027.918 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce":
[info]   138920.862 ±(99.9%) 4910.478 ops/s [Average]
[info]   (min, avg, max) = (137269.990, 138920.862, 140333.483), stdev = 1275.236
[info]   CI (99.9%): [134010.384, 143831.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate":
[info]   2262.501 ±(99.9%) 79.836 MB/sec [Average]
[info]   (min, avg, max) = (2235.678, 2262.501, 2285.375), stdev = 20.733
[info]   CI (99.9%): [2182.664, 2342.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   25640.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (25640.003, 25640.003, 25640.003), stdev = 0.001
[info]   CI (99.9%): [25640.003, 25640.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.137 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.137, 0.166), stdev = 0.035
[info]   CI (99.9%): [0.003, 0.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.557 ±(99.9%) 1.527 B/op [Average]
[info]   (min, avg, max) = (0.941, 1.557, 1.900), stdev = 0.396
[info]   CI (99.9%): [0.030, 3.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2220.141 ±(99.9%) 728.432 MB/sec [Average]
[info]   (min, avg, max) = (1991.342, 2220.141, 2369.651), stdev = 189.172
[info]   CI (99.9%): [1491.708, 2948.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   25171.737 ±(99.9%) 8833.713 B/op [Average]
[info]   (min, avg, max) = (22341.203, 25171.737, 27176.479), stdev = 2294.087
[info]   CI (99.9%): [16338.024, 34005.449] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala
[info] # Run progress: 29.04% complete, ETA 00:45:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 186409.663 ops/s
[info] # Warmup Iteration   2: 287800.449 ops/s
[info] # Warmup Iteration   3: 299411.449 ops/s
[info] Iteration   1: 301051.478 ops/s
[info]                  ·gc.alloc.rate:                   425.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1337.150 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 295994.447 ops/s
[info]                  ·gc.alloc.rate:                   418.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.270 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3442.680 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 298177.534 ops/s
[info]                  ·gc.alloc.rate:                   421.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1719.196 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 299152.663 ops/s
[info]                  ·gc.alloc.rate:                   422.568 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.329 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1713.715 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 298832.345 ops/s
[info]                  ·gc.alloc.rate:                   422.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              2224.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.842 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3448.652 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala":
[info]   298641.693 ±(99.9%) 7028.839 ops/s [Average]
[info]   (min, avg, max) = (295994.447, 298641.693, 301051.478), stdev = 1825.367
[info]   CI (99.9%): [291612.855, 305670.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   421.897 ±(99.9%) 9.916 MB/sec [Average]
[info]   (min, avg, max) = (418.142, 421.897, 425.264), stdev = 2.575
[info]   CI (99.9%): [411.981, 431.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2224.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2224.001, 2224.001, 2224.001), stdev = 0.001
[info]   CI (99.9%): [2224.001, 2224.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.104), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.176 ±(99.9%) 0.979 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.176, 0.553), stdev = 0.254
[info]   CI (99.9%): [≈ 0, 1.156] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   441.802 ±(99.9%) 743.795 MB/sec [Average]
[info]   (min, avg, max) = (255.684, 441.802, 654.842), stdev = 193.161
[info]   CI (99.9%): [≈ 0, 1185.597] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2332.278 ±(99.9%) 3958.892 B/op [Average]
[info]   (min, avg, max) = (1337.150, 2332.278, 3448.652), stdev = 1028.112
[info]   CI (99.9%): [≈ 0, 6291.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala
[info] # Run progress: 29.37% complete, ETA 00:45:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646149.318 ops/s
[info] # Warmup Iteration   2: 687656.543 ops/s
[info] # Warmup Iteration   3: 710309.849 ops/s
[info] Iteration   1: 715147.818 ops/s
[info]                  ·gc.alloc.rate:                   465.158 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.718 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.940 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 709706.819 ops/s
[info]                  ·gc.alloc.rate:                   461.710 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.299 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.316 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1461.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 715246.072 ops/s
[info]                  ·gc.alloc.rate:                   465.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.608 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 721.171 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 710162.970 ops/s
[info]                  ·gc.alloc.rate:                   461.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1452.593 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 713035.058 ops/s
[info]                  ·gc.alloc.rate:                   463.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1024.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 723.358 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala":
[info]   712659.748 ±(99.9%) 10183.135 ops/s [Average]
[info]   (min, avg, max) = (709706.819, 712659.748, 715246.072), stdev = 2644.528
[info]   CI (99.9%): [702476.612, 722842.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   463.550 ±(99.9%) 6.449 MB/sec [Average]
[info]   (min, avg, max) = (461.710, 463.550, 465.175), stdev = 1.675
[info]   CI (99.9%): [457.101, 469.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1024.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1024.001, 1024.001, 1024.001), stdev = 0.001
[info]   CI (99.9%): [1024.001, 1024.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.684 ±(99.9%) 5.632 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.684, 3.299), stdev = 1.463
[info]   CI (99.9%): [≈ 0, 6.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.516 ±(99.9%) 12.490 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.516, 7.316), stdev = 3.244
[info]   CI (99.9%): [≈ 0, 14.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   445.001 ±(99.9%) 753.878 MB/sec [Average]
[info]   (min, avg, max) = (255.718, 445.001, 658.784), stdev = 195.780
[info]   CI (99.9%): [≈ 0, 1198.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   984.228 ±(99.9%) 1680.100 B/op [Average]
[info]   (min, avg, max) = (562.940, 984.228, 1461.079), stdev = 436.317
[info]   CI (99.9%): [≈ 0, 2664.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson
[info] # Run progress: 29.70% complete, ETA 00:45:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40127.748 ops/s
[info] # Warmup Iteration   2: 70063.157 ops/s
[info] # Warmup Iteration   3: 70840.538 ops/s
[info] Iteration   1: 71219.484 ops/s
[info]                  ·gc.alloc.rate:                   3024.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3022.870 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66830.472 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 71373.743 ops/s
[info]                  ·gc.alloc.rate:                   3031.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.131 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3044.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67144.471 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 71044.727 ops/s
[info]                  ·gc.alloc.rate:                   3016.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.023 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67688.622 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 70259.877 ops/s
[info]                  ·gc.alloc.rate:                   2990.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              67008.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.730 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3058.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68549.203 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 70451.872 ops/s
[info]                  ·gc.alloc.rate:                   2991.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              66856.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68436.827 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson":
[info]   70869.941 ±(99.9%) 1880.031 ops/s [Average]
[info]   (min, avg, max) = (70259.877, 70869.941, 71373.743), stdev = 488.238
[info]   CI (99.9%): [68989.910, 72749.972] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3010.737 ±(99.9%) 72.086 MB/sec [Average]
[info]   (min, avg, max) = (2990.161, 3010.737, 3031.118), stdev = 18.721
[info]   CI (99.9%): [2938.651, 3082.824] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   66886.429 ±(99.9%) 261.955 B/op [Average]
[info]   (min, avg, max) = (66856.006, 66886.429, 67008.123), stdev = 68.029
[info]   CI (99.9%): [66624.474, 67148.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.171 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.125, 0.171, 0.187), stdev = 0.027
[info]   CI (99.9%): [0.066, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.791 ±(99.9%) 2.315 B/op [Average]
[info]   (min, avg, max) = (2.767, 3.791, 4.185), stdev = 0.601
[info]   CI (99.9%): [1.476, 6.106] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3048.538 ±(99.9%) 61.355 MB/sec [Average]
[info]   (min, avg, max) = (3022.870, 3048.538, 3062.672), stdev = 15.934
[info]   CI (99.9%): [2987.183, 3109.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67729.919 ±(99.9%) 2935.346 B/op [Average]
[info]   (min, avg, max) = (66830.472, 67729.919, 68549.203), stdev = 762.300
[info]   CI (99.9%): [64794.573, 70665.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.readPlayJson:·gc.time":
[info]   46.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.200, 10.000), stdev = 0.447
[info]   CI (99.9%): [46.000, 46.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce
[info] # Run progress: 30.03% complete, ETA 00:45:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 180760.377 ops/s
[info] # Warmup Iteration   2: 227554.928 ops/s
[info] # Warmup Iteration   3: 227584.927 ops/s
[info] Iteration   1: 229758.653 ops/s
[info]                  ·gc.alloc.rate:                   1612.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.570 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1637.975 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11224.330 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 228267.801 ops/s
[info]                  ·gc.alloc.rate:                   1601.684 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9110.864 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 228107.984 ops/s
[info]                  ·gc.alloc.rate:                   1600.624 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.574 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11483.040 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 228507.442 ops/s
[info]                  ·gc.alloc.rate:                   1603.702 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.531 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11535.946 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 229659.097 ops/s
[info]                  ·gc.alloc.rate:                   1611.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              11048.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.856 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.759 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11541.849 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce":
[info]   228860.195 ±(99.9%) 3036.066 ops/s [Average]
[info]   (min, avg, max) = (228107.984, 228860.195, 229758.653), stdev = 788.457
[info]   CI (99.9%): [225824.129, 231896.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1605.994 ±(99.9%) 21.478 MB/sec [Average]
[info]   (min, avg, max) = (1600.624, 1605.994, 1612.243), stdev = 5.578
[info]   CI (99.9%): [1584.515, 1627.472] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   11048.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11048.002, 11048.002, 11048.002), stdev = 0.001
[info]   CI (99.9%): [11048.002, 11048.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.125), stdev = 0.023
[info]   CI (99.9%): [0.012, 0.188] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.687 ±(99.9%) 0.601 B/op [Average]
[info]   (min, avg, max) = (0.570, 0.687, 0.860), stdev = 0.156
[info]   CI (99.9%): [0.086, 1.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1596.153 ±(99.9%) 596.278 MB/sec [Average]
[info]   (min, avg, max) = (1320.848, 1596.153, 1683.759), stdev = 154.852
[info]   CI (99.9%): [999.875, 2192.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10979.206 ±(99.9%) 4052.866 B/op [Average]
[info]   (min, avg, max) = (9110.864, 10979.206, 11541.849), stdev = 1052.516
[info]   CI (99.9%): [6926.340, 15032.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala
[info] # Run progress: 30.36% complete, ETA 00:45:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 559418.458 ops/s
[info] # Warmup Iteration   2: 841671.628 ops/s
[info] # Warmup Iteration   3: 837589.976 ops/s
[info] Iteration   1: 849480.911 ops/s
[info]                  ·gc.alloc.rate:                   669.036 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1192.099 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 849008.686 ops/s
[info]                  ·gc.alloc.rate:                   668.612 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1200.292 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 845667.638 ops/s
[info]                  ·gc.alloc.rate:                   666.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.550 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1211.145 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 848468.954 ops/s
[info]                  ·gc.alloc.rate:                   668.217 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.506 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1212.703 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 851659.971 ops/s
[info]                  ·gc.alloc.rate:                   670.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              1240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.115 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1214.312 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala":
[info]   848857.232 ±(99.9%) 8301.584 ops/s [Average]
[info]   (min, avg, max) = (845667.638, 848857.232, 851659.971), stdev = 2155.895
[info]   CI (99.9%): [840555.648, 857158.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   668.552 ±(99.9%) 6.633 MB/sec [Average]
[info]   (min, avg, max) = (666.050, 668.552, 670.845), stdev = 1.723
[info]   CI (99.9%): [661.919, 675.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1240.000, 1240.000, 1240.001), stdev = 0.001
[info]   CI (99.9%): [1240.000, 1240.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.108 ±(99.9%) 0.193 B/op [Average]
[info]   (min, avg, max) = (0.077, 0.108, 0.193), stdev = 0.050
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   650.279 ±(99.9%) 20.617 MB/sec [Average]
[info]   (min, avg, max) = (643.191, 650.279, 656.947), stdev = 5.354
[info]   CI (99.9%): [629.662, 670.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1206.110 ±(99.9%) 36.845 B/op [Average]
[info]   (min, avg, max) = (1192.099, 1206.110, 1214.312), stdev = 9.569
[info]   CI (99.9%): [1169.265, 1242.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala
[info] # Run progress: 30.69% complete, ETA 00:44:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1030734.949 ops/s
[info] # Warmup Iteration   2: 1165563.318 ops/s
[info] # Warmup Iteration   3: 1161765.701 ops/s
[info] Iteration   1: 1176871.556 ops/s
[info]                  ·gc.alloc.rate:                   639.905 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.296 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 875.251 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 1204132.458 ops/s
[info]                  ·gc.alloc.rate:                   654.963 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 852.400 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1190980.594 ops/s
[info]                  ·gc.alloc.rate:                   647.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.320 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1200243.762 ops/s
[info]                  ·gc.alloc.rate:                   652.662 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855.970 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 1193942.760 ops/s
[info]                  ·gc.alloc.rate:                   649.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.118 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 862.245 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala":
[info]   1193234.226 ±(99.9%) 40441.978 ops/s [Average]
[info]   (min, avg, max) = (1176871.556, 1193234.226, 1204132.458), stdev = 10502.653
[info]   CI (99.9%): [1152792.247, 1233676.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   648.894 ±(99.9%) 22.275 MB/sec [Average]
[info]   (min, avg, max) = (639.905, 648.894, 654.963), stdev = 5.785
[info]   CI (99.9%): [626.619, 671.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.227 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.082 ±(99.9%) 0.300 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.082, 0.167), stdev = 0.078
[info]   CI (99.9%): [≈ 0, 0.382] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   652.969 ±(99.9%) 4.591 MB/sec [Average]
[info]   (min, avg, max) = (651.584, 652.969, 654.296), stdev = 1.192
[info]   CI (99.9%): [648.378, 657.560] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   861.437 ±(99.9%) 33.518 B/op [Average]
[info]   (min, avg, max) = (852.400, 861.437, 875.251), stdev = 8.704
[info]   CI (99.9%): [827.919, 894.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 31.02% complete, ETA 00:44:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 993479.519 ops/s
[info] # Warmup Iteration   2: 1086259.782 ops/s
[info] # Warmup Iteration   3: 1086476.336 ops/s
[info] Iteration   1: 1083143.465 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1088351.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1082847.823 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1084194.154 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1080388.225 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc":
[info]   1083785.051 ±(99.9%) 11201.516 ops/s [Average]
[info]   (min, avg, max) = (1080388.225, 1083785.051, 1088351.588), stdev = 2908.998
[info]   CI (99.9%): [1072583.535, 1094986.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson
[info] # Run progress: 31.35% complete, ETA 00:44:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22369.450 ops/s
[info] # Warmup Iteration   2: 34447.004 ops/s
[info] # Warmup Iteration   3: 34411.575 ops/s
[info] Iteration   1: 34365.290 ops/s
[info]                  ·gc.alloc.rate:                   1858.472 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.066 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.860 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1959.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89778.581 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 34438.704 ops/s
[info]                  ·gc.alloc.rate:                   1862.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.894 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 90686.831 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 34610.226 ops/s
[info]                  ·gc.alloc.rate:                   1871.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.840 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75893.554 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 34685.368 ops/s
[info]                  ·gc.alloc.rate:                   1875.949 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2015.479 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91476.861 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 34271.982 ops/s
[info]                  ·gc.alloc.rate:                   1853.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              85144.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.824 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.774 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77480.835 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson":
[info]   34474.314 ±(99.9%) 658.867 ops/s [Average]
[info]   (min, avg, max) = (34271.982, 34474.314, 34685.368), stdev = 171.106
[info]   CI (99.9%): [33815.447, 35133.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1864.498 ±(99.9%) 35.673 MB/sec [Average]
[info]   (min, avg, max) = (1853.603, 1864.498, 1875.949), stdev = 9.264
[info]   CI (99.9%): [1828.825, 1900.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   85144.023 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (85144.012, 85144.023, 85144.066), stdev = 0.024
[info]   CI (99.9%): [85143.930, 85144.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.802 ±(99.9%) 4.493 B/op [Average]
[info]   (min, avg, max) = (2.840, 3.802, 5.708), stdev = 1.167
[info]   CI (99.9%): [≈ 0, 8.295] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1862.848 ±(99.9%) 656.033 MB/sec [Average]
[info]   (min, avg, max) = (1668.462, 1862.848, 2015.479), stdev = 170.370
[info]   CI (99.9%): [1206.815, 2518.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   85063.332 ±(99.9%) 29613.039 B/op [Average]
[info]   (min, avg, max) = (75893.554, 85063.332, 91476.861), stdev = 7690.412
[info]   CI (99.9%): [55450.293, 114676.372] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfIntsBenchmark.writePlayJson:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala
[info] # Run progress: 31.68% complete, ETA 00:44:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 114581.775 ops/s
[info] # Warmup Iteration   2: 195079.257 ops/s
[info] # Warmup Iteration   3: 194421.918 ops/s
[info] Iteration   1: 189086.014 ops/s
[info]                  ·gc.alloc.rate:                   1005.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.693 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8186.023 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 192053.471 ops/s
[info]                  ·gc.alloc.rate:                   1020.828 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.512 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.598 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8103.804 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 191813.516 ops/s
[info]                  ·gc.alloc.rate:                   1019.521 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.683 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8168.004 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 190258.592 ops/s
[info]                  ·gc.alloc.rate:                   1011.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.172 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.149 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8267.589 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 195022.996 ops/s
[info]                  ·gc.alloc.rate:                   1036.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.504 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.846 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8103.972 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala":
[info]   191646.918 ±(99.9%) 8626.779 ops/s [Average]
[info]   (min, avg, max) = (189086.014, 191646.918, 195022.996), stdev = 2240.347
[info]   CI (99.9%): [183020.139, 200273.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1018.665 ±(99.9%) 45.674 MB/sec [Average]
[info]   (min, avg, max) = (1005.139, 1018.665, 1036.552), stdev = 11.861
[info]   CI (99.9%): [972.991, 1064.339] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.513 ±(99.9%) 0.811 B/op [Average]
[info]   (min, avg, max) = (0.172, 0.513, 0.693), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 1.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   994.006 ±(99.9%) 31.570 MB/sec [Average]
[info]   (min, avg, max) = (983.280, 994.006, 1003.846), stdev = 8.199
[info]   CI (99.9%): [962.435, 1025.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   8165.878 ±(99.9%) 261.454 B/op [Average]
[info]   (min, avg, max) = (8103.804, 8165.878, 8267.589), stdev = 67.899
[info]   CI (99.9%): [7904.424, 8427.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala
[info] # Run progress: 32.01% complete, ETA 00:44:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254667.457 ops/s
[info] # Warmup Iteration   2: 274063.148 ops/s
[info] # Warmup Iteration   3: 278427.161 ops/s
[info] Iteration   1: 278743.846 ops/s
[info]                  ·gc.alloc.rate:                   725.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.823 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5560.448 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 278040.823 ops/s
[info]                  ·gc.alloc.rate:                   723.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3710.399 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 279460.920 ops/s
[info]                  ·gc.alloc.rate:                   727.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3691.231 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 278068.135 ops/s
[info]                  ·gc.alloc.rate:                   723.514 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.952 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3713.515 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 279124.873 ops/s
[info]                  ·gc.alloc.rate:                   726.239 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.469 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.268 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3707.007 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala":
[info]   278687.720 ±(99.9%) 2431.134 ops/s [Average]
[info]   (min, avg, max) = (278040.823, 278687.720, 279460.920), stdev = 631.358
[info]   CI (99.9%): [276256.585, 281118.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   725.081 ±(99.9%) 6.343 MB/sec [Average]
[info]   (min, avg, max) = (723.360, 725.081, 727.102), stdev = 1.647
[info]   CI (99.9%): [718.739, 731.424] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.146), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.253] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.446 ±(99.9%) 0.980 B/op [Average]
[info]   (min, avg, max) = (0.118, 0.446, 0.823), stdev = 0.255
[info]   CI (99.9%): [≈ 0, 1.427] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   721.640 ±(99.9%) 565.765 MB/sec [Average]
[info]   (min, avg, max) = (655.249, 721.640, 984.468), stdev = 146.927
[info]   CI (99.9%): [155.875, 1287.405] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4076.520 ±(99.9%) 3194.437 B/op [Average]
[info]   (min, avg, max) = (3691.231, 4076.520, 5560.448), stdev = 829.585
[info]   CI (99.9%): [882.083, 7270.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson
[info] # Run progress: 32.34% complete, ETA 00:43:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27829.964 ops/s
[info] # Warmup Iteration   2: 66906.647 ops/s
[info] # Warmup Iteration   3: 66382.075 ops/s
[info] Iteration   1: 66823.960 ops/s
[info]                  ·gc.alloc.rate:                   2732.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2681.361 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63175.924 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 67278.529 ops/s
[info]                  ·gc.alloc.rate:                   2751.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.948 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2702.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63222.804 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 67327.968 ops/s
[info]                  ·gc.alloc.rate:                   2753.459 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.433 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2711.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63403.791 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 67132.857 ops/s
[info]                  ·gc.alloc.rate:                   2745.268 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.976 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.772 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63715.691 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 66517.425 ops/s
[info]                  ·gc.alloc.rate:                   2720.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              64384.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.432 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2720.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 64394.402 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson":
[info]   67016.148 ±(99.9%) 1313.400 ops/s [Average]
[info]   (min, avg, max) = (66517.425, 67016.148, 67327.968), stdev = 341.086
[info]   CI (99.9%): [65702.748, 68329.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2740.699 ±(99.9%) 53.641 MB/sec [Average]
[info]   (min, avg, max) = (2720.502, 2740.699, 2753.459), stdev = 13.930
[info]   CI (99.9%): [2687.059, 2794.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   64384.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (64384.006, 64384.006, 64384.007), stdev = 0.001
[info]   CI (99.9%): [64384.005, 64384.007] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.250 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.121, 0.187), stdev = 0.065
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.840 ±(99.9%) 5.917 B/op [Average]
[info]   (min, avg, max) = (0.976, 2.840, 4.432), stdev = 1.537
[info]   CI (99.9%): [≈ 0, 8.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2706.524 ±(99.9%) 60.628 MB/sec [Average]
[info]   (min, avg, max) = (2681.361, 2706.524, 2720.941), stdev = 15.745
[info]   CI (99.9%): [2645.895, 2767.152] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   63582.522 ±(99.9%) 1928.734 B/op [Average]
[info]   (min, avg, max) = (63175.924, 63582.522, 64394.402), stdev = 500.886
[info]   CI (99.9%): [61653.789, 65511.256] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time":
[info]   49.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala
[info] # Run progress: 32.67% complete, ETA 00:43:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 347261.091 ops/s
[info] # Warmup Iteration   2: 565467.373 ops/s
[info] # Warmup Iteration   3: 567380.664 ops/s
[info] Iteration   1: 565651.610 ops/s
[info]                  ·gc.alloc.rate:                   571.889 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1797.712 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 552877.026 ops/s
[info]                  ·gc.alloc.rate:                   559.132 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1852.708 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 562970.269 ops/s
[info]                  ·gc.alloc.rate:                   569.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.233 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.574 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1830.512 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 567279.058 ops/s
[info]                  ·gc.alloc.rate:                   573.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.605 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 911.984 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 565680.672 ops/s
[info]                  ·gc.alloc.rate:                   572.044 MB/sec
[info]                  ·gc.alloc.rate.norm:              1592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.581 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1832.835 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala":
[info]   562891.727 ±(99.9%) 22365.600 ops/s [Average]
[info]   (min, avg, max) = (552877.026, 562891.727, 567279.058), stdev = 5808.275
[info]   CI (99.9%): [540526.127, 585257.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   569.195 ±(99.9%) 22.477 MB/sec [Average]
[info]   (min, avg, max) = (559.132, 569.195, 573.627), stdev = 5.837
[info]   CI (99.9%): [546.719, 591.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1592.001, 1592.001, 1592.001), stdev = 0.001
[info]   CI (99.9%): [1592.001, 1592.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.188 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.250] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.174 ±(99.9%) 0.522 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.174, 0.290), stdev = 0.136
[info]   CI (99.9%): [≈ 0, 0.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   587.648 ±(99.9%) 557.909 MB/sec [Average]
[info]   (min, avg, max) = (328.605, 587.648, 658.581), stdev = 144.887
[info]   CI (99.9%): [29.739, 1145.557] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1645.150 ±(99.9%) 1580.023 B/op [Average]
[info]   (min, avg, max) = (911.984, 1645.150, 1852.708), stdev = 410.327
[info]   CI (99.9%): [65.127, 3225.174] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala
[info] # Run progress: 33.00% complete, ETA 00:43:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 458057.763 ops/s
[info] # Warmup Iteration   2: 514724.262 ops/s
[info] # Warmup Iteration   3: 524805.089 ops/s
[info] Iteration   1: 522202.446 ops/s
[info]                  ·gc.alloc.rate:                   400.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1541.852 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 526273.322 ops/s
[info]                  ·gc.alloc.rate:                   403.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.699 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 981.162 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 526614.972 ops/s
[info]                  ·gc.alloc.rate:                   404.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.017 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.523 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 526669.078 ops/s
[info]                  ·gc.alloc.rate:                   404.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.337 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 975.445 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 524514.412 ops/s
[info]                  ·gc.alloc.rate:                   402.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              1208.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.042 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1956.697 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala":
[info]   525254.846 ±(99.9%) 7395.010 ops/s [Average]
[info]   (min, avg, max) = (522202.446, 525254.846, 526669.078), stdev = 1920.461
[info]   CI (99.9%): [517859.836, 532649.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   403.054 ±(99.9%) 5.656 MB/sec [Average]
[info]   (min, avg, max) = (400.697, 403.054, 404.139), stdev = 1.469
[info]   CI (99.9%): [397.399, 408.710] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1208.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1208.001, 1208.001, 1208.001), stdev = 0.001
[info]   CI (99.9%): [1208.001, 1208.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.777 ±(99.9%) 6.291 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.777, 3.699), stdev = 1.634
[info]   CI (99.9%): [≈ 0, 7.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.326 ±(99.9%) 18.822 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.326, 11.068), stdev = 4.888
[info]   CI (99.9%): [≈ 0, 21.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   429.157 ±(99.9%) 569.491 MB/sec [Average]
[info]   (min, avg, max) = (326.337, 429.157, 652.042), stdev = 147.895
[info]   CI (99.9%): [≈ 0, 998.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1287.136 ±(99.9%) 1719.880 B/op [Average]
[info]   (min, avg, max) = (975.445, 1287.136, 1956.697), stdev = 446.647
[info]   CI (99.9%): [≈ 0, 3007.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 33.33% complete, ETA 00:43:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 510773.291 ops/s
[info] # Warmup Iteration   2: 556613.390 ops/s
[info] # Warmup Iteration   3: 556228.536 ops/s
[info] Iteration   1: 555562.115 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 556485.712 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 553593.751 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 555581.765 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 555395.608 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc":
[info]   555323.790 ±(99.9%) 4071.319 ops/s [Average]
[info]   (min, avg, max) = (553593.751, 555323.790, 556485.712), stdev = 1057.309
[info]   CI (99.9%): [551252.472, 559395.109] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson
[info] # Run progress: 33.66% complete, ETA 00:42:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 161662.275 ops/s
[info] # Warmup Iteration   2: 289215.528 ops/s
[info] # Warmup Iteration   3: 294364.420 ops/s
[info] Iteration   1: 292397.110 ops/s
[info]                  ·gc.alloc.rate:                   805.216 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.224 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3510.025 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 290382.905 ops/s
[info]                  ·gc.alloc.rate:                   800.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.338 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5328.989 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 287378.987 ops/s
[info]                  ·gc.alloc.rate:                   791.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3602.382 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 287292.430 ops/s
[info]                  ·gc.alloc.rate:                   791.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5427.941 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 292760.868 ops/s
[info]                  ·gc.alloc.rate:                   806.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              4336.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.112 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3570.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson":
[info]   290042.460 ±(99.9%) 10134.360 ops/s [Average]
[info]   (min, avg, max) = (287292.430, 290042.460, 292760.868), stdev = 2631.861
[info]   CI (99.9%): [279908.100, 300176.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   798.885 ±(99.9%) 27.834 MB/sec [Average]
[info]   (min, avg, max) = (791.283, 798.885, 806.344), stdev = 7.228
[info]   CI (99.9%): [771.051, 826.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4336.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4336.001, 4336.001, 4336.002), stdev = 0.001
[info]   CI (99.9%): [4336.001, 4336.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.062), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.272 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (0.112, 0.272, 0.342), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   789.438 ±(99.9%) 694.425 MB/sec [Average]
[info]   (min, avg, max) = (651.828, 789.438, 990.553), stdev = 180.340
[info]   CI (99.9%): [95.012, 1483.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4287.898 ±(99.9%) 3837.985 B/op [Average]
[info]   (min, avg, max) = (3510.025, 4287.898, 5427.941), stdev = 996.712
[info]   CI (99.9%): [449.913, 8125.883] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 1.095
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce
[info] # Run progress: 33.99% complete, ETA 00:42:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7565.560 ops/s
[info] # Warmup Iteration   2: 10910.033 ops/s
[info] # Warmup Iteration   3: 11040.281 ops/s
[info] Iteration   1: 11042.096 ops/s
[info]                  ·gc.alloc.rate:                   1411.486 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.900 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 187025.325 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 10862.534 ops/s
[info]                  ·gc.alloc.rate:                   1388.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              201264.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.212 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 191185.371 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 10828.488 ops/s
[info]                  ·gc.alloc.rate:                   1384.283 MB/sec
[info]                  ·gc.alloc.rate.norm:              201265.308 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1326.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192929.465 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 10821.373 ops/s
[info]                  ·gc.alloc.rate:                   1383.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.070 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 194119.751 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 11046.635 ops/s
[info]                  ·gc.alloc.rate:                   1412.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              201280.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1676.919 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 238989.924 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce":
[info]   10920.225 ±(99.9%) 440.506 ops/s [Average]
[info]   (min, avg, max) = (10821.373, 10920.225, 11046.635), stdev = 114.398
[info]   CI (99.9%): [10479.719, 11360.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1396.109 ±(99.9%) 56.040 MB/sec [Average]
[info]   (min, avg, max) = (1383.698, 1396.109, 1412.320), stdev = 14.553
[info]   CI (99.9%): [1340.069, 1452.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   201270.698 ±(99.9%) 32.945 B/op [Average]
[info]   (min, avg, max) = (201264.038, 201270.698, 201280.070), stdev = 8.556
[info]   CI (99.9%): [201237.754, 201303.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.395 ±(99.9%) 9.491 B/op [Average]
[info]   (min, avg, max) = (8.900, 11.395, 14.827), stdev = 2.465
[info]   CI (99.9%): [1.903, 20.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1393.837 ±(99.9%) 610.240 MB/sec [Average]
[info]   (min, avg, max) = (1311.628, 1393.837, 1676.919), stdev = 158.477
[info]   CI (99.9%): [783.597, 2004.077] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   200849.967 ±(99.9%) 82748.796 B/op [Average]
[info]   (min, avg, max) = (187025.325, 200849.967, 238989.924), stdev = 21489.600
[info]   CI (99.9%): [118101.171, 283598.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala
[info] # Run progress: 34.32% complete, ETA 00:42:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6336.862 ops/s
[info] # Warmup Iteration   2: 11625.242 ops/s
[info] # Warmup Iteration   3: 11660.234 ops/s
[info] Iteration   1: 11843.107 ops/s
[info]                  ·gc.alloc.rate:                   1326.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              176304.040 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1318.358 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175249.471 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 11881.127 ops/s
[info]                  ·gc.alloc.rate:                   1330.848 MB/sec
[info]                  ·gc.alloc.rate.norm:              176304.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.205 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175953.929 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 11797.943 ops/s
[info]                  ·gc.alloc.rate:                   1321.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              176315.800 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.553 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 178331.670 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 11623.686 ops/s
[info]                  ·gc.alloc.rate:                   1301.855 MB/sec
[info]                  ·gc.alloc.rate.norm:              176336.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.818 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.284 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 181812.094 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 11782.076 ops/s
[info]                  ·gc.alloc.rate:                   1319.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              176336.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.561 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1347.843 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 180086.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala":
[info]   11785.588 ±(99.9%) 379.310 ops/s [Average]
[info]   (min, avg, max) = (11623.686, 11785.588, 11881.127), stdev = 98.506
[info]   CI (99.9%): [11406.277, 12164.898] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1320.025 ±(99.9%) 42.548 MB/sec [Average]
[info]   (min, avg, max) = (1301.855, 1320.025, 1330.848), stdev = 11.050
[info]   CI (99.9%): [1277.476, 1362.573] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   176319.190 ±(99.9%) 62.037 B/op [Average]
[info]   (min, avg, max) = (176304.037, 176319.190, 176336.037), stdev = 16.111
[info]   CI (99.9%): [176257.153, 176381.227] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.046, 0.062), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.113] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.101 ±(99.9%) 8.804 B/op [Average]
[info]   (min, avg, max) = (2.818, 6.101, 8.298), stdev = 2.286
[info]   CI (99.9%): [≈ 0, 14.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1334.631 ±(99.9%) 44.847 MB/sec [Average]
[info]   (min, avg, max) = (1318.358, 1334.631, 1347.843), stdev = 11.647
[info]   CI (99.9%): [1289.783, 1379.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   178286.706 ±(99.9%) 10604.278 B/op [Average]
[info]   (min, avg, max) = (175249.471, 178286.706, 181812.094), stdev = 2753.897
[info]   CI (99.9%): [167682.428, 188890.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 34.65% complete, ETA 00:42:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 131358.905 ops/s
[info] # Warmup Iteration   2: 145467.986 ops/s
[info] # Warmup Iteration   3: 145883.688 ops/s
[info] Iteration   1: 144578.549 ops/s
[info]                  ·gc.alloc.rate:                   940.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.680 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10765.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 147704.880 ops/s
[info]                  ·gc.alloc.rate:                   960.777 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10544.391 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 144117.607 ops/s
[info]                  ·gc.alloc.rate:                   937.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10828.624 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 145206.348 ops/s
[info]                  ·gc.alloc.rate:                   944.542 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.451 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.933 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10797.148 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 145868.907 ops/s
[info]                  ·gc.alloc.rate:                   948.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              10240.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10783.723 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala":
[info]   145495.258 ±(99.9%) 5392.204 ops/s [Average]
[info]   (min, avg, max) = (144117.607, 145495.258, 147704.880), stdev = 1400.338
[info]   CI (99.9%): [140103.054, 150887.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   946.427 ±(99.9%) 35.078 MB/sec [Average]
[info]   (min, avg, max) = (937.290, 946.427, 960.777), stdev = 9.110
[info]   CI (99.9%): [911.349, 981.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   10240.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10240.003, 10240.003, 10240.003), stdev = 0.001
[info]   CI (99.9%): [10240.002, 10240.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.855 ±(99.9%) 1.122 B/op [Average]
[info]   (min, avg, max) = (0.451, 0.855, 1.137), stdev = 0.291
[info]   CI (99.9%): [≈ 0, 1.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   992.931 ±(99.9%) 17.261 MB/sec [Average]
[info]   (min, avg, max) = (988.982, 992.931, 999.235), stdev = 4.483
[info]   CI (99.9%): [975.670, 1010.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10743.955 ±(99.9%) 438.562 B/op [Average]
[info]   (min, avg, max) = (10544.391, 10743.955, 10828.624), stdev = 113.893
[info]   CI (99.9%): [10305.393, 11182.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson
[info] # Run progress: 34.98% complete, ETA 00:42:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4433.131 ops/s
[info] # Warmup Iteration   2: 8361.019 ops/s
[info] # Warmup Iteration   3: 8440.816 ops/s
[info] Iteration   1: 8558.057 ops/s
[info]                  ·gc.alloc.rate:                   1582.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.828 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 243769.421 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8621.813 ops/s
[info]                  ·gc.alloc.rate:                   1594.020 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.597 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 304821.432 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 8545.620 ops/s
[info]                  ·gc.alloc.rate:                   1579.741 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309248.958 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 8573.233 ops/s
[info]                  ·gc.alloc.rate:                   1584.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.821 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.699 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 309767.642 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 8640.734 ops/s
[info]                  ·gc.alloc.rate:                   1597.448 MB/sec
[info]                  ·gc.alloc.rate.norm:              291032.047 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.373 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.991 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246495.422 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson":
[info]   8587.892 ±(99.9%) 159.173 ops/s [Average]
[info]   (min, avg, max) = (8545.620, 8587.892, 8640.734), stdev = 41.337
[info]   CI (99.9%): [8428.719, 8747.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1587.589 ±(99.9%) 29.781 MB/sec [Average]
[info]   (min, avg, max) = (1579.741, 1587.589, 1597.448), stdev = 7.734
[info]   CI (99.9%): [1557.807, 1617.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   291032.048 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (291032.047, 291032.048, 291032.051), stdev = 0.002
[info]   CI (99.9%): [291032.042, 291032.055] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.224 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.146), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.274] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   9.124 ±(99.9%) 40.833 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 9.124, 26.597), stdev = 10.604
[info]   CI (99.9%): [≈ 0, 49.957] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1542.598 ±(99.9%) 716.847 MB/sec [Average]
[info]   (min, avg, max) = (1325.131, 1542.598, 1686.699), stdev = 186.163
[info]   CI (99.9%): [825.751, 2259.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   282820.575 ±(99.9%) 132737.663 B/op [Average]
[info]   (min, avg, max) = (243769.421, 282820.575, 309767.642), stdev = 34471.550
[info]   CI (99.9%): [150082.912, 415558.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce
[info] # Run progress: 35.31% complete, ETA 00:41:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16562.196 ops/s
[info] # Warmup Iteration   2: 22870.000 ops/s
[info] # Warmup Iteration   3: 22558.931 ops/s
[info] Iteration   1: 23008.518 ops/s
[info]                  ·gc.alloc.rate:                   1048.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.695 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66974.005 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 22702.240 ops/s
[info]                  ·gc.alloc.rate:                   1034.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              71760.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.659 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.675 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68023.978 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 22974.683 ops/s
[info]                  ·gc.alloc.rate:                   1047.233 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.160 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.555 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.445 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67503.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 23017.256 ops/s
[info]                  ·gc.alloc.rate:                   1048.882 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67702.221 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 23278.641 ops/s
[info]                  ·gc.alloc.rate:                   1061.038 MB/sec
[info]                  ·gc.alloc.rate.norm:              71736.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.136 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89794.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce":
[info]   22996.268 ±(99.9%) 787.369 ops/s [Average]
[info]   (min, avg, max) = (22702.240, 22996.268, 23278.641), stdev = 204.477
[info]   CI (99.9%): [22208.899, 23783.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1048.083 ±(99.9%) 36.180 MB/sec [Average]
[info]   (min, avg, max) = (1034.536, 1048.083, 1061.038), stdev = 9.396
[info]   CI (99.9%): [1011.903, 1084.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   71745.647 ±(99.9%) 50.523 B/op [Average]
[info]   (min, avg, max) = (71736.018, 71745.647, 71760.023), stdev = 13.121
[info]   CI (99.9%): [71695.125, 71796.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.280 ±(99.9%) 8.492 B/op [Average]
[info]   (min, avg, max) = (4.222, 6.280, 8.659), stdev = 2.205
[info]   CI (99.9%): [≈ 0, 14.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.588 ±(99.9%) 593.373 MB/sec [Average]
[info]   (min, avg, max) = (978.780, 1052.588, 1328.136), stdev = 154.097
[info]   CI (99.9%): [459.215, 1645.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   71999.627 ±(99.9%) 38332.539 B/op [Average]
[info]   (min, avg, max) = (66974.005, 71999.627, 89794.312), stdev = 9954.839
[info]   CI (99.9%): [33667.088, 110332.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 35.64% complete, ETA 00:41:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 608639.143 ops/s
[info] # Warmup Iteration   2: 701646.763 ops/s
[info] # Warmup Iteration   3: 704522.640 ops/s
[info] Iteration   1: 706602.057 ops/s
[info]                  ·gc.alloc.rate:                   1274.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2909.443 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 712269.518 ops/s
[info]                  ·gc.alloc.rate:                   1284.948 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.230 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2899.676 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 708959.171 ops/s
[info]                  ·gc.alloc.rate:                   1278.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.185 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2932.283 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 706727.569 ops/s
[info]                  ·gc.alloc.rate:                   1275.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.232 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2962.293 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 694682.560 ops/s
[info]                  ·gc.alloc.rate:                   1253.191 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.622 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2272.157 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala":
[info]   705848.175 ±(99.9%) 25609.284 ops/s [Average]
[info]   (min, avg, max) = (694682.560, 705848.175, 712269.518), stdev = 6650.650
[info]   CI (99.9%): [680238.891, 731457.459] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1273.333 ±(99.9%) 46.184 MB/sec [Average]
[info]   (min, avg, max) = (1253.191, 1273.333, 1284.948), stdev = 11.994
[info]   CI (99.9%): [1227.148, 1319.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.185 ±(99.9%) 0.174 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.185, 0.232), stdev = 0.045
[info]   CI (99.9%): [0.011, 0.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1254.144 ±(99.9%) 542.541 MB/sec [Average]
[info]   (min, avg, max) = (1002.622, 1254.144, 1329.912), stdev = 140.896
[info]   CI (99.9%): [711.603, 1796.685] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2795.171 ±(99.9%) 1129.645 B/op [Average]
[info]   (min, avg, max) = (2272.157, 2795.171, 2962.293), stdev = 293.365
[info]   CI (99.9%): [1665.526, 3924.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 35.97% complete, ETA 00:41:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 513870.087 ops/s
[info] # Warmup Iteration   2: 548516.962 ops/s
[info] # Warmup Iteration   3: 546464.811 ops/s
[info] Iteration   1: 561501.168 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 545236.977 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 562425.635 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 561678.312 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 562101.775 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   558588.774 ±(99.9%) 28774.415 ops/s [Average]
[info]   (min, avg, max) = (545236.977, 558588.774, 562425.635), stdev = 7472.624
[info]   CI (99.9%): [529814.359, 587363.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson
[info] # Run progress: 36.30% complete, ETA 00:41:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 17197.880 ops/s
[info] # Warmup Iteration   2: 24362.179 ops/s
[info] # Warmup Iteration   3: 24492.184 ops/s
[info] Iteration   1: 24964.096 ops/s
[info]                  ·gc.alloc.rate:                   1053.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              66432.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.522 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61142.437 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 25093.320 ops/s
[info]                  ·gc.alloc.rate:                   1058.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              66428.414 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61029.780 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 25049.137 ops/s
[info]                  ·gc.alloc.rate:                   1056.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.847 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 61413.844 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 24464.963 ops/s
[info]                  ·gc.alloc.rate:                   1032.113 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.858 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84417.438 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 25141.513 ops/s
[info]                  ·gc.alloc.rate:                   1060.588 MB/sec
[info]                  ·gc.alloc.rate.norm:              66416.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.606 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.517 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62028.028 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson":
[info]   24942.606 ±(99.9%) 1058.459 ops/s [Average]
[info]   (min, avg, max) = (24464.963, 24942.606, 25141.513), stdev = 274.878
[info]   CI (99.9%): [23884.147, 26001.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1052.332 ±(99.9%) 44.719 MB/sec [Average]
[info]   (min, avg, max) = (1032.113, 1052.332, 1060.588), stdev = 11.613
[info]   CI (99.9%): [1007.614, 1097.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   66421.696 ±(99.9%) 30.344 B/op [Average]
[info]   (min, avg, max) = (66416.016, 66421.696, 66432.016), stdev = 7.880
[info]   CI (99.9%): [66391.352, 66452.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.462 ±(99.9%) 10.419 B/op [Average]
[info]   (min, avg, max) = (1.312, 4.462, 7.847), stdev = 2.706
[info]   CI (99.9%): [≈ 0, 14.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.364 ±(99.9%) 576.624 MB/sec [Average]
[info]   (min, avg, max) = (969.522, 1044.364, 1311.858), stdev = 149.747
[info]   CI (99.9%): [467.741, 1620.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   66006.306 ±(99.9%) 39659.307 B/op [Average]
[info]   (min, avg, max) = (61029.780, 66006.306, 84417.438), stdev = 10299.396
[info]   CI (99.9%): [26346.999, 105665.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce
[info] # Run progress: 36.63% complete, ETA 00:41:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20046.962 ops/s
[info] # Warmup Iteration   2: 28211.041 ops/s
[info] # Warmup Iteration   3: 28481.809 ops/s
[info] Iteration   1: 28005.503 ops/s
[info]                  ·gc.alloc.rate:                   1519.909 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.509 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1313.164 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73818.073 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28077.879 ops/s
[info]                  ·gc.alloc.rate:                   1523.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              85438.860 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.667 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.092 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92692.729 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 28243.961 ops/s
[info]                  ·gc.alloc.rate:                   1532.851 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92806.325 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 28454.199 ops/s
[info]                  ·gc.alloc.rate:                   1544.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74127.224 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28068.483 ops/s
[info]                  ·gc.alloc.rate:                   1523.350 MB/sec
[info]                  ·gc.alloc.rate.norm:              85440.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.836 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 94362.503 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce":
[info]   28170.005 ±(99.9%) 699.743 ops/s [Average]
[info]   (min, avg, max) = (28005.503, 28170.005, 28454.199), stdev = 181.721
[info]   CI (99.9%): [27470.261, 28869.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate":
[info]   1528.808 ±(99.9%) 37.931 MB/sec [Average]
[info]   (min, avg, max) = (1519.909, 1528.808, 1544.202), stdev = 9.851
[info]   CI (99.9%): [1490.876, 1566.739] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   85439.785 ±(99.9%) 1.991 B/op [Average]
[info]   (min, avg, max) = (85438.860, 85439.785, 85440.019), stdev = 0.517
[info]   CI (99.9%): [85437.794, 85441.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.887 ±(99.9%) 8.604 B/op [Average]
[info]   (min, avg, max) = (2.303, 4.887, 8.119), stdev = 2.234
[info]   CI (99.9%): [≈ 0, 13.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1530.687 ±(99.9%) 719.950 MB/sec [Average]
[info]   (min, avg, max) = (1313.164, 1530.687, 1682.433), stdev = 186.969
[info]   CI (99.9%): [810.738, 2250.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   85561.371 ±(99.9%) 40817.294 B/op [Average]
[info]   (min, avg, max) = (73818.073, 85561.371, 94362.503), stdev = 10600.122
[info]   CI (99.9%): [44744.077, 126378.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala
[info] # Run progress: 36.96% complete, ETA 00:40:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 16719.893 ops/s
[info] # Warmup Iteration   2: 31511.619 ops/s
[info] # Warmup Iteration   3: 31066.508 ops/s
[info] Iteration   1: 31438.628 ops/s
[info]                  ·gc.alloc.rate:                   1435.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              71887.239 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66090.365 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 31692.441 ops/s
[info]                  ·gc.alloc.rate:                   1447.290 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.165 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82629.204 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 31546.886 ops/s
[info]                  ·gc.alloc.rate:                   1439.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.154 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.798 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66861.092 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 31623.623 ops/s
[info]                  ·gc.alloc.rate:                   1443.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.108 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67000.920 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 31390.012 ops/s
[info]                  ·gc.alloc.rate:                   1432.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              71856.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1349.788 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67696.390 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala":
[info]   31538.318 ±(99.9%) 483.395 ops/s [Average]
[info]   (min, avg, max) = (31390.012, 31538.318, 31692.441), stdev = 125.536
[info]   CI (99.9%): [31054.924, 32021.713] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1439.744 ±(99.9%) 22.478 MB/sec [Average]
[info]   (min, avg, max) = (1432.726, 1439.744, 1447.290), stdev = 5.838
[info]   CI (99.9%): [1417.266, 1462.222] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   71862.259 ±(99.9%) 53.771 B/op [Average]
[info]   (min, avg, max) = (71856.013, 71862.259, 71887.239), stdev = 13.964
[info]   CI (99.9%): [71808.489, 71916.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   3.738 ±(99.9%) 6.688 B/op [Average]
[info]   (min, avg, max) = (1.042, 3.738, 5.218), stdev = 1.737
[info]   CI (99.9%): [≈ 0, 10.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1403.881 ±(99.9%) 562.281 MB/sec [Average]
[info]   (min, avg, max) = (1319.784, 1403.881, 1664.278), stdev = 146.023
[info]   CI (99.9%): [841.599, 1966.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   70055.594 ±(99.9%) 27154.577 B/op [Average]
[info]   (min, avg, max) = (66090.365, 70055.594, 82629.204), stdev = 7051.957
[info]   CI (99.9%): [42901.017, 97210.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala
[info] # Run progress: 37.29% complete, ETA 00:40:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 253346.893 ops/s
[info] # Warmup Iteration   2: 267931.503 ops/s
[info] # Warmup Iteration   3: 271264.916 ops/s
[info] Iteration   1: 269222.830 ops/s
[info]                  ·gc.alloc.rate:                   700.479 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.608 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3860.928 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 269831.417 ops/s
[info]                  ·gc.alloc.rate:                   701.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5770.032 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 269674.698 ops/s
[info]                  ·gc.alloc.rate:                   701.601 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.486 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3848.542 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 269999.476 ops/s
[info]                  ·gc.alloc.rate:                   702.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.961 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3847.779 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 271313.625 ops/s
[info]                  ·gc.alloc.rate:                   705.900 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3836.890 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala":
[info]   270008.409 ±(99.9%) 3021.892 ops/s [Average]
[info]   (min, avg, max) = (269222.830, 270008.409, 271313.625), stdev = 784.776
[info]   CI (99.9%): [266986.518, 273030.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   702.495 ±(99.9%) 7.879 MB/sec [Average]
[info]   (min, avg, max) = (700.479, 702.495, 705.900), stdev = 2.046
[info]   CI (99.9%): [694.617, 710.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.437 ±(99.9%) 0.422 B/op [Average]
[info]   (min, avg, max) = (0.362, 0.437, 0.608), stdev = 0.110
[info]   CI (99.9%): [0.015, 0.859] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   725.910 ±(99.9%) 566.006 MB/sec [Average]
[info]   (min, avg, max) = (659.214, 725.910, 988.850), stdev = 146.990
[info]   CI (99.9%): [159.904, 1291.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4232.834 ±(99.9%) 3309.096 B/op [Average]
[info]   (min, avg, max) = (3836.890, 4232.834, 5770.032), stdev = 859.362
[info]   CI (99.9%): [923.738, 7541.930] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson
[info] # Run progress: 37.62% complete, ETA 00:40:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9733.100 ops/s
[info] # Warmup Iteration   2: 18169.245 ops/s
[info] # Warmup Iteration   3: 17946.364 ops/s
[info] Iteration   1: 18122.577 ops/s
[info]                  ·gc.alloc.rate:                   1782.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              154856.074 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173297.313 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 18412.763 ops/s
[info]                  ·gc.alloc.rate:                   1811.296 MB/sec
[info]                  ·gc.alloc.rate.norm:              154856.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.117 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143228.330 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 18084.245 ops/s
[info]                  ·gc.alloc.rate:                   1778.878 MB/sec
[info]                  ·gc.alloc.rate.norm:              154856.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.623 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.040 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146600.072 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 18174.630 ops/s
[info]                  ·gc.alloc.rate:                   1787.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              154856.477 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 175724.010 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 18157.796 ops/s
[info]                  ·gc.alloc.rate:                   1786.220 MB/sec
[info]                  ·gc.alloc.rate.norm:              154856.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.804 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.515 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146905.717 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson":
[info]   18190.402 ±(99.9%) 496.964 ops/s [Average]
[info]   (min, avg, max) = (18084.245, 18190.402, 18412.763), stdev = 129.060
[info]   CI (99.9%): [17693.438, 18687.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1789.305 ±(99.9%) 49.091 MB/sec [Average]
[info]   (min, avg, max) = (1778.878, 1789.305, 1811.296), stdev = 12.749
[info]   CI (99.9%): [1740.214, 1838.396] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   154856.124 ±(99.9%) 0.765 B/op [Average]
[info]   (min, avg, max) = (154856.022, 154856.124, 154856.477), stdev = 0.199
[info]   CI (99.9%): [154855.360, 154856.889] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.190] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.034 ±(99.9%) 11.326 B/op [Average]
[info]   (min, avg, max) = (1.804, 5.034, 9.013), stdev = 2.941
[info]   CI (99.9%): [≈ 0, 16.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1815.427 ±(99.9%) 691.745 MB/sec [Average]
[info]   (min, avg, max) = (1675.291, 1815.427, 2028.432), stdev = 179.644
[info]   CI (99.9%): [1123.683, 2507.172] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   157151.089 ±(99.9%) 61362.786 B/op [Average]
[info]   (min, avg, max) = (143228.330, 157151.089, 175724.010), stdev = 15935.721
[info]   CI (99.9%): [95788.302, 218513.875] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 8.000), stdev = 1.225
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce
[info] # Run progress: 37.95% complete, ETA 00:40:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 38644.544 ops/s
[info] # Warmup Iteration   2: 51830.491 ops/s
[info] # Warmup Iteration   3: 52914.422 ops/s
[info] Iteration   1: 52595.732 ops/s
[info]                  ·gc.alloc.rate:                   1387.236 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.869 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.004 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39186.063 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 52990.930 ops/s
[info]                  ·gc.alloc.rate:                   1397.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.096 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39125.232 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 53220.472 ops/s
[info]                  ·gc.alloc.rate:                   1404.069 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.674 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39209.320 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 53504.754 ops/s
[info]                  ·gc.alloc.rate:                   1411.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.837 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.857 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 49071.484 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 52041.772 ops/s
[info]                  ·gc.alloc.rate:                   1372.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              41528.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.259 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40593.288 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce":
[info]   52870.732 ±(99.9%) 2196.512 ops/s [Average]
[info]   (min, avg, max) = (52041.772, 52870.732, 53504.754), stdev = 570.427
[info]   CI (99.9%): [50674.220, 55067.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1394.689 ±(99.9%) 58.391 MB/sec [Average]
[info]   (min, avg, max) = (1372.691, 1394.689, 1411.467), stdev = 15.164
[info]   CI (99.9%): [1336.298, 1453.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   41528.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (41528.008, 41528.008, 41528.008), stdev = 0.001
[info]   CI (99.9%): [41528.007, 41528.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.857 ±(99.9%) 2.903 B/op [Average]
[info]   (min, avg, max) = (1.231, 1.857, 3.091), stdev = 0.754
[info]   CI (99.9%): [≈ 0, 4.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.285 ±(99.9%) 595.032 MB/sec [Average]
[info]   (min, avg, max) = (1309.004, 1392.285, 1667.857), stdev = 154.528
[info]   CI (99.9%): [797.253, 1987.317] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   41437.077 ±(99.9%) 16603.682 B/op [Average]
[info]   (min, avg, max) = (39125.232, 41437.077, 49071.484), stdev = 4311.923
[info]   CI (99.9%): [24833.395, 58040.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 6.000), stdev = 1.225
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala
[info] # Run progress: 38.28% complete, ETA 00:40:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 923399.986 ops/s
[info] # Warmup Iteration   2: 1080388.364 ops/s
[info] # Warmup Iteration   3: 1104277.016 ops/s
[info] Iteration   1: 1096633.395 ops/s
[info]                  ·gc.alloc.rate:                   1176.114 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.114 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1873.147 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1104883.113 ops/s
[info]                  ·gc.alloc.rate:                   1184.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.119 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1398.125 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1099167.123 ops/s
[info]                  ·gc.alloc.rate:                   1178.502 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1886.515 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1084891.488 ops/s
[info]                  ·gc.alloc.rate:                   1163.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.282 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1922.986 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1089131.271 ops/s
[info]                  ·gc.alloc.rate:                   1167.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              1688.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1445.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala":
[info]   1094941.278 ±(99.9%) 30703.639 ops/s [Average]
[info]   (min, avg, max) = (1084891.488, 1094941.278, 1104883.113), stdev = 7973.638
[info]   CI (99.9%): [1064237.639, 1125644.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1174.060 ±(99.9%) 32.563 MB/sec [Average]
[info]   (min, avg, max) = (1163.335, 1174.060, 1184.485), stdev = 8.457
[info]   CI (99.9%): [1141.497, 1206.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1688.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1688.000, 1688.000, 1688.000), stdev = 0.001
[info]   CI (99.9%): [1688.000, 1688.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.126 ±(99.9%) 0.149 B/op [Average]
[info]   (min, avg, max) = (0.090, 0.126, 0.179), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1185.699 ±(99.9%) 687.187 MB/sec [Average]
[info]   (min, avg, max) = (981.077, 1185.699, 1325.282), stdev = 178.460
[info]   CI (99.9%): [498.512, 1872.886] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1705.207 ±(99.9%) 1001.121 B/op [Average]
[info]   (min, avg, max) = (1398.125, 1705.207, 1922.986), stdev = 259.988
[info]   CI (99.9%): [704.086, 2706.328] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 38.61% complete, ETA 00:39:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 660790.862 ops/s
[info] # Warmup Iteration   2: 729387.633 ops/s
[info] # Warmup Iteration   3: 724142.242 ops/s
[info] Iteration   1: 727905.305 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 730254.463 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 728223.880 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 726565.484 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 727858.560 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc":
[info]   728161.538 ±(99.9%) 5126.226 ops/s [Average]
[info]   (min, avg, max) = (726565.484, 728161.538, 730254.463), stdev = 1331.264
[info]   CI (99.9%): [723035.313, 733287.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson
[info] # Run progress: 38.94% complete, ETA 00:39:34
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 41724.500 ops/s
[info] # Warmup Iteration   2: 58168.019 ops/s
[info] # Warmup Iteration   3: 58340.037 ops/s
[info] Iteration   1: 58384.282 ops/s
[info]                  ·gc.alloc.rate:                   1357.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1621.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 43713.111 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 58959.480 ops/s
[info]                  ·gc.alloc.rate:                   1370.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.778 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.573 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34887.926 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 58783.825 ops/s
[info]                  ·gc.alloc.rate:                   1366.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.786 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35274.726 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 58714.074 ops/s
[info]                  ·gc.alloc.rate:                   1365.307 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.116 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.471 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35593.520 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 58717.454 ops/s
[info]                  ·gc.alloc.rate:                   1365.480 MB/sec
[info]                  ·gc.alloc.rate.norm:              36608.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.790 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35805.949 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson":
[info]   58711.823 ±(99.9%) 802.743 ops/s [Average]
[info]   (min, avg, max) = (58384.282, 58711.823, 58959.480), stdev = 208.470
[info]   CI (99.9%): [57909.080, 59514.566] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1365.295 ±(99.9%) 18.556 MB/sec [Average]
[info]   (min, avg, max) = (1357.709, 1365.295, 1370.991), stdev = 4.819
[info]   CI (99.9%): [1346.739, 1383.850] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   36608.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (36608.007, 36608.007, 36608.007), stdev = 0.001
[info]   CI (99.9%): [36608.006, 36608.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.096, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.567 ±(99.9%) 3.272 B/op [Average]
[info]   (min, avg, max) = (1.116, 2.567, 3.367), stdev = 0.850
[info]   CI (99.9%): [≈ 0, 5.839] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1381.606 ±(99.9%) 517.494 MB/sec [Average]
[info]   (min, avg, max) = (1306.573, 1381.606, 1621.222), stdev = 134.391
[info]   CI (99.9%): [864.112, 1899.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   37055.046 ±(99.9%) 14393.901 B/op [Average]
[info]   (min, avg, max) = (34887.926, 37055.046, 43713.111), stdev = 3738.050
[info]   CI (99.9%): [22661.145, 51448.948] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce
[info] # Run progress: 39.27% complete, ETA 00:39:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12043.939 ops/s
[info] # Warmup Iteration   2: 16792.508 ops/s
[info] # Warmup Iteration   3: 16846.990 ops/s
[info] Iteration   1: 16759.549 ops/s
[info]                  ·gc.alloc.rate:                   1495.256 MB/sec
[info]                  ·gc.alloc.rate.norm:              140464.992 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.394 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154099.324 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 16949.333 ops/s
[info]                  ·gc.alloc.rate:                   1512.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1653.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153556.508 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 16870.879 ops/s
[info]                  ·gc.alloc.rate:                   1505.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.825 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124182.467 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 16618.175 ops/s
[info]                  ·gc.alloc.rate:                   1483.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              140479.065 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.943 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.658 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 158538.685 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17030.910 ops/s
[info]                  ·gc.alloc.rate:                   1519.856 MB/sec
[info]                  ·gc.alloc.rate.norm:              140480.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.694 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 124339.508 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce":
[info]   16845.769 ±(99.9%) 623.478 ops/s [Average]
[info]   (min, avg, max) = (16618.175, 16845.769, 17030.910), stdev = 161.915
[info]   CI (99.9%): [16222.292, 17469.247] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1503.241 ±(99.9%) 55.827 MB/sec [Average]
[info]   (min, avg, max) = (1483.007, 1503.241, 1519.856), stdev = 14.498
[info]   CI (99.9%): [1447.413, 1559.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   140476.826 ±(99.9%) 25.524 B/op [Average]
[info]   (min, avg, max) = (140464.992, 140476.826, 140480.026), stdev = 6.628
[info]   CI (99.9%): [140451.302, 140502.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   6.994 ±(99.9%) 8.488 B/op [Average]
[info]   (min, avg, max) = (3.943, 6.994, 9.774), stdev = 2.204
[info]   CI (99.9%): [≈ 0, 15.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1528.699 ±(99.9%) 671.947 MB/sec [Average]
[info]   (min, avg, max) = (1330.896, 1528.699, 1673.658), stdev = 174.503
[info]   CI (99.9%): [856.752, 2200.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   142943.299 ±(99.9%) 66091.651 B/op [Average]
[info]   (min, avg, max) = (124182.467, 142943.299, 158538.685), stdev = 17163.792
[info]   CI (99.9%): [76851.647, 209034.950] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala
[info] # Run progress: 39.60% complete, ETA 00:39:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9658.406 ops/s
[info] # Warmup Iteration   2: 17364.843 ops/s
[info] # Warmup Iteration   3: 17152.597 ops/s
[info] Iteration   1: 17314.005 ops/s
[info]                  ·gc.alloc.rate:                   1398.274 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.193 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120181.498 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 17378.293 ops/s
[info]                  ·gc.alloc.rate:                   1404.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              127185.378 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.783 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 120537.072 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 17157.069 ops/s
[info]                  ·gc.alloc.rate:                   1385.962 MB/sec
[info]                  ·gc.alloc.rate.norm:              127184.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.729 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122822.713 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 17328.029 ops/s
[info]                  ·gc.alloc.rate:                   1399.768 MB/sec
[info]                  ·gc.alloc.rate.norm:              127178.581 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1344.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 122148.335 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 17209.124 ops/s
[info]                  ·gc.alloc.rate:                   1390.021 MB/sec
[info]                  ·gc.alloc.rate.norm:              127152.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.615 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.518 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 154274.021 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala":
[info]   17277.304 ±(99.9%) 350.937 ops/s [Average]
[info]   (min, avg, max) = (17157.069, 17277.304, 17378.293), stdev = 91.137
[info]   CI (99.9%): [16926.367, 17628.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1395.642 ±(99.9%) 28.699 MB/sec [Average]
[info]   (min, avg, max) = (1385.962, 1395.642, 1404.183), stdev = 7.453
[info]   CI (99.9%): [1366.943, 1424.341] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   127170.440 ±(99.9%) 65.179 B/op [Average]
[info]   (min, avg, max) = (127152.024, 127170.440, 127185.378), stdev = 16.927
[info]   CI (99.9%): [127105.261, 127235.618] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.209] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.824 ±(99.9%) 12.159 B/op [Average]
[info]   (min, avg, max) = (1.891, 6.824, 9.460), stdev = 3.158
[info]   CI (99.9%): [≈ 0, 18.983] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1404.352 ±(99.9%) 608.273 MB/sec [Average]
[info]   (min, avg, max) = (1321.619, 1404.352, 1686.518), stdev = 157.966
[info]   CI (99.9%): [796.079, 2012.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   127992.728 ±(99.9%) 56729.881 B/op [Average]
[info]   (min, avg, max) = (120181.498, 127992.728, 154274.021), stdev = 14732.570
[info]   CI (99.9%): [71262.847, 184722.608] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala
[info] # Run progress: 39.93% complete, ETA 00:38:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 282230.928 ops/s
[info] # Warmup Iteration   2: 302447.820 ops/s
[info] # Warmup Iteration   3: 301730.645 ops/s
[info] Iteration   1: 304885.569 ops/s
[info]                  ·gc.alloc.rate:                   793.181 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3403.965 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 304641.627 ops/s
[info]                  ·gc.alloc.rate:                   792.538 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.323 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.849 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5110.573 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 305043.787 ops/s
[info]                  ·gc.alloc.rate:                   793.835 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.107 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.726 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3404.032 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 303802.956 ops/s
[info]                  ·gc.alloc.rate:                   790.512 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.431 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.316 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5136.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 305076.575 ops/s
[info]                  ·gc.alloc.rate:                   793.788 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3422.575 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala":
[info]   304690.103 ±(99.9%) 2021.166 ops/s [Average]
[info]   (min, avg, max) = (303802.956, 304690.103, 305076.575), stdev = 524.890
[info]   CI (99.9%): [302668.937, 306711.269] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   792.771 ±(99.9%) 5.271 MB/sec [Average]
[info]   (min, avg, max) = (790.512, 792.771, 793.835), stdev = 1.369
[info]   CI (99.9%): [787.500, 798.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.001, 4096.001, 4096.001), stdev = 0.001
[info]   CI (99.9%): [4096.001, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.344 ±(99.9%) 0.540 B/op [Average]
[info]   (min, avg, max) = (0.107, 0.344, 0.431), stdev = 0.140
[info]   CI (99.9%): [≈ 0, 0.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   792.468 ±(99.9%) 694.675 MB/sec [Average]
[info]   (min, avg, max) = (659.170, 792.468, 991.316), stdev = 180.405
[info]   CI (99.9%): [97.793, 1487.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4095.521 ±(99.9%) 3613.837 B/op [Average]
[info]   (min, avg, max) = (3403.965, 4095.521, 5136.459), stdev = 938.502
[info]   CI (99.9%): [481.684, 7709.358] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson
[info] # Run progress: 40.26% complete, ETA 00:38:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6251.910 ops/s
[info] # Warmup Iteration   2: 12390.420 ops/s
[info] # Warmup Iteration   3: 12609.812 ops/s
[info] Iteration   1: 12722.415 ops/s
[info]                  ·gc.alloc.rate:                   1739.450 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.035 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 205455.309 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 12684.181 ops/s
[info]                  ·gc.alloc.rate:                   1734.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.748 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 207682.179 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 12794.050 ops/s
[info]                  ·gc.alloc.rate:                   1749.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.099 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.242 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1681.922 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 206962.258 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 12703.790 ops/s
[info]                  ·gc.alloc.rate:                   1737.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 209187.075 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 12766.677 ops/s
[info]                  ·gc.alloc.rate:                   1745.665 MB/sec
[info]                  ·gc.alloc.rate.norm:              215256.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.964 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1692.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 208746.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson":
[info]   12734.222 ±(99.9%) 174.370 ops/s [Average]
[info]   (min, avg, max) = (12684.181, 12734.222, 12794.050), stdev = 45.283
[info]   CI (99.9%): [12559.853, 12908.592] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1741.174 ±(99.9%) 23.834 MB/sec [Average]
[info]   (min, avg, max) = (1734.284, 1741.174, 1749.323), stdev = 6.190
[info]   CI (99.9%): [1717.340, 1765.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   215256.046 ±(99.9%) 0.115 B/op [Average]
[info]   (min, avg, max) = (215256.032, 215256.046, 215256.099), stdev = 0.030
[info]   CI (99.9%): [215255.931, 215256.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   10.284 ±(99.9%) 18.444 B/op [Average]
[info]   (min, avg, max) = (5.150, 10.284, 17.964), stdev = 4.790
[info]   CI (99.9%): [≈ 0, 28.727] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1679.296 ±(99.9%) 49.800 MB/sec [Average]
[info]   (min, avg, max) = (1660.252, 1679.296, 1692.872), stdev = 12.933
[info]   CI (99.9%): [1629.496, 1729.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   207606.603 ±(99.9%) 5726.183 B/op [Average]
[info]   (min, avg, max) = (205455.309, 207606.603, 209187.075), stdev = 1487.072
[info]   CI (99.9%): [201880.421, 213332.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce
[info] # Run progress: 40.59% complete, ETA 00:38:30
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 29096.349 ops/s
[info] # Warmup Iteration   2: 37703.141 ops/s
[info] # Warmup Iteration   3: 38916.891 ops/s
[info] Iteration   1: 38695.419 ops/s
[info]                  ·gc.alloc.rate:                   1272.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              51769.330 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.024 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53184.711 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 39199.774 ops/s
[info]                  ·gc.alloc.rate:                   1288.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.128 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39569.663 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 39441.948 ops/s
[info]                  ·gc.alloc.rate:                   1297.194 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.153 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.077 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52761.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39212.245 ops/s
[info]                  ·gc.alloc.rate:                   1289.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.342 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.417 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53391.287 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 39344.653 ops/s
[info]                  ·gc.alloc.rate:                   1293.794 MB/sec
[info]                  ·gc.alloc.rate.norm:              51768.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.164 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.913 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53493.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce":
[info]   39178.808 ±(99.9%) 1109.309 ops/s [Average]
[info]   (min, avg, max) = (38695.419, 39178.808, 39441.948), stdev = 288.084
[info]   CI (99.9%): [38069.499, 40288.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1288.403 ±(99.9%) 37.044 MB/sec [Average]
[info]   (min, avg, max) = (1272.241, 1288.403, 1297.194), stdev = 9.620
[info]   CI (99.9%): [1251.359, 1325.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   51768.274 ±(99.9%) 2.272 B/op [Average]
[info]   (min, avg, max) = (51768.010, 51768.274, 51769.330), stdev = 0.590
[info]   CI (99.9%): [51766.002, 51770.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.104), stdev = 0.021
[info]   CI (99.9%): [0.003, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.341 ±(99.9%) 3.148 B/op [Average]
[info]   (min, avg, max) = (2.507, 3.341, 4.164), stdev = 0.817
[info]   CI (99.9%): [0.194, 6.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.312 ±(99.9%) 585.328 MB/sec [Average]
[info]   (min, avg, max) = (985.128, 1256.312, 1336.913), stdev = 152.008
[info]   CI (99.9%): [670.984, 1841.640] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   50480.009 ±(99.9%) 23510.215 B/op [Average]
[info]   (min, avg, max) = (39569.663, 50480.009, 53493.337), stdev = 6105.528
[info]   CI (99.9%): [26969.794, 73990.224] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala
[info] # Run progress: 40.92% complete, ETA 00:38:17
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1107439.789 ops/s
[info] # Warmup Iteration   2: 1207335.506 ops/s
[info] # Warmup Iteration   3: 1214064.226 ops/s
[info] Iteration   1: 1203945.553 ops/s
[info]                  ·gc.alloc.rate:                   1095.142 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1279.089 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1198422.129 ops/s
[info]                  ·gc.alloc.rate:                   1090.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1719.053 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1226310.387 ops/s
[info]                  ·gc.alloc.rate:                   1115.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1267.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1228082.179 ops/s
[info]                  ·gc.alloc.rate:                   1117.146 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.267 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1270.644 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1230749.795 ops/s
[info]                  ·gc.alloc.rate:                   1119.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              1432.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1701.022 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala":
[info]   1217502.008 ±(99.9%) 58170.560 ops/s [Average]
[info]   (min, avg, max) = (1198422.129, 1217502.008, 1230749.795), stdev = 15106.710
[info]   CI (99.9%): [1159331.449, 1275672.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1107.461 ±(99.9%) 53.042 MB/sec [Average]
[info]   (min, avg, max) = (1090.041, 1107.461, 1119.594), stdev = 13.775
[info]   CI (99.9%): [1054.419, 1160.504] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1432.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1432.000, 1432.000, 1432.000), stdev = 0.001
[info]   CI (99.9%): [1432.000, 1432.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.269 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.092, 0.208), stdev = 0.070
[info]   CI (99.9%): [≈ 0, 0.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.119 ±(99.9%) 0.356 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.119, 0.273), stdev = 0.092
[info]   CI (99.9%): [≈ 0, 0.475] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1119.016 ±(99.9%) 704.636 MB/sec [Average]
[info]   (min, avg, max) = (978.201, 1119.016, 1329.926), stdev = 182.992
[info]   CI (99.9%): [414.381, 1823.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1447.433 ±(99.9%) 923.566 B/op [Average]
[info]   (min, avg, max) = (1267.356, 1447.433, 1719.053), stdev = 239.847
[info]   CI (99.9%): [523.866, 2370.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.800, 6.000), stdev = 1.483
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 41.25% complete, ETA 00:38:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1194471.469 ops/s
[info] # Warmup Iteration   2: 1307335.578 ops/s
[info] # Warmup Iteration   3: 1309646.524 ops/s
[info] Iteration   1: 1304174.969 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1309633.785 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1314848.310 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1308772.878 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1309904.690 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   1309466.926 ±(99.9%) 14620.445 ops/s [Average]
[info]   (min, avg, max) = (1304174.969, 1309466.926, 1314848.310), stdev = 3796.883
[info]   CI (99.9%): [1294846.481, 1324087.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson
[info] # Run progress: 41.58% complete, ETA 00:37:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27652.848 ops/s
[info] # Warmup Iteration   2: 38281.147 ops/s
[info] # Warmup Iteration   3: 38386.344 ops/s
[info] Iteration   1: 38896.038 ops/s
[info]                  ·gc.alloc.rate:                   1176.810 MB/sec
[info]                  ·gc.alloc.rate.norm:              47631.593 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.527 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39268.371 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38834.336 ops/s
[info]                  ·gc.alloc.rate:                   1175.034 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1299.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52670.420 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 38966.354 ops/s
[info]                  ·gc.alloc.rate:                   1178.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.522 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.170 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52892.891 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 39104.838 ops/s
[info]                  ·gc.alloc.rate:                   1183.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.676 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39825.620 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 39071.699 ops/s
[info]                  ·gc.alloc.rate:                   1182.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              47632.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.838 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53487.277 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson":
[info]   38974.653 ±(99.9%) 440.322 ops/s [Average]
[info]   (min, avg, max) = (38834.336, 38974.653, 39104.838), stdev = 114.350
[info]   CI (99.9%): [38534.332, 39414.975] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1179.214 ±(99.9%) 13.231 MB/sec [Average]
[info]   (min, avg, max) = (1175.034, 1179.214, 1183.136), stdev = 3.436
[info]   CI (99.9%): [1165.983, 1192.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   47631.927 ±(99.9%) 0.719 B/op [Average]
[info]   (min, avg, max) = (47631.593, 47631.927, 47632.011), stdev = 0.187
[info]   CI (99.9%): [47631.208, 47632.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.177] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   2.356 ±(99.9%) 4.829 B/op [Average]
[info]   (min, avg, max) = (0.838, 2.356, 4.218), stdev = 1.254
[info]   CI (99.9%): [≈ 0, 7.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1179.073 ±(99.9%) 702.350 MB/sec [Average]
[info]   (min, avg, max) = (970.184, 1179.073, 1327.450), stdev = 182.398
[info]   CI (99.9%): [476.722, 1881.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   47628.916 ±(99.9%) 28442.468 B/op [Average]
[info]   (min, avg, max) = (39268.371, 47628.916, 53487.277), stdev = 7386.419
[info]   CI (99.9%): [19186.447, 76071.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce
[info] # Run progress: 41.91% complete, ETA 00:37:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 106801.622 ops/s
[info] # Warmup Iteration   2: 130941.037 ops/s
[info] # Warmup Iteration   3: 130804.249 ops/s
[info] Iteration   1: 131388.160 ops/s
[info]                  ·gc.alloc.rate:                   2252.893 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.997 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2321.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27818.565 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 131458.505 ops/s
[info]                  ·gc.alloc.rate:                   2255.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.246 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2344.402 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28069.482 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 130891.859 ops/s
[info]                  ·gc.alloc.rate:                   2244.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2359.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28381.563 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 130700.065 ops/s
[info]                  ·gc.alloc.rate:                   2241.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.753 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24459.822 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 130447.851 ops/s
[info]                  ·gc.alloc.rate:                   2238.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              27000.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.256 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28667.448 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce":
[info]   130977.288 ±(99.9%) 1683.793 ops/s [Average]
[info]   (min, avg, max) = (130447.851, 130977.288, 131458.505), stdev = 437.276
[info]   CI (99.9%): [129293.495, 132661.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate":
[info]   2246.478 ±(99.9%) 28.108 MB/sec [Average]
[info]   (min, avg, max) = (2238.006, 2246.478, 2255.078), stdev = 7.300
[info]   CI (99.9%): [2218.370, 2274.587] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   27000.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (27000.003, 27000.003, 27000.003), stdev = 0.001
[info]   CI (99.9%): [27000.003, 27000.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.104, 0.146), stdev = 0.025
[info]   CI (99.9%): [0.006, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.251 ±(99.9%) 1.187 B/op [Average]
[info]   (min, avg, max) = (0.997, 1.251, 1.755), stdev = 0.308
[info]   CI (99.9%): [0.064, 2.438] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2286.439 ±(99.9%) 555.881 MB/sec [Average]
[info]   (min, avg, max) = (2030.753, 2286.439, 2376.219), stdev = 144.361
[info]   CI (99.9%): [1730.558, 2842.320] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   27479.376 ±(99.9%) 6615.502 B/op [Average]
[info]   (min, avg, max) = (24459.822, 27479.376, 28667.448), stdev = 1718.025
[info]   CI (99.9%): [20863.874, 34094.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.count":
[info]   34.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readCirce:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 7.000), stdev = 0.894
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala
[info] # Run progress: 42.24% complete, ETA 00:37:26
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 159456.077 ops/s
[info] # Warmup Iteration   2: 252501.996 ops/s
[info] # Warmup Iteration   3: 255291.724 ops/s
[info] Iteration   1: 255316.910 ops/s
[info]                  ·gc.alloc.rate:                   560.594 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.642 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.356 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3990.884 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 251641.230 ops/s
[info]                  ·gc.alloc.rate:                   552.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.260 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.392 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4074.631 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 251052.214 ops/s
[info]                  ·gc.alloc.rate:                   551.133 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2052.355 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 249974.014 ops/s
[info]                  ·gc.alloc.rate:                   548.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.112 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4131.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 254418.103 ops/s
[info]                  ·gc.alloc.rate:                   558.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4075.332 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala":
[info]   252480.494 ±(99.9%) 8786.385 ops/s [Average]
[info]   (min, avg, max) = (249974.014, 252480.494, 255316.910), stdev = 2281.796
[info]   CI (99.9%): [243694.110, 261266.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   554.325 ±(99.9%) 19.242 MB/sec [Average]
[info]   (min, avg, max) = (548.892, 554.325, 560.594), stdev = 4.997
[info]   CI (99.9%): [535.083, 573.568] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   3456.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.002, 3456.002, 3456.002), stdev = 0.001
[info]   CI (99.9%): [3456.001, 3456.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.284 ±(99.9%) 0.883 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 0.642), stdev = 0.229
[info]   CI (99.9%): [≈ 0, 1.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   588.151 ±(99.9%) 561.765 MB/sec [Average]
[info]   (min, avg, max) = (327.292, 588.151, 658.601), stdev = 145.889
[info]   CI (99.9%): [26.385, 1149.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3664.859 ±(99.9%) 3476.385 B/op [Average]
[info]   (min, avg, max) = (2052.355, 3664.859, 4131.092), stdev = 902.806
[info]   CI (99.9%): [188.474, 7141.244] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJacksonScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala
[info] # Run progress: 42.57% complete, ETA 00:37:13
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 459976.291 ops/s
[info] # Warmup Iteration   2: 499433.133 ops/s
[info] # Warmup Iteration   3: 500601.378 ops/s
[info] Iteration   1: 491898.702 ops/s
[info]                  ·gc.alloc.rate:                   619.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1053.906 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Iteration   2: 504091.512 ops/s
[info]                  ·gc.alloc.rate:                   635.241 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.130 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.277 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2046.578 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 499767.044 ops/s
[info]                  ·gc.alloc.rate:                   629.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.197 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2064.068 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 494529.240 ops/s
[info]                  ·gc.alloc.rate:                   623.303 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.265 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.328 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2085.938 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 501279.941 ops/s
[info]                  ·gc.alloc.rate:                   631.787 MB/sec
[info]                  ·gc.alloc.rate.norm:              1984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.196 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2059.947 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala":
[info]   498313.288 ±(99.9%) 19230.896 ops/s [Average]
[info]   (min, avg, max) = (491898.702, 498313.288, 504091.512), stdev = 4994.203
[info]   CI (99.9%): [479082.392, 517544.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   628.005 ±(99.9%) 24.178 MB/sec [Average]
[info]   (min, avg, max) = (619.899, 628.005, 635.241), stdev = 6.279
[info]   CI (99.9%): [603.827, 652.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1984.001, 1984.001, 1984.001), stdev = 0.001
[info]   CI (99.9%): [1984.001, 1984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.184 ±(99.9%) 0.214 B/op [Average]
[info]   (min, avg, max) = (0.130, 0.184, 0.265), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   590.216 ±(99.9%) 561.661 MB/sec [Average]
[info]   (min, avg, max) = (329.292, 590.216, 655.972), stdev = 145.862
[info]   CI (99.9%): [28.555, 1151.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1862.088 ±(99.9%) 1740.525 B/op [Average]
[info]   (min, avg, max) = (1053.906, 1862.088, 2085.938), stdev = 452.009
[info]   CI (99.9%): [121.563, 3602.612] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.600, 3.000), stdev = 1.140
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson
[info] # Run progress: 42.90% complete, ETA 00:37:00
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40159.037 ops/s
[info] # Warmup Iteration   2: 66994.114 ops/s
[info] # Warmup Iteration   3: 67678.305 ops/s
[info] Iteration   1: 68493.512 ops/s
[info]                  ·gc.alloc.rate:                   2965.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.913 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3021.897 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69464.774 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 68037.342 ops/s
[info]                  ·gc.alloc.rate:                   2946.212 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.334 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62610.982 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 68004.975 ops/s
[info]                  ·gc.alloc.rate:                   2951.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              68325.192 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.222 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70699.524 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 68060.021 ops/s
[info]                  ·gc.alloc.rate:                   2946.683 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70730.669 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 68176.803 ops/s
[info]                  ·gc.alloc.rate:                   2952.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              68168.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.229 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.286 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62859.512 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson":
[info]   68154.531 ±(99.9%) 771.178 ops/s [Average]
[info]   (min, avg, max) = (68004.975, 68154.531, 68493.512), stdev = 200.273
[info]   CI (99.9%): [67383.352, 68925.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   2952.449 ±(99.9%) 29.999 MB/sec [Average]
[info]   (min, avg, max) = (2946.212, 2952.449, 2965.484), stdev = 7.791
[info]   CI (99.9%): [2922.450, 2982.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   68199.443 ±(99.9%) 270.683 B/op [Average]
[info]   (min, avg, max) = (68168.006, 68199.443, 68325.192), stdev = 70.296
[info]   CI (99.9%): [67928.760, 68470.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.162 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.162, 0.229), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.370] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.751 ±(99.9%) 4.804 B/op [Average]
[info]   (min, avg, max) = (1.913, 3.751, 5.286), stdev = 1.248
[info]   CI (99.9%): [≈ 0, 8.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   2912.386 ±(99.9%) 699.141 MB/sec [Average]
[info]   (min, avg, max) = (2706.038, 2912.386, 3057.458), stdev = 181.565
[info]   CI (99.9%): [2213.245, 3611.527] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   67273.092 ±(99.9%) 16075.423 B/op [Average]
[info]   (min, avg, max) = (62610.982, 67273.092, 70730.669), stdev = 4174.736
[info]   CI (99.9%): [51197.669, 83348.515] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.readPlayJson:·gc.time":
[info]   47.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 9.400, 10.000), stdev = 0.894
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce
[info] # Run progress: 43.23% complete, ETA 00:36:47
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 154833.256 ops/s
[info] # Warmup Iteration   2: 191931.184 ops/s
[info] # Warmup Iteration   3: 195802.692 ops/s
[info] Iteration   1: 193737.654 ops/s
[info]                  ·gc.alloc.rate:                   1669.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              13568.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1638.083 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13311.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 195940.098 ops/s
[info]                  ·gc.alloc.rate:                   1688.599 MB/sec
[info]                  ·gc.alloc.rate.norm:              13568.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1985.102 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15950.426 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 196717.016 ops/s
[info]                  ·gc.alloc.rate:                   1695.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              13568.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13352.751 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 194958.998 ops/s
[info]                  ·gc.alloc.rate:                   1680.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              13568.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.672 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.747 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13554.282 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 194093.872 ops/s
[info]                  ·gc.alloc.rate:                   1672.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              13568.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.844 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.127 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13676.515 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce":
[info]   195089.528 ±(99.9%) 4797.150 ops/s [Average]
[info]   (min, avg, max) = (193737.654, 195089.528, 196717.016), stdev = 1245.805
[info]   CI (99.9%): [190292.377, 199886.678] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1681.452 ±(99.9%) 41.809 MB/sec [Average]
[info]   (min, avg, max) = (1669.686, 1681.452, 1695.779), stdev = 10.858
[info]   CI (99.9%): [1639.643, 1723.260] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   13568.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (13568.002, 13568.002, 13568.002), stdev = 0.001
[info]   CI (99.9%): [13568.002, 13568.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.024
[info]   CI (99.9%): [0.004, 0.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.773 ±(99.9%) 0.741 B/op [Average]
[info]   (min, avg, max) = (0.500, 0.773, 1.003), stdev = 0.192
[info]   CI (99.9%): [0.032, 1.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1731.387 ±(99.9%) 550.669 MB/sec [Average]
[info]   (min, avg, max) = (1638.083, 1731.387, 1985.102), stdev = 143.007
[info]   CI (99.9%): [1180.718, 2282.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   13969.034 ±(99.9%) 4303.453 B/op [Average]
[info]   (min, avg, max) = (13311.197, 13969.034, 15950.426), stdev = 1117.593
[info]   CI (99.9%): [9665.581, 18272.487] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeCirce:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala
[info] # Run progress: 43.56% complete, ETA 00:36:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 316662.716 ops/s
[info] # Warmup Iteration   2: 485620.375 ops/s
[info] # Warmup Iteration   3: 486373.338 ops/s
[info] Iteration   1: 487594.725 ops/s
[info]                  ·gc.alloc.rate:                   500.447 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1034.124 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 485898.165 ops/s
[info]                  ·gc.alloc.rate:                   498.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.983 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2083.244 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 487894.032 ops/s
[info]                  ·gc.alloc.rate:                   500.799 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.243 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2088.553 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 486064.218 ops/s
[info]                  ·gc.alloc.rate:                   498.908 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1051.427 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 485385.009 ops/s
[info]                  ·gc.alloc.rate:                   498.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              1616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.892 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2114.439 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala":
[info]   486567.230 ±(99.9%) 4268.168 ops/s [Average]
[info]   (min, avg, max) = (485385.009, 486567.230, 487894.032), stdev = 1108.430
[info]   CI (99.9%): [482299.062, 490835.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   499.429 ±(99.9%) 4.339 MB/sec [Average]
[info]   (min, avg, max) = (498.221, 499.429, 500.799), stdev = 1.127
[info]   CI (99.9%): [495.090, 503.768] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1616.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1616.001, 1616.001, 1616.001), stdev = 0.001
[info]   CI (99.9%): [1616.001, 1616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.083), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.135 ±(99.9%) 0.485 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.135, 0.270), stdev = 0.126
[info]   CI (99.9%): [≈ 0, 0.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   517.395 ±(99.9%) 685.468 MB/sec [Average]
[info]   (min, avg, max) = (320.250, 517.395, 651.892), stdev = 178.014
[info]   CI (99.9%): [≈ 0, 1202.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1674.357 ±(99.9%) 2220.689 B/op [Average]
[info]   (min, avg, max) = (1034.124, 1674.357, 2114.439), stdev = 576.706
[info]   CI (99.9%): [≈ 0, 3895.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala
[info] # Run progress: 43.89% complete, ETA 00:36:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 566426.881 ops/s
[info] # Warmup Iteration   2: 624950.235 ops/s
[info] # Warmup Iteration   3: 595980.647 ops/s
[info] Iteration   1: 595711.546 ops/s
[info]                  ·gc.alloc.rate:                   466.161 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.728 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1542.443 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 590679.223 ops/s
[info]                  ·gc.alloc.rate:                   462.243 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 874.066 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 583062.151 ops/s
[info]                  ·gc.alloc.rate:                   456.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1762.092 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 589330.230 ops/s
[info]                  ·gc.alloc.rate:                   461.234 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869.919 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 589171.597 ops/s
[info]                  ·gc.alloc.rate:                   461.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              1232.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 870.096 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala":
[info]   589590.949 ±(99.9%) 17382.904 ops/s [Average]
[info]   (min, avg, max) = (583062.151, 589590.949, 595711.546), stdev = 4514.285
[info]   CI (99.9%): [572208.046, 606973.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   461.430 ±(99.9%) 13.349 MB/sec [Average]
[info]   (min, avg, max) = (456.444, 461.430, 466.161), stdev = 3.467
[info]   CI (99.9%): [448.081, 474.779] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1232.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1232.001, 1232.001, 1232.001), stdev = 0.001
[info]   CI (99.9%): [1232.001, 1232.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.385 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.728), stdev = 1.658
[info]   CI (99.9%): [≈ 0, 7.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.015 ±(99.9%) 16.872 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.015, 9.851), stdev = 4.382
[info]   CI (99.9%): [≈ 0, 18.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.143 ±(99.9%) 622.642 MB/sec [Average]
[info]   (min, avg, max) = (325.627, 443.143, 652.838), stdev = 161.698
[info]   CI (99.9%): [≈ 0, 1065.785] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1183.723 ±(99.9%) 1673.937 B/op [Average]
[info]   (min, avg, max) = (869.919, 1183.723, 1762.092), stdev = 434.716
[info]   CI (99.9%): [≈ 0, 2857.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 6.000), stdev = 2.168
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 44.22% complete, ETA 00:36:09
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 568112.853 ops/s
[info] # Warmup Iteration   2: 628749.148 ops/s
[info] # Warmup Iteration   3: 672060.598 ops/s
[info] Iteration   1: 673964.569 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 674074.014 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 673218.527 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 672120.108 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 670343.214 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc":
[info]   672744.086 ±(99.9%) 5976.851 ops/s [Average]
[info]   (min, avg, max) = (670343.214, 672744.086, 674074.014), stdev = 1552.169
[info]   CI (99.9%): [666767.235, 678720.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson
[info] # Run progress: 44.55% complete, ETA 00:35:56
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 20373.712 ops/s
[info] # Warmup Iteration   2: 30338.120 ops/s
[info] # Warmup Iteration   3: 30772.963 ops/s
[info] Iteration   1: 30040.587 ops/s
[info]                  ·gc.alloc.rate:                   1540.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              80703.507 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.181 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85200.290 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 30912.909 ops/s
[info]                  ·gc.alloc.rate:                   1584.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.298 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66794.759 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 30726.691 ops/s
[info]                  ·gc.alloc.rate:                   1574.960 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84760.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 30598.457 ops/s
[info]                  ·gc.alloc.rate:                   1568.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.424 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85845.222 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 30616.187 ops/s
[info]                  ·gc.alloc.rate:                   1569.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              80688.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.350 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 86305.581 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson":
[info]   30578.966 ±(99.9%) 1255.095 ops/s [Average]
[info]   (min, avg, max) = (30040.587, 30578.966, 30912.909), stdev = 325.944
[info]   CI (99.9%): [29323.871, 31834.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1567.421 ±(99.9%) 64.093 MB/sec [Average]
[info]   (min, avg, max) = (1540.005, 1567.421, 1584.613), stdev = 16.645
[info]   CI (99.9%): [1503.327, 1631.514] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   80691.112 ±(99.9%) 26.681 B/op [Average]
[info]   (min, avg, max) = (80688.013, 80691.112, 80703.507), stdev = 6.929
[info]   CI (99.9%): [80664.431, 80717.794] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.490 ±(99.9%) 6.707 B/op [Average]
[info]   (min, avg, max) = (2.181, 4.490, 6.424), stdev = 1.742
[info]   CI (99.9%): [≈ 0, 11.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1587.808 ±(99.9%) 599.091 MB/sec [Average]
[info]   (min, avg, max) = (1311.767, 1587.808, 1678.540), stdev = 155.582
[info]   CI (99.9%): [988.717, 2186.899] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   81781.194 ±(99.9%) 32339.899 B/op [Average]
[info]   (min, avg, max) = (66794.759, 81781.194, 86305.581), stdev = 8398.569
[info]   CI (99.9%): [49441.295, 114121.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfLongsBenchmark.writePlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce
[info] # Run progress: 44.88% complete, ETA 00:35:43
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5586.439 ops/s
[info] # Warmup Iteration   2: 8086.591 ops/s
[info] # Warmup Iteration   3: 8269.202 ops/s
[info] Iteration   1: 8435.225 ops/s
[info]                  ·gc.alloc.rate:                   1287.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              240232.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.534 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 244373.632 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 8447.736 ops/s
[info]                  ·gc.alloc.rate:                   1289.336 MB/sec
[info]                  ·gc.alloc.rate.norm:              240232.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.634 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.363 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 245081.373 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 8453.171 ops/s
[info]                  ·gc.alloc.rate:                   1289.967 MB/sec
[info]                  ·gc.alloc.rate.norm:              240232.048 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.063 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 246395.519 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 8393.250 ops/s
[info]                  ·gc.alloc.rate:                   1280.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              240232.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.822 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249592.560 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 8355.933 ops/s
[info]                  ·gc.alloc.rate:                   1275.279 MB/sec
[info]                  ·gc.alloc.rate.norm:              240237.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.760 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.132 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 252077.219 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce":
[info]   8417.063 ±(99.9%) 159.679 ops/s [Average]
[info]   (min, avg, max) = (8355.933, 8417.063, 8453.171), stdev = 41.468
[info]   CI (99.9%): [8257.384, 8576.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1284.500 ±(99.9%) 24.159 MB/sec [Average]
[info]   (min, avg, max) = (1275.279, 1284.500, 1289.967), stdev = 6.274
[info]   CI (99.9%): [1260.341, 1308.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   240233.045 ±(99.9%) 8.564 B/op [Average]
[info]   (min, avg, max) = (240232.048, 240233.045, 240237.024), stdev = 2.224
[info]   CI (99.9%): [240224.481, 240241.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   11.672 ±(99.9%) 10.523 B/op [Average]
[info]   (min, avg, max) = (7.806, 11.672, 15.534), stdev = 2.733
[info]   CI (99.9%): [1.149, 22.195] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1323.314 ±(99.9%) 44.686 MB/sec [Average]
[info]   (min, avg, max) = (1309.191, 1323.314, 1338.132), stdev = 11.605
[info]   CI (99.9%): [1278.629, 1368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   247504.061 ±(99.9%) 12503.254 B/op [Average]
[info]   (min, avg, max) = (244373.632, 247504.061, 252077.219), stdev = 3247.055
[info]   CI (99.9%): [235000.807, 260007.314] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 45.21% complete, ETA 00:35:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90242.306 ops/s
[info] # Warmup Iteration   2: 99728.863 ops/s
[info] # Warmup Iteration   3: 100366.978 ops/s
[info] Iteration   1: 102549.241 ops/s
[info]                  ·gc.alloc.rate:                   993.116 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.639 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.794 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15181.641 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 100633.364 ops/s
[info]                  ·gc.alloc.rate:                   974.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.413 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15481.519 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 102666.081 ops/s
[info]                  ·gc.alloc.rate:                   994.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.957 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.802 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15225.613 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 103039.512 ops/s
[info]                  ·gc.alloc.rate:                   998.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.590 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15231.406 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 102882.589 ops/s
[info]                  ·gc.alloc.rate:                   996.582 MB/sec
[info]                  ·gc.alloc.rate.norm:              15248.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.650 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 15310.245 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala":
[info]   102354.157 ±(99.9%) 3775.514 ops/s [Average]
[info]   (min, avg, max) = (100633.364, 102354.157, 103039.512), stdev = 980.489
[info]   CI (99.9%): [98578.643, 106129.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   991.295 ±(99.9%) 36.924 MB/sec [Average]
[info]   (min, avg, max) = (974.490, 991.295, 998.027), stdev = 9.589
[info]   CI (99.9%): [954.371, 1028.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   15248.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (15248.004, 15248.004, 15248.004), stdev = 0.001
[info]   CI (99.9%): [15248.003, 15248.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.218 ±(99.9%) 1.625 B/op [Average]
[info]   (min, avg, max) = (0.639, 1.218, 1.628), stdev = 0.422
[info]   CI (99.9%): [≈ 0, 2.843] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   993.720 ±(99.9%) 19.450 MB/sec [Average]
[info]   (min, avg, max) = (988.794, 993.720, 1000.650), stdev = 5.051
[info]   CI (99.9%): [974.270, 1013.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15286.085 ±(99.9%) 456.969 B/op [Average]
[info]   (min, avg, max) = (15181.641, 15286.085, 15481.519), stdev = 118.673
[info]   CI (99.9%): [14829.116, 15743.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson
[info] # Run progress: 45.54% complete, ETA 00:35:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3534.051 ops/s
[info] # Warmup Iteration   2: 7574.836 ops/s
[info] # Warmup Iteration   3: 7826.730 ops/s
[info] Iteration   1: 7832.159 ops/s
[info]                  ·gc.alloc.rate:                   1413.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.182 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 265255.601 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 7830.234 ops/s
[info]                  ·gc.alloc.rate:                   1413.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.552 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.426 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 334641.945 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 7830.752 ops/s
[info]                  ·gc.alloc.rate:                   1413.689 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.733 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 269272.389 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 7778.212 ops/s
[info]                  ·gc.alloc.rate:                   1404.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.109 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 272217.391 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 7820.020 ops/s
[info]                  ·gc.alloc.rate:                   1411.946 MB/sec
[info]                  ·gc.alloc.rate.norm:              284216.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1350.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 271795.940 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson":
[info]   7818.275 ±(99.9%) 88.220 ops/s [Average]
[info]   (min, avg, max) = (7778.212, 7818.275, 7832.159), stdev = 22.910
[info]   CI (99.9%): [7730.056, 7906.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1411.471 ±(99.9%) 15.494 MB/sec [Average]
[info]   (min, avg, max) = (1404.398, 1411.471, 1413.700), stdev = 4.024
[info]   CI (99.9%): [1395.977, 1426.964] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   284216.054 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (284216.052, 284216.054, 284216.057), stdev = 0.002
[info]   CI (99.9%): [284216.045, 284216.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   7.531 ±(99.9%) 26.468 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.531, 16.733), stdev = 6.874
[info]   CI (99.9%): [≈ 0, 33.999] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1403.706 ±(99.9%) 563.025 MB/sec [Average]
[info]   (min, avg, max) = (1319.390, 1403.706, 1664.426), stdev = 146.216
[info]   CI (99.9%): [840.681, 1966.730] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   282636.653 ±(99.9%) 112451.610 B/op [Average]
[info]   (min, avg, max) = (265255.601, 282636.653, 334641.945), stdev = 29203.326
[info]   CI (99.9%): [170185.043, 395088.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce
[info] # Run progress: 45.87% complete, ETA 00:35:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 12751.979 ops/s
[info] # Warmup Iteration   2: 18189.273 ops/s
[info] # Warmup Iteration   3: 18345.945 ops/s
[info] Iteration   1: 18418.902 ops/s
[info]                  ·gc.alloc.rate:                   918.818 MB/sec
[info]                  ·gc.alloc.rate.norm:              78509.834 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.114 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.751 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55775.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 18299.387 ops/s
[info]                  ·gc.alloc.rate:                   913.005 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.024 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.951 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84211.469 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 18349.883 ops/s
[info]                  ·gc.alloc.rate:                   915.518 MB/sec
[info]                  ·gc.alloc.rate.norm:              78552.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.785 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84291.686 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 18298.737 ops/s
[info]                  ·gc.alloc.rate:                   913.110 MB/sec
[info]                  ·gc.alloc.rate.norm:              78532.592 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84874.903 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 18176.538 ops/s
[info]                  ·gc.alloc.rate:                   906.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              78528.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 57158.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce":
[info]   18308.689 ±(99.9%) 341.674 ops/s [Average]
[info]   (min, avg, max) = (18176.538, 18308.689, 18418.902), stdev = 88.732
[info]   CI (99.9%): [17967.016, 18650.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   913.443 ±(99.9%) 17.015 MB/sec [Average]
[info]   (min, avg, max) = (906.764, 913.443, 918.818), stdev = 4.419
[info]   CI (99.9%): [896.428, 930.458] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   78534.900 ±(99.9%) 68.546 B/op [Average]
[info]   (min, avg, max) = (78509.834, 78534.900, 78552.028), stdev = 17.801
[info]   CI (99.9%): [78466.354, 78603.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   5.002 ±(99.9%) 14.924 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 5.002, 8.951), stdev = 3.876
[info]   CI (99.9%): [≈ 0, 19.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   852.162 ±(99.9%) 688.362 MB/sec [Average]
[info]   (min, avg, max) = (652.751, 852.162, 986.853), stdev = 178.765
[info]   CI (99.9%): [163.800, 1540.524] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   73262.345 ±(99.9%) 59076.830 B/op [Average]
[info]   (min, avg, max) = (55775.319, 73262.345, 84874.903), stdev = 15342.065
[info]   CI (99.9%): [14185.515, 132339.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 46.20% complete, ETA 00:34:52
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 418834.706 ops/s
[info] # Warmup Iteration   2: 468427.455 ops/s
[info] # Warmup Iteration   3: 477943.330 ops/s
[info] Iteration   1: 482913.058 ops/s
[info]                  ·gc.alloc.rate:                   1094.673 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4248.569 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 482833.346 ops/s
[info]                  ·gc.alloc.rate:                   1094.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3197.368 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 481589.572 ops/s
[info]                  ·gc.alloc.rate:                   1091.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.340 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.456 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3218.434 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 479343.782 ops/s
[info]                  ·gc.alloc.rate:                   1086.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4336.890 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 485975.175 ops/s
[info]                  ·gc.alloc.rate:                   1101.484 MB/sec
[info]                  ·gc.alloc.rate.norm:              3568.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3229.488 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala":
[info]   482530.986 ±(99.9%) 9262.454 ops/s [Average]
[info]   (min, avg, max) = (479343.782, 482530.986, 485975.175), stdev = 2405.430
[info]   CI (99.9%): [473268.532, 491793.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1093.718 ±(99.9%) 20.560 MB/sec [Average]
[info]   (min, avg, max) = (1086.853, 1093.718, 1101.484), stdev = 5.339
[info]   CI (99.9%): [1073.158, 1114.278] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   3568.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3568.001, 3568.001, 3568.001), stdev = 0.001
[info]   CI (99.9%): [3568.001, 3568.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.020, 0.154] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.285 ±(99.9%) 0.219 B/op [Average]
[info]   (min, avg, max) = (0.204, 0.285, 0.340), stdev = 0.057
[info]   CI (99.9%): [0.066, 0.505] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1117.302 ±(99.9%) 686.154 MB/sec [Average]
[info]   (min, avg, max) = (980.535, 1117.302, 1321.065), stdev = 178.192
[info]   CI (99.9%): [431.148, 1803.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   3646.150 ±(99.9%) 2276.431 B/op [Average]
[info]   (min, avg, max) = (3197.368, 3646.150, 4336.890), stdev = 591.182
[info]   CI (99.9%): [1369.718, 5922.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 46.53% complete, ETA 00:34:39
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 488831.278 ops/s
[info] # Warmup Iteration   2: 541178.382 ops/s
[info] # Warmup Iteration   3: 538053.595 ops/s
[info] Iteration   1: 541218.333 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 539008.461 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 540291.364 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 541614.330 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 541100.657 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   540646.629 ±(99.9%) 3982.783 ops/s [Average]
[info]   (min, avg, max) = (539008.461, 540646.629, 541614.330), stdev = 1034.316
[info]   CI (99.9%): [536663.846, 544629.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson
[info] # Run progress: 46.86% complete, ETA 00:34:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13735.461 ops/s
[info] # Warmup Iteration   2: 18925.834 ops/s
[info] # Warmup Iteration   3: 19010.131 ops/s
[info] Iteration   1: 19075.233 ops/s
[info]                  ·gc.alloc.rate:                   879.556 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.717 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80076.274 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 19391.821 ops/s
[info]                  ·gc.alloc.rate:                   894.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.758 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      970.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 78771.603 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 19028.180 ops/s
[info]                  ·gc.alloc.rate:                   877.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              72576.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      973.973 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80577.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 19425.621 ops/s
[info]                  ·gc.alloc.rate:                   895.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              72561.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.959 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52833.551 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 19289.768 ops/s
[info]                  ·gc.alloc.rate:                   889.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              72560.021 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.491 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.566 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80185.224 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson":
[info]   19242.125 ±(99.9%) 699.438 ops/s [Average]
[info]   (min, avg, max) = (19028.180, 19242.125, 19425.621), stdev = 181.642
[info]   CI (99.9%): [18542.687, 19941.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   887.080 ±(99.9%) 31.930 MB/sec [Average]
[info]   (min, avg, max) = (877.261, 887.080, 895.395), stdev = 8.292
[info]   CI (99.9%): [855.150, 919.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   72569.854 ±(99.9%) 32.568 B/op [Average]
[info]   (min, avg, max) = (72560.021, 72569.854, 72576.027), stdev = 8.458
[info]   CI (99.9%): [72537.286, 72602.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.046 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.046, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.731 ±(99.9%) 14.145 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.731, 8.491), stdev = 3.673
[info]   CI (99.9%): [≈ 0, 17.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   909.866 ±(99.9%) 555.494 MB/sec [Average]
[info]   (min, avg, max) = (651.959, 909.866, 982.566), stdev = 144.260
[info]   CI (99.9%): [354.372, 1465.360] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74488.740 ±(99.9%) 46687.691 B/op [Average]
[info]   (min, avg, max) = (52833.551, 74488.740, 80577.049), stdev = 12124.645
[info]   CI (99.9%): [27801.049, 121176.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce
[info] # Run progress: 47.19% complete, ETA 00:34:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9163.381 ops/s
[info] # Warmup Iteration   2: 13316.714 ops/s
[info] # Warmup Iteration   3: 13736.736 ops/s
[info] Iteration   1: 13724.105 ops/s
[info]                  ·gc.alloc.rate:                   1378.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              158096.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.161 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1310.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150320.336 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 13676.747 ops/s
[info]                  ·gc.alloc.rate:                   1373.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              158098.618 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     11.977 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.108 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 151625.362 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 13548.870 ops/s
[info]                  ·gc.alloc.rate:                   1360.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.030 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 192609.013 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 13648.195 ops/s
[info]                  ·gc.alloc.rate:                   1370.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.601 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153922.231 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 13469.623 ops/s
[info]                  ·gc.alloc.rate:                   1352.774 MB/sec
[info]                  ·gc.alloc.rate.norm:              158112.038 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.297 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156757.131 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce":
[info]   13613.508 ±(99.9%) 396.051 ops/s [Average]
[info]   (min, avg, max) = (13469.623, 13613.508, 13724.105), stdev = 102.853
[info]   CI (99.9%): [13217.457, 14009.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1367.201 ±(99.9%) 39.742 MB/sec [Average]
[info]   (min, avg, max) = (1352.774, 1367.201, 1378.349), stdev = 10.321
[info]   CI (99.9%): [1327.459, 1406.943] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   158106.150 ±(99.9%) 31.223 B/op [Average]
[info]   (min, avg, max) = (158096.030, 158106.150, 158112.038), stdev = 8.109
[info]   CI (99.9%): [158074.927, 158137.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   8.658 ±(99.9%) 8.163 B/op [Average]
[info]   (min, avg, max) = (7.161, 8.658, 11.977), stdev = 2.120
[info]   CI (99.9%): [0.495, 16.821] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1392.187 ±(99.9%) 573.226 MB/sec [Average]
[info]   (min, avg, max) = (1310.557, 1392.187, 1657.551), stdev = 148.865
[info]   CI (99.9%): [818.962, 1965.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   161046.815 ±(99.9%) 68589.971 B/op [Average]
[info]   (min, avg, max) = (150320.336, 161046.815, 192609.013), stdev = 17812.598
[info]   CI (99.9%): [92456.843, 229636.786] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 7.000), stdev = 1.517
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala
[info] # Run progress: 47.52% complete, ETA 00:34:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7689.919 ops/s
[info] # Warmup Iteration   2: 14005.093 ops/s
[info] # Warmup Iteration   3: 13942.288 ops/s
[info] Iteration   1: 14137.301 ops/s
[info]                  ·gc.alloc.rate:                   1293.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              144056.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.952 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 146745.768 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 14142.829 ops/s
[info]                  ·gc.alloc.rate:                   1294.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              144061.950 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.950 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.014 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 147816.228 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 14200.175 ops/s
[info]                  ·gc.alloc.rate:                   1299.650 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.614 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.797 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 111066.079 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 14181.115 ops/s
[info]                  ·gc.alloc.rate:                   1298.230 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.310 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.719 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 148914.794 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 14115.968 ops/s
[info]                  ·gc.alloc.rate:                   1291.957 MB/sec
[info]                  ·gc.alloc.rate.norm:              144088.036 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.283 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1346.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 150194.402 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala":
[info]   14155.477 ±(99.9%) 132.085 ops/s [Average]
[info]   (min, avg, max) = (14115.968, 14155.477, 14200.175), stdev = 34.302
[info]   CI (99.9%): [14023.393, 14287.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1295.538 ±(99.9%) 12.542 MB/sec [Average]
[info]   (min, avg, max) = (1291.957, 1295.538, 1299.650), stdev = 3.257
[info]   CI (99.9%): [1282.996, 1308.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   144076.415 ±(99.9%) 61.782 B/op [Average]
[info]   (min, avg, max) = (144056.029, 144076.415, 144088.036), stdev = 16.044
[info]   CI (99.9%): [144014.633, 144138.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   6.022 ±(99.9%) 10.209 B/op [Average]
[info]   (min, avg, max) = (2.310, 6.022, 9.283), stdev = 2.651
[info]   CI (99.9%): [≈ 0, 16.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1267.192 ±(99.9%) 572.970 MB/sec [Average]
[info]   (min, avg, max) = (1001.797, 1267.192, 1346.709), stdev = 148.798
[info]   CI (99.9%): [694.222, 1840.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   140947.454 ±(99.9%) 64510.687 B/op [Average]
[info]   (min, avg, max) = (111066.079, 140947.454, 150194.402), stdev = 16753.221
[info]   CI (99.9%): [76436.767, 205458.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala
[info] # Run progress: 47.85% complete, ETA 00:33:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 155296.811 ops/s
[info] # Warmup Iteration   2: 167488.410 ops/s
[info] # Warmup Iteration   3: 169529.538 ops/s
[info] Iteration   1: 170466.797 ops/s
[info]                  ·gc.alloc.rate:                   985.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.384 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9132.384 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 171603.791 ops/s
[info]                  ·gc.alloc.rate:                   992.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.955 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9078.950 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 171068.025 ops/s
[info]                  ·gc.alloc.rate:                   989.375 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.575 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9134.546 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 171066.718 ops/s
[info]                  ·gc.alloc.rate:                   989.619 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.766 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.264 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9165.135 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 168453.860 ops/s
[info]                  ·gc.alloc.rate:                   974.200 MB/sec
[info]                  ·gc.alloc.rate.norm:              9104.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.655 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9351.227 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala":
[info]   170531.838 ±(99.9%) 4733.669 ops/s [Average]
[info]   (min, avg, max) = (168453.860, 170531.838, 171603.791), stdev = 1229.319
[info]   CI (99.9%): [165798.169, 175265.507] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   986.215 ±(99.9%) 27.486 MB/sec [Average]
[info]   (min, avg, max) = (974.200, 986.215, 992.333), stdev = 7.138
[info]   CI (99.9%): [958.728, 1013.701] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   9104.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9104.002, 9104.002, 9104.003), stdev = 0.001
[info]   CI (99.9%): [9104.002, 9104.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.536 ±(99.9%) 1.415 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.536, 0.955), stdev = 0.367
[info]   CI (99.9%): [≈ 0, 1.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   993.567 ±(99.9%) 19.107 MB/sec [Average]
[info]   (min, avg, max) = (988.618, 993.567, 1000.655), stdev = 4.962
[info]   CI (99.9%): [974.459, 1012.674] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9172.448 ±(99.9%) 402.936 B/op [Average]
[info]   (min, avg, max) = (9078.950, 9172.448, 9351.227), stdev = 104.641
[info]   CI (99.9%): [8769.513, 9575.384] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce
[info] # Run progress: 48.18% complete, ETA 00:33:35
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21837.127 ops/s
[info] # Warmup Iteration   2: 28793.327 ops/s
[info] # Warmup Iteration   3: 29295.922 ops/s
[info] Iteration   1: 29162.582 ops/s
[info]                  ·gc.alloc.rate:                   1086.202 MB/sec
[info]                  ·gc.alloc.rate.norm:              58640.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.370 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 52842.191 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 29089.758 ops/s
[info]                  ·gc.alloc.rate:                   1082.988 MB/sec
[info]                  ·gc.alloc.rate.norm:              58614.986 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.631 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.789 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70836.093 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 29120.778 ops/s
[info]                  ·gc.alloc.rate:                   1084.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53330.542 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 29410.864 ops/s
[info]                  ·gc.alloc.rate:                   1095.401 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.456 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.166 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53091.779 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 29398.714 ops/s
[info]                  ·gc.alloc.rate:                   1094.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              58616.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.343 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.812 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71210.170 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce":
[info]   29236.539 ±(99.9%) 599.962 ops/s [Average]
[info]   (min, avg, max) = (29089.758, 29236.539, 29410.864), stdev = 155.808
[info]   CI (99.9%): [28636.578, 29836.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1088.748 ±(99.9%) 22.475 MB/sec [Average]
[info]   (min, avg, max) = (1082.988, 1088.748, 1095.401), stdev = 5.837
[info]   CI (99.9%): [1066.273, 1111.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   58620.609 ±(99.9%) 41.814 B/op [Average]
[info]   (min, avg, max) = (58614.986, 58620.609, 58640.018), stdev = 10.859
[info]   CI (99.9%): [58578.795, 58662.423] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   4.260 ±(99.9%) 3.658 B/op [Average]
[info]   (min, avg, max) = (3.343, 4.260, 5.631), stdev = 0.950
[info]   CI (99.9%): [0.602, 7.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1119.261 ±(99.9%) 703.986 MB/sec [Average]
[info]   (min, avg, max) = (978.808, 1119.261, 1329.812), stdev = 182.823
[info]   CI (99.9%): [415.275, 1823.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   60262.155 ±(99.9%) 37835.620 B/op [Average]
[info]   (min, avg, max) = (52842.191, 60262.155, 71210.170), stdev = 9825.790
[info]   CI (99.9%): [22426.535, 98097.775] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala
[info] # Run progress: 48.51% complete, ETA 00:33:22
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 625887.636 ops/s
[info] # Warmup Iteration   2: 701366.000 ops/s
[info] # Warmup Iteration   3: 706800.062 ops/s
[info] Iteration   1: 704838.970 ops/s
[info]                  ·gc.alloc.rate:                   967.445 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.509 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1454.616 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 704675.628 ops/s
[info]                  ·gc.alloc.rate:                   966.694 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.279 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2186.337 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 706382.066 ops/s
[info]                  ·gc.alloc.rate:                   969.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.186 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2186.942 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 702114.360 ops/s
[info]                  ·gc.alloc.rate:                   963.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      987.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2213.543 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 695433.762 ops/s
[info]                  ·gc.alloc.rate:                   954.261 MB/sec
[info]                  ·gc.alloc.rate.norm:              2160.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2243.894 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala":
[info]   702688.957 ±(99.9%) 16693.383 ops/s [Average]
[info]   (min, avg, max) = (695433.762, 702688.957, 706382.066), stdev = 4335.219
[info]   CI (99.9%): [685995.574, 719382.340] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   964.179 ±(99.9%) 22.829 MB/sec [Average]
[info]   (min, avg, max) = (954.261, 964.179, 969.136), stdev = 5.929
[info]   CI (99.9%): [941.350, 987.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   2160.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2160.001, 2160.001, 2160.001), stdev = 0.001
[info]   CI (99.9%): [2160.001, 2160.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.196 ±(99.9%) 0.235 B/op [Average]
[info]   (min, avg, max) = (0.139, 0.196, 0.279), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   917.956 ±(99.9%) 573.872 MB/sec [Average]
[info]   (min, avg, max) = (651.509, 917.956, 991.324), stdev = 149.033
[info]   CI (99.9%): [344.084, 1491.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2057.067 ±(99.9%) 1300.005 B/op [Average]
[info]   (min, avg, max) = (1454.616, 2057.067, 2243.894), stdev = 337.607
[info]   CI (99.9%): [757.062, 3357.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 48.84% complete, ETA 00:33:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 726359.748 ops/s
[info] # Warmup Iteration   2: 801777.162 ops/s
[info] # Warmup Iteration   3: 802504.612 ops/s
[info] Iteration   1: 804139.249 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 804698.853 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 804984.360 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 803326.948 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 802433.039 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   803916.490 ±(99.9%) 4015.691 ops/s [Average]
[info]   (min, avg, max) = (802433.039, 803916.490, 804984.360), stdev = 1042.862
[info]   CI (99.9%): [799900.799, 807932.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce
[info] # Run progress: 49.17% complete, ETA 00:32:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8858.722 ops/s
[info] # Warmup Iteration   2: 27401.198 ops/s
[info] # Warmup Iteration   3: 28324.367 ops/s
[info] Iteration   1: 28384.832 ops/s
[info]                  ·gc.alloc.rate:                   1023.061 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.616 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.610 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54397.142 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 28421.433 ops/s
[info]                  ·gc.alloc.rate:                   1024.735 MB/sec
[info]                  ·gc.alloc.rate.norm:              56751.454 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54370.881 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 28304.794 ops/s
[info]                  ·gc.alloc.rate:                   1020.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54758.393 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 28296.370 ops/s
[info]                  ·gc.alloc.rate:                   1020.190 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.473 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73395.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 28497.690 ops/s
[info]                  ·gc.alloc.rate:                   1027.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              56752.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 54943.278 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce":
[info]   28381.024 ±(99.9%) 323.520 ops/s [Average]
[info]   (min, avg, max) = (28296.370, 28381.024, 28497.690), stdev = 84.017
[info]   CI (99.9%): [28057.504, 28704.544] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate":
[info]   1023.137 ±(99.9%) 11.636 MB/sec [Average]
[info]   (min, avg, max) = (1020.190, 1023.137, 1027.332), stdev = 3.022
[info]   CI (99.9%): [1011.501, 1034.772] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   56751.903 ±(99.9%) 0.965 B/op [Average]
[info]   (min, avg, max) = (56751.454, 56751.903, 56752.016), stdev = 0.251
[info]   CI (99.9%): [56750.938, 56752.868] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.067, 0.125), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   3.691 ±(99.9%) 9.624 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 3.691, 6.916), stdev = 2.499
[info]   CI (99.9%): [≈ 0, 13.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1052.169 ±(99.9%) 575.566 MB/sec [Average]
[info]   (min, avg, max) = (980.610, 1052.169, 1319.372), stdev = 149.473
[info]   CI (99.9%): [476.603, 1627.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   58372.965 ±(99.9%) 32349.836 B/op [Average]
[info]   (min, avg, max) = (54370.881, 58372.965, 73395.133), stdev = 8401.150
[info]   CI (99.9%): [26023.129, 90722.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala
[info] # Run progress: 49.50% complete, ETA 00:32:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7519.977 ops/s
[info] # Warmup Iteration   2: 26813.520 ops/s
[info] # Warmup Iteration   3: 28116.922 ops/s
[info] Iteration   1: 28126.910 ops/s
[info]                  ·gc.alloc.rate:                   770.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.330 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.612 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 36361.519 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 27919.858 ops/s
[info]                  ·gc.alloc.rate:                   765.183 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.214 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55329.516 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 27807.450 ops/s
[info]                  ·gc.alloc.rate:                   762.106 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37284.880 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 27955.297 ops/s
[info]                  ·gc.alloc.rate:                   766.193 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37237.536 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 27133.492 ops/s
[info]                  ·gc.alloc.rate:                   743.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              43144.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      662.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38444.052 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala":
[info]   27788.602 ±(99.9%) 1477.604 ops/s [Average]
[info]   (min, avg, max) = (27133.492, 27788.602, 28126.910), stdev = 383.729
[info]   CI (99.9%): [26310.998, 29266.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   761.614 ±(99.9%) 40.166 MB/sec [Average]
[info]   (min, avg, max) = (743.804, 761.614, 770.784), stdev = 10.431
[info]   CI (99.9%): [721.447, 801.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   43144.115 ±(99.9%) 0.865 B/op [Average]
[info]   (min, avg, max) = (43144.015, 43144.115, 43144.517), stdev = 0.225
[info]   CI (99.9%): [43143.251, 43144.980] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.042 ±(99.9%) 0.234 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.042, 0.146), stdev = 0.061
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.350 ±(99.9%) 13.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.350, 8.214), stdev = 3.418
[info]   CI (99.9%): [≈ 0, 15.513] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   722.717 ±(99.9%) 556.941 MB/sec [Average]
[info]   (min, avg, max) = (649.612, 722.717, 981.288), stdev = 144.636
[info]   CI (99.9%): [165.776, 1279.658] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   40931.501 ±(99.9%) 31123.483 B/op [Average]
[info]   (min, avg, max) = (36361.519, 40931.501, 55329.516), stdev = 8082.670
[info]   CI (99.9%): [9808.017, 72054.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala
[info] # Run progress: 49.83% complete, ETA 00:32:31
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 192285.215 ops/s
[info] # Warmup Iteration   2: 203572.073 ops/s
[info] # Warmup Iteration   3: 203219.636 ops/s
[info] Iteration   1: 204631.225 ops/s
[info]                  ·gc.alloc.rate:                   532.363 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          2.615 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.121 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      330.593 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2543.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 206272.793 ops/s
[info]                  ·gc.alloc.rate:                   536.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.477 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.279 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5039.618 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 198544.535 ops/s
[info]                  ·gc.alloc.rate:                   516.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.660 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5227.277 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 206213.795 ops/s
[info]                  ·gc.alloc.rate:                   536.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2516.680 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 203548.494 ops/s
[info]                  ·gc.alloc.rate:                   529.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              4096.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.324 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5099.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala":
[info]   203842.169 ±(99.9%) 12223.342 ops/s [Average]
[info]   (min, avg, max) = (198544.535, 203842.169, 206272.793), stdev = 3174.363
[info]   CI (99.9%): [191618.827, 216065.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   530.327 ±(99.9%) 31.830 MB/sec [Average]
[info]   (min, avg, max) = (516.513, 530.327, 536.649), stdev = 8.266
[info]   CI (99.9%): [498.497, 562.157] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   4096.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4096.002, 4096.002, 4096.002), stdev = 0.001
[info]   CI (99.9%): [4096.002, 4096.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.552 ±(99.9%) 4.443 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.552, 2.615), stdev = 1.154
[info]   CI (99.9%): [≈ 0, 4.995] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   4.252 ±(99.9%) 34.179 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 4.252, 20.121), stdev = 8.876
[info]   CI (99.9%): [≈ 0, 38.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   527.799 ±(99.9%) 694.905 MB/sec [Average]
[info]   (min, avg, max) = (329.628, 527.799, 660.279), stdev = 180.465
[info]   CI (99.9%): [≈ 0, 1222.704] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   4085.242 ±(99.9%) 5472.789 B/op [Average]
[info]   (min, avg, max) = (2516.680, 4085.242, 5227.277), stdev = 1421.266
[info]   CI (99.9%): [≈ 0, 9558.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson
[info] # Run progress: 50.17% complete, ETA 00:32:18
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4736.935 ops/s
[info] # Warmup Iteration   2: 21439.596 ops/s
[info] # Warmup Iteration   3: 22488.764 ops/s
[info] Iteration   1: 22544.639 ops/s
[info]                  ·gc.alloc.rate:                   1409.543 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.020 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.813 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1634.207 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 114139.420 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 22729.484 ops/s
[info]                  ·gc.alloc.rate:                   1421.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.647 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.556 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91455.234 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 22341.260 ops/s
[info]                  ·gc.alloc.rate:                   1397.100 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.023 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.466 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.444 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 93751.056 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 22747.741 ops/s
[info]                  ·gc.alloc.rate:                   1422.686 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.440 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.627 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92631.203 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 22748.202 ops/s
[info]                  ·gc.alloc.rate:                   1422.579 MB/sec
[info]                  ·gc.alloc.rate.norm:              98448.018 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.221 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116416.270 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson":
[info]   22622.265 ±(99.9%) 689.065 ops/s [Average]
[info]   (min, avg, max) = (22341.260, 22622.265, 22748.202), stdev = 178.948
[info]   CI (99.9%): [21933.200, 23311.330] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1414.687 ±(99.9%) 43.431 MB/sec [Average]
[info]   (min, avg, max) = (1397.100, 1414.687, 1422.686), stdev = 11.279
[info]   CI (99.9%): [1371.257, 1458.118] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   98448.020 ±(99.9%) 0.008 B/op [Average]
[info]   (min, avg, max) = (98448.018, 98448.020, 98448.023), stdev = 0.002
[info]   CI (99.9%): [98448.012, 98448.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.184 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.071, 0.125), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   4.914 ±(99.9%) 12.761 B/op [Average]
[info]   (min, avg, max) = (1.440, 4.914, 8.647), stdev = 3.314
[info]   CI (99.9%): [≈ 0, 17.675] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1461.211 ±(99.9%) 696.008 MB/sec [Average]
[info]   (min, avg, max) = (1320.556, 1461.211, 1682.221), stdev = 180.751
[info]   CI (99.9%): [765.203, 2157.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   101678.637 ±(99.9%) 48005.405 B/op [Average]
[info]   (min, avg, max) = (91455.234, 101678.637, 116416.270), stdev = 12466.851
[info]   CI (99.9%): [53673.232, 149684.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 6.000), stdev = 0.837
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce
[info] # Run progress: 50.50% complete, ETA 00:32:05
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 63033.218 ops/s
[info] # Warmup Iteration   2: 82419.487 ops/s
[info] # Warmup Iteration   3: 83148.772 ops/s
[info] Iteration   1: 82623.470 ops/s
[info]                  ·gc.alloc.rate:                   1274.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1307.148 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24906.582 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 82740.544 ops/s
[info]                  ·gc.alloc.rate:                   1276.419 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.771 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25009.533 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 83043.018 ops/s
[info]                  ·gc.alloc.rate:                   1280.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.789 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.811 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18803.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 82855.397 ops/s
[info]                  ·gc.alloc.rate:                   1277.904 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.791 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25268.264 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 81701.893 ops/s
[info]                  ·gc.alloc.rate:                   1260.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              24280.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.604 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.186 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25764.358 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce":
[info]   82592.864 ±(99.9%) 2008.378 ops/s [Average]
[info]   (min, avg, max) = (81701.893, 82592.864, 83043.018), stdev = 521.569
[info]   CI (99.9%): [80584.486, 84601.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1273.888 ±(99.9%) 30.925 MB/sec [Average]
[info]   (min, avg, max) = (1260.148, 1273.888, 1280.708), stdev = 8.031
[info]   CI (99.9%): [1242.964, 1304.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   24280.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24280.005, 24280.005, 24280.005), stdev = 0.001
[info]   CI (99.9%): [24280.004, 24280.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.350 ±(99.9%) 2.561 B/op [Average]
[info]   (min, avg, max) = (0.789, 1.350, 2.376), stdev = 0.665
[info]   CI (99.9%): [≈ 0, 3.911] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1256.167 ±(99.9%) 570.886 MB/sec [Average]
[info]   (min, avg, max) = (991.811, 1256.167, 1337.186), stdev = 148.257
[info]   CI (99.9%): [685.281, 1827.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   23950.351 ±(99.9%) 11153.380 B/op [Average]
[info]   (min, avg, max) = (18803.019, 23950.351, 25764.358), stdev = 2896.497
[info]   CI (99.9%): [12796.971, 35103.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala
[info] # Run progress: 50.83% complete, ETA 00:31:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 115024.121 ops/s
[info] # Warmup Iteration   2: 183805.170 ops/s
[info] # Warmup Iteration   3: 180376.009 ops/s
[info] Iteration   1: 182267.502 ops/s
[info]                  ·gc.alloc.rate:                   1186.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.539 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1304.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11268.455 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 184014.150 ops/s
[info]                  ·gc.alloc.rate:                   1198.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.712 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.770 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11269.558 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 182807.134 ops/s
[info]                  ·gc.alloc.rate:                   1189.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.358 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.521 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8564.661 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 183912.906 ops/s
[info]                  ·gc.alloc.rate:                   1197.427 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.713 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1334.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11417.516 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 181996.631 ops/s
[info]                  ·gc.alloc.rate:                   1184.625 MB/sec
[info]                  ·gc.alloc.rate.norm:              10248.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.180 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1005.490 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8698.338 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala":
[info]   182999.665 ±(99.9%) 3572.184 ops/s [Average]
[info]   (min, avg, max) = (181996.631, 182999.665, 184014.150), stdev = 927.685
[info]   CI (99.9%): [179427.480, 186571.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1191.336 ±(99.9%) 24.190 MB/sec [Average]
[info]   (min, avg, max) = (1184.625, 1191.336, 1198.318), stdev = 6.282
[info]   CI (99.9%): [1167.146, 1215.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   10248.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10248.002, 10248.002, 10248.002), stdev = 0.001
[info]   CI (99.9%): [10248.002, 10248.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.058, 0.083), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.500 ±(99.9%) 0.891 B/op [Average]
[info]   (min, avg, max) = (0.180, 0.500, 0.713), stdev = 0.231
[info]   CI (99.9%): [≈ 0, 1.391] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1191.262 ±(99.9%) 673.670 MB/sec [Average]
[info]   (min, avg, max) = (994.521, 1191.262, 1334.078), stdev = 174.950
[info]   CI (99.9%): [517.592, 1864.932] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   10243.706 ±(99.9%) 5674.857 B/op [Average]
[info]   (min, avg, max) = (8564.661, 10243.706, 11417.516), stdev = 1473.742
[info]   CI (99.9%): [4568.848, 15918.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala
[info] # Run progress: 51.16% complete, ETA 00:31:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 406355.336 ops/s
[info] # Warmup Iteration   2: 443529.447 ops/s
[info] # Warmup Iteration   3: 424144.720 ops/s
[info] Iteration   1: 419907.008 ops/s
[info]                  ·gc.alloc.rate:                   465.211 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.716 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.932 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2188.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 388759.138 ops/s
[info]                  ·gc.alloc.rate:                   430.656 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1328.219 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 388777.142 ops/s
[info]                  ·gc.alloc.rate:                   430.572 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.253 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.223 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1321.341 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 426323.851 ops/s
[info]                  ·gc.alloc.rate:                   472.413 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.231 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.139 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2407.495 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 423563.052 ops/s
[info]                  ·gc.alloc.rate:                   469.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              1744.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1210.287 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala":
[info]   409466.038 ±(99.9%) 73282.005 ops/s [Average]
[info]   (min, avg, max) = (388759.138, 409466.038, 426323.851), stdev = 19031.104
[info]   CI (99.9%): [336184.033, 482748.043] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   453.628 ±(99.9%) 81.493 MB/sec [Average]
[info]   (min, avg, max) = (430.572, 453.628, 472.413), stdev = 21.163
[info]   CI (99.9%): [372.135, 535.121] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1744.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1744.001, 1744.001, 1744.001), stdev = 0.001
[info]   CI (99.9%): [1744.001, 1744.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.768 ±(99.9%) 6.347 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.768, 3.716), stdev = 1.648
[info]   CI (99.9%): [≈ 0, 7.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   2.883 ±(99.9%) 23.788 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2.883, 13.932), stdev = 6.178
[info]   CI (99.9%): [≈ 0, 26.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   443.152 ±(99.9%) 621.430 MB/sec [Average]
[info]   (min, avg, max) = (325.673, 443.152, 652.139), stdev = 161.383
[info]   CI (99.9%): [≈ 0, 1064.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1691.139 ±(99.9%) 2161.225 B/op [Average]
[info]   (min, avg, max) = (1210.287, 1691.139, 2407.495), stdev = 561.263
[info]   CI (99.9%): [≈ 0, 3852.364] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 51.49% complete, ETA 00:31:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 471620.815 ops/s
[info] # Warmup Iteration   2: 531953.572 ops/s
[info] # Warmup Iteration   3: 541561.327 ops/s
[info] Iteration   1: 542138.600 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 542512.306 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 536848.494 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 540585.067 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 540971.949 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc":
[info]   540611.283 ±(99.9%) 8660.939 ops/s [Average]
[info]   (min, avg, max) = (536848.494, 540611.283, 542512.306), stdev = 2249.218
[info]   CI (99.9%): [531950.344, 549272.223] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson
[info] # Run progress: 51.82% complete, ETA 00:31:14
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 80256.935 ops/s
[info] # Warmup Iteration   2: 110389.671 ops/s
[info] # Warmup Iteration   3: 111974.346 ops/s
[info] Iteration   1: 111914.321 ops/s
[info]                  ·gc.alloc.rate:                   1364.838 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1621.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 22814.272 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 110815.122 ops/s
[info]                  ·gc.alloc.rate:                   1351.897 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.774 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.907 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18561.044 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 110101.689 ops/s
[info]                  ·gc.alloc.rate:                   1342.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.165 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18833.559 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110192.263 ops/s
[info]                  ·gc.alloc.rate:                   1343.626 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.201 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18965.299 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 110797.080 ops/s
[info]                  ·gc.alloc.rate:                   1351.322 MB/sec
[info]                  ·gc.alloc.rate.norm:              19200.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.478 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18980.549 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson":
[info]   110764.095 ±(99.9%) 2785.060 ops/s [Average]
[info]   (min, avg, max) = (110101.689, 110764.095, 111914.321), stdev = 723.271
[info]   CI (99.9%): [107979.035, 113549.155] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1350.895 ±(99.9%) 34.121 MB/sec [Average]
[info]   (min, avg, max) = (1342.793, 1350.895, 1364.838), stdev = 8.861
[info]   CI (99.9%): [1316.774, 1385.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   19200.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (19200.004, 19200.004, 19200.004), stdev = 0.001
[info]   CI (99.9%): [19200.003, 19200.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.300 ±(99.9%) 1.714 B/op [Average]
[info]   (min, avg, max) = (0.595, 1.300, 1.774), stdev = 0.445
[info]   CI (99.9%): [≈ 0, 3.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1381.782 ±(99.9%) 518.256 MB/sec [Average]
[info]   (min, avg, max) = (1306.907, 1381.782, 1621.760), stdev = 134.589
[info]   CI (99.9%): [863.526, 1900.038] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   19630.945 ±(99.9%) 6882.908 B/op [Average]
[info]   (min, avg, max) = (18561.044, 19630.945, 22814.272), stdev = 1787.469
[info]   CI (99.9%): [12748.037, 26513.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfPeriodsBenchmark.writePlayJson:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 6.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce
[info] # Run progress: 52.15% complete, ETA 00:31:01
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 128783.878 ops/s
[info] # Warmup Iteration   2: 155278.424 ops/s
[info] # Warmup Iteration   3: 155876.319 ops/s
[info] Iteration   1: 156574.222 ops/s
[info]                  ·gc.alloc.rate:                   2635.293 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2669.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26840.568 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 157074.159 ops/s
[info]                  ·gc.alloc.rate:                   2643.674 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.834 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23614.953 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 155824.534 ops/s
[info]                  ·gc.alloc.rate:                   2623.412 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27340.935 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 154901.504 ops/s
[info]                  ·gc.alloc.rate:                   2606.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.058 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27586.447 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 156568.404 ops/s
[info]                  ·gc.alloc.rate:                   2635.213 MB/sec
[info]                  ·gc.alloc.rate.norm:              26496.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.674 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2717.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 27326.615 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce":
[info]   156188.565 ±(99.9%) 3259.617 ops/s [Average]
[info]   (min, avg, max) = (154901.504, 156188.565, 157074.159), stdev = 846.512
[info]   CI (99.9%): [152928.948, 159448.182] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate":
[info]   2628.896 ±(99.9%) 54.922 MB/sec [Average]
[info]   (min, avg, max) = (2606.886, 2628.896, 2643.674), stdev = 14.263
[info]   CI (99.9%): [2573.973, 2683.818] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   26496.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (26496.003, 26496.003, 26496.003), stdev = 0.001
[info]   CI (99.9%): [26496.002, 26496.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.121, 0.166), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.216 ±(99.9%) 1.319 B/op [Average]
[info]   (min, avg, max) = (0.834, 1.216, 1.674), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 2.535] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2632.969 ±(99.9%) 600.311 MB/sec [Average]
[info]   (min, avg, max) = (2356.214, 2632.969, 2717.823), stdev = 155.899
[info]   CI (99.9%): [2032.657, 3233.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   26541.904 ±(99.9%) 6386.016 B/op [Average]
[info]   (min, avg, max) = (23614.953, 26541.904, 27586.447), stdev = 1658.428
[info]   CI (99.9%): [20155.888, 32927.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readCirce:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala
[info] # Run progress: 52.48% complete, ETA 00:30:48
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 237232.843 ops/s
[info] # Warmup Iteration   2: 375667.300 ops/s
[info] # Warmup Iteration   3: 375051.840 ops/s
[info] Iteration   1: 375885.996 ops/s
[info]                  ·gc.alloc.rate:                   383.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.729 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1070.937 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 377034.749 ops/s
[info]                  ·gc.alloc.rate:                   385.095 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.619 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1351.301 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 375409.834 ops/s
[info]                  ·gc.alloc.rate:                   383.439 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.087 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.624 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1357.159 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 374707.943 ops/s
[info]                  ·gc.alloc.rate:                   382.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.262 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2736.197 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 372350.842 ops/s
[info]                  ·gc.alloc.rate:                   380.329 MB/sec
[info]                  ·gc.alloc.rate.norm:              1608.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1383.806 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala":
[info]   375077.873 ±(99.9%) 6715.530 ops/s [Average]
[info]   (min, avg, max) = (372350.842, 375077.873, 377034.749), stdev = 1744.002
[info]   CI (99.9%): [368362.343, 381793.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   383.106 ±(99.9%) 6.863 MB/sec [Average]
[info]   (min, avg, max) = (380.329, 383.106, 385.095), stdev = 1.782
[info]   CI (99.9%): [376.242, 389.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1608.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1608.001, 1608.001, 1608.001), stdev = 0.001
[info]   CI (99.9%): [1608.001, 1608.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.033 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.033, 0.083), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.179] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.139 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.139, 0.348), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 0.748] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   376.294 ±(99.9%) 602.890 MB/sec [Average]
[info]   (min, avg, max) = (255.729, 376.294, 651.194), stdev = 156.569
[info]   CI (99.9%): [≈ 0, 979.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1579.880 ±(99.9%) 2537.037 B/op [Average]
[info]   (min, avg, max) = (1070.937, 1579.880, 2736.197), stdev = 658.860
[info]   CI (99.9%): [≈ 0, 4116.917] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala
[info] # Run progress: 52.81% complete, ETA 00:30:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 838007.199 ops/s
[info] # Warmup Iteration   2: 907803.455 ops/s
[info] # Warmup Iteration   3: 913861.466 ops/s
[info] Iteration   1: 907779.893 ops/s
[info]                  ·gc.alloc.rate:                   313.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.017 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 886.982 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 915407.751 ops/s
[info]                  ·gc.alloc.rate:                   316.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 439.797 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 913326.048 ops/s
[info]                  ·gc.alloc.rate:                   315.600 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.274 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.643 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.294 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 567.605 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 911606.494 ops/s
[info]                  ·gc.alloc.rate:                   315.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 568.670 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 909986.362 ops/s
[info]                  ·gc.alloc.rate:                   314.554 MB/sec
[info]                  ·gc.alloc.rate.norm:              544.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.734 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 566.794 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala":
[info]   911621.310 ±(99.9%) 11337.028 ops/s [Average]
[info]   (min, avg, max) = (907779.893, 911621.310, 915407.751), stdev = 2944.190
[info]   CI (99.9%): [900284.282, 922958.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   315.028 ±(99.9%) 4.000 MB/sec [Average]
[info]   (min, avg, max) = (313.613, 315.028, 316.356), stdev = 1.039
[info]   CI (99.9%): [311.027, 319.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   544.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (544.000, 544.000, 544.000), stdev = 0.001
[info]   CI (99.9%): [544.000, 544.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.667 ±(99.9%) 5.613 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.667, 3.274), stdev = 1.458
[info]   CI (99.9%): [≈ 0, 6.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.149 ±(99.9%) 9.674 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.149, 5.643), stdev = 2.512
[info]   CI (99.9%): [≈ 0, 10.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.685 ±(99.9%) 366.635 MB/sec [Average]
[info]   (min, avg, max) = (255.758, 350.685, 511.340), stdev = 95.214
[info]   CI (99.9%): [≈ 0, 717.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   605.970 ±(99.9%) 641.393 B/op [Average]
[info]   (min, avg, max) = (439.797, 605.970, 886.982), stdev = 166.568
[info]   CI (99.9%): [≈ 0, 1247.363] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson
[info] # Run progress: 53.14% complete, ETA 00:30:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 44655.175 ops/s
[info] # Warmup Iteration   2: 75915.495 ops/s
[info] # Warmup Iteration   3: 76352.863 ops/s
[info] Iteration   1: 76744.655 ops/s
[info]                  ·gc.alloc.rate:                   3290.934 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3366.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69057.697 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 77002.646 ops/s
[info]                  ·gc.alloc.rate:                   3302.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3388.195 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 69266.521 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 75495.574 ops/s
[info]                  ·gc.alloc.rate:                   3238.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.339 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3397.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70819.705 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 76403.022 ops/s
[info]                  ·gc.alloc.rate:                   3275.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3061.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63092.668 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 75464.712 ops/s
[info]                  ·gc.alloc.rate:                   3236.177 MB/sec
[info]                  ·gc.alloc.rate.norm:              67512.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.271 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.644 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.829 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 70988.651 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson":
[info]   76222.122 ±(99.9%) 2734.042 ops/s [Average]
[info]   (min, avg, max) = (75464.712, 76222.122, 77002.646), stdev = 710.022
[info]   CI (99.9%): [73488.080, 78956.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3268.780 ±(99.9%) 116.196 MB/sec [Average]
[info]   (min, avg, max) = (3236.177, 3268.780, 3302.372), stdev = 30.176
[info]   CI (99.9%): [3152.584, 3384.976] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   67512.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (67512.005, 67512.005, 67512.006), stdev = 0.001
[info]   CI (99.9%): [67512.005, 67512.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.187 ±(99.9%) 0.266 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.187, 0.271), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.453] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.876 ±(99.9%) 5.592 B/op [Average]
[info]   (min, avg, max) = (1.707, 3.876, 5.644), stdev = 1.452
[info]   CI (99.9%): [≈ 0, 9.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3323.192 ±(99.9%) 566.117 MB/sec [Average]
[info]   (min, avg, max) = (3061.380, 3323.192, 3402.829), stdev = 147.019
[info]   CI (99.9%): [2757.075, 3889.309] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   68645.049 ±(99.9%) 12419.004 B/op [Average]
[info]   (min, avg, max) = (63092.668, 68645.049, 70988.651), stdev = 3225.176
[info]   CI (99.9%): [56226.045, 81064.052] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.count":
[info]   49.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.800, 10.000), stdev = 0.447
[info]   CI (99.9%): [49.000, 49.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.readPlayJson:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce
[info] # Run progress: 53.47% complete, ETA 00:30:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 193147.657 ops/s
[info] # Warmup Iteration   2: 249736.197 ops/s
[info] # Warmup Iteration   3: 250633.387 ops/s
[info] Iteration   1: 249551.032 ops/s
[info]                  ·gc.alloc.rate:                   1702.930 MB/sec
[info]                  ·gc.alloc.rate.norm:              10744.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.919 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.657 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10357.421 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 250892.295 ops/s
[info]                  ·gc.alloc.rate:                   1712.001 MB/sec
[info]                  ·gc.alloc.rate.norm:              10744.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.784 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.997 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10386.264 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 251628.918 ops/s
[info]                  ·gc.alloc.rate:                   1717.361 MB/sec
[info]                  ·gc.alloc.rate.norm:              10744.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10438.971 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 250574.507 ops/s
[info]                  ·gc.alloc.rate:                   1710.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              10744.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.392 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.547 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10545.001 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 250846.523 ops/s
[info]                  ·gc.alloc.rate:                   1711.825 MB/sec
[info]                  ·gc.alloc.rate.norm:              10744.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10582.094 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce":
[info]   250698.655 ±(99.9%) 2892.600 ops/s [Average]
[info]   (min, avg, max) = (249551.032, 250698.655, 251628.918), stdev = 751.199
[info]   CI (99.9%): [247806.055, 253591.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1710.868 ±(99.9%) 19.988 MB/sec [Average]
[info]   (min, avg, max) = (1702.930, 1710.868, 1717.361), stdev = 5.191
[info]   CI (99.9%): [1690.880, 1730.857] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10744.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10744.002, 10744.002, 10744.002), stdev = 0.001
[info]   CI (99.9%): [10744.001, 10744.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.146), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.258] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.575 ±(99.9%) 1.049 B/op [Average]
[info]   (min, avg, max) = (0.261, 0.575, 0.919), stdev = 0.272
[info]   CI (99.9%): [≈ 0, 1.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1665.967 ±(99.9%) 68.856 MB/sec [Average]
[info]   (min, avg, max) = (1641.657, 1665.967, 1686.029), stdev = 17.882
[info]   CI (99.9%): [1597.111, 1734.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10461.950 ±(99.9%) 377.847 B/op [Average]
[info]   (min, avg, max) = (10357.421, 10461.950, 10582.094), stdev = 98.126
[info]   CI (99.9%): [10084.103, 10839.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala
[info] # Run progress: 53.80% complete, ETA 00:29:57
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 646073.252 ops/s
[info] # Warmup Iteration   2: 1022111.471 ops/s
[info] # Warmup Iteration   3: 1030588.791 ops/s
[info] Iteration   1: 1032322.130 ops/s
[info]                  ·gc.alloc.rate:                   676.815 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.127 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      643.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 980.986 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1033224.327 ops/s
[info]                  ·gc.alloc.rate:                   677.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.453 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 986.311 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1031237.374 ops/s
[info]                  ·gc.alloc.rate:                   675.861 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.095 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.390 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1490.891 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1036846.606 ops/s
[info]                  ·gc.alloc.rate:                   679.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 994.948 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1027141.921 ops/s
[info]                  ·gc.alloc.rate:                   673.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              1032.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.096 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.614 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1009.455 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala":
[info]   1032154.472 ±(99.9%) 13498.630 ops/s [Average]
[info]   (min, avg, max) = (1027141.921, 1032154.472, 1036846.606), stdev = 3505.551
[info]   CI (99.9%): [1018655.842, 1045653.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   676.638 ±(99.9%) 9.016 MB/sec [Average]
[info]   (min, avg, max) = (673.323, 676.638, 679.745), stdev = 2.342
[info]   CI (99.9%): [667.622, 685.654] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1032.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1032.000, 1032.000, 1032.000), stdev = 0.001
[info]   CI (99.9%): [1032.000, 1032.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.095 ±(99.9%) 0.228 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.095, 0.159), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.324] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   716.231 ±(99.9%) 560.500 MB/sec [Average]
[info]   (min, avg, max) = (643.359, 716.231, 976.390), stdev = 145.560
[info]   CI (99.9%): [155.731, 1276.731] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1092.518 ±(99.9%) 858.530 B/op [Average]
[info]   (min, avg, max) = (980.986, 1092.518, 1490.891), stdev = 222.957
[info]   CI (99.9%): [233.989, 1951.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJacksonScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala
[info] # Run progress: 54.13% complete, ETA 00:29:44
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1108761.827 ops/s
[info] # Warmup Iteration   2: 1188997.500 ops/s
[info] # Warmup Iteration   3: 1204338.852 ops/s
[info] Iteration   1: 1219335.908 ops/s
[info]                  ·gc.alloc.rate:                   501.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.687 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 753.562 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 1239589.489 ops/s
[info]                  ·gc.alloc.rate:                   510.210 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.972 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 416.546 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 1229224.461 ops/s
[info]                  ·gc.alloc.rate:                   505.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 835.782 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1223117.256 ops/s
[info]                  ·gc.alloc.rate:                   503.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.080 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 838.256 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1230173.882 ops/s
[info]                  ·gc.alloc.rate:                   506.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.964 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 417.149 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         ≈ 0 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala":
[info]   1228288.199 ±(99.9%) 29766.854 ops/s [Average]
[info]   (min, avg, max) = (1219335.908, 1228288.199, 1239589.489), stdev = 7730.357
[info]   CI (99.9%): [1198521.345, 1258055.053] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   505.570 ±(99.9%) 12.231 MB/sec [Average]
[info]   (min, avg, max) = (501.870, 505.570, 510.210), stdev = 3.176
[info]   CI (99.9%): [493.340, 517.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.297 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.687), stdev = 1.635
[info]   CI (99.9%): [≈ 0, 7.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.984 ±(99.9%) 8.131 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.984, 4.761), stdev = 2.112
[info]   CI (99.9%): [≈ 0, 9.115] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   508.284 ±(99.9%) 646.340 MB/sec [Average]
[info]   (min, avg, max) = (325.964, 508.284, 652.557), stdev = 167.852
[info]   CI (99.9%): [≈ 0, 1154.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   652.259 ±(99.9%) 837.848 B/op [Average]
[info]   (min, avg, max) = (416.546, 652.259, 838.256), stdev = 217.586
[info]   CI (99.9%): [≈ 0, 1490.107] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 2.400, 5.000), stdev = 1.949
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 54.46% complete, ETA 00:29:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1213920.176 ops/s
[info] # Warmup Iteration   2: 1369957.002 ops/s
[info] # Warmup Iteration   3: 1373338.605 ops/s
[info] Iteration   1: 1371949.848 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1377979.807 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1377309.177 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1373310.058 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1373301.260 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc":
[info]   1374770.030 ±(99.9%) 10366.775 ops/s [Average]
[info]   (min, avg, max) = (1371949.848, 1374770.030, 1377979.807), stdev = 2692.219
[info]   CI (99.9%): [1364403.255, 1385136.805] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson
[info] # Run progress: 54.79% complete, ETA 00:29:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 27244.035 ops/s
[info] # Warmup Iteration   2: 40899.160 ops/s
[info] # Warmup Iteration   3: 41216.212 ops/s
[info] Iteration   1: 40802.863 ops/s
[info]                  ·gc.alloc.rate:                   1995.709 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1967.825 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75924.189 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 41815.182 ops/s
[info]                  ·gc.alloc.rate:                   2045.184 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.168 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74966.339 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 41742.329 ops/s
[info]                  ·gc.alloc.rate:                   2041.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.452 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 75748.628 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 41720.936 ops/s
[info]                  ·gc.alloc.rate:                   2040.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.356 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2020.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76262.357 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 41708.265 ops/s
[info]                  ·gc.alloc.rate:                   2040.171 MB/sec
[info]                  ·gc.alloc.rate.norm:              77000.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.499 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2028.631 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 76564.448 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson":
[info]   41557.915 ±(99.9%) 1633.099 ops/s [Average]
[info]   (min, avg, max) = (40802.863, 41557.915, 41815.182), stdev = 424.111
[info]   CI (99.9%): [39924.816, 43191.014] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2032.634 ±(99.9%) 79.854 MB/sec [Average]
[info]   (min, avg, max) = (1995.709, 2032.634, 2045.184), stdev = 20.738
[info]   CI (99.9%): [1952.780, 2112.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   77000.011 ±(99.9%) 0.013 B/op [Average]
[info]   (min, avg, max) = (77000.010, 77000.011, 77000.017), stdev = 0.003
[info]   CI (99.9%): [76999.999, 77000.024] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.146), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.628 ±(99.9%) 4.617 B/op [Average]
[info]   (min, avg, max) = (2.356, 3.628, 5.499), stdev = 1.199
[info]   CI (99.9%): [≈ 0, 8.245] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2003.400 ±(99.9%) 94.016 MB/sec [Average]
[info]   (min, avg, max) = (1967.825, 2003.400, 2028.631), stdev = 24.416
[info]   CI (99.9%): [1909.385, 2097.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   75893.192 ±(99.9%) 2332.568 B/op [Average]
[info]   (min, avg, max) = (74966.339, 75893.192, 76564.448), stdev = 605.760
[info]   CI (99.9%): [73560.625, 78225.760] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfShortsBenchmark.writePlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce
[info] # Run progress: 55.12% complete, ETA 00:29:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 32391.114 ops/s
[info] # Warmup Iteration   2: 40050.605 ops/s
[info] # Warmup Iteration   3: 40669.653 ops/s
[info] Iteration   1: 40706.914 ops/s
[info]                  ·gc.alloc.rate:                   812.464 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.610 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.834 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25288.610 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41125.512 ops/s
[info]                  ·gc.alloc.rate:                   820.819 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 37487.382 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 40942.672 ops/s
[info]                  ·gc.alloc.rate:                   817.187 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.400 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25143.497 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 39863.417 ops/s
[info]                  ·gc.alloc.rate:                   795.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.465 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 38828.843 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 40975.093 ops/s
[info]                  ·gc.alloc.rate:                   817.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              31424.010 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.797 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25302.956 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce":
[info]   40722.721 ±(99.9%) 1937.762 ops/s [Average]
[info]   (min, avg, max) = (39863.417, 40722.721, 41125.512), stdev = 503.231
[info]   CI (99.9%): [38784.959, 42660.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate":
[info]   812.822 ±(99.9%) 38.632 MB/sec [Average]
[info]   (min, avg, max) = (795.698, 812.822, 820.819), stdev = 10.033
[info]   CI (99.9%): [774.190, 851.455] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31424.010 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31424.010, 31424.010, 31424.011), stdev = 0.001
[info]   CI (99.9%): [31424.009, 31424.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.892 ±(99.9%) 4.631 B/op [Average]
[info]   (min, avg, max) = (1.610, 2.892, 4.797), stdev = 1.203
[info]   CI (99.9%): [≈ 0, 7.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   785.742 ±(99.9%) 687.119 MB/sec [Average]
[info]   (min, avg, max) = (653.834, 785.742, 983.198), stdev = 178.443
[info]   CI (99.9%): [98.623, 1472.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   30410.258 ±(99.9%) 27297.022 B/op [Average]
[info]   (min, avg, max) = (25143.497, 30410.258, 38828.843), stdev = 7088.950
[info]   CI (99.9%): [3113.236, 57707.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readCirce:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala
[info] # Run progress: 55.45% complete, ETA 00:28:53
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 54309.270 ops/s
[info] # Warmup Iteration   2: 83479.872 ops/s
[info] # Warmup Iteration   3: 85579.797 ops/s
[info] Iteration   1: 85789.915 ops/s
[info]                  ·gc.alloc.rate:                   902.393 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.909 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17988.507 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 86096.506 ops/s
[info]                  ·gc.alloc.rate:                   905.607 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12019.005 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 86169.052 ops/s
[info]                  ·gc.alloc.rate:                   906.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.521 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.233 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18110.152 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 83427.234 ops/s
[info]                  ·gc.alloc.rate:                   877.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.571 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      996.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18805.354 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 84262.263 ops/s
[info]                  ·gc.alloc.rate:                   886.360 MB/sec
[info]                  ·gc.alloc.rate.norm:              16560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      667.256 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12466.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala":
[info]   85148.994 ±(99.9%) 4755.126 ops/s [Average]
[info]   (min, avg, max) = (83427.234, 85148.994, 86169.052), stdev = 1234.891
[info]   CI (99.9%): [80393.868, 89904.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   895.659 ±(99.9%) 49.980 MB/sec [Average]
[info]   (min, avg, max) = (877.548, 895.659, 906.388), stdev = 12.980
[info]   CI (99.9%): [845.679, 945.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   16560.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16560.005, 16560.005, 16560.005), stdev = 0.001
[info]   CI (99.9%): [16560.004, 16560.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.017
[info]   CI (99.9%): [0.012, 0.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.462 ±(99.9%) 1.226 B/op [Average]
[info]   (min, avg, max) = (1.142, 1.462, 1.909), stdev = 0.318
[info]   CI (99.9%): [0.236, 2.688] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   858.507 ±(99.9%) 690.320 MB/sec [Average]
[info]   (min, avg, max) = (657.276, 858.507, 996.534), stdev = 179.274
[info]   CI (99.9%): [168.187, 1548.826] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   15877.896 ±(99.9%) 12848.781 B/op [Average]
[info]   (min, avg, max) = (12019.005, 15877.896, 18805.354), stdev = 3336.787
[info]   CI (99.9%): [3029.115, 28726.676] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala
[info] # Run progress: 55.78% complete, ETA 00:28:40
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 226139.694 ops/s
[info] # Warmup Iteration   2: 238980.335 ops/s
[info] # Warmup Iteration   3: 241945.012 ops/s
[info] Iteration   1: 242275.025 ops/s
[info]                  ·gc.alloc.rate:                   788.172 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.454 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4257.860 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 244257.945 ops/s
[info]                  ·gc.alloc.rate:                   794.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      982.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6335.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 244954.726 ops/s
[info]                  ·gc.alloc.rate:                   796.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4215.463 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 242820.068 ops/s
[info]                  ·gc.alloc.rate:                   789.767 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.540 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6394.019 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 244572.211 ops/s
[info]                  ·gc.alloc.rate:                   795.437 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4247.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala":
[info]   243775.995 ±(99.9%) 4483.293 ops/s [Average]
[info]   (min, avg, max) = (242275.025, 243775.995, 244954.726), stdev = 1164.297
[info]   CI (99.9%): [239292.701, 248259.288] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   792.846 ±(99.9%) 14.131 MB/sec [Average]
[info]   (min, avg, max) = (788.172, 792.846, 796.547), stdev = 3.670
[info]   CI (99.9%): [778.715, 806.977] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   5120.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.002, 5120.002, 5120.002), stdev = 0.001
[info]   CI (99.9%): [5120.001, 5120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.057 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.015
[info]   CI (99.9%): [0.006, 0.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.403 ±(99.9%) 0.370 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.403, 0.540), stdev = 0.096
[info]   CI (99.9%): [0.034, 0.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   788.071 ±(99.9%) 690.764 MB/sec [Average]
[info]   (min, avg, max) = (655.454, 788.071, 986.286), stdev = 179.389
[info]   CI (99.9%): [97.306, 1478.835] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5090.106 ±(99.9%) 4481.423 B/op [Average]
[info]   (min, avg, max) = (4215.463, 5090.106, 6394.019), stdev = 1163.811
[info]   CI (99.9%): [608.684, 9571.529] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson
[info] # Run progress: 56.11% complete, ETA 00:28:27
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13099.566 ops/s
[info] # Warmup Iteration   2: 23891.712 ops/s
[info] # Warmup Iteration   3: 23998.873 ops/s
[info] Iteration   1: 23930.188 ops/s
[info]                  ·gc.alloc.rate:                   1092.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.279 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.476 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 85775.059 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 23778.641 ops/s
[info]                  ·gc.alloc.rate:                   1085.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.645 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.288 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65230.130 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 23609.436 ops/s
[info]                  ·gc.alloc.rate:                   1078.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.019 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.542 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66049.409 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 23441.975 ops/s
[info]                  ·gc.alloc.rate:                   1070.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.416 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 89352.789 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 23881.205 ops/s
[info]                  ·gc.alloc.rate:                   1090.940 MB/sec
[info]                  ·gc.alloc.rate.norm:              71896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.744 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.177 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66112.177 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson":
[info]   23728.289 ±(99.9%) 776.799 ops/s [Average]
[info]   (min, avg, max) = (23441.975, 23728.289, 23930.188), stdev = 201.732
[info]   CI (99.9%): [22951.490, 24505.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1083.692 ±(99.9%) 35.776 MB/sec [Average]
[info]   (min, avg, max) = (1070.494, 1083.692, 1092.827), stdev = 9.291
[info]   CI (99.9%): [1047.916, 1119.468] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   71896.071 ±(99.9%) 0.449 B/op [Average]
[info]   (min, avg, max) = (71896.017, 71896.071, 71896.279), stdev = 0.116
[info]   CI (99.9%): [71895.622, 71896.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   5.244 ±(99.9%) 10.178 B/op [Average]
[info]   (min, avg, max) = (2.744, 5.244, 9.645), stdev = 2.643
[info]   CI (99.9%): [≈ 0, 15.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1122.642 ±(99.9%) 684.969 MB/sec [Average]
[info]   (min, avg, max) = (985.288, 1122.642, 1330.416), stdev = 177.884
[info]   CI (99.9%): [437.673, 1807.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   74503.913 ±(99.9%) 46184.889 B/op [Average]
[info]   (min, avg, max) = (65230.130, 74503.913, 89352.789), stdev = 11994.069
[info]   CI (99.9%): [28319.024, 120688.802] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.readPlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 4.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce
[info] # Run progress: 56.44% complete, ETA 00:28:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 40596.879 ops/s
[info] # Warmup Iteration   2: 51644.376 ops/s
[info] # Warmup Iteration   3: 52220.659 ops/s
[info] Iteration   1: 52100.470 ops/s
[info]                  ·gc.alloc.rate:                   1103.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39337.680 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 52380.795 ops/s
[info]                  ·gc.alloc.rate:                   1110.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.502 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29452.920 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 51570.658 ops/s
[info]                  ·gc.alloc.rate:                   1092.770 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.009 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 40119.518 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 52057.072 ops/s
[info]                  ·gc.alloc.rate:                   1103.123 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.517 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29966.219 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 52473.545 ops/s
[info]                  ·gc.alloc.rate:                   1112.099 MB/sec
[info]                  ·gc.alloc.rate.norm:              33360.008 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.873 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.076 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29909.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce":
[info]   52116.508 ±(99.9%) 1360.136 ops/s [Average]
[info]   (min, avg, max) = (51570.658, 52116.508, 52473.545), stdev = 353.223
[info]   CI (99.9%): [50756.372, 53476.644] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1104.403 ±(99.9%) 29.128 MB/sec [Average]
[info]   (min, avg, max) = (1092.770, 1104.403, 1112.099), stdev = 7.564
[info]   CI (99.9%): [1075.275, 1133.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   33360.008 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (33360.008, 33360.008, 33360.009), stdev = 0.001
[info]   CI (99.9%): [33360.007, 33360.010] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.067, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.134] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   2.011 ±(99.9%) 2.015 B/op [Average]
[info]   (min, avg, max) = (1.258, 2.011, 2.517), stdev = 0.523
[info]   CI (99.9%): [≈ 0, 4.026] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1116.797 ±(99.9%) 672.588 MB/sec [Average]
[info]   (min, avg, max) = (980.088, 1116.797, 1314.191), stdev = 174.669
[info]   CI (99.9%): [444.209, 1789.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   33757.198 ±(99.9%) 21031.254 B/op [Average]
[info]   (min, avg, max) = (29452.920, 33757.198, 40119.518), stdev = 5461.750
[info]   CI (99.9%): [12725.943, 54788.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala
[info] # Run progress: 56.77% complete, ETA 00:28:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53679.161 ops/s
[info] # Warmup Iteration   2: 86135.279 ops/s
[info] # Warmup Iteration   3: 86209.147 ops/s
[info] Iteration   1: 86267.484 ops/s
[info]                  ·gc.alloc.rate:                   1181.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.139 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 23988.423 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 86052.174 ops/s
[info]                  ·gc.alloc.rate:                   1178.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.904 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.646 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18159.349 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 86611.517 ops/s
[info]                  ·gc.alloc.rate:                   1186.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              21559.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24207.311 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 86724.953 ops/s
[info]                  ·gc.alloc.rate:                   1187.545 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1003.722 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18222.702 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86614.110 ops/s
[info]                  ·gc.alloc.rate:                   1186.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              21560.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.891 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24427.151 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala":
[info]   86454.048 ±(99.9%) 1089.321 ops/s [Average]
[info]   (min, avg, max) = (86052.174, 86454.048, 86724.953), stdev = 282.893
[info]   CI (99.9%): [85364.726, 87543.369] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1183.901 ±(99.9%) 14.815 MB/sec [Average]
[info]   (min, avg, max) = (1178.536, 1183.901, 1187.545), stdev = 3.847
[info]   CI (99.9%): [1169.086, 1198.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   21560.009 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (21559.982, 21560.009, 21560.028), stdev = 0.019
[info]   CI (99.9%): [21559.935, 21560.083] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.079, 0.104), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.440 ±(99.9%) 1.607 B/op [Average]
[info]   (min, avg, max) = (1.133, 1.440, 1.904), stdev = 0.417
[info]   CI (99.9%): [≈ 0, 3.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1197.242 ±(99.9%) 701.055 MB/sec [Average]
[info]   (min, avg, max) = (992.646, 1197.242, 1343.887), stdev = 182.062
[info]   CI (99.9%): [496.186, 1898.297] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21800.987 ±(99.9%) 12703.866 B/op [Average]
[info]   (min, avg, max) = (18159.349, 21800.987, 24427.151), stdev = 3299.154
[info]   CI (99.9%): [9097.122, 34504.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala
[info] # Run progress: 57.10% complete, ETA 00:27:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 224096.667 ops/s
[info] # Warmup Iteration   2: 247115.436 ops/s
[info] # Warmup Iteration   3: 245924.468 ops/s
[info] Iteration   1: 246510.025 ops/s
[info]                  ·gc.alloc.rate:                   785.362 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.532 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.528 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4167.614 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 245104.661 ops/s
[info]                  ·gc.alloc.rate:                   780.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.535 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6277.118 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 244629.329 ops/s
[info]                  ·gc.alloc.rate:                   779.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4199.686 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 244572.934 ops/s
[info]                  ·gc.alloc.rate:                   779.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.536 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.353 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6316.258 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 247333.629 ops/s
[info]                  ·gc.alloc.rate:                   788.082 MB/sec
[info]                  ·gc.alloc.rate.norm:              5016.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.530 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4183.707 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala":
[info]   245630.116 ±(99.9%) 4744.075 ops/s [Average]
[info]   (min, avg, max) = (244572.934, 245630.116, 247333.629), stdev = 1232.021
[info]   CI (99.9%): [240886.040, 250374.191] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   782.580 ±(99.9%) 15.201 MB/sec [Average]
[info]   (min, avg, max) = (779.320, 782.580, 788.082), stdev = 3.948
[info]   CI (99.9%): [767.379, 797.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5016.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5016.002, 5016.002, 5016.002), stdev = 0.001
[info]   CI (99.9%): [5016.001, 5016.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.083), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.480 ±(99.9%) 0.457 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.480, 0.536), stdev = 0.119
[info]   CI (99.9%): [0.023, 0.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   784.161 ±(99.9%) 685.773 MB/sec [Average]
[info]   (min, avg, max) = (652.491, 784.161, 981.353), stdev = 178.093
[info]   CI (99.9%): [98.388, 1469.933] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5028.877 ±(99.9%) 4457.068 B/op [Average]
[info]   (min, avg, max) = (4167.614, 5028.877, 6316.258), stdev = 1157.486
[info]   CI (99.9%): [571.809, 9485.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 57.43% complete, ETA 00:27:36
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 247043.076 ops/s
[info] # Warmup Iteration   2: 267915.235 ops/s
[info] # Warmup Iteration   3: 274696.876 ops/s
[info] Iteration   1: 275020.111 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 274716.877 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 274263.806 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 273845.597 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 274070.736 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc":
[info]   274383.426 ±(99.9%) 1844.596 ops/s [Average]
[info]   (min, avg, max) = (273845.597, 274383.426, 275020.111), stdev = 479.036
[info]   CI (99.9%): [272538.829, 276228.022] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson
[info] # Run progress: 57.76% complete, ETA 00:27:23
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 52478.199 ops/s
[info] # Warmup Iteration   2: 71166.983 ops/s
[info] # Warmup Iteration   3: 71063.591 ops/s
[info] Iteration   1: 72751.366 ops/s
[info]                  ·gc.alloc.rate:                   1078.697 MB/sec
[info]                  ·gc.alloc.rate.norm:              23343.979 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.535 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 20981.607 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 72563.578 ops/s
[info]                  ·gc.alloc.rate:                   1075.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.806 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1298.235 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28167.097 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 72220.558 ops/s
[info]                  ·gc.alloc.rate:                   1070.845 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.907 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21331.816 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 72531.590 ops/s
[info]                  ·gc.alloc.rate:                   1075.490 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.903 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21384.909 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 72523.031 ops/s
[info]                  ·gc.alloc.rate:                   1075.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              23344.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.355 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21503.209 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson":
[info]   72518.025 ±(99.9%) 733.692 ops/s [Average]
[info]   (min, avg, max) = (72220.558, 72518.025, 72751.366), stdev = 190.538
[info]   CI (99.9%): [71784.332, 73251.717] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1075.269 ±(99.9%) 10.863 MB/sec [Average]
[info]   (min, avg, max) = (1070.845, 1075.269, 1078.697), stdev = 2.821
[info]   CI (99.9%): [1064.406, 1086.132] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   23344.006 ±(99.9%) 0.074 B/op [Average]
[info]   (min, avg, max) = (23343.979, 23344.006, 23344.033), stdev = 0.019
[info]   CI (99.9%): [23343.931, 23344.080] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.058, 0.083), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.125] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   1.265 ±(99.9%) 1.450 B/op [Average]
[info]   (min, avg, max) = (0.903, 1.265, 1.806), stdev = 0.376
[info]   CI (99.9%): [≈ 0, 2.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1044.424 ±(99.9%) 547.186 MB/sec [Average]
[info]   (min, avg, max) = (969.535, 1044.424, 1298.235), stdev = 142.103
[info]   CI (99.9%): [497.238, 1591.610] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   22673.728 ±(99.9%) 11848.519 B/op [Average]
[info]   (min, avg, max) = (20981.607, 22673.728, 28167.097), stdev = 3077.023
[info]   CI (99.9%): [10825.209, 34522.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfUUIDsBenchmark.writePlayJson:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce
[info] # Run progress: 58.09% complete, ETA 00:27:10
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51107.296 ops/s
[info] # Warmup Iteration   2: 71911.063 ops/s
[info] # Warmup Iteration   3: 73040.750 ops/s
[info] Iteration   1: 73216.391 ops/s
[info]                  ·gc.alloc.rate:                   1470.711 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1625.153 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34944.897 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 73457.466 ops/s
[info]                  ·gc.alloc.rate:                   1475.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28102.659 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 73074.224 ops/s
[info]                  ·gc.alloc.rate:                   1467.771 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.793 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.736 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35587.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 73383.794 ops/s
[info]                  ·gc.alloc.rate:                   1474.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.893 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1332.000 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28573.110 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 71922.186 ops/s
[info]                  ·gc.alloc.rate:                   1444.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              31624.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.367 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.664 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29321.062 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce":
[info]   73010.812 ±(99.9%) 2412.425 ops/s [Average]
[info]   (min, avg, max) = (71922.186, 73010.812, 73457.466), stdev = 626.499
[info]   CI (99.9%): [70598.387, 75423.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate":
[info]   1466.583 ±(99.9%) 48.098 MB/sec [Average]
[info]   (min, avg, max) = (1444.884, 1466.583, 1475.324), stdev = 12.491
[info]   CI (99.9%): [1418.485, 1514.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   31624.006 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (31624.006, 31624.006, 31624.006), stdev = 0.001
[info]   CI (99.9%): [31624.005, 31624.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   1.882 ±(99.9%) 3.288 B/op [Average]
[info]   (min, avg, max) = (0.893, 1.882, 3.122), stdev = 0.854
[info]   CI (99.9%): [≈ 0, 5.170] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1451.920 ±(99.9%) 657.896 MB/sec [Average]
[info]   (min, avg, max) = (1311.046, 1451.920, 1651.736), stdev = 170.854
[info]   CI (99.9%): [794.024, 2109.816] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   31305.871 ±(99.9%) 14048.775 B/op [Average]
[info]   (min, avg, max) = (28102.659, 31305.871, 35587.625), stdev = 3648.422
[info]   CI (99.9%): [17257.095, 45354.646] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readCirce:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala
[info] # Run progress: 58.42% complete, ETA 00:26:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 51034.559 ops/s
[info] # Warmup Iteration   2: 86425.429 ops/s
[info] # Warmup Iteration   3: 86495.964 ops/s
[info] Iteration   1: 86211.724 ops/s
[info]                  ·gc.alloc.rate:                   973.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.026 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11928.625 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85420.868 ops/s
[info]                  ·gc.alloc.rate:                   964.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18158.462 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 85841.104 ops/s
[info]                  ·gc.alloc.rate:                   969.207 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18166.280 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 85545.958 ops/s
[info]                  ·gc.alloc.rate:                   966.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.502 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18351.459 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 86657.742 ops/s
[info]                  ·gc.alloc.rate:                   978.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              17776.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.227 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18188.399 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala":
[info]   85935.479 ±(99.9%) 1947.749 ops/s [Average]
[info]   (min, avg, max) = (85420.868, 85935.479, 86657.742), stdev = 505.824
[info]   CI (99.9%): [83987.730, 87883.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   970.369 ±(99.9%) 21.465 MB/sec [Average]
[info]   (min, avg, max) = (964.750, 970.369, 978.526), stdev = 5.574
[info]   CI (99.9%): [948.903, 991.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   17776.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (17776.005, 17776.005, 17776.005), stdev = 0.001
[info]   CI (99.9%): [17776.004, 17776.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.686 ±(99.9%) 3.011 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.686, 1.908), stdev = 0.782
[info]   CI (99.9%): [≈ 0, 3.698] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   925.550 ±(99.9%) 587.097 MB/sec [Average]
[info]   (min, avg, max) = (653.026, 925.550, 1001.227), stdev = 152.467
[info]   CI (99.9%): [338.452, 1512.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16958.645 ±(99.9%) 10831.757 B/op [Average]
[info]   (min, avg, max) = (11928.625, 16958.645, 18351.459), stdev = 2812.973
[info]   CI (99.9%): [6126.888, 27790.402] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala
[info] # Run progress: 58.75% complete, ETA 00:26:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 92281.438 ops/s
[info] # Warmup Iteration   2: 108845.208 ops/s
[info] # Warmup Iteration   3: 110100.372 ops/s
[info] Iteration   1: 108533.408 ops/s
[info]                  ·gc.alloc.rate:                   1142.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.906 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18870.330 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 109547.037 ops/s
[info]                  ·gc.alloc.rate:                   1153.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.897 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.709 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14073.722 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 110663.296 ops/s
[info]                  ·gc.alloc.rate:                   1165.144 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.540 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18701.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 110596.973 ops/s
[info]                  ·gc.alloc.rate:                   1164.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.592 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14110.123 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 110117.031 ops/s
[info]                  ·gc.alloc.rate:                   1159.598 MB/sec
[info]                  ·gc.alloc.rate.norm:              16576.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.595 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 19013.432 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala":
[info]   109891.549 ±(99.9%) 3393.865 ops/s [Average]
[info]   (min, avg, max) = (108533.408, 109891.549, 110663.296), stdev = 881.376
[info]   CI (99.9%): [106497.684, 113285.414] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1157.216 ±(99.9%) 35.309 MB/sec [Average]
[info]   (min, avg, max) = (1142.941, 1157.216, 1165.144), stdev = 9.170
[info]   CI (99.9%): [1121.907, 1192.525] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16576.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16576.004, 16576.004, 16576.004), stdev = 0.001
[info]   CI (99.9%): [16576.003, 16576.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.050, 0.062), stdev = 0.011
[info]   CI (99.9%): [0.006, 0.094] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.716 ±(99.9%) 0.650 B/op [Average]
[info]   (min, avg, max) = (0.592, 0.716, 0.906), stdev = 0.169
[info]   CI (99.9%): [0.066, 1.367] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1183.353 ±(99.9%) 696.823 MB/sec [Average]
[info]   (min, avg, max) = (979.709, 1183.353, 1330.111), stdev = 180.963
[info]   CI (99.9%): [486.529, 1880.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   16953.800 ±(99.9%) 10069.012 B/op [Average]
[info]   (min, avg, max) = (14073.722, 16953.800, 19013.432), stdev = 2614.890
[info]   CI (99.9%): [6884.788, 27022.812] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson
[info] # Run progress: 59.08% complete, ETA 00:26:32
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18189.175 ops/s
[info] # Warmup Iteration   2: 38772.531 ops/s
[info] # Warmup Iteration   3: 38187.408 ops/s
[info] Iteration   1: 38561.141 ops/s
[info]                  ·gc.alloc.rate:                   1866.560 MB/sec
[info]                  ·gc.alloc.rate.norm:              76216.014 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.850 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1660.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 67789.065 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 38948.676 ops/s
[info]                  ·gc.alloc.rate:                   1885.724 MB/sec
[info]                  ·gc.alloc.rate.norm:              76216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2008.630 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 81183.551 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 37723.591 ops/s
[info]                  ·gc.alloc.rate:                   1826.910 MB/sec
[info]                  ·gc.alloc.rate.norm:              76216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2021.381 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84329.054 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 38641.738 ops/s
[info]                  ·gc.alloc.rate:                   1870.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              76216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.391 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 68856.038 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 38636.396 ops/s
[info]                  ·gc.alloc.rate:                   1870.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              76216.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.696 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.157 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 82836.581 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson":
[info]   38502.308 ±(99.9%) 1771.429 ops/s [Average]
[info]   (min, avg, max) = (37723.591, 38502.308, 38948.676), stdev = 460.034
[info]   CI (99.9%): [36730.880, 40273.737] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1864.117 ±(99.9%) 84.883 MB/sec [Average]
[info]   (min, avg, max) = (1826.910, 1864.117, 1885.724), stdev = 22.044
[info]   CI (99.9%): [1779.233, 1949.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   76216.011 ±(99.9%) 0.006 B/op [Average]
[info]   (min, avg, max) = (76216.011, 76216.011, 76216.014), stdev = 0.002
[info]   CI (99.9%): [76216.006, 76216.017] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.079, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   3.239 ±(99.9%) 7.524 B/op [Average]
[info]   (min, avg, max) = (0.850, 3.239, 5.211), stdev = 1.954
[info]   CI (99.9%): [≈ 0, 10.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1882.685 ±(99.9%) 731.485 MB/sec [Average]
[info]   (min, avg, max) = (1660.181, 1882.685, 2033.157), stdev = 189.964
[info]   CI (99.9%): [1151.200, 2614.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   76998.858 ±(99.9%) 30832.108 B/op [Average]
[info]   (min, avg, max) = (67789.065, 76998.858, 84329.054), stdev = 8007.001
[info]   CI (99.9%): [46166.750, 107830.966] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 1.000
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce
[info] # Run progress: 59.41% complete, ETA 00:26:19
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 90121.202 ops/s
[info] # Warmup Iteration   2: 114797.374 ops/s
[info] # Warmup Iteration   3: 115802.075 ops/s
[info] Iteration   1: 117933.486 ops/s
[info]                  ·gc.alloc.rate:                   811.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.111 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.876 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8622.939 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 117509.309 ops/s
[info]                  ·gc.alloc.rate:                   809.147 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.394 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.982 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12981.290 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 114785.166 ops/s
[info]                  ·gc.alloc.rate:                   790.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8873.079 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 116874.477 ops/s
[info]                  ·gc.alloc.rate:                   804.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.004 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.625 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13127.158 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 116836.869 ops/s
[info]                  ·gc.alloc.rate:                   804.558 MB/sec
[info]                  ·gc.alloc.rate.norm:              10840.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.841 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.305 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8802.138 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce":
[info]   116787.861 ±(99.9%) 4658.179 ops/s [Average]
[info]   (min, avg, max) = (114785.166, 116787.861, 117933.486), stdev = 1209.714
[info]   CI (99.9%): [112129.682, 121446.040] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate":
[info]   804.144 ±(99.9%) 32.170 MB/sec [Average]
[info]   (min, avg, max) = (790.260, 804.144, 811.939), stdev = 8.354
[info]   CI (99.9%): [771.974, 836.313] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   10840.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10840.003, 10840.004, 10840.004), stdev = 0.001
[info]   CI (99.9%): [10840.003, 10840.004] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.104), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.212] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.837 ±(99.9%) 2.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.837, 1.394), stdev = 0.521
[info]   CI (99.9%): [≈ 0, 2.844] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   777.931 ±(99.9%) 681.621 MB/sec [Average]
[info]   (min, avg, max) = (645.876, 777.931, 974.625), stdev = 177.015
[info]   CI (99.9%): [96.310, 1459.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   10481.321 ±(99.9%) 9053.105 B/op [Average]
[info]   (min, avg, max) = (8622.939, 10481.321, 13127.158), stdev = 2351.063
[info]   CI (99.9%): [1428.216, 19534.426] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeCirce:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala
[info] # Run progress: 59.74% complete, ETA 00:26:06
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 118497.563 ops/s
[info] # Warmup Iteration   2: 161559.190 ops/s
[info] # Warmup Iteration   3: 157441.033 ops/s
[info] Iteration   1: 163048.728 ops/s
[info]                  ·gc.alloc.rate:                   241.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.672 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2468.887 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 163781.042 ops/s
[info]                  ·gc.alloc.rate:                   243.049 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.750 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2458.080 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 162007.357 ops/s
[info]                  ·gc.alloc.rate:                   240.377 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.404 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2484.823 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 162932.894 ops/s
[info]                  ·gc.alloc.rate:                   241.737 MB/sec
[info]                  ·gc.alloc.rate.norm:              2336.003 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3114.117 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 162823.231 ops/s
[info]                  ·gc.alloc.rate:      241.606 MB/sec
[info]                  ·gc.alloc.rate.norm: 2336.003 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala":
[info]   162918.650 ±(99.9%) 2435.668 ops/s [Average]
[info]   (min, avg, max) = (162007.357, 162918.650, 163781.042), stdev = 632.535
[info]   CI (99.9%): [160482.982, 165354.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   241.736 ±(99.9%) 3.662 MB/sec [Average]
[info]   (min, avg, max) = (240.377, 241.736, 243.049), stdev = 0.951
[info]   CI (99.9%): [238.074, 245.398] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   2336.003 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2336.002, 2336.003, 2336.003), stdev = 0.001
[info]   CI (99.9%): [2336.002, 2336.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.104), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.362 ±(99.9%) 1.587 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.362, 1.005), stdev = 0.412
[info]   CI (99.9%): [≈ 0, 1.949] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.874 ±(99.9%) 481.941 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.874, 322.259), stdev = 125.159
[info]   CI (99.9%): [≈ 0, 699.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2105.181 ±(99.9%) 4657.006 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 2105.181, 3114.117), stdev = 1209.410
[info]   CI (99.9%): [≈ 0, 6762.187] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time":
[info]   4.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala
[info] # Run progress: 60.07% complete, ETA 00:25:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 709604.426 ops/s
[info] # Warmup Iteration   2: 766829.520 ops/s
[info] # Warmup Iteration   3: 789952.438 ops/s
[info] Iteration   1: 791499.707 ops/s
[info]                  ·gc.alloc.rate:                   981.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.807 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1939.090 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 791811.672 ops/s
[info]                  ·gc.alloc.rate:                   981.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.248 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1941.055 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 785805.392 ops/s
[info]                  ·gc.alloc.rate:                   974.304 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.125 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.179 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1965.774 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 792243.706 ops/s
[info]                  ·gc.alloc.rate:                   982.591 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.477 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1957.733 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 780913.889 ops/s
[info]                  ·gc.alloc.rate:                   968.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.219 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1998.363 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala":
[info]   788454.873 ±(99.9%) 19135.469 ops/s [Average]
[info]   (min, avg, max) = (780913.889, 788454.873, 792243.706), stdev = 4969.420
[info]   CI (99.9%): [769319.404, 807590.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   977.623 ±(99.9%) 23.909 MB/sec [Average]
[info]   (min, avg, max) = (968.222, 977.623, 982.591), stdev = 6.209
[info]   CI (99.9%): [953.715, 1001.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1952.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.001, 1952.001, 1952.001), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.150 ±(99.9%) 0.242 B/op [Average]
[info]   (min, avg, max) = (0.083, 0.150, 0.248), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   981.775 ±(99.9%) 26.039 MB/sec [Average]
[info]   (min, avg, max) = (974.807, 981.775, 991.219), stdev = 6.762
[info]   CI (99.9%): [955.736, 1007.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1960.403 ±(99.9%) 92.447 B/op [Average]
[info]   (min, avg, max) = (1939.090, 1960.403, 1998.363), stdev = 24.008
[info]   CI (99.9%): [1867.956, 2052.849] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 60.40% complete, ETA 00:25:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 743758.176 ops/s
[info] # Warmup Iteration   2: 775170.138 ops/s
[info] # Warmup Iteration   3: 780544.980 ops/s
[info] Iteration   1: 785191.577 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 786100.585 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 787144.252 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 777331.193 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 786181.742 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc":
[info]   784389.870 ±(99.9%) 15425.616 ops/s [Average]
[info]   (min, avg, max) = (777331.193, 784389.870, 787144.252), stdev = 4005.984
[info]   CI (99.9%): [768964.253, 799815.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson
[info] # Run progress: 60.73% complete, ETA 00:25:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 157787.112 ops/s
[info] # Warmup Iteration   2: 208613.801 ops/s
[info] # Warmup Iteration   3: 213722.109 ops/s
[info] Iteration   1: 213526.466 ops/s
[info]                  ·gc.alloc.rate:                   697.700 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.767 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      644.249 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4749.919 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 216940.583 ops/s
[info]                  ·gc.alloc.rate:                   708.789 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.755 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.912 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4658.641 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 215845.973 ops/s
[info]                  ·gc.alloc.rate:                   705.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.304 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      641.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4682.010 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 216343.244 ops/s
[info]                  ·gc.alloc.rate:                   706.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      964.936 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7021.422 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 213842.641 ops/s
[info]                  ·gc.alloc.rate:                   698.791 MB/sec
[info]                  ·gc.alloc.rate.norm:              5144.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.656 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4760.216 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson":
[info]   215299.781 ±(99.9%) 5886.347 ops/s [Average]
[info]   (min, avg, max) = (213526.466, 215299.781, 216940.583), stdev = 1528.666
[info]   CI (99.9%): [209413.434, 221186.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   703.486 ±(99.9%) 19.109 MB/sec [Average]
[info]   (min, avg, max) = (697.700, 703.486, 708.789), stdev = 4.962
[info]   CI (99.9%): [684.378, 722.595] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5144.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5144.002, 5144.002, 5144.002), stdev = 0.001
[info]   CI (99.9%): [5144.002, 5144.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.058 ±(99.9%) 0.174 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.058, 0.104), stdev = 0.045
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.426 ±(99.9%) 1.272 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.426, 0.767), stdev = 0.330
[info]   CI (99.9%): [≈ 0, 1.697] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   707.928 ±(99.9%) 553.282 MB/sec [Average]
[info]   (min, avg, max) = (641.887, 707.928, 964.936), stdev = 143.686
[info]   CI (99.9%): [154.646, 1261.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5174.442 ±(99.9%) 3979.263 B/op [Average]
[info]   (min, avg, max) = (4658.641, 5174.442, 7021.422), stdev = 1033.402
[info]   CI (99.9%): [1195.179, 9153.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala
[info] # Run progress: 61.06% complete, ETA 00:25:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 112473.878 ops/s
[info] # Warmup Iteration   2: 186108.782 ops/s
[info] # Warmup Iteration   3: 185365.258 ops/s
[info] Iteration   1: 181892.724 ops/s
[info]                  ·gc.alloc.rate:                   966.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.720 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8509.990 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 185431.292 ops/s
[info]                  ·gc.alloc.rate:                   986.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.883 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.001 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8393.244 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 187396.951 ops/s
[info]                  ·gc.alloc.rate:                   996.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.524 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8360.614 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 187031.799 ops/s
[info]                  ·gc.alloc.rate:                   994.126 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      999.869 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8416.343 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 185806.546 ops/s
[info]                  ·gc.alloc.rate:                   987.651 MB/sec
[info]                  ·gc.alloc.rate.norm:              8368.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.529 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      669.259 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5670.388 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala":
[info]   185511.863 ±(99.9%) 8404.479 ops/s [Average]
[info]   (min, avg, max) = (181892.724, 185511.863, 187396.951), stdev = 2182.617
[info]   CI (99.9%): [177107.384, 193916.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   986.214 ±(99.9%) 44.774 MB/sec [Average]
[info]   (min, avg, max) = (966.899, 986.214, 996.365), stdev = 11.628
[info]   CI (99.9%): [941.440, 1030.988] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   8368.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8368.002, 8368.002, 8368.002), stdev = 0.001
[info]   CI (99.9%): [8368.002, 8368.003] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.075, 0.104), stdev = 0.019
[info]   CI (99.9%): [0.003, 0.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.637 ±(99.9%) 0.622 B/op [Average]
[info]   (min, avg, max) = (0.524, 0.637, 0.883), stdev = 0.162
[info]   CI (99.9%): [0.014, 1.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   927.384 ±(99.9%) 556.162 MB/sec [Average]
[info]   (min, avg, max) = (669.259, 927.384, 999.869), stdev = 144.434
[info]   CI (99.9%): [371.222, 1483.546] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   7870.116 ±(99.9%) 4739.914 B/op [Average]
[info]   (min, avg, max) = (5670.388, 7870.116, 8509.990), stdev = 1230.941
[info]   CI (99.9%): [3130.202, 12610.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala
[info] # Run progress: 61.39% complete, ETA 00:25:02
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 329549.043 ops/s
[info] # Warmup Iteration   2: 348285.865 ops/s
[info] # Warmup Iteration   3: 353317.355 ops/s
[info] Iteration   1: 354095.861 ops/s
[info]                  ·gc.alloc.rate:                   687.446 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.159 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.690 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2941.504 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 353057.537 ops/s
[info]                  ·gc.alloc.rate:                   685.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.464 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.537 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2945.839 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 345088.595 ops/s
[info]                  ·gc.alloc.rate:                   669.989 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3013.691 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 353376.599 ops/s
[info]                  ·gc.alloc.rate:                   686.174 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.093 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.126 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2944.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 353821.404 ops/s
[info]                  ·gc.alloc.rate:                   686.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              3056.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2945.180 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala":
[info]   351887.999 ±(99.9%) 14716.861 ops/s [Average]
[info]   (min, avg, max) = (345088.595, 351887.999, 354095.861), stdev = 3821.922
[info]   CI (99.9%): [337171.139, 366604.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   683.138 ±(99.9%) 28.481 MB/sec [Average]
[info]   (min, avg, max) = (669.989, 683.138, 687.446), stdev = 7.396
[info]   CI (99.9%): [654.657, 711.620] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   3056.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3056.001, 3056.001, 3056.001), stdev = 0.001
[info]   CI (99.9%): [3056.001, 3056.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.057 ±(99.9%) 0.275 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.057, 0.159), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.332] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 1.224 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.253, 0.707), stdev = 0.318
[info]   CI (99.9%): [≈ 0, 1.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   661.201 ±(99.9%) 2.331 MB/sec [Average]
[info]   (min, avg, max) = (660.537, 661.201, 661.937), stdev = 0.605
[info]   CI (99.9%): [658.869, 663.532] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2958.132 ±(99.9%) 119.764 B/op [Average]
[info]   (min, avg, max) = (2941.504, 2958.132, 3013.691), stdev = 31.102
[info]   CI (99.9%): [2838.368, 3077.896] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala
[info] # Run progress: 61.72% complete, ETA 00:24:49
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 212246.910 ops/s
[info] # Warmup Iteration   2: 311322.813 ops/s
[info] # Warmup Iteration   3: 312886.742 ops/s
[info] Iteration   1: 314727.743 ops/s
[info]                  ·gc.alloc.rate:                   310.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1279.031 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 314087.200 ops/s
[info]                  ·gc.alloc.rate:                   309.644 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1281.804 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 312620.153 ops/s
[info]                  ·gc.alloc.rate:                   308.170 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.621 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1614.711 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 314899.793 ops/s
[info]                  ·gc.alloc.rate:                   310.485 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.697 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1603.047 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 311574.400 ops/s
[info]                  ·gc.alloc.rate:                   307.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              1552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.636 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1630.089 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala":
[info]   313581.858 ±(99.9%) 5533.464 ops/s [Average]
[info]   (min, avg, max) = (311574.400, 313581.858, 314899.793), stdev = 1437.023
[info]   CI (99.9%): [308048.394, 319115.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   309.160 ±(99.9%) 5.526 MB/sec [Average]
[info]   (min, avg, max) = (307.180, 309.160, 310.485), stdev = 1.435
[info]   CI (99.9%): [303.634, 314.686] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1552.001, 1552.001, 1552.001), stdev = 0.001
[info]   CI (99.9%): [1552.001, 1552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.062), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.129] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.126 ±(99.9%) 0.527 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.126, 0.315), stdev = 0.137
[info]   CI (99.9%): [≈ 0, 0.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   295.086 ±(99.9%) 138.348 MB/sec [Average]
[info]   (min, avg, max) = (255.737, 295.086, 322.636), stdev = 35.929
[info]   CI (99.9%): [156.738, 433.434] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1481.736 ±(99.9%) 708.636 B/op [Average]
[info]   (min, avg, max) = (1279.031, 1481.736, 1630.089), stdev = 184.031
[info]   CI (99.9%): [773.100, 2190.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count":
[info]   5.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.000, 1.000), stdev = 0.001
[info]   CI (99.9%): [5.000, 5.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 4.000), stdev = 1.304
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala
[info] # Run progress: 62.05% complete, ETA 00:24:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1033146.245 ops/s
[info] # Warmup Iteration   2: 1163597.749 ops/s
[info] # Warmup Iteration   3: 1191235.605 ops/s
[info] Iteration   1: 1199273.548 ops/s
[info]                  ·gc.alloc.rate:                   889.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.863 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855.798 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 1195375.358 ops/s
[info]                  ·gc.alloc.rate:                   886.784 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.188 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1288.390 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1186111.557 ops/s
[info]                  ·gc.alloc.rate:                   879.892 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1301.475 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1197784.274 ops/s
[info]                  ·gc.alloc.rate:                   888.727 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.633 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1294.044 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1189118.570 ops/s
[info]                  ·gc.alloc.rate:                   882.254 MB/sec
[info]                  ·gc.alloc.rate.norm:              1168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.055 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.941 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 873.684 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala":
[info]   1193532.661 ±(99.9%) 21866.311 ops/s [Average]
[info]   (min, avg, max) = (1186111.557, 1193532.661, 1199273.548), stdev = 5678.612
[info]   CI (99.9%): [1171666.350, 1215398.973] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   885.465 ±(99.9%) 16.271 MB/sec [Average]
[info]   (min, avg, max) = (879.892, 885.465, 889.669), stdev = 4.225
[info]   CI (99.9%): [869.194, 901.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   1168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1168.000, 1168.000, 1168.000), stdev = 0.001
[info]   CI (99.9%): [1168.000, 1168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.099 ±(99.9%) 0.119 B/op [Average]
[info]   (min, avg, max) = (0.055, 0.099, 0.137), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.218] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   851.014 ±(99.9%) 685.991 MB/sec [Average]
[info]   (min, avg, max) = (651.863, 851.014, 984.633), stdev = 178.150
[info]   CI (99.9%): [165.023, 1537.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1122.678 ±(99.9%) 907.189 B/op [Average]
[info]   (min, avg, max) = (855.798, 1122.678, 1301.475), stdev = 235.594
[info]   CI (99.9%): [215.489, 2029.867] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 62.38% complete, ETA 00:24:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1034892.608 ops/s
[info] # Warmup Iteration   2: 1134214.450 ops/s
[info] # Warmup Iteration   3: 1136256.885 ops/s
[info] Iteration   1: 1137455.627 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 1136489.717 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 1132463.420 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 1142625.589 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 1142204.757 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻³ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc":
[info]   1138247.822 ±(99.9%) 16336.898 ops/s [Average]
[info]   (min, avg, max) = (1132463.420, 1138247.822, 1142625.589), stdev = 4242.640
[info]   CI (99.9%): [1121910.924, 1154584.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻³ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce
[info] # Run progress: 62.71% complete, ETA 00:24:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2921.329 ops/s
[info] # Warmup Iteration   2: 5019.781 ops/s
[info] # Warmup Iteration   3: 5049.857 ops/s
[info] Iteration   1: 5163.840 ops/s
[info]                  ·gc.alloc.rate:                   1018.924 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.686 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      969.424 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 295533.615 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5153.722 ops/s
[info]                  ·gc.alloc.rate:                   1017.175 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.426 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296774.468 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 5169.619 ops/s
[info]                  ·gc.alloc.rate:                   1019.994 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.085 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.348 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.830 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 296870.096 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5186.635 ops/s
[info]                  ·gc.alloc.rate:                   1023.535 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.632 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.336 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 297817.412 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 5172.107 ops/s
[info]                  ·gc.alloc.rate:                   1020.660 MB/sec
[info]                  ·gc.alloc.rate.norm:              310624.079 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.333 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400866.511 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce":
[info]   5169.185 ±(99.9%) 46.405 ops/s [Average]
[info]   (min, avg, max) = (5153.722, 5169.185, 5186.635), stdev = 12.051
[info]   CI (99.9%): [5122.780, 5215.589] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate":
[info]   1020.058 ±(99.9%) 9.041 MB/sec [Average]
[info]   (min, avg, max) = (1017.175, 1020.058, 1023.535), stdev = 2.348
[info]   CI (99.9%): [1011.016, 1029.099] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   310624.080 ±(99.9%) 0.011 B/op [Average]
[info]   (min, avg, max) = (310624.079, 310624.080, 310624.085), stdev = 0.003
[info]   CI (99.9%): [310624.069, 310624.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.054, 0.083), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16.485 ±(99.9%) 32.834 B/op [Average]
[info]   (min, avg, max) = (6.333, 16.485, 25.426), stdev = 8.527
[info]   CI (99.9%): [≈ 0, 49.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1042.919 ±(99.9%) 590.621 MB/sec [Average]
[info]   (min, avg, max) = (969.424, 1042.919, 1317.181), stdev = 153.382
[info]   CI (99.9%): [452.298, 1633.540] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   317572.420 ±(99.9%) 179324.036 B/op [Average]
[info]   (min, avg, max) = (295533.615, 317572.420, 400866.511), stdev = 46569.883
[info]   CI (99.9%): [138248.385, 496896.456] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala
[info] # Run progress: 63.04% complete, ETA 00:23:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 21703.184 ops/s
[info] # Warmup Iteration   2: 31429.355 ops/s
[info] # Warmup Iteration   3: 31650.051 ops/s
[info] Iteration   1: 31781.697 ops/s
[info]                  ·gc.alloc.rate:                   539.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.016 B/op
[info]                  ·gc.churn.PS_Eden_Space:          4.074 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     201.761 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      583.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 28875.170 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 30072.844 ops/s
[info]                  ·gc.alloc.rate:                   510.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.015 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.214 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 34147.224 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 30750.480 ops/s
[info]                  ·gc.alloc.rate:                   522.354 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.937 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16636.488 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 31071.223 ops/s
[info]                  ·gc.alloc.rate:                   527.883 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.992 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 32930.374 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 31251.436 ops/s
[info]                  ·gc.alloc.rate:                   530.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              26744.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.981 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16370.896 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala":
[info]   30985.536 ±(99.9%) 2435.495 ops/s [Average]
[info]   (min, avg, max) = (30072.844, 30985.536, 31781.697), stdev = 632.490
[info]   CI (99.9%): [28550.041, 33421.031] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   526.386 ±(99.9%) 41.574 MB/sec [Average]
[info]   (min, avg, max) = (510.812, 526.386, 539.982), stdev = 10.797
[info]   CI (99.9%): [484.812, 567.960] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26744.014 ±(99.9%) 0.005 B/op [Average]
[info]   (min, avg, max) = (26744.013, 26744.014, 26744.016), stdev = 0.001
[info]   CI (99.9%): [26744.009, 26744.019] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.852 ±(99.9%) 6.937 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.852, 4.074), stdev = 1.801
[info]   CI (99.9%): [≈ 0, 7.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   42.266 ±(99.9%) 343.448 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 42.266, 201.761), stdev = 89.192
[info]   CI (99.9%): [≈ 0, 385.714] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   507.027 ±(99.9%) 648.891 MB/sec [Average]
[info]   (min, avg, max) = (324.937, 507.027, 652.214), stdev = 168.515
[info]   CI (99.9%): [≈ 0, 1155.919] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   25792.030 ±(99.9%) 33505.731 B/op [Average]
[info]   (min, avg, max) = (16370.896, 25792.030, 34147.224), stdev = 8701.332
[info]   CI (99.9%): [≈ 0, 59297.761] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 6.000), stdev = 1.949
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson
[info] # Run progress: 63.37% complete, ETA 00:23:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2032.818 ops/s
[info] # Warmup Iteration   2: 4459.763 ops/s
[info] # Warmup Iteration   3: 4482.876 ops/s
[info] Iteration   1: 4470.795 ops/s
[info]                  ·gc.alloc.rate:                   1135.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.091 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     29.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.263 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 460876.462 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 4585.206 ops/s
[info]                  ·gc.alloc.rate:                   1164.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.290 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.314 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 339998.367 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 4576.933 ops/s
[info]                  ·gc.alloc.rate:                   1162.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.089 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     14.315 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 456833.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4576.756 ops/s
[info]                  ·gc.alloc.rate:                   1161.951 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.096 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344600.828 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 4553.519 ops/s
[info]                  ·gc.alloc.rate:                   1156.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              399728.090 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.582 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 463859.636 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson":
[info]   4552.642 ±(99.9%) 181.958 ops/s [Average]
[info]   (min, avg, max) = (4470.795, 4552.642, 4585.206), stdev = 47.254
[info]   CI (99.9%): [4370.684, 4734.600] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1156.053 ±(99.9%) 45.541 MB/sec [Average]
[info]   (min, avg, max) = (1135.552, 1156.053, 1164.289), stdev = 11.827
[info]   CI (99.9%): [1110.513, 1201.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   399728.091 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (399728.089, 399728.091, 399728.096), stdev = 0.003
[info]   CI (99.9%): [399728.079, 399728.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   17.330 ±(99.9%) 32.402 B/op [Average]
[info]   (min, avg, max) = (7.158, 17.330, 29.303), stdev = 8.415
[info]   CI (99.9%): [≈ 0, 49.732] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1194.260 ±(99.9%) 698.480 MB/sec [Average]
[info]   (min, avg, max) = (990.314, 1194.260, 1341.909), stdev = 181.393
[info]   CI (99.9%): [495.780, 1892.741] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   413233.805 ±(99.9%) 249607.179 B/op [Average]
[info]   (min, avg, max) = (339998.367, 413233.805, 463859.636), stdev = 64822.192
[info]   CI (99.9%): [163626.627, 662840.984] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time":
[info]   21.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.200, 5.000), stdev = 0.837
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce
[info] # Run progress: 63.70% complete, ETA 00:23:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 9657.350 ops/s
[info] # Warmup Iteration   2: 14266.060 ops/s
[info] # Warmup Iteration   3: 14437.941 ops/s
[info] Iteration   1: 14443.458 ops/s
[info]                  ·gc.alloc.rate:                   905.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              98672.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      968.455 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 105532.602 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 14333.673 ops/s
[info]                  ·gc.alloc.rate:                   898.504 MB/sec
[info]                  ·gc.alloc.rate.norm:              98697.555 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     9.140 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      967.896 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106320.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 14032.876 ops/s
[info]                  ·gc.alloc.rate:                   880.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.146 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 109033.676 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 14341.529 ops/s
[info]                  ·gc.alloc.rate:                   899.575 MB/sec
[info]                  ·gc.alloc.rate.norm:              98736.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.853 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.663 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 71415.737 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14243.144 ops/s
[info]                  ·gc.alloc.rate:                   893.226 MB/sec
[info]                  ·gc.alloc.rate.norm:              98735.057 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.801 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108383.277 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce":
[info]   14278.936 ±(99.9%) 595.943 ops/s [Average]
[info]   (min, avg, max) = (14032.876, 14278.936, 14443.458), stdev = 154.765
[info]   CI (99.9%): [13682.993, 14874.879] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate":
[info]   895.427 ±(99.9%) 36.571 MB/sec [Average]
[info]   (min, avg, max) = (880.332, 895.427, 905.497), stdev = 9.497
[info]   CI (99.9%): [858.856, 931.998] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   98715.340 ±(99.9%) 112.876 B/op [Average]
[info]   (min, avg, max) = (98672.028, 98715.340, 98736.031), stdev = 29.313
[info]   CI (99.9%): [98602.464, 98828.215] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.071, 0.125), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   7.773 ±(99.9%) 19.365 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 7.773, 13.801), stdev = 5.029
[info]   CI (99.9%): [≈ 0, 27.138] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   907.934 ±(99.9%) 554.136 MB/sec [Average]
[info]   (min, avg, max) = (650.663, 907.934, 980.510), stdev = 143.907
[info]   CI (99.9%): [353.798, 1462.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   100137.068 ±(99.9%) 62072.018 B/op [Average]
[info]   (min, avg, max) = (71415.737, 100137.068, 109033.676), stdev = 16119.906
[info]   CI (99.9%): [38065.050, 162209.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count":
[info]   14.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 3.000), stdev = 0.447
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala
[info] # Run progress: 64.03% complete, ETA 00:23:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 249222.994 ops/s
[info] # Warmup Iteration   2: 281297.263 ops/s
[info] # Warmup Iteration   3: 284672.027 ops/s
[info] Iteration   1: 288032.748 ops/s
[info]                  ·gc.alloc.rate:                   1015.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.455 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.775 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5328.319 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 288128.822 ops/s
[info]                  ·gc.alloc.rate:                   1016.129 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.682 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5334.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 288693.366 ops/s
[info]                  ·gc.alloc.rate:                   1018.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.454 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5348.970 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 288636.383 ops/s
[info]                  ·gc.alloc.rate:                   1017.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.999 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5372.116 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 284330.035 ops/s
[info]                  ·gc.alloc.rate:                   1002.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              5552.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.461 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      991.319 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5488.450 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala":
[info]   287564.271 ±(99.9%) 7053.816 ops/s [Average]
[info]   (min, avg, max) = (284330.035, 287564.271, 288693.366), stdev = 1831.854
[info]   CI (99.9%): [280510.455, 294618.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1014.131 ±(99.9%) 24.738 MB/sec [Average]
[info]   (min, avg, max) = (1002.798, 1014.131, 1018.053), stdev = 6.424
[info]   CI (99.9%): [989.393, 1038.870] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   5552.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5552.001, 5552.001, 5552.002), stdev = 0.001
[info]   CI (99.9%): [5552.001, 5552.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.479 ±(99.9%) 0.480 B/op [Average]
[info]   (min, avg, max) = (0.341, 0.479, 0.682), stdev = 0.125
[info]   CI (99.9%): [≈ 0, 0.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   981.646 ±(99.9%) 25.913 MB/sec [Average]
[info]   (min, avg, max) = (974.775, 981.646, 991.319), stdev = 6.730
[info]   CI (99.9%): [955.732, 1007.559] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   5374.461 ±(99.9%) 253.812 B/op [Average]
[info]   (min, avg, max) = (5328.319, 5374.461, 5488.450), stdev = 65.914
[info]   CI (99.9%): [5120.648, 5628.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 64.36% complete, ETA 00:23:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 262627.579 ops/s
[info] # Warmup Iteration   2: 288712.805 ops/s
[info] # Warmup Iteration   3: 295422.622 ops/s
[info] Iteration   1: 295076.056 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 295239.581 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 295549.131 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 295029.156 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 295320.402 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: 0.001 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc":
[info]   295242.865 ±(99.9%) 801.541 ops/s [Average]
[info]   (min, avg, max) = (295029.156, 295242.865, 295549.131), stdev = 208.158
[info]   CI (99.9%): [294441.324, 296044.406] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   0.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (0.001, 0.001, 0.001), stdev = 0.001
[info]   CI (99.9%): [0.001, 0.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson
[info] # Run progress: 64.69% complete, ETA 00:22:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 10327.831 ops/s
[info] # Warmup Iteration   2: 14796.083 ops/s
[info] # Warmup Iteration   3: 15186.972 ops/s
[info] Iteration   1: 15044.392 ops/s
[info]                  ·gc.alloc.rate:                   855.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              89464.049 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.887 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      963.065 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100753.598 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 15110.689 ops/s
[info]                  ·gc.alloc.rate:                   847.025 MB/sec
[info]                  ·gc.alloc.rate.norm:              88224.262 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.336 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      642.062 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 66875.770 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15013.407 ops/s
[info]                  ·gc.alloc.rate:                   833.341 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.027 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      964.733 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 101171.036 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 15285.576 ops/s
[info]                  ·gc.alloc.rate:                   848.430 MB/sec
[info]                  ·gc.alloc.rate.norm:              87392.137 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.430 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      971.116 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 100029.308 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 15534.939 ops/s
[info]                  ·gc.alloc.rate:                   863.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              87522.425 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     6.326 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.584 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65928.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson":
[info]   15197.801 ±(99.9%) 831.441 ops/s [Average]
[info]   (min, avg, max) = (15013.407, 15197.801, 15534.939), stdev = 215.923
[info]   CI (99.9%): [14366.359, 16029.242] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   849.525 ±(99.9%) 43.109 MB/sec [Average]
[info]   (min, avg, max) = (833.341, 849.525, 863.677), stdev = 11.195
[info]   CI (99.9%): [806.416, 892.634] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   87998.980 ±(99.9%) 3423.033 B/op [Average]
[info]   (min, avg, max) = (87392.027, 87998.980, 89464.049), stdev = 888.951
[info]   CI (99.9%): [84575.947, 91422.013] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.104), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   6.469 ±(99.9%) 10.283 B/op [Average]
[info]   (min, avg, max) = (4.336, 6.469, 10.887), stdev = 2.670
[info]   CI (99.9%): [≈ 0, 16.751] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   838.312 ±(99.9%) 675.067 MB/sec [Average]
[info]   (min, avg, max) = (642.062, 838.312, 971.116), stdev = 175.313
[info]   CI (99.9%): [163.245, 1513.379] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   86951.588 ±(99.9%) 72263.339 B/op [Average]
[info]   (min, avg, max) = (65928.229, 86951.588, 101171.036), stdev = 18766.560
[info]   CI (99.9%): [14688.249, 159214.927] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce
[info] # Run progress: 65.02% complete, ETA 00:22:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 598349.170 ops/s
[info] # Warmup Iteration   2: 886481.112 ops/s
[info] # Warmup Iteration   3: 916439.347 ops/s
[info] Iteration   1: 914611.202 ops/s
[info]                  ·gc.alloc.rate:                   2951.081 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3007.828 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5177.686 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 914904.334 ops/s
[info]                  ·gc.alloc.rate:                   2952.240 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2697.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4642.059 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 904056.123 ops/s
[info]                  ·gc.alloc.rate:                   2917.942 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.072 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3049.949 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5309.818 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 910837.915 ops/s
[info]                  ·gc.alloc.rate:                   2939.286 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3056.713 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5282.951 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 914847.684 ops/s
[info]                  ·gc.alloc.rate:                   2952.009 MB/sec
[info]                  ·gc.alloc.rate.norm:              5080.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.215 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2722.273 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4684.657 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce":
[info]   911851.452 ±(99.9%) 18031.144 ops/s [Average]
[info]   (min, avg, max) = (904056.123, 911851.452, 914904.334), stdev = 4682.631
[info]   CI (99.9%): [893820.307, 929882.596] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate":
[info]   2942.511 ±(99.9%) 56.864 MB/sec [Average]
[info]   (min, avg, max) = (2917.942, 2942.511, 2952.240), stdev = 14.767
[info]   CI (99.9%): [2885.647, 2999.376] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5080.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5080.000, 5080.000, 5080.000), stdev = 0.001
[info]   CI (99.9%): [5080.000, 5080.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.262] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.187 ±(99.9%) 0.265 B/op [Average]
[info]   (min, avg, max) = (0.072, 0.187, 0.252), stdev = 0.069
[info]   CI (99.9%): [≈ 0, 0.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2906.899 ±(99.9%) 696.670 MB/sec [Average]
[info]   (min, avg, max) = (2697.730, 2906.899, 3056.713), stdev = 180.923
[info]   CI (99.9%): [2210.229, 3603.569] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5019.434 ±(99.9%) 1267.346 B/op [Average]
[info]   (min, avg, max) = (4642.059, 5019.434, 5309.818), stdev = 329.126
[info]   CI (99.9%): [3752.088, 6286.780] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.count":
[info]   43.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readCirce:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 8.000, 9.000), stdev = 0.707
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala
[info] # Run progress: 65.35% complete, ETA 00:22:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 750235.939 ops/s
[info] # Warmup Iteration   2: 1777369.109 ops/s
[info] # Warmup Iteration   3: 1794541.567 ops/s
[info] Iteration   1: 1796915.830 ops/s
[info]                  ·gc.alloc.rate:                   1689.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.109 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1447.197 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 1777973.079 ops/s
[info]                  ·gc.alloc.rate:                   1671.564 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.147 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1666.648 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1475.647 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 1795286.882 ops/s
[info]                  ·gc.alloc.rate:                   1687.758 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1677.440 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1470.953 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1794664.332 ops/s
[info]                  ·gc.alloc.rate:                   1686.976 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1478.477 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 1796574.339 ops/s
[info]                  ·gc.alloc.rate:                   1688.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              1480.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.073 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1482.152 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala":
[info]   1792282.892 ±(99.9%) 31005.851 ops/s [Average]
[info]   (min, avg, max) = (1777973.079, 1792282.892, 1796915.830), stdev = 8052.121
[info]   CI (99.9%): [1761277.042, 1823288.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1684.861 ±(99.9%) 28.819 MB/sec [Average]
[info]   (min, avg, max) = (1671.564, 1684.861, 1689.167), stdev = 7.484
[info]   CI (99.9%): [1656.043, 1713.680] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1480.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1480.000, 1480.000, 1480.000), stdev = 0.001
[info]   CI (99.9%): [1480.000, 1480.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.166), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.102 ±(99.9%) 0.109 B/op [Average]
[info]   (min, avg, max) = (0.073, 0.102, 0.147), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1674.470 ±(99.9%) 60.469 MB/sec [Average]
[info]   (min, avg, max) = (1651.727, 1674.470, 1691.297), stdev = 15.703
[info]   CI (99.9%): [1614.002, 1734.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1470.885 ±(99.9%) 53.370 B/op [Average]
[info]   (min, avg, max) = (1447.197, 1470.885, 1482.152), stdev = 13.860
[info]   CI (99.9%): [1417.515, 1524.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJacksonScala:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala
[info] # Run progress: 65.68% complete, ETA 00:22:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8068182.870 ops/s
[info] # Warmup Iteration   2: 9094022.795 ops/s
[info] # Warmup Iteration   3: 9505448.264 ops/s
[info] Iteration   1: 9469892.295 ops/s
[info]                  ·gc.alloc.rate:                   2357.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2329.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.391 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 9537319.485 ops/s
[info]                  ·gc.alloc.rate:                   2374.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2350.161 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 387.973 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 9440998.318 ops/s
[info]                  ·gc.alloc.rate:                   2351.285 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2363.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 394.086 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 9415158.324 ops/s
[info]                  ·gc.alloc.rate:                   2345.083 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2372.347 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 396.557 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 9469712.298 ops/s
[info]                  ·gc.alloc.rate:                   2358.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 395.170 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala":
[info]   9466616.144 ±(99.9%) 175652.917 ops/s [Average]
[info]   (min, avg, max) = (9415158.324, 9466616.144, 9537319.485), stdev = 45616.505
[info]   CI (99.9%): [9290963.227, 9642269.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2357.420 ±(99.9%) 42.387 MB/sec [Average]
[info]   (min, avg, max) = (2345.083, 2357.420, 2374.553), stdev = 11.008
[info]   CI (99.9%): [2315.033, 2399.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.146), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.022 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.015, 0.024), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.037] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2358.767 ±(99.9%) 73.857 MB/sec [Average]
[info]   (min, avg, max) = (2329.915, 2358.767, 2377.618), stdev = 19.181
[info]   CI (99.9%): [2284.910, 2432.625] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   392.235 ±(99.9%) 16.376 B/op [Average]
[info]   (min, avg, max) = (387.391, 392.235, 396.557), stdev = 4.253
[info]   CI (99.9%): [375.860, 408.611] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readJsoniterScala:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson
[info] # Run progress: 66.01% complete, ETA 00:22:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75274.822 ops/s
[info] # Warmup Iteration   2: 312226.638 ops/s
[info] # Warmup Iteration   3: 315436.600 ops/s
[info] Iteration   1: 316119.504 ops/s
[info]                  ·gc.alloc.rate:                   1926.713 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.518 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1988.093 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9897.576 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 317745.540 ops/s
[info]                  ·gc.alloc.rate:                   1936.167 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.619 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9941.533 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 316395.316 ops/s
[info]                  ·gc.alloc.rate:                   1927.813 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.414 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8370.158 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 317773.187 ops/s
[info]                  ·gc.alloc.rate:                   1936.006 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.309 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.661 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10046.107 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 314598.709 ops/s
[info]                  ·gc.alloc.rate:                   1916.944 MB/sec
[info]                  ·gc.alloc.rate.norm:              9592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.276 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10174.105 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson":
[info]   316526.451 ±(99.9%) 5071.870 ops/s [Average]
[info]   (min, avg, max) = (314598.709, 316526.451, 317773.187), stdev = 1317.149
[info]   CI (99.9%): [311454.581, 321598.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1928.729 ±(99.9%) 30.568 MB/sec [Average]
[info]   (min, avg, max) = (1916.944, 1928.729, 1936.167), stdev = 7.938
[info]   CI (99.9%): [1898.161, 1959.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   9592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (9592.001, 9592.001, 9592.001), stdev = 0.001
[info]   CI (99.9%): [9592.001, 9592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.435 ±(99.9%) 0.516 B/op [Average]
[info]   (min, avg, max) = (0.309, 0.435, 0.619), stdev = 0.134
[info]   CI (99.9%): [≈ 0, 0.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.599 ±(99.9%) 575.339 MB/sec [Average]
[info]   (min, avg, max) = (1682.246, 1947.599, 2033.276), stdev = 149.414
[info]   CI (99.9%): [1372.260, 2522.939] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9685.896 ±(99.9%) 2861.825 B/op [Average]
[info]   (min, avg, max) = (8370.158, 9685.896, 10174.105), stdev = 743.207
[info]   CI (99.9%): [6824.071, 12547.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.095
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce
[info] # Run progress: 66.34% complete, ETA 00:21:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 623820.782 ops/s
[info] # Warmup Iteration   2: 1050839.240 ops/s
[info] # Warmup Iteration   3: 1067844.333 ops/s
[info] Iteration   1: 1067585.576 ops/s
[info]                  ·gc.alloc.rate:                   2338.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2645.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3901.872 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1065188.114 ops/s
[info]                  ·gc.alloc.rate:                   2333.235 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.098 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2964.565 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 1065820.492 ops/s
[info]                  ·gc.alloc.rate:                   2334.121 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2356.538 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3481.115 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 1068460.520 ops/s
[info]                  ·gc.alloc.rate:                   2340.153 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3489.023 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 1055013.320 ops/s
[info]                  ·gc.alloc.rate:                   2311.511 MB/sec
[info]                  ·gc.alloc.rate.norm:              3448.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2375.493 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3543.440 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce":
[info]   1064413.604 ±(99.9%) 20859.642 ops/s [Average]
[info]   (min, avg, max) = (1055013.320, 1064413.604, 1068460.520), stdev = 5417.183
[info]   CI (99.9%): [1043553.963, 1085273.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate":
[info]   2331.444 ±(99.9%) 44.290 MB/sec [Average]
[info]   (min, avg, max) = (2311.511, 2331.444, 2340.153), stdev = 11.502
[info]   CI (99.9%): [2287.154, 2375.734] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3448.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3448.000, 3448.000, 3448.000), stdev = 0.001
[info]   CI (99.9%): [3448.000, 3448.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.172 ±(99.9%) 0.272 B/op [Average]
[info]   (min, avg, max) = (0.092, 0.172, 0.277), stdev = 0.071
[info]   CI (99.9%): [≈ 0, 0.444] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2350.422 ±(99.9%) 875.738 MB/sec [Average]
[info]   (min, avg, max) = (2006.098, 2350.422, 2645.984), stdev = 227.426
[info]   CI (99.9%): [1474.684, 3226.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3476.003 ±(99.9%) 1288.207 B/op [Average]
[info]   (min, avg, max) = (2964.565, 3476.003, 3901.872), stdev = 334.543
[info]   CI (99.9%): [2187.796, 4764.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 8.000), stdev = 1.304
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala
[info] # Run progress: 66.67% complete, ETA 00:21:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1524197.245 ops/s
[info] # Warmup Iteration   2: 3692153.090 ops/s
[info] # Warmup Iteration   3: 3709502.565 ops/s
[info] Iteration   1: 3821575.017 ops/s
[info]                  ·gc.alloc.rate:                   2174.672 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2327.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 958.935 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 3810484.194 ops/s
[info]                  ·gc.alloc.rate:                   2168.906 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.432 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831.772 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3822618.241 ops/s
[info]                  ·gc.alloc.rate:                   2175.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.228 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 972.831 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 3757779.329 ops/s
[info]                  ·gc.alloc.rate:                   2138.635 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.431 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 851.505 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 3829670.432 ops/s
[info]                  ·gc.alloc.rate:                   2179.843 MB/sec
[info]                  ·gc.alloc.rate.norm:              896.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2036.640 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 837.138 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala":
[info]   3808425.443 ±(99.9%) 112181.421 ops/s [Average]
[info]   (min, avg, max) = (3757779.329, 3808425.443, 3829670.432), stdev = 29133.159
[info]   CI (99.9%): [3696244.022, 3920606.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2167.544 ±(99.9%) 64.019 MB/sec [Average]
[info]   (min, avg, max) = (2138.635, 2167.544, 2179.843), stdev = 16.625
[info]   CI (99.9%): [2103.526, 2231.563] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   896.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (896.000, 896.000, 896.000), stdev = 0.001
[info]   CI (99.9%): [896.000, 896.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.146), stdev = 0.029
[info]   CI (99.9%): [0.012, 0.238] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.052 ±(99.9%) 0.046 B/op [Average]
[info]   (min, avg, max) = (0.035, 0.052, 0.060), stdev = 0.012
[info]   CI (99.9%): [0.006, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2154.430 ±(99.9%) 671.780 MB/sec [Average]
[info]   (min, avg, max) = (2013.432, 2154.430, 2362.228), stdev = 174.459
[info]   CI (99.9%): [1482.651, 2826.210] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   890.436 ±(99.9%) 267.327 B/op [Average]
[info]   (min, avg, max) = (831.772, 890.436, 972.831), stdev = 69.424
[info]   CI (99.9%): [623.109, 1157.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJacksonScala:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala
[info] # Run progress: 67.00% complete, ETA 00:21:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7621375.510 ops/s
[info] # Warmup Iteration   2: 9460849.940 ops/s
[info] # Warmup Iteration   3: 9692422.967 ops/s
[info] Iteration   1: 9583312.665 ops/s
[info]                  ·gc.alloc.rate:                   584.351 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.482 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.850 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 9562213.385 ops/s
[info]                  ·gc.alloc.rate:                   583.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.447 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 9613171.989 ops/s
[info]                  ·gc.alloc.rate:                   586.165 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.272 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 53.436 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 9427276.330 ops/s
[info]                  ·gc.alloc.rate:                   575.088 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.840 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 108.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 9616974.607 ops/s
[info]                  ·gc.alloc.rate:                   586.547 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.038 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.883 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala":
[info]   9560589.795 ±(99.9%) 299729.897 ops/s [Average]
[info]   (min, avg, max) = (9427276.330, 9560589.795, 9616974.607), stdev = 77838.902
[info]   CI (99.9%): [9260859.899, 9860319.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   583.070 ±(99.9%) 17.962 MB/sec [Average]
[info]   (min, avg, max) = (575.088, 583.070, 586.547), stdev = 4.665
[info]   CI (99.9%): [565.107, 601.032] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.792 ±(99.9%) 6.415 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.792, 3.772), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.130 ±(99.9%) 1.054 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.130, 0.620), stdev = 0.274
[info]   CI (99.9%): [≈ 0, 1.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   588.274 ±(99.9%) 564.010 MB/sec [Average]
[info]   (min, avg, max) = (326.272, 588.274, 656.482), stdev = 146.472
[info]   CI (99.9%): [24.263, 1152.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   96.919 ±(99.9%) 93.648 B/op [Average]
[info]   (min, avg, max) = (53.436, 96.919, 108.979), stdev = 24.320
[info]   CI (99.9%): [3.271, 190.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson
[info] # Run progress: 67.33% complete, ETA 00:21:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 133585.585 ops/s
[info] # Warmup Iteration   2: 511335.445 ops/s
[info] # Warmup Iteration   3: 508795.121 ops/s
[info] Iteration   1: 518494.599 ops/s
[info]                  ·gc.alloc.rate:                   1791.085 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.442 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.260 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5015.315 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 524391.684 ops/s
[info]                  ·gc.alloc.rate:                   1812.120 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.312 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1999.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6003.996 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 520194.042 ops/s
[info]                  ·gc.alloc.rate:                   1797.451 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.126 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.343 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5079.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 523139.814 ops/s
[info]                  ·gc.alloc.rate:                   1807.750 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.063 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2023.741 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6089.976 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 522653.706 ops/s
[info]                  ·gc.alloc.rate:                   1806.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              5440.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.313 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.568 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5098.909 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson":
[info]   521774.769 ±(99.9%) 9181.653 ops/s [Average]
[info]   (min, avg, max) = (518494.599, 521774.769, 524391.684), stdev = 2384.446
[info]   CI (99.9%): [512593.116, 530956.422] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1803.053 ±(99.9%) 32.977 MB/sec [Average]
[info]   (min, avg, max) = (1791.085, 1803.053, 1812.120), stdev = 8.564
[info]   CI (99.9%): [1770.076, 1836.030] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5440.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5440.001, 5440.001, 5440.001), stdev = 0.001
[info]   CI (99.9%): [5440.001, 5440.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.083, 0.146), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.251 ±(99.9%) 0.595 B/op [Average]
[info]   (min, avg, max) = (0.063, 0.251, 0.442), stdev = 0.154
[info]   CI (99.9%): [≈ 0, 0.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1809.381 ±(99.9%) 714.885 MB/sec [Average]
[info]   (min, avg, max) = (1651.260, 1809.381, 2023.741), stdev = 185.653
[info]   CI (99.9%): [1094.496, 2524.266] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5457.543 ±(99.9%) 2078.693 B/op [Average]
[info]   (min, avg, max) = (5015.315, 5457.543, 6089.976), stdev = 539.830
[info]   CI (99.9%): [3378.850, 7536.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ArraysBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala
[info] # Run progress: 67.66% complete, ETA 00:20:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1236152.070 ops/s
[info] # Warmup Iteration   2: 2437873.560 ops/s
[info] # Warmup Iteration   3: 2438041.887 ops/s
[info] Iteration   1: 2438553.487 ops/s
[info]                  ·gc.alloc.rate:                   1573.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.472 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1066.354 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 2450792.838 ops/s
[info]                  ·gc.alloc.rate:                   1581.622 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.880 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 855.571 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2424172.200 ops/s
[info]                  ·gc.alloc.rate:                   1564.530 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.068 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1087.857 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2413234.964 ops/s
[info]                  ·gc.alloc.rate:                   1557.370 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.123 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1098.692 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 2445488.582 ops/s
[info]                  ·gc.alloc.rate:                   1578.500 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1352.095 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 870.274 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala":
[info]   2434448.414 ±(99.9%) 59700.138 ops/s [Average]
[info]   (min, avg, max) = (2413234.964, 2434448.414, 2450792.838), stdev = 15503.936
[info]   CI (99.9%): [2374748.277, 2494148.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1571.102 ±(99.9%) 38.644 MB/sec [Average]
[info]   (min, avg, max) = (1557.370, 1571.102, 1581.622), stdev = 10.036
[info]   CI (99.9%): [1532.458, 1609.746] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.108, 0.146), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.070 ±(99.9%) 0.092 B/op [Average]
[info]   (min, avg, max) = (0.040, 0.070, 0.094), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1538.950 ±(99.9%) 694.420 MB/sec [Average]
[info]   (min, avg, max) = (1331.880, 1538.950, 1684.123), stdev = 180.339
[info]   CI (99.9%): [844.530, 2233.371] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   995.750 ±(99.9%) 469.478 B/op [Average]
[info]   (min, avg, max) = (855.571, 995.750, 1098.692), stdev = 121.922
[info]   CI (99.9%): [526.272, 1465.228] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJacksonScala:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala
[info] # Run progress: 67.99% complete, ETA 00:20:45
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 8666350.066 ops/s
[info] # Warmup Iteration   2: 5221540.157 ops/s
[info] # Warmup Iteration   3: 5341744.819 ops/s
[info] Iteration   1: 5334719.139 ops/s
[info]                  ·gc.alloc.rate:                   705.039 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.434 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 193.366 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 5144736.238 ops/s
[info]                  ·gc.alloc.rate:                   679.692 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.257 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 200.523 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 5220988.799 ops/s
[info]                  ·gc.alloc.rate:                   689.987 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 197.681 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 5195686.215 ops/s
[info]                  ·gc.alloc.rate:                   686.526 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.984 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.050 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 5208537.923 ops/s
[info]                  ·gc.alloc.rate:                   688.223 MB/sec
[info]                  ·gc.alloc.rate.norm:              208.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.957 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 199.155 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala":
[info]   5220933.663 ±(99.9%) 269161.616 ops/s [Average]
[info]   (min, avg, max) = (5144736.238, 5220933.663, 5334719.139), stdev = 69900.417
[info]   CI (99.9%): [4951772.047, 5490095.279] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   689.893 ±(99.9%) 35.895 MB/sec [Average]
[info]   (min, avg, max) = (679.692, 689.893, 705.039), stdev = 9.322
[info]   CI (99.9%): [653.998, 725.788] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   208.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (208.000, 208.000, 208.000), stdev = 0.001
[info]   CI (99.9%): [208.000, 208.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.244 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.146), stdev = 0.063
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.015 ±(99.9%) 0.073 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.015, 0.043), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   656.477 ±(99.9%) 5.936 MB/sec [Average]
[info]   (min, avg, max) = (655.257, 656.477, 658.957), stdev = 1.542
[info]   CI (99.9%): [650.541, 662.413] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   197.955 ±(99.9%) 10.610 B/op [Average]
[info]   (min, avg, max) = (193.366, 197.955, 200.523), stdev = 2.755
[info]   CI (99.9%): [187.345, 208.565] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson
[info] # Run progress: 68.32% complete, ETA 00:20:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 120036.105 ops/s
[info] # Warmup Iteration   2: 405755.989 ops/s
[info] # Warmup Iteration   3: 405749.550 ops/s
[info] Iteration   1: 408188.978 ops/s
[info]                  ·gc.alloc.rate:                   1852.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.321 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1654.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6381.196 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 409493.185 ops/s
[info]                  ·gc.alloc.rate:                   1857.964 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.480 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2003.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7703.868 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 408908.668 ops/s
[info]                  ·gc.alloc.rate:                   1855.544 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.725 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6470.935 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 409352.381 ops/s
[info]                  ·gc.alloc.rate:                   1857.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.320 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.113 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7792.934 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 408741.004 ops/s
[info]                  ·gc.alloc.rate:                   1854.884 MB/sec
[info]                  ·gc.alloc.rate.norm:              7144.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.481 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.450 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6522.246 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson":
[info]   408936.843 ±(99.9%) 2001.443 ops/s [Average]
[info]   (min, avg, max) = (408188.978, 408936.843, 409493.185), stdev = 519.768
[info]   CI (99.9%): [406935.400, 410938.286] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1855.575 ±(99.9%) 8.958 MB/sec [Average]
[info]   (min, avg, max) = (1852.090, 1855.575, 1857.964), stdev = 2.326
[info]   CI (99.9%): [1846.617, 1864.533] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   7144.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (7144.001, 7144.001, 7144.001), stdev = 0.001
[info]   CI (99.9%): [7144.001, 7144.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.108 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.096, 0.125), stdev = 0.028
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.368 ±(99.9%) 0.413 B/op [Average]
[info]   (min, avg, max) = (0.240, 0.368, 0.481), stdev = 0.107
[info]   CI (99.9%): [≈ 0, 0.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1811.638 ±(99.9%) 717.010 MB/sec [Average]
[info]   (min, avg, max) = (1654.332, 1811.638, 2026.113), stdev = 186.205
[info]   CI (99.9%): [1094.628, 2528.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6974.236 ±(99.9%) 2730.927 B/op [Average]
[info]   (min, avg, max) = (6381.196, 6974.236, 7792.934), stdev = 709.213
[info]   CI (99.9%): [4243.309, 9705.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.400, 8.000), stdev = 1.140
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala
[info] # Run progress: 68.65% complete, ETA 00:20:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 1539537.696 ops/s
[info] # Warmup Iteration   2: 2726623.377 ops/s
[info] # Warmup Iteration   3: 2728938.880 ops/s
[info] Iteration   1: 2755690.651 ops/s
[info]                  ·gc.alloc.rate:                   1455.980 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1316.861 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 752.503 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2756238.177 ops/s
[info]                  ·gc.alloc.rate:                   1456.706 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 947.362 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2733945.026 ops/s
[info]                  ·gc.alloc.rate:                   1444.822 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 769.630 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2758588.551 ops/s
[info]                  ·gc.alloc.rate:                   1458.007 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 766.130 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 2739216.378 ops/s
[info]                  ·gc.alloc.rate:                   1447.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              832.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.060 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1685.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 968.699 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala":
[info]   2748735.756 ±(99.9%) 43527.553 ops/s [Average]
[info]   (min, avg, max) = (2733945.026, 2748735.756, 2758588.551), stdev = 11303.967
[info]   CI (99.9%): [2705208.203, 2792263.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1452.677 ±(99.9%) 22.807 MB/sec [Average]
[info]   (min, avg, max) = (1444.822, 1452.677, 1458.007), stdev = 5.923
[info]   CI (99.9%): [1429.870, 1475.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   832.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (832.000, 832.000, 832.000), stdev = 0.001
[info]   CI (99.9%): [832.000, 832.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.050 ±(99.9%) 0.060 B/op [Average]
[info]   (min, avg, max) = (0.036, 0.050, 0.071), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.110] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1468.079 ±(99.9%) 719.473 MB/sec [Average]
[info]   (min, avg, max) = (1316.861, 1468.079, 1685.760), stdev = 186.845
[info]   CI (99.9%): [748.606, 2187.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   840.865 ±(99.9%) 413.611 B/op [Average]
[info]   (min, avg, max) = (752.503, 840.865, 968.699), stdev = 107.414
[info]   CI (99.9%): [427.253, 1254.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJacksonScala:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 1.000
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala
[info] # Run progress: 68.98% complete, ETA 00:20:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6042231.493 ops/s
[info] # Warmup Iteration   2: 6615512.449 ops/s
[info] # Warmup Iteration   3: 6903235.627 ops/s
[info] Iteration   1: 6952934.691 ops/s
[info]                  ·gc.alloc.rate:                   1059.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.081 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 221.261 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6873398.092 ops/s
[info]                  ·gc.alloc.rate:                   1047.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.617 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 299.271 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 6868610.809 ops/s
[info]                  ·gc.alloc.rate:                   1047.180 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.569 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 225.650 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6834743.104 ops/s
[info]                  ·gc.alloc.rate:                   1042.384 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.013 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 6852924.121 ops/s
[info]                  ·gc.alloc.rate:                   1044.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              240.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.600 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 228.490 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala":
[info]   6876522.163 ±(99.9%) 174489.637 ops/s [Average]
[info]   (min, avg, max) = (6834743.104, 6876522.163, 6952934.691), stdev = 45314.405
[info]   CI (99.9%): [6702032.526, 7051011.801] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1048.387 ±(99.9%) 25.998 MB/sec [Average]
[info]   (min, avg, max) = (1042.384, 1048.387, 1059.830), stdev = 6.752
[info]   CI (99.9%): [1022.389, 1074.385] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   240.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (240.000, 240.000, 240.000), stdev = 0.001
[info]   CI (99.9%): [240.000, 240.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.104), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.017 ±(99.9%) 0.028 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.017, 0.024), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1050.638 ±(99.9%) 551.595 MB/sec [Average]
[info]   (min, avg, max) = (977.081, 1050.638, 1306.617), stdev = 143.247
[info]   CI (99.9%): [499.043, 1602.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   240.537 ±(99.9%) 126.907 B/op [Average]
[info]   (min, avg, max) = (221.261, 240.537, 299.271), stdev = 32.957
[info]   CI (99.9%): [113.630, 367.445] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson
[info] # Run progress: 69.31% complete, ETA 00:19:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 272073.142 ops/s
[info] # Warmup Iteration   2: 714997.405 ops/s
[info] # Warmup Iteration   3: 721300.318 ops/s
[info] Iteration   1: 716703.524 ops/s
[info]                  ·gc.alloc.rate:                   2075.850 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.283 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4380.823 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 723839.215 ops/s
[info]                  ·gc.alloc.rate:                   2096.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.272 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4373.466 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 713832.695 ops/s
[info]                  ·gc.alloc.rate:                   2067.718 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.073 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5204.740 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 713957.105 ops/s
[info]                  ·gc.alloc.rate:                   2067.725 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.138 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.761 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4478.484 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 715845.484 ops/s
[info]                  ·gc.alloc.rate:                   2073.592 MB/sec
[info]                  ·gc.alloc.rate.norm:              4560.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.183 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.804 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4476.901 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson":
[info]   716835.604 ±(99.9%) 15800.733 ops/s [Average]
[info]   (min, avg, max) = (713832.695, 716835.604, 723839.215), stdev = 4103.400
[info]   CI (99.9%): [701034.871, 732636.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2076.361 ±(99.9%) 46.365 MB/sec [Average]
[info]   (min, avg, max) = (2067.718, 2076.361, 2096.921), stdev = 12.041
[info]   CI (99.9%): [2029.996, 2122.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   4560.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4560.001, 4560.001, 4560.001), stdev = 0.001
[info]   CI (99.9%): [4560.001, 4560.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.023
[info]   CI (99.9%): [≈ 0, 0.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.192 ±(99.9%) 0.188 B/op [Average]
[info]   (min, avg, max) = (0.138, 0.192, 0.272), stdev = 0.049
[info]   CI (99.9%): [0.004, 0.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2086.413 ±(99.9%) 592.492 MB/sec [Average]
[info]   (min, avg, max) = (1994.283, 2086.413, 2360.073), stdev = 153.868
[info]   CI (99.9%): [1493.921, 2678.905] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   4582.883 ±(99.9%) 1352.560 B/op [Average]
[info]   (min, avg, max) = (4373.466, 4582.883, 5204.740), stdev = 351.255
[info]   CI (99.9%): [3230.323, 5935.442] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.BitSetsBenchmark.writePlayJson:·gc.time":
[info]   37.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce
[info] # Run progress: 69.64% complete, ETA 00:19:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 445127.044 ops/s
[info] # Warmup Iteration   2: 801269.995 ops/s
[info] # Warmup Iteration   3: 806293.259 ops/s
[info] Iteration   1: 804556.945 ops/s
[info]                  ·gc.alloc.rate:                   2617.513 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2659.046 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5201.240 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 811800.972 ops/s
[info]                  ·gc.alloc.rate:                   2640.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.202 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2684.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5206.863 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 803192.569 ops/s
[info]                  ·gc.alloc.rate:                   2611.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.163 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2703.050 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5298.535 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 799220.413 ops/s
[info]                  ·gc.alloc.rate:                   2599.374 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.082 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2713.389 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5344.577 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 802333.870 ops/s
[info]                  ·gc.alloc.rate:                   2609.666 MB/sec
[info]                  ·gc.alloc.rate.norm:              5120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.204 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.596 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4664.693 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce":
[info]   804220.954 ±(99.9%) 17978.182 ops/s [Average]
[info]   (min, avg, max) = (799220.413, 804220.954, 811800.972), stdev = 4668.877
[info]   CI (99.9%): [786242.772, 822199.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate":
[info]   2615.718 ±(99.9%) 58.199 MB/sec [Average]
[info]   (min, avg, max) = (2599.374, 2615.718, 2640.064), stdev = 15.114
[info]   CI (99.9%): [2557.519, 2673.916] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5120.001, 5120.001, 5120.001), stdev = 0.001
[info]   CI (99.9%): [5120.000, 5120.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.203 B/op [Average]
[info]   (min, avg, max) = (0.082, 0.155, 0.204), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.357] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2627.587 ±(99.9%) 543.954 MB/sec [Average]
[info]   (min, avg, max) = (2377.596, 2627.587, 2713.389), stdev = 141.263
[info]   CI (99.9%): [2083.633, 3171.541] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5143.182 ±(99.9%) 1056.425 B/op [Average]
[info]   (min, avg, max) = (4664.693, 5143.182, 5344.577), stdev = 274.350
[info]   CI (99.9%): [4086.757, 6199.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.count":
[info]   39.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.800, 8.000), stdev = 0.447
[info]   CI (99.9%): [39.000, 39.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readCirce:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala
[info] # Run progress: 69.97% complete, ETA 00:19:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 270524.071 ops/s
[info] # Warmup Iteration   2: 978712.058 ops/s
[info] # Warmup Iteration   3: 968202.213 ops/s
[info] Iteration   1: 988416.592 ops/s
[info]                  ·gc.alloc.rate:                   1225.248 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.133 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.920 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2085.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 978370.536 ops/s
[info]                  ·gc.alloc.rate:                   1213.192 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1320.029 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2123.899 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 983854.477 ops/s
[info]                  ·gc.alloc.rate:                   1219.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1595.660 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 979466.529 ops/s
[info]                  ·gc.alloc.rate:                   1214.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.134 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2147.565 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 988275.922 ops/s
[info]                  ·gc.alloc.rate:                   1225.310 MB/sec
[info]                  ·gc.alloc.rate.norm:              1952.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.060 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2139.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala":
[info]   983676.811 ±(99.9%) 18217.651 ops/s [Average]
[info]   (min, avg, max) = (978370.536, 983676.811, 988416.592), stdev = 4731.066
[info]   CI (99.9%): [965459.160, 1001894.463] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1219.647 ±(99.9%) 22.020 MB/sec [Average]
[info]   (min, avg, max) = (1213.192, 1219.647, 1225.310), stdev = 5.719
[info]   CI (99.9%): [1197.627, 1241.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1952.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1952.000, 1952.000, 1952.000), stdev = 0.001
[info]   CI (99.9%): [1952.000, 1952.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.147 ±(99.9%) 0.147 B/op [Average]
[info]   (min, avg, max) = (0.100, 0.147, 0.201), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.294] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1261.097 ±(99.9%) 570.385 MB/sec [Average]
[info]   (min, avg, max) = (997.208, 1261.097, 1343.060), stdev = 148.127
[info]   CI (99.9%): [690.713, 1831.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2018.402 ±(99.9%) 914.649 B/op [Average]
[info]   (min, avg, max) = (1595.660, 2018.402, 2147.565), stdev = 237.531
[info]   CI (99.9%): [1103.753, 2933.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.400, 5.000), stdev = 0.894
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala
[info] # Run progress: 70.30% complete, ETA 00:19:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 7191528.763 ops/s
[info] # Warmup Iteration   2: 8087188.625 ops/s
[info] # Warmup Iteration   3: 7938431.468 ops/s
[info] Iteration   1: 8285808.818 ops/s
[info]                  ·gc.alloc.rate:                   378.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.701 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 48.584 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 8247114.863 ops/s
[info]                  ·gc.alloc.rate:                   377.102 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.605 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      587.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.124 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 8260272.122 ops/s
[info]                  ·gc.alloc.rate:                   377.759 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 63.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 8292234.806 ops/s
[info]                  ·gc.alloc.rate:                   379.358 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.743 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.583 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 8286114.691 ops/s
[info]                  ·gc.alloc.rate:                   378.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              72.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.643 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 62.627 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala":
[info]   8274309.060 ±(99.9%) 75297.313 ops/s [Average]
[info]   (min, avg, max) = (8247114.863, 8274309.060, 8292234.806), stdev = 19554.473
[info]   CI (99.9%): [8199011.747, 8349606.373] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   378.427 ±(99.9%) 3.671 MB/sec [Average]
[info]   (min, avg, max) = (377.102, 378.427, 379.358), stdev = 0.953
[info]   CI (99.9%): [374.756, 382.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   72.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (72.000, 72.000, 72.000), stdev = 0.001
[info]   CI (99.9%): [72.000, 72.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.650 ±(99.9%) 5.419 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.650, 3.167), stdev = 1.407
[info]   CI (99.9%): [≈ 0, 6.069] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 1.035 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.124, 0.605), stdev = 0.269
[info]   CI (99.9%): [≈ 0, 1.159] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   366.788 ±(99.9%) 490.619 MB/sec [Average]
[info]   (min, avg, max) = (255.701, 366.788, 587.254), stdev = 127.412
[info]   CI (99.9%): [≈ 0, 857.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   69.824 ±(99.9%) 94.095 B/op [Average]
[info]   (min, avg, max) = (48.584, 69.824, 112.124), stdev = 24.436
[info]   CI (99.9%): [≈ 0, 163.920] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 5.000), stdev = 1.732
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson
[info] # Run progress: 70.63% complete, ETA 00:19:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39224.546 ops/s
[info] # Warmup Iteration   2: 334785.733 ops/s
[info] # Warmup Iteration   3: 336369.509 ops/s
[info] Iteration   1: 338077.183 ops/s
[info]                  ·gc.alloc.rate:                   1885.936 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9237.612 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 339733.091 ops/s
[info]                  ·gc.alloc.rate:                   1895.663 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.579 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.948 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7733.467 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 334188.630 ops/s
[info]                  ·gc.alloc.rate:                   1865.051 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.294 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2016.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9495.635 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 338705.730 ops/s
[info]                  ·gc.alloc.rate:                   1889.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.387 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.133 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7846.121 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 337592.292 ops/s
[info]                  ·gc.alloc.rate:                   1883.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              8784.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.679 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2031.819 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9474.467 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson":
[info]   337659.385 ±(99.9%) 8081.833 ops/s [Average]
[info]   (min, avg, max) = (334188.630, 337659.385, 339733.091), stdev = 2098.826
[info]   CI (99.9%): [329577.552, 345741.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1884.064 ±(99.9%) 44.490 MB/sec [Average]
[info]   (min, avg, max) = (1865.051, 1884.064, 1895.663), stdev = 11.554
[info]   CI (99.9%): [1839.574, 1928.554] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8784.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8784.001, 8784.001, 8784.001), stdev = 0.001
[info]   CI (99.9%): [8784.001, 8784.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.465 ±(99.9%) 0.609 B/op [Average]
[info]   (min, avg, max) = (0.294, 0.465, 0.679), stdev = 0.158
[info]   CI (99.9%): [≈ 0, 1.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1877.675 ±(99.9%) 703.705 MB/sec [Average]
[info]   (min, avg, max) = (1668.948, 1877.675, 2031.819), stdev = 182.750
[info]   CI (99.9%): [1173.970, 2581.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8757.460 ±(99.9%) 3427.208 B/op [Average]
[info]   (min, avg, max) = (7733.467, 8757.460, 9495.635), stdev = 890.035
[info]   CI (99.9%): [5330.252, 12184.669] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.ExtractFieldsBenchmark.readPlayJson:·gc.time":
[info]   36.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.200, 9.000), stdev = 1.095
[info]   CI (99.9%): [36.000, 36.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce
[info] # Run progress: 70.96% complete, ETA 00:18:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5668.389 ops/s
[info] # Warmup Iteration   2: 7799.989 ops/s
[info] # Warmup Iteration   3: 7918.934 ops/s
[info] Iteration   1: 7965.057 ops/s
[info]                  ·gc.alloc.rate:                   1916.488 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.192 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     37.851 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1971.070 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 389580.138 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 7951.211 ops/s
[info]                  ·gc.alloc.rate:                   1913.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.240 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.704 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328232.108 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7924.497 ops/s
[info]                  ·gc.alloc.rate:                   1907.197 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.056 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.108 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     21.507 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.045 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 398424.487 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 7933.283 ops/s
[info]                  ·gc.alloc.rate:                   1909.089 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.051 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.121 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     23.933 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.823 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 400564.751 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 7778.246 ops/s
[info]                  ·gc.alloc.rate:                   1871.524 MB/sec
[info]                  ·gc.alloc.rate.norm:              378792.052 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     16.845 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.194 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 341888.872 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce":
[info]   7910.459 ±(99.9%) 290.972 ops/s [Average]
[info]   (min, avg, max) = (7778.246, 7910.459, 7965.057), stdev = 75.565
[info]   CI (99.9%): [7619.487, 8201.431] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1903.470 ±(99.9%) 70.143 MB/sec [Average]
[info]   (min, avg, max) = (1871.524, 1903.470, 1916.488), stdev = 18.216
[info]   CI (99.9%): [1833.327, 1973.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   378792.052 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (378792.051, 378792.052, 378792.056), stdev = 0.002
[info]   CI (99.9%): [378792.045, 378792.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.109 ±(99.9%) 0.212 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.109, 0.192), stdev = 0.055
[info]   CI (99.9%): [≈ 0, 0.321] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   21.675 ±(99.9%) 41.767 B/op [Average]
[info]   (min, avg, max) = (8.240, 21.675, 37.851), stdev = 10.847
[info]   CI (99.9%): [≈ 0, 63.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1868.567 ±(99.9%) 690.494 MB/sec [Average]
[info]   (min, avg, max) = (1657.704, 1868.567, 2018.823), stdev = 179.319
[info]   CI (99.9%): [1178.073, 2559.061] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   371738.071 ±(99.9%) 131222.030 B/op [Average]
[info]   (min, avg, max) = (328232.108, 371738.071, 400564.751), stdev = 34077.945
[info]   CI (99.9%): [240516.041, 502960.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala
[info] # Run progress: 71.29% complete, ETA 00:18:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6933.666 ops/s
[info] # Warmup Iteration   2: 14308.248 ops/s
[info] # Warmup Iteration   3: 14702.775 ops/s
[info] Iteration   1: 14487.727 ops/s
[info]                  ·gc.alloc.rate:                   366.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.261 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 55572.864 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 14207.667 ops/s
[info]                  ·gc.alloc.rate:                   359.858 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.031 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.458 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     50.732 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.340 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35715.045 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 14225.593 ops/s
[info]                  ·gc.alloc.rate:                   360.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.029 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.303 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.306 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35667.354 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 14508.404 ops/s
[info]                  ·gc.alloc.rate:                   367.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      323.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35154.863 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 14544.061 ops/s
[info]                  ·gc.alloc.rate:                   368.477 MB/sec
[info]                  ·gc.alloc.rate.norm:              39872.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 35065.454 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala":
[info]   14394.691 ±(99.9%) 631.171 ops/s [Average]
[info]   (min, avg, max) = (14207.667, 14394.691, 14544.061), stdev = 163.913
[info]   CI (99.9%): [13763.520, 15025.861] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   364.601 ±(99.9%) 16.053 MB/sec [Average]
[info]   (min, avg, max) = (359.858, 364.601, 368.477), stdev = 4.169
[info]   CI (99.9%): [348.548, 380.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   39872.030 ±(99.9%) 0.012 B/op [Average]
[info]   (min, avg, max) = (39872.028, 39872.030, 39872.035), stdev = 0.003
[info]   CI (99.9%): [39872.019, 39872.042] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.772 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.100, 0.458), stdev = 0.200
[info]   CI (99.9%): [≈ 0, 0.871] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   11.059 ±(99.9%) 85.511 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 11.059, 50.732), stdev = 22.207
[info]   CI (99.9%): [≈ 0, 96.570] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   360.815 ±(99.9%) 324.113 MB/sec [Average]
[info]   (min, avg, max) = (322.306, 360.815, 511.377), stdev = 84.171
[info]   CI (99.9%): [36.702, 684.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   39435.116 ±(99.9%) 34756.001 B/op [Average]
[info]   (min, avg, max) = (35065.454, 39435.116, 55572.864), stdev = 9026.023
[info]   CI (99.9%): [4679.115, 74191.117] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJacksonScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala
[info] # Run progress: 71.62% complete, ETA 00:18:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 19603.495 ops/s
[info] # Warmup Iteration   2: 23271.677 ops/s
[info] # Warmup Iteration   3: 24099.866 ops/s
[info] Iteration   1: 24136.400 ops/s
[info]                  ·gc.alloc.rate:                   412.302 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.326 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33355.688 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 24237.177 ops/s
[info]                  ·gc.alloc.rate:                   414.176 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.022 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.348 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     217.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.058 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21368.613 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 24232.612 ops/s
[info]                  ·gc.alloc.rate:                   414.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.352 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.037 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21372.139 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 24195.053 ops/s
[info]                  ·gc.alloc.rate:                   413.381 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.017 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.416 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.971 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 42549.654 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 24021.950 ops/s
[info]                  ·gc.alloc.rate:                   410.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              26896.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.970 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21427.119 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala":
[info]   24164.638 ±(99.9%) 344.222 ops/s [Average]
[info]   (min, avg, max) = (24021.950, 24164.638, 24237.177), stdev = 89.393
[info]   CI (99.9%): [23820.417, 24508.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   412.872 ±(99.9%) 6.009 MB/sec [Average]
[info]   (min, avg, max) = (410.423, 412.872, 414.176), stdev = 1.560
[info]   CI (99.9%): [406.864, 418.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   26896.019 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (26896.017, 26896.019, 26896.022), stdev = 0.002
[info]   CI (99.9%): [26896.010, 26896.027] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.722 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.348), stdev = 1.486
[info]   CI (99.9%): [≈ 0, 6.412] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   44.834 ±(99.9%) 371.561 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 44.834, 217.401), stdev = 96.493
[info]   CI (99.9%): [≈ 0, 416.395] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   430.072 ±(99.9%) 570.412 MB/sec [Average]
[info]   (min, avg, max) = (326.970, 430.072, 653.971), stdev = 148.134
[info]   CI (99.9%): [≈ 0, 1000.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   28014.643 ±(99.9%) 37108.370 B/op [Average]
[info]   (min, avg, max) = (21368.613, 28014.643, 42549.654), stdev = 9636.926
[info]   CI (99.9%): [≈ 0, 65123.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 5.000), stdev = 1.673
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson
[info] # Run progress: 71.95% complete, ETA 00:18:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 838.283 ops/s
[info] # Warmup Iteration   2: 2425.423 ops/s
[info] # Warmup Iteration   3: 2437.887 ops/s
[info] Iteration   1: 2455.452 ops/s
[info]                  ·gc.alloc.rate:                   1485.678 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.241 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.684 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1641.578 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1052631.974 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 2467.217 ops/s
[info]                  ·gc.alloc.rate:                   1493.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.165 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     26.554 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1324.838 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 845276.318 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 2451.526 ops/s
[info]                  ·gc.alloc.rate:                   1483.852 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.166 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1667.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1070813.338 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2460.941 ops/s
[info]                  ·gc.alloc.rate:                   1489.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.166 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 858622.752 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 2429.320 ops/s
[info]                  ·gc.alloc.rate:                   1470.137 MB/sec
[info]                  ·gc.alloc.rate.norm:              952664.181 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     13.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.737 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1091727.276 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson":
[info]   2452.891 ±(99.9%) 55.602 ops/s [Average]
[info]   (min, avg, max) = (2429.320, 2452.891, 2467.217), stdev = 14.440
[info]   CI (99.9%): [2397.289, 2508.494] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1484.422 ±(99.9%) 33.673 MB/sec [Average]
[info]   (min, avg, max) = (1470.137, 1484.422, 1493.152), stdev = 8.745
[info]   CI (99.9%): [1450.749, 1518.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   952664.184 ±(99.9%) 0.126 B/op [Average]
[info]   (min, avg, max) = (952664.165, 952664.184, 952664.241), stdev = 0.033
[info]   CI (99.9%): [952664.058, 952664.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.025 ±(99.9%) 0.067 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.025, 0.042), stdev = 0.017
[info]   CI (99.9%): [≈ 0, 0.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   16.017 ±(99.9%) 42.828 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 16.017, 26.684), stdev = 11.122
[info]   CI (99.9%): [≈ 0, 58.845] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1532.262 ±(99.9%) 701.380 MB/sec [Average]
[info]   (min, avg, max) = (1324.838, 1532.262, 1684.737), stdev = 182.146
[info]   CI (99.9%): [830.882, 2233.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   983814.331 ±(99.9%) 466927.737 B/op [Average]
[info]   (min, avg, max) = (845276.318, 983814.331, 1091727.276), stdev = 121259.650
[info]   CI (99.9%): [516886.595, 1450742.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 1.000
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce
[info] # Run progress: 72.28% complete, ETA 00:17:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5417.361 ops/s
[info] # Warmup Iteration   2: 7503.238 ops/s
[info] # Warmup Iteration   3: 7700.778 ops/s
[info] Iteration   1: 7613.839 ops/s
[info]                  ·gc.alloc.rate:                   1637.398 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     12.908 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.684 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 337386.487 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 7627.534 ops/s
[info]                  ·gc.alloc.rate:                   1640.434 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.053 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     25.771 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.572 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 340247.724 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 7600.511 ops/s
[info]                  ·gc.alloc.rate:                   1634.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1662.198 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 344262.228 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 7608.912 ops/s
[info]                  ·gc.alloc.rate:                   1636.804 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.054 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 277057.724 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 7571.893 ops/s
[info]                  ·gc.alloc.rate:                   1628.528 MB/sec
[info]                  ·gc.alloc.rate.norm:              338568.058 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     8.653 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1682.121 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 349709.926 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce":
[info]   7604.538 ±(99.9%) 79.765 ops/s [Average]
[info]   (min, avg, max) = (7571.893, 7604.538, 7627.534), stdev = 20.715
[info]   CI (99.9%): [7524.773, 7684.302] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate":
[info]   1635.574 ±(99.9%) 17.098 MB/sec [Average]
[info]   (min, avg, max) = (1628.528, 1635.574, 1640.434), stdev = 4.440
[info]   CI (99.9%): [1618.476, 1652.671] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   338568.056 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (338568.053, 338568.056, 338568.058), stdev = 0.002
[info]   CI (99.9%): [338568.047, 338568.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.125), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   13.775 ±(99.9%) 31.786 B/op [Average]
[info]   (min, avg, max) = (4.305, 13.775, 25.771), stdev = 8.255
[info]   CI (99.9%): [≈ 0, 45.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1592.801 ±(99.9%) 550.021 MB/sec [Average]
[info]   (min, avg, max) = (1339.433, 1592.801, 1682.121), stdev = 142.839
[info]   CI (99.9%): [1042.780, 2142.823] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   329732.818 ±(99.9%) 114778.841 B/op [Average]
[info]   (min, avg, max) = (277057.724, 329732.818, 349709.926), stdev = 29807.701
[info]   CI (99.9%): [214953.977, 444511.659] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.count":
[info]   24.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeCirce:·gc.time":
[info]   27.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.400, 8.000), stdev = 1.517
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala
[info] # Run progress: 72.61% complete, ETA 00:17:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 23600.103 ops/s
[info] # Warmup Iteration   2: 42057.285 ops/s
[info] # Warmup Iteration   3: 42934.241 ops/s
[info] Iteration   1: 43026.847 ops/s
[info]                  ·gc.alloc.rate:                   623.335 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.916 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      322.299 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11792.977 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 41597.644 ops/s
[info]                  ·gc.alloc.rate:                   602.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.800 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.021 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24522.051 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 42383.274 ops/s
[info]                  ·gc.alloc.rate:                   614.057 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.766 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     3.865 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24165.753 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 41813.510 ops/s
[info]                  ·gc.alloc.rate:                   605.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.987 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.446 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24596.568 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 42959.733 ops/s
[info]                  ·gc.alloc.rate:                   622.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              22807.830 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.525 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      656.039 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 24038.154 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala":
[info]   42356.202 ±(99.9%) 2498.970 ops/s [Average]
[info]   (min, avg, max) = (41597.644, 42356.202, 43026.847), stdev = 648.974
[info]   CI (99.9%): [39857.232, 44855.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   613.701 ±(99.9%) 36.053 MB/sec [Average]
[info]   (min, avg, max) = (602.720, 613.701, 623.335), stdev = 9.363
[info]   CI (99.9%): [577.647, 649.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   22807.860 ±(99.9%) 0.347 B/op [Average]
[info]   (min, avg, max) = (22807.766, 22807.860, 22807.987), stdev = 0.090
[info]   CI (99.9%): [22807.513, 22808.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.029 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.104), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.205] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.078 ±(99.9%) 6.516 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.078, 3.865), stdev = 1.692
[info]   CI (99.9%): [≈ 0, 7.594] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   586.085 ±(99.9%) 567.936 MB/sec [Average]
[info]   (min, avg, max) = (322.299, 586.085, 656.039), stdev = 147.491
[info]   CI (99.9%): [18.149, 1154.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   21823.101 ±(99.9%) 21609.482 B/op [Average]
[info]   (min, avg, max) = (11792.977, 21823.101, 24596.568), stdev = 5611.914
[info]   CI (99.9%): [213.619, 43432.582] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala
[info] # Run progress: 72.94% complete, ETA 00:17:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 53702.643 ops/s
[info] # Warmup Iteration   2: 63575.192 ops/s
[info] # Warmup Iteration   3: 62969.535 ops/s
[info] Iteration   1: 63001.820 ops/s
[info]                  ·gc.alloc.rate:                   475.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.809 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     95.179 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      582.979 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 14568.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 63664.137 ops/s
[info]                  ·gc.alloc.rate:                   480.776 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.332 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8093.838 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 63583.143 ops/s
[info]                  ·gc.alloc.rate:                   480.134 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.006 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.515 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.230 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16124.329 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 62137.004 ops/s
[info]                  ·gc.alloc.rate:                   469.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.994 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8233.918 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 63734.986 ops/s
[info]                  ·gc.alloc.rate:                   481.305 MB/sec
[info]                  ·gc.alloc.rate.norm:              11888.007 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.607 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 16069.689 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala":
[info]   63224.218 ±(99.9%) 2593.642 ops/s [Average]
[info]   (min, avg, max) = (62137.004, 63224.218, 63734.986), stdev = 673.561
[info]   CI (99.9%): [60630.577, 65817.860] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   477.432 ±(99.9%) 19.617 MB/sec [Average]
[info]   (min, avg, max) = (469.221, 477.432, 481.305), stdev = 5.095
[info]   CI (99.9%): [457.815, 497.049] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   11888.007 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11888.006, 11888.007, 11888.007), stdev = 0.001
[info]   CI (99.9%): [11888.006, 11888.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.795 ±(99.9%) 6.489 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.795, 3.809), stdev = 1.685
[info]   CI (99.9%): [≈ 0, 7.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   19.859 ±(99.9%) 162.162 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 19.859, 95.179), stdev = 42.113
[info]   CI (99.9%): [≈ 0, 182.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   507.428 ±(99.9%) 646.072 MB/sec [Average]
[info]   (min, avg, max) = (324.994, 507.428, 651.230), stdev = 167.783
[info]   CI (99.9%): [≈ 0, 1153.500] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   12617.990 ±(99.9%) 15841.541 B/op [Average]
[info]   (min, avg, max) = (8093.838, 12617.990, 16124.329), stdev = 4113.998
[info]   CI (99.9%): [≈ 0, 28459.531] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 5.000), stdev = 1.643
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 73.27% complete, ETA 00:17:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 61858.286 ops/s
[info] # Warmup Iteration   2: 74764.598 ops/s
[info] # Warmup Iteration   3: 74097.262 ops/s
[info] Iteration   1: 74040.876 ops/s
[info]                  ·gc.alloc.rate:      1.129 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 74096.739 ops/s
[info]                  ·gc.alloc.rate:      1.130 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.006 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 74413.917 ops/s
[info]                  ·gc.alloc.rate:      1.135 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 74304.292 ops/s
[info]                  ·gc.alloc.rate:      1.133 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 74462.694 ops/s
[info]                  ·gc.alloc.rate:      1.136 MB/sec
[info]                  ·gc.alloc.rate.norm: 24.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   74263.704 ±(99.9%) 723.824 ops/s [Average]
[info]   (min, avg, max) = (74040.876, 74263.704, 74462.694), stdev = 187.975
[info]   CI (99.9%): [73539.880, 74987.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   1.132 ±(99.9%) 0.012 MB/sec [Average]
[info]   (min, avg, max) = (1.129, 1.132, 1.136), stdev = 0.003
[info]   CI (99.9%): [1.121, 1.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   24.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (24.005, 24.005, 24.006), stdev = 0.001
[info]   CI (99.9%): [24.005, 24.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson
[info] # Run progress: 73.60% complete, ETA 00:17:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2423.924 ops/s
[info] # Warmup Iteration   2: 5388.820 ops/s
[info] # Warmup Iteration   3: 5373.786 ops/s
[info] Iteration   1: 5449.328 ops/s
[info]                  ·gc.alloc.rate:                   1686.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              487215.916 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     30.057 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1648.147 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476197.008 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 5476.261 ops/s
[info]                  ·gc.alloc.rate:                   1695.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              487214.846 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.983 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.031 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 477956.908 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 5405.895 ops/s
[info]                  ·gc.alloc.rate:                   1673.056 MB/sec
[info]                  ·gc.alloc.rate.norm:              487217.178 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.178 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.848 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487739.077 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 5396.580 ops/s
[info]                  ·gc.alloc.rate:                   1670.798 MB/sec
[info]                  ·gc.alloc.rate.norm:              487215.124 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 490973.664 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 5456.903 ops/s
[info]                  ·gc.alloc.rate:                   1688.864 MB/sec
[info]                  ·gc.alloc.rate.norm:              487216.517 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     18.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.196 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 487312.202 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson":
[info]   5436.993 ±(99.9%) 131.864 ops/s [Average]
[info]   (min, avg, max) = (5396.580, 5436.993, 5476.261), stdev = 34.245
[info]   CI (99.9%): [5305.129, 5568.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1682.849 ±(99.9%) 40.512 MB/sec [Average]
[info]   (min, avg, max) = (1670.798, 1682.849, 1695.244), stdev = 10.521
[info]   CI (99.9%): [1642.338, 1723.361] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   487215.916 ±(99.9%) 3.716 B/op [Average]
[info]   (min, avg, max) = (487214.846, 487215.916, 487217.178), stdev = 0.965
[info]   CI (99.9%): [487212.200, 487219.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.156 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.050, 0.104), stdev = 0.041
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   14.445 ±(99.9%) 45.178 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.445, 30.057), stdev = 11.733
[info]   CI (99.9%): [≈ 0, 59.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1671.782 ±(99.9%) 63.553 MB/sec [Average]
[info]   (min, avg, max) = (1648.147, 1671.782, 1689.196), stdev = 16.504
[info]   CI (99.9%): [1608.229, 1735.334] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   484035.772 ±(99.9%) 25175.573 B/op [Average]
[info]   (min, avg, max) = (476197.008, 484035.772, 490973.664), stdev = 6538.016
[info]   CI (99.9%): [458860.199, 509211.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.GoogleMapsAPIBenchmark.writePlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 7.000), stdev = 0.447
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala
[info] # Run progress: 73.93% complete, ETA 00:16:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4796060.531 ops/s
[info] # Warmup Iteration   2: 5505167.257 ops/s
[info] # Warmup Iteration   3: 5542410.246 ops/s
[info] Iteration   1: 5456115.630 ops/s
[info]                  ·gc.alloc.rate:                   1635.729 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 474.875 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 5478102.831 ops/s
[info]                  ·gc.alloc.rate:                   1642.284 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.036 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1657.760 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 476.448 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 5580501.278 ops/s
[info]                  ·gc.alloc.rate:                   1672.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.904 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 470.868 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 5577045.120 ops/s
[info]                  ·gc.alloc.rate:                   1672.168 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.237 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 473.995 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5617360.211 ops/s
[info]                  ·gc.alloc.rate:                   1684.344 MB/sec
[info]                  ·gc.alloc.rate.norm:              472.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.570 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 472.624 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala":
[info]   5541825.014 ±(99.9%) 271248.351 ops/s [Average]
[info]   (min, avg, max) = (5456115.630, 5541825.014, 5617360.211), stdev = 70442.335
[info]   CI (99.9%): [5270576.663, 5813073.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1661.488 ±(99.9%) 81.670 MB/sec [Average]
[info]   (min, avg, max) = (1635.729, 1661.488, 1684.344), stdev = 21.210
[info]   CI (99.9%): [1579.818, 1743.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   472.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (472.000, 472.000, 472.000), stdev = 0.001
[info]   CI (99.9%): [472.000, 472.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.075, 0.125), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.021, 0.036), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.079] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1667.632 ±(99.9%) 63.091 MB/sec [Average]
[info]   (min, avg, max) = (1645.691, 1667.632, 1686.570), stdev = 16.385
[info]   CI (99.9%): [1604.541, 1730.723] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   473.762 ±(99.9%) 8.208 B/op [Average]
[info]   (min, avg, max) = (470.868, 473.762, 476.448), stdev = 2.132
[info]   CI (99.9%): [465.554, 481.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson
[info] # Run progress: 74.26% complete, ETA 00:16:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 122260.969 ops/s
[info] # Warmup Iteration   2: 358281.042 ops/s
[info] # Warmup Iteration   3: 361125.376 ops/s
[info] Iteration   1: 362205.448 ops/s
[info]                  ·gc.alloc.rate:                   1952.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.362 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.602 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8653.838 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 360139.629 ops/s
[info]                  ·gc.alloc.rate:                   1942.143 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.637 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.951 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7315.883 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 356059.940 ops/s
[info]                  ·gc.alloc.rate:                   1919.769 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.184 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8930.077 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 356316.433 ops/s
[info]                  ·gc.alloc.rate:                   1921.841 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.276 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8963.559 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 360004.013 ops/s
[info]                  ·gc.alloc.rate:                   1941.221 MB/sec
[info]                  ·gc.alloc.rate.norm:              8488.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.364 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1694.637 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7409.809 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson":
[info]   358945.093 ±(99.9%) 10262.544 ops/s [Average]
[info]   (min, avg, max) = (356059.940, 358945.093, 362205.448), stdev = 2665.150
[info]   CI (99.9%): [348682.549, 369207.636] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1935.486 ±(99.9%) 54.402 MB/sec [Average]
[info]   (min, avg, max) = (1919.769, 1935.486, 1952.455), stdev = 14.128
[info]   CI (99.9%): [1881.084, 1989.887] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8488.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8488.001, 8488.001, 8488.001), stdev = 0.001
[info]   CI (99.9%): [8488.001, 8488.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.146), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.364 ±(99.9%) 0.652 B/op [Average]
[info]   (min, avg, max) = (0.184, 0.364, 0.637), stdev = 0.169
[info]   CI (99.9%): [≈ 0, 1.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1881.692 ±(99.9%) 696.639 MB/sec [Average]
[info]   (min, avg, max) = (1673.951, 1881.692, 2029.516), stdev = 180.915
[info]   CI (99.9%): [1185.053, 2578.331] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8254.633 ±(99.9%) 3171.318 B/op [Average]
[info]   (min, avg, max) = (7315.883, 8254.633, 8963.559), stdev = 823.581
[info]   CI (99.9%): [5083.315, 11425.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.readPlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala
[info] # Run progress: 74.59% complete, ETA 00:16:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2769001.002 ops/s
[info] # Warmup Iteration   2: 3267231.165 ops/s
[info] # Warmup Iteration   3: 3337717.486 ops/s
[info] Iteration   1: 3360403.507 ops/s
[info]                  ·gc.alloc.rate:                   546.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.748 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.756 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 153.502 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3355127.123 ops/s
[info]                  ·gc.alloc.rate:                   545.550 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.020 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.947 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.866 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3344629.254 ops/s
[info]                  ·gc.alloc.rate:                   543.847 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.887 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 306.857 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 3266472.750 ops/s
[info]                  ·gc.alloc.rate:                   531.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.780 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.942 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 3326372.445 ops/s
[info]                  ·gc.alloc.rate:                   540.907 MB/sec
[info]                  ·gc.alloc.rate.norm:              256.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.304 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 308.249 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala":
[info]   3330601.016 ±(99.9%) 146840.674 ops/s [Average]
[info]   (min, avg, max) = (3266472.750, 3330601.016, 3360403.507), stdev = 38134.057
[info]   CI (99.9%): [3183760.342, 3477441.690] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   541.636 ±(99.9%) 23.486 MB/sec [Average]
[info]   (min, avg, max) = (531.404, 541.636, 546.470), stdev = 6.099
[info]   CI (99.9%): [518.149, 565.122] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   256.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (256.000, 256.000, 256.000), stdev = 0.001
[info]   CI (99.9%): [256.000, 256.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.787 ±(99.9%) 6.374 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.787, 3.748), stdev = 1.655
[info]   CI (99.9%): [≈ 0, 7.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.369 ±(99.9%) 2.986 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.369, 1.756), stdev = 0.775
[info]   CI (99.9%): [≈ 0, 3.355] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   522.118 ±(99.9%) 686.844 MB/sec [Average]
[info]   (min, avg, max) = (325.780, 522.118, 653.947), stdev = 178.371
[info]   CI (99.9%): [≈ 0, 1208.962] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   246.483 ±(99.9%) 320.836 B/op [Average]
[info]   (min, avg, max) = (153.502, 246.483, 308.249), stdev = 83.320
[info]   CI (99.9%): [≈ 0, 567.319] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson
[info] # Run progress: 74.92% complete, ETA 00:16:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 77602.634 ops/s
[info] # Warmup Iteration   2: 321813.586 ops/s
[info] # Warmup Iteration   3: 328599.851 ops/s
[info] Iteration   1: 326430.135 ops/s
[info]                  ·gc.alloc.rate:                   1268.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.201 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.673 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6317.090 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 326651.730 ops/s
[info]                  ·gc.alloc.rate:                   1269.901 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.501 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6361.367 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 322907.165 ops/s
[info]                  ·gc.alloc.rate:                   1255.300 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.406 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.175 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6480.166 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 326031.893 ops/s
[info]                  ·gc.alloc.rate:                   1267.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.301 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1337.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6456.634 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 326123.528 ops/s
[info]                  ·gc.alloc.rate:                   1267.896 MB/sec
[info]                  ·gc.alloc.rate.norm:              6120.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.402 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1343.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6486.919 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson":
[info]   325628.890 ±(99.9%) 5935.197 ops/s [Average]
[info]   (min, avg, max) = (322907.165, 325628.890, 326651.730), stdev = 1541.352
[info]   CI (99.9%): [319693.693, 331564.087] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1265.931 ±(99.9%) 23.123 MB/sec [Average]
[info]   (min, avg, max) = (1255.300, 1265.931, 1269.901), stdev = 6.005
[info]   CI (99.9%): [1242.809, 1289.054] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   6120.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6120.001, 6120.001, 6120.001), stdev = 0.001
[info]   CI (99.9%): [6120.001, 6120.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.362 ±(99.9%) 0.442 B/op [Average]
[info]   (min, avg, max) = (0.201, 0.362, 0.501), stdev = 0.115
[info]   CI (99.9%): [≈ 0, 0.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1328.045 ±(99.9%) 52.535 MB/sec [Average]
[info]   (min, avg, max) = (1309.673, 1328.045, 1343.911), stdev = 13.643
[info]   CI (99.9%): [1275.509, 1380.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6420.435 ±(99.9%) 294.942 B/op [Average]
[info]   (min, avg, max) = (6317.090, 6420.435, 6486.919), stdev = 76.595
[info]   CI (99.9%): [6125.494, 6715.377] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntAndLongMapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce
[info] # Run progress: 75.25% complete, ETA 00:16:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4743010.425 ops/s
[info] # Warmup Iteration   2: 6903565.895 ops/s
[info] # Warmup Iteration   3: 6890066.611 ops/s
[info] Iteration   1: 6945440.524 ops/s
[info]                  ·gc.alloc.rate:                   4305.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4396.628 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 996.645 B/op
[info]                  ·gc.count:                        13.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   2: 6875267.640 ops/s
[info]                  ·gc.alloc.rate:                   4263.814 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4078.229 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 933.519 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 6907738.201 ops/s
[info]                  ·gc.alloc.rate:                   4282.271 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4423.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1008.201 B/op
[info]                  ·gc.count:                        13.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 6948861.075 ops/s
[info]                  ·gc.alloc.rate:                   4307.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4083.377 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 925.139 B/op
[info]                  ·gc.count:                        12.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   5: 6825304.485 ops/s
[info]                  ·gc.alloc.rate:                   4231.229 MB/sec
[info]                  ·gc.alloc.rate.norm:              976.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      4423.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1020.304 B/op
[info]                  ·gc.count:                        13.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce":
[info]   6900522.385 ±(99.9%) 199174.262 ops/s [Average]
[info]   (min, avg, max) = (6825304.485, 6900522.385, 6948861.075), stdev = 51724.923
[info]   CI (99.9%): [6701348.123, 7099696.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate":
[info]   4278.147 ±(99.9%) 122.651 MB/sec [Average]
[info]   (min, avg, max) = (4231.229, 4278.147, 4307.867), stdev = 31.852
[info]   CI (99.9%): [4155.496, 4400.798] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   976.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (976.000, 976.000, 976.000), stdev = 0.001
[info]   CI (99.9%): [976.000, 976.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.146 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.104, 0.146, 0.187), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.296] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.035 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.033, 0.043), stdev = 0.009
[info]   CI (99.9%): [≈ 0, 0.068] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   4281.017 ±(99.9%) 705.075 MB/sec [Average]
[info]   (min, avg, max) = (4078.229, 4281.017, 4423.553), stdev = 183.106
[info]   CI (99.9%): [3575.942, 4986.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   976.761 ±(99.9%) 170.198 B/op [Average]
[info]   (min, avg, max) = (925.139, 976.761, 1020.304), stdev = 44.200
[info]   CI (99.9%): [806.564, 1146.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.count":
[info]   63.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (12.000, 12.600, 13.000), stdev = 0.548
[info]   CI (99.9%): [63.000, 63.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readCirce:·gc.time":
[info]   55.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (10.000, 11.000, 12.000), stdev = 0.707
[info]   CI (99.9%): [55.000, 55.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala
[info] # Run progress: 75.58% complete, ETA 00:15:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3559911.337 ops/s
[info] # Warmup Iteration   2: 8867625.055 ops/s
[info] # Warmup Iteration   3: 8502439.572 ops/s
[info] Iteration   1: 8556204.057 ops/s
[info]                  ·gc.alloc.rate:                   3216.853 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3024.859 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 556.667 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   2: 8628953.364 ops/s
[info]                  ·gc.alloc.rate:                   3245.080 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3385.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.600 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   3: 8528679.364 ops/s
[info]                  ·gc.alloc.rate:                   3208.356 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.104 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 564.091 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   4: 8493529.798 ops/s
[info]                  ·gc.alloc.rate:                   3194.483 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 630.641 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   5: 8525649.429 ops/s
[info]                  ·gc.alloc.rate:                   3206.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              592.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.740 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 565.509 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala":
[info]   8546603.202 ±(99.9%) 196824.378 ops/s [Average]
[info]   (min, avg, max) = (8493529.798, 8546603.202, 8628953.364), stdev = 51114.666
[info]   CI (99.9%): [8349778.825, 8743427.580] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   3214.198 ±(99.9%) 73.245 MB/sec [Average]
[info]   (min, avg, max) = (3194.483, 3214.198, 3245.080), stdev = 19.022
[info]   CI (99.9%): [3140.952, 3287.443] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   592.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (592.000, 592.000, 592.000), stdev = 0.001
[info]   CI (99.9%): [592.000, 592.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.121 ±(99.9%) 0.222 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.121, 0.187), stdev = 0.058
[info]   CI (99.9%): [≈ 0, 0.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.041 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.022, 0.034), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   3186.621 ±(99.9%) 732.184 MB/sec [Average]
[info]   (min, avg, max) = (3024.859, 3186.621, 3402.995), stdev = 190.146
[info]   CI (99.9%): [2454.437, 3918.804] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   586.902 ±(99.9%) 132.661 B/op [Average]
[info]   (min, avg, max) = (556.667, 586.902, 630.641), stdev = 34.452
[info]   CI (99.9%): [454.241, 719.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.count":
[info]   47.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.400, 10.000), stdev = 0.548
[info]   CI (99.9%): [47.000, 47.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJacksonScala:·gc.time":
[info]   51.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.200, 11.000), stdev = 0.837
[info]   CI (99.9%): [51.000, 51.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala
[info] # Run progress: 75.91% complete, ETA 00:15:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 35610661.388 ops/s
[info] # Warmup Iteration   2: 43126887.023 ops/s
[info] # Warmup Iteration   3: 48378310.156 ops/s
[info] Iteration   1: 48659765.352 ops/s
[info]                  ·gc.alloc.rate:                   494.492 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.695 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8.273 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 47806184.755 ops/s
[info]                  ·gc.alloc.rate:                   485.827 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.214 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.254 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.843 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 48704302.084 ops/s
[info]                  ·gc.alloc.rate:                   494.866 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.558 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.655 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 48636749.918 ops/s
[info]                  ·gc.alloc.rate:                   494.325 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.644 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 21.319 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 48646628.237 ops/s
[info]                  ·gc.alloc.rate:                   494.456 MB/sec
[info]                  ·gc.alloc.rate.norm:              16.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10.646 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala":
[info]   48490726.069 ±(99.9%) 1476879.145 ops/s [Average]
[info]   (min, avg, max) = (47806184.755, 48490726.069, 48704302.084), stdev = 383540.824
[info]   CI (99.9%): [47013846.925, 49967605.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   492.793 ±(99.9%) 15.014 MB/sec [Average]
[info]   (min, avg, max) = (485.827, 492.793, 494.866), stdev = 3.899
[info]   CI (99.9%): [477.779, 507.808] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   16.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (16.000, 16.000, 16.000), stdev = 0.001
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.660 ±(99.9%) 5.500 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.660, 3.214), stdev = 1.428
[info]   CI (99.9%): [≈ 0, 6.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.022 ±(99.9%) 0.181 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.022, 0.106), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.203] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   447.232 ±(99.9%) 760.127 MB/sec [Average]
[info]   (min, avg, max) = (255.695, 447.232, 663.254), stdev = 197.403
[info]   CI (99.9%): [≈ 0, 1207.359] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14.547 ±(99.9%) 25.015 B/op [Average]
[info]   (min, avg, max) = (8.273, 14.547, 21.843), stdev = 6.496
[info]   CI (99.9%): [≈ 0, 39.562] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala
[info] # Run progress: 76.24% complete, ETA 00:15:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 22606816.181 ops/s
[info] # Warmup Iteration   2: 28237030.387 ops/s
[info] # Warmup Iteration   3: 28435342.535 ops/s
[info] Iteration   1: 28182249.690 ops/s
[info]                  ·gc.alloc.rate:                   1431.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.525 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 91.937 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 28486994.271 ops/s
[info]                  ·gc.alloc.rate:                   1447.273 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 73.164 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 28033835.715 ops/s
[info]                  ·gc.alloc.rate:                   1424.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.192 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.756 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 28443828.891 ops/s
[info]                  ·gc.alloc.rate:                   1445.498 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.618 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 92.625 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 28459317.074 ops/s
[info]                  ·gc.alloc.rate:                   1446.222 MB/sec
[info]                  ·gc.alloc.rate.norm:              80.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.162 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 74.410 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala":
[info]   28321245.128 ±(99.9%) 778476.318 ops/s [Average]
[info]   (min, avg, max) = (28033835.715, 28321245.128, 28486994.271), stdev = 202167.828
[info]   CI (99.9%): [27542768.810, 29099721.447] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate":
[info]   1439.087 ±(99.9%) 39.547 MB/sec [Average]
[info]   (min, avg, max) = (1424.565, 1439.087, 1447.273), stdev = 10.270
[info]   CI (99.9%): [1399.540, 1478.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.alloc.rate.norm":
[info]   80.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (80.000, 80.000, 80.000), stdev = 0.001
[info]   CI (99.9%): [80.000, 80.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.160 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.166), stdev = 0.042
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.006 ±(99.9%) 0.009 B/op [Average]
[info]   (min, avg, max) = (0.003, 0.006, 0.009), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   1463.822 ±(99.9%) 689.793 MB/sec [Average]
[info]   (min, avg, max) = (1323.611, 1463.822, 1673.618), stdev = 179.137
[info]   CI (99.9%): [774.029, 2153.614] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   81.379 ±(99.9%) 38.403 B/op [Average]
[info]   (min, avg, max) = (73.164, 81.379, 92.625), stdev = 9.973
[info]   CI (99.9%): [42.976, 119.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readNaiveScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 0.707
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson
[info] # Run progress: 76.57% complete, ETA 00:15:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4173557.349 ops/s
[info] # Warmup Iteration   2: 7230182.658 ops/s
[info] # Warmup Iteration   3: 7467255.786 ops/s
[info] Iteration   1: 7473257.629 ops/s
[info]                  ·gc.alloc.rate:                   3607.876 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3687.763 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 776.828 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   2: 7454992.905 ops/s
[info]                  ·gc.alloc.rate:                   3598.780 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3382.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 714.287 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 7431492.162 ops/s
[info]                  ·gc.alloc.rate:                   3587.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3734.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 791.151 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         12.000 ms
[info] Iteration   4: 7414982.542 ops/s
[info]                  ·gc.alloc.rate:                   3579.603 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3402.317 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 722.360 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 7450245.012 ops/s
[info]                  ·gc.alloc.rate:                   3596.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              760.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3743.240 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 790.991 B/op
[info]                  ·gc.count:                        11.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson":
[info]   7444994.050 ±(99.9%) 86304.502 ops/s [Average]
[info]   (min, avg, max) = (7414982.542, 7444994.050, 7473257.629), stdev = 22413.005
[info]   CI (99.9%): [7358689.548, 7531298.552] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate":
[info]   3594.070 ±(99.9%) 41.804 MB/sec [Average]
[info]   (min, avg, max) = (3579.603, 3594.070, 3607.876), stdev = 10.856
[info]   CI (99.9%): [3552.266, 3635.874] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   760.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (760.000, 760.000, 760.000), stdev = 0.001
[info]   CI (99.9%): [760.000, 760.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.129 ±(99.9%) 0.207 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.129, 0.208), stdev = 0.054
[info]   CI (99.9%): [≈ 0, 0.336] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.027 ±(99.9%) 0.044 B/op [Average]
[info]   (min, avg, max) = (0.013, 0.027, 0.044), stdev = 0.011
[info]   CI (99.9%): [≈ 0, 0.071] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   3590.040 ±(99.9%) 700.279 MB/sec [Average]
[info]   (min, avg, max) = (3382.320, 3590.040, 3743.240), stdev = 181.860
[info]   CI (99.9%): [2889.761, 4290.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   759.124 ±(99.9%) 145.570 B/op [Average]
[info]   (min, avg, max) = (714.287, 759.124, 791.151), stdev = 37.804
[info]   CI (99.9%): [613.553, 904.694] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.count":
[info]   53.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (10.000, 10.600, 11.000), stdev = 0.548
[info]   CI (99.9%): [53.000, 53.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.readPlayJson:·gc.time":
[info]   54.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (9.000, 10.800, 12.000), stdev = 1.304
[info]   CI (99.9%): [54.000, 54.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce
[info] # Run progress: 76.90% complete, ETA 00:14:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 13672760.380 ops/s
[info] # Warmup Iteration   2: 20458925.363 ops/s
[info] # Warmup Iteration   3: 19875762.521 ops/s
[info] Iteration   1: 19972101.863 ops/s
[info]                  ·gc.alloc.rate:                   2334.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2314.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.447 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 20135292.756 ops/s
[info]                  ·gc.alloc.rate:                   2353.201 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2340.012 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 182.969 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 20101817.783 ops/s
[info]                  ·gc.alloc.rate:                   2349.332 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.423 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 184.634 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 19816454.259 ops/s
[info]                  ·gc.alloc.rate:                   2316.260 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2368.902 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 188.182 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 20119453.830 ops/s
[info]                  ·gc.alloc.rate:                   2352.353 MB/sec
[info]                  ·gc.alloc.rate.norm:              184.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.171 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 185.863 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce":
[info]   20029024.098 ±(99.9%) 520889.664 ops/s [Average]
[info]   (min, avg, max) = (19816454.259, 20029024.098, 20135292.756), stdev = 135273.392
[info]   CI (99.9%): [19508134.434, 20549913.762] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate":
[info]   2341.095 ±(99.9%) 60.996 MB/sec [Average]
[info]   (min, avg, max) = (2316.260, 2341.095, 2353.201), stdev = 15.841
[info]   CI (99.9%): [2280.099, 2402.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   184.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (184.000, 184.000, 184.000), stdev = 0.001
[info]   CI (99.9%): [184.000, 184.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.088 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.108, 0.146), stdev = 0.023
[info]   CI (99.9%): [0.020, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.009 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.007, 0.009, 0.011), stdev = 0.002
[info]   CI (99.9%): [0.002, 0.015] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2351.428 ±(99.9%) 95.060 MB/sec [Average]
[info]   (min, avg, max) = (2314.632, 2351.428, 2376.171), stdev = 24.687
[info]   CI (99.9%): [2256.368, 2446.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   184.819 ±(99.9%) 8.924 B/op [Average]
[info]   (min, avg, max) = (182.447, 184.819, 188.182), stdev = 2.317
[info]   CI (99.9%): [175.895, 193.742] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.count":
[info]   35.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.000, 7.000), stdev = 0.001
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeCirce:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala
[info] # Run progress: 77.23% complete, ETA 00:14:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5063467.431 ops/s
[info] # Warmup Iteration   2: 12786805.310 ops/s
[info] # Warmup Iteration   3: 12933499.705 ops/s
[info] Iteration   1: 12922667.329 ops/s
[info]                  ·gc.alloc.rate:                   2560.941 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.008 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2678.395 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 326.309 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 12946516.086 ops/s
[info]                  ·gc.alloc.rate:                   2566.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2700.210 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.305 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   3: 12921639.142 ops/s
[info]                  ·gc.alloc.rate:                   2560.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.013 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2371.487 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 288.944 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 12953499.069 ops/s
[info]                  ·gc.alloc.rate:                   2566.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2716.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 330.159 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 12935989.155 ops/s
[info]                  ·gc.alloc.rate:                   2563.715 MB/sec
[info]                  ·gc.alloc.rate.norm:              312.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2381.251 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 289.794 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala":
[info]   12936062.156 ±(99.9%) 54482.892 ops/s [Average]
[info]   (min, avg, max) = (12921639.142, 12936062.156, 12953499.069), stdev = 14149.034
[info]   CI (99.9%): [12881579.264, 12990545.048] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   2563.696 ±(99.9%) 11.095 MB/sec [Average]
[info]   (min, avg, max) = (2560.715, 2563.696, 2566.999), stdev = 2.881
[info]   CI (99.9%): [2552.601, 2574.791] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   312.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (312.000, 312.000, 312.000), stdev = 0.001
[info]   CI (99.9%): [312.000, 312.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.146), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.231] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.013 ±(99.9%) 0.015 B/op [Average]
[info]   (min, avg, max) = (0.008, 0.013, 0.018), stdev = 0.004
[info]   CI (99.9%): [≈ 0, 0.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2569.550 ±(99.9%) 681.171 MB/sec [Average]
[info]   (min, avg, max) = (2371.487, 2569.550, 2716.407), stdev = 176.898
[info]   CI (99.9%): [1888.379, 3250.721] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   312.702 ±(99.9%) 82.195 B/op [Average]
[info]   (min, avg, max) = (288.944, 312.702, 330.159), stdev = 21.346
[info]   CI (99.9%): [230.508, 394.897] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJacksonScala:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala
[info] # Run progress: 77.56% complete, ETA 00:14:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 34450493.952 ops/s
[info] # Warmup Iteration   2: 45254802.464 ops/s
[info] # Warmup Iteration   3: 51228666.950 ops/s
[info] Iteration   1: 51385335.503 ops/s
[info]                  ·gc.alloc.rate:                   1044.444 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 29.949 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 51668786.811 ops/s
[info]                  ·gc.alloc.rate:                   1050.141 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.815 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 39.791 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 51427980.145 ops/s
[info]                  ·gc.alloc.rate:                   1045.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.084 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.119 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 49801685.404 ops/s
[info]                  ·gc.alloc.rate:                   1012.365 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.613 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 31.249 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 50702038.803 ops/s
[info]                  ·gc.alloc.rate:                   1030.668 MB/sec
[info]                  ·gc.alloc.rate.norm:              32.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.003 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.281 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 30.839 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala":
[info]   50997165.333 ±(99.9%) 2922195.315 ops/s [Average]
[info]   (min, avg, max) = (49801685.404, 50997165.333, 51668786.811), stdev = 758884.843
[info]   CI (99.9%): [48074970.019, 53919360.648] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   1036.635 ±(99.9%) 59.270 MB/sec [Average]
[info]   (min, avg, max) = (1012.365, 1036.635, 1050.141), stdev = 15.392
[info]   CI (99.9%): [977.365, 1095.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   32.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (32.000, 32.000, 32.000), stdev = 0.001
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.024
[info]   CI (99.9%): [≈ 10⁻⁴, 0.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.003 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.003, 0.004), stdev = 0.001
[info]   CI (99.9%): [≈ 10⁻⁴, 0.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1049.858 ±(99.9%) 551.422 MB/sec [Average]
[info]   (min, avg, max) = (977.497, 1049.858, 1305.815), stdev = 143.203
[info]   CI (99.9%): [498.436, 1601.280] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   32.389 ±(99.9%) 16.062 B/op [Average]
[info]   (min, avg, max) = (29.949, 32.389, 39.791), stdev = 4.171
[info]   CI (99.9%): [16.327, 48.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScala:·gc.time":
[info]   15.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.000, 4.000), stdev = 0.707
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 77.89% complete, ETA 00:14:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 36827726.963 ops/s
[info] # Warmup Iteration   2: 48607840.335 ops/s
[info] # Warmup Iteration   3: 56936585.381 ops/s
[info] Iteration   1: 56987490.911 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 57093566.300 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 56844903.510 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 56821899.692 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 56830199.588 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁵ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc":
[info]   56915612.000 ±(99.9%) 463324.153 ops/s [Average]
[info]   (min, avg, max) = (56821899.692, 56915612.000, 57093566.300), stdev = 120323.811
[info]   CI (99.9%): [56452287.848, 57378936.153] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁵ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala
[info] # Run progress: 78.22% complete, ETA 00:14:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 30294020.463 ops/s
[info] # Warmup Iteration   2: 33100763.857 ops/s
[info] # Warmup Iteration   3: 33420003.556 ops/s
[info] Iteration   1: 32885706.902 ops/s
[info]                  ·gc.alloc.rate:                   2507.149 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.002 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2679.258 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.238 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 33125012.684 ops/s
[info]                  ·gc.alloc.rate:                   2525.436 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2360.480 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.162 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 33298163.398 ops/s
[info]                  ·gc.alloc.rate:                   2537.912 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2708.676 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 128.074 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 33175097.442 ops/s
[info]                  ·gc.alloc.rate:                   2529.326 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.006 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.209 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 112.783 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 33024839.003 ops/s
[info]                  ·gc.alloc.rate:                   2517.563 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.993 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 129.649 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala":
[info]   33101763.886 ±(99.9%) 599913.590 ops/s [Average]
[info]   (min, avg, max) = (32885706.902, 33101763.886, 33298163.398), stdev = 155795.654
[info]   CI (99.9%): [32501850.296, 33701677.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate":
[info]   2523.477 ±(99.9%) 45.070 MB/sec [Average]
[info]   (min, avg, max) = (2507.149, 2523.477, 2537.912), stdev = 11.704
[info]   CI (99.9%): [2478.408, 2568.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.154 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.100, 0.146), stdev = 0.040
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.005 ±(99.9%) 0.007 B/op [Average]
[info]   (min, avg, max) = (0.002, 0.005, 0.007), stdev = 0.002
[info]   CI (99.9%): [≈ 0, 0.012] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space":
[info]   2569.123 ±(99.9%) 706.699 MB/sec [Average]
[info]   (min, avg, max) = (2360.480, 2569.123, 2719.993), stdev = 183.528
[info]   CI (99.9%): [1862.424, 3275.822] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm":
[info]   122.181 ±(99.9%) 34.219 B/op [Average]
[info]   (min, avg, max) = (112.162, 122.181, 129.649), stdev = 8.887
[info]   CI (99.9%): [87.962, 156.400] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.count":
[info]   38.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writeNaiveScala:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 8.000), stdev = 0.894
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson
[info] # Run progress: 78.55% complete, ETA 00:13:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1717948.618 ops/s
[info] # Warmup Iteration   2: 2535407.916 ops/s
[info] # Warmup Iteration   3: 2570724.649 ops/s
[info] Iteration   1: 2581816.343 ops/s
[info]                  ·gc.alloc.rate:                   2112.196 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.076 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2306.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1406.729 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 2622393.741 ops/s
[info]                  ·gc.alloc.rate:                   2145.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.100 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1998.409 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1199.783 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 2609180.359 ops/s
[info]                  ·gc.alloc.rate:                   2134.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2013.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1215.018 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 2573262.211 ops/s
[info]                  ·gc.alloc.rate:                   2105.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2362.776 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1445.646 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 2569183.949 ops/s
[info]                  ·gc.alloc.rate:                   2101.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              1288.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.077 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1245.363 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson":
[info]   2591167.321 ±(99.9%) 90117.846 ops/s [Average]
[info]   (min, avg, max) = (2569183.949, 2591167.321, 2622393.741), stdev = 23403.318
[info]   CI (99.9%): [2501049.475, 2681285.167] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate":
[info]   2119.824 ±(99.9%) 73.693 MB/sec [Average]
[info]   (min, avg, max) = (2101.888, 2119.824, 2145.347), stdev = 19.138
[info]   CI (99.9%): [2046.131, 2193.517] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   1288.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1288.000, 1288.000, 1288.000), stdev = 0.001
[info]   CI (99.9%): [1288.000, 1288.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.108 ±(99.9%) 0.183 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.108, 0.166), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.066 ±(99.9%) 0.110 B/op [Average]
[info]   (min, avg, max) = (0.025, 0.066, 0.100), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.176] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2142.803 ±(99.9%) 680.875 MB/sec [Average]
[info]   (min, avg, max) = (1998.409, 2142.803, 2362.776), stdev = 176.821
[info]   CI (99.9%): [1461.928, 2823.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   1302.508 ±(99.9%) 442.501 B/op [Average]
[info]   (min, avg, max) = (1199.783, 1302.508, 1445.646), stdev = 114.916
[info]   CI (99.9%): [860.006, 1745.009] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IntBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.000, 7.000), stdev = 0.707
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce
[info] # Run progress: 78.88% complete, ETA 00:13:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 434256.515 ops/s
[info] # Warmup Iteration   2: 615446.848 ops/s
[info] # Warmup Iteration   3: 622168.616 ops/s
[info] Iteration   1: 618739.197 ops/s
[info]                  ·gc.alloc.rate:                   2244.836 MB/sec
[info]                  ·gc.alloc.rate.norm:              5712.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.159 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1986.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5054.640 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 623122.833 ops/s
[info]                  ·gc.alloc.rate:                   2260.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5712.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.263 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2339.764 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5912.362 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 622633.275 ops/s
[info]                  ·gc.alloc.rate:                   2258.999 MB/sec
[info]                  ·gc.alloc.rate.norm:              5712.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.158 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2357.298 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5960.554 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 621058.338 ops/s
[info]                  ·gc.alloc.rate:                   2253.536 MB/sec
[info]                  ·gc.alloc.rate.norm:              5712.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.264 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2029.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5144.993 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 622292.791 ops/s
[info]                  ·gc.alloc.rate:                   2257.915 MB/sec
[info]                  ·gc.alloc.rate.norm:              5712.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.421 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.883 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5150.311 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce":
[info]   621569.287 ±(99.9%) 6763.203 ops/s [Average]
[info]   (min, avg, max) = (618739.197, 621569.287, 623122.833), stdev = 1756.382
[info]   CI (99.9%): [614806.084, 628332.489] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2255.152 ±(99.9%) 24.336 MB/sec [Average]
[info]   (min, avg, max) = (2244.836, 2255.152, 2260.473), stdev = 6.320
[info]   CI (99.9%): [2230.816, 2279.488] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5712.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5712.001, 5712.001, 5712.001), stdev = 0.001
[info]   CI (99.9%): [5712.001, 5712.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.253 ±(99.9%) 0.415 B/op [Average]
[info]   (min, avg, max) = (0.158, 0.253, 0.421), stdev = 0.108
[info]   CI (99.9%): [≈ 0, 0.668] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2149.854 ±(99.9%) 702.623 MB/sec [Average]
[info]   (min, avg, max) = (1986.491, 2149.854, 2357.298), stdev = 182.469
[info]   CI (99.9%): [1447.231, 2852.478] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5444.572 ±(99.9%) 1736.475 B/op [Average]
[info]   (min, avg, max) = (5054.640, 5444.572, 5960.554), stdev = 450.957
[info]   CI (99.9%): [3708.097, 7181.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.count":
[info]   32.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 7.000), stdev = 0.837
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala
[info] # Run progress: 79.21% complete, ETA 00:13:28
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 254930.341 ops/s
[info] # Warmup Iteration   2: 633638.443 ops/s
[info] # Warmup Iteration   3: 636786.462 ops/s
[info] Iteration   1: 636712.779 ops/s
[info]                  ·gc.alloc.rate:                   740.885 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.103 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      647.247 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1600.460 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 636419.468 ops/s
[info]                  ·gc.alloc.rate:                   740.571 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.206 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.592 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2415.861 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 636308.791 ops/s
[info]                  ·gc.alloc.rate:                   740.540 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1619.525 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 629506.207 ops/s
[info]                  ·gc.alloc.rate:                   732.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.208 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1643.677 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 628592.398 ops/s
[info]                  ·gc.alloc.rate:                   731.509 MB/sec
[info]                  ·gc.alloc.rate.norm:              1832.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.156 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.932 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1652.743 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala":
[info]   633507.929 ±(99.9%) 15732.270 ops/s [Average]
[info]   (min, avg, max) = (628592.398, 633507.929, 636712.779), stdev = 4085.620
[info]   CI (99.9%): [617775.659, 649240.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   737.203 ±(99.9%) 18.316 MB/sec [Average]
[info]   (min, avg, max) = (731.509, 737.203, 740.885), stdev = 4.757
[info]   CI (99.9%): [718.887, 755.518] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1832.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1832.001, 1832.001, 1832.001), stdev = 0.001
[info]   CI (99.9%): [1832.001, 1832.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.141] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.124 ±(99.9%) 0.227 B/op [Average]
[info]   (min, avg, max) = (0.051, 0.124, 0.206), stdev = 0.059
[info]   CI (99.9%): [≈ 0, 0.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   719.126 ±(99.9%) 554.513 MB/sec [Average]
[info]   (min, avg, max) = (647.247, 719.126, 976.592), stdev = 144.005
[info]   CI (99.9%): [164.614, 1273.639] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1786.453 ±(99.9%) 1357.149 B/op [Average]
[info]   (min, avg, max) = (1600.460, 1786.453, 2415.861), stdev = 352.447
[info]   CI (99.9%): [429.304, 3143.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJacksonScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala
[info] # Run progress: 79.54% complete, ETA 00:13:15
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3230204.113 ops/s
[info] # Warmup Iteration   2: 3699885.424 ops/s
[info] # Warmup Iteration   3: 3764724.924 ops/s
[info] Iteration   1: 3805051.440 ops/s
[info]                  ·gc.alloc.rate:                   1507.959 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1643.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 680.107 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3775866.829 ops/s
[info]                  ·gc.alloc.rate:                   1496.696 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.321 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 551.717 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3776684.444 ops/s
[info]                  ·gc.alloc.rate:                   1496.971 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1665.169 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 694.112 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3768473.956 ops/s
[info]                  ·gc.alloc.rate:                   1493.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 559.744 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3761236.105 ops/s
[info]                  ·gc.alloc.rate:                   1491.244 MB/sec
[info]                  ·gc.alloc.rate.norm:              624.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.468 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 563.001 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala":
[info]   3777462.555 ±(99.9%) 64098.793 ops/s [Average]
[info]   (min, avg, max) = (3761236.105, 3777462.555, 3805051.440), stdev = 16646.253
[info]   CI (99.9%): [3713363.762, 3841561.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1497.287 ±(99.9%) 24.709 MB/sec [Average]
[info]   (min, avg, max) = (1491.244, 1497.287, 1507.959), stdev = 6.417
[info]   CI (99.9%): [1472.578, 1521.997] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   624.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (624.000, 624.000, 624.000), stdev = 0.001
[info]   CI (99.9%): [624.000, 624.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.092, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.213] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.038 ±(99.9%) 0.050 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.038, 0.052), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1463.454 ±(99.9%) 672.427 MB/sec [Average]
[info]   (min, avg, max) = (1323.321, 1463.454, 1665.169), stdev = 174.627
[info]   CI (99.9%): [791.027, 2135.881] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   609.736 ±(99.9%) 273.104 B/op [Average]
[info]   (min, avg, max) = (551.717, 609.736, 694.112), stdev = 70.924
[info]   CI (99.9%): [336.633, 882.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.count":
[info]   22.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readJsoniterScala:·gc.time":
[info]   20.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.000, 5.000), stdev = 1.000
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson
[info] # Run progress: 79.87% complete, ETA 00:13:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 48636.028 ops/s
[info] # Warmup Iteration   2: 238563.498 ops/s
[info] # Warmup Iteration   3: 239838.853 ops/s
[info] Iteration   1: 240359.060 ops/s
[info]                  ·gc.alloc.rate:                   1661.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              10888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.273 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.261 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10793.087 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 242250.330 ops/s
[info]                  ·gc.alloc.rate:                   1675.435 MB/sec
[info]                  ·gc.alloc.rate.norm:              10888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.541 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1663.940 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10813.297 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 241757.126 ops/s
[info]                  ·gc.alloc.rate:                   1671.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              10888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.136 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1674.436 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10904.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 240197.634 ops/s
[info]                  ·gc.alloc.rate:                   1661.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              10888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.546 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1683.694 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11036.241 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 242270.597 ops/s
[info]                  ·gc.alloc.rate:                   1675.553 MB/sec
[info]                  ·gc.alloc.rate.norm:              10888.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10980.635 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson":
[info]   241366.949 ±(99.9%) 3913.814 ops/s [Average]
[info]   (min, avg, max) = (240197.634, 241366.949, 242270.597), stdev = 1016.405
[info]   CI (99.9%): [237453.136, 245280.763] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1669.158 ±(99.9%) 27.797 MB/sec [Average]
[info]   (min, avg, max) = (1661.078, 1669.158, 1675.553), stdev = 7.219
[info]   CI (99.9%): [1641.361, 1696.955] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10888.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10888.002, 10888.002, 10888.002), stdev = 0.001
[info]   CI (99.9%): [10888.001, 10888.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.050 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.050, 0.083), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.171] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.326 ±(99.9%) 0.794 B/op [Average]
[info]   (min, avg, max) = (0.135, 0.326, 0.546), stdev = 0.206
[info]   CI (99.9%): [≈ 0, 1.120] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1671.828 ±(99.9%) 64.910 MB/sec [Average]
[info]   (min, avg, max) = (1647.261, 1671.828, 1689.808), stdev = 16.857
[info]   CI (99.9%): [1606.917, 1736.738] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10905.454 ±(99.9%) 403.302 B/op [Average]
[info]   (min, avg, max) = (10793.087, 10905.454, 11036.241), stdev = 104.736
[info]   CI (99.9%): [10502.152, 11308.756] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.readPlayJson:·gc.time":
[info]   31.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce
[info] # Run progress: 80.20% complete, ETA 00:12:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 572591.451 ops/s
[info] # Warmup Iteration   2: 855808.996 ops/s
[info] # Warmup Iteration   3: 874025.853 ops/s
[info] Iteration   1: 875622.715 ops/s
[info]                  ·gc.alloc.rate:                   2011.122 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.187 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1973.714 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3548.740 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 872884.867 ops/s
[info]                  ·gc.alloc.rate:                   2004.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1994.419 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3597.357 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 868195.296 ops/s
[info]                  ·gc.alloc.rate:                   1994.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2010.824 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3646.004 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 868430.842 ops/s
[info]                  ·gc.alloc.rate:                   1994.742 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.113 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2022.398 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3666.134 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 868044.279 ops/s
[info]                  ·gc.alloc.rate:                   1993.779 MB/sec
[info]                  ·gc.alloc.rate.norm:              3616.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.151 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.318 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3682.269 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce":
[info]   870635.600 ±(99.9%) 13263.988 ops/s [Average]
[info]   (min, avg, max) = (868044.279, 870635.600, 875622.715), stdev = 3444.616
[info]   CI (99.9%): [857371.611, 883899.588] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1999.735 ±(99.9%) 30.141 MB/sec [Average]
[info]   (min, avg, max) = (1993.779, 1999.735, 2011.122), stdev = 7.827
[info]   CI (99.9%): [1969.594, 2029.876] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3616.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3616.000, 3616.000, 3616.001), stdev = 0.001
[info]   CI (99.9%): [3616.000, 3616.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.158 ±(99.9%) 0.187 B/op [Average]
[info]   (min, avg, max) = (0.113, 0.158, 0.225), stdev = 0.049
[info]   CI (99.9%): [≈ 0, 0.345] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   2006.335 ±(99.9%) 87.374 MB/sec [Average]
[info]   (min, avg, max) = (1973.714, 2006.335, 2030.318), stdev = 22.691
[info]   CI (99.9%): [1918.960, 2093.709] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3628.101 ±(99.9%) 210.422 B/op [Average]
[info]   (min, avg, max) = (3548.740, 3628.101, 3682.269), stdev = 54.646
[info]   CI (99.9%): [3417.679, 3838.522] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeCirce:·gc.time":
[info]   29.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala
[info] # Run progress: 80.53% complete, ETA 00:12:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 503380.768 ops/s
[info] # Warmup Iteration   2: 1450744.710 ops/s
[info] # Warmup Iteration   3: 1436366.427 ops/s
[info] Iteration   1: 1442576.158 ops/s
[info]                  ·gc.alloc.rate:                   974.978 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      976.512 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1065.675 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1443435.446 ops/s
[info]                  ·gc.alloc.rate:                   975.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.500 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.427 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1436497.722 ops/s
[info]                  ·gc.alloc.rate:                   970.990 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.137 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.679 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1083.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1460303.966 ops/s
[info]                  ·gc.alloc.rate:                   986.870 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      994.786 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1072.534 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1459664.753 ops/s
[info]                  ·gc.alloc.rate:                   986.577 MB/sec
[info]                  ·gc.alloc.rate.norm:              1064.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.135 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1077.318 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala":
[info]   1448495.609 ±(99.9%) 41685.845 ops/s [Average]
[info]   (min, avg, max) = (1436497.722, 1448495.609, 1460303.966), stdev = 10825.682
[info]   CI (99.9%): [1406809.764, 1490181.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   979.037 ±(99.9%) 27.907 MB/sec [Average]
[info]   (min, avg, max) = (970.990, 979.037, 986.870), stdev = 7.247
[info]   CI (99.9%): [951.130, 1006.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   1064.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1064.000, 1064.000, 1064.000), stdev = 0.001
[info]   CI (99.9%): [1064.000, 1064.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.134 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.035
[info]   CI (99.9%): [≈ 0, 0.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.100 ±(99.9%) 0.146 B/op [Average]
[info]   (min, avg, max) = (0.045, 0.100, 0.137), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.246] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   988.480 ±(99.9%) 34.276 MB/sec [Average]
[info]   (min, avg, max) = (976.512, 988.480, 998.926), stdev = 8.901
[info]   CI (99.9%): [954.204, 1022.757] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1074.267 ±(99.9%) 25.296 B/op [Average]
[info]   (min, avg, max) = (1065.675, 1074.267, 1083.383), stdev = 6.569
[info]   CI (99.9%): [1048.971, 1099.564] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala
[info] # Run progress: 80.86% complete, ETA 00:12:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5832963.002 ops/s
[info] # Warmup Iteration   2: 7077311.917 ops/s
[info] # Warmup Iteration   3: 6972779.336 ops/s
[info] Iteration   1: 7147891.062 ops/s
[info]                  ·gc.alloc.rate:                   799.251 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.728 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.735 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 7129717.665 ops/s
[info]                  ·gc.alloc.rate:                   797.269 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 215.726 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 7099839.668 ops/s
[info]                  ·gc.alloc.rate:                   793.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.048 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 144.567 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 7228955.471 ops/s
[info]                  ·gc.alloc.rate:                   808.267 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.018 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.086 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.631 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 7221200.137 ops/s
[info]                  ·gc.alloc.rate:                   807.320 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 143.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala":
[info]   7165520.801 ±(99.9%) 219780.620 ops/s [Average]
[info]   (min, avg, max) = (7099839.668, 7165520.801, 7228955.471), stdev = 57076.329
[info]   CI (99.9%): [6945740.180, 7385301.421] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   801.186 ±(99.9%) 24.437 MB/sec [Average]
[info]   (min, avg, max) = (793.821, 801.186, 808.267), stdev = 6.346
[info]   CI (99.9%): [776.749, 825.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.083), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.161] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.014 ±(99.9%) 0.021 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.014, 0.018), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.035] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   784.079 ±(99.9%) 685.784 MB/sec [Average]
[info]   (min, avg, max) = (652.048, 784.079, 981.086), stdev = 178.096
[info]   CI (99.9%): [98.295, 1469.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   172.191 ±(99.9%) 149.387 B/op [Average]
[info]   (min, avg, max) = (143.297, 172.191, 215.726), stdev = 38.795
[info]   CI (99.9%): [22.804, 321.578] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson
[info] # Run progress: 81.19% complete, ETA 00:12:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 181388.738 ops/s
[info] # Warmup Iteration   2: 564258.345 ops/s
[info] # Warmup Iteration   3: 569192.789 ops/s
[info] Iteration   1: 574597.390 ops/s
[info]                  ·gc.alloc.rate:                   1970.298 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.228 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1990.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5455.223 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 575727.680 ops/s
[info]                  ·gc.alloc.rate:                   1974.929 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.341 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4574.521 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 566043.187 ops/s
[info]                  ·gc.alloc.rate:                   1941.559 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.174 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.474 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5616.703 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 573289.242 ops/s
[info]                  ·gc.alloc.rate:                   1966.250 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.229 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.241 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5567.503 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 571552.742 ops/s
[info]                  ·gc.alloc.rate:                   1960.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              5400.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.401 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.497 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5600.713 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson":
[info]   572242.048 ±(99.9%) 14624.199 ops/s [Average]
[info]   (min, avg, max) = (566043.187, 572242.048, 575727.680), stdev = 3797.858
[info]   CI (99.9%): [557617.849, 586866.248] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1962.732 ±(99.9%) 49.877 MB/sec [Average]
[info]   (min, avg, max) = (1941.559, 1962.732, 1974.929), stdev = 12.953
[info]   CI (99.9%): [1912.855, 2012.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5400.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5400.001, 5400.001, 5400.001), stdev = 0.001
[info]   CI (99.9%): [5400.001, 5400.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.275 ±(99.9%) 0.360 B/op [Average]
[info]   (min, avg, max) = (0.174, 0.275, 0.401), stdev = 0.094
[info]   CI (99.9%): [≈ 0, 0.635] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1948.738 ±(99.9%) 596.868 MB/sec [Average]
[info]   (min, avg, max) = (1673.028, 1948.738, 2033.497), stdev = 155.005
[info]   CI (99.9%): [1351.869, 2545.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5362.933 ±(99.9%) 1714.400 B/op [Average]
[info]   (min, avg, max) = (4574.521, 5362.933, 5616.703), stdev = 445.224
[info]   CI (99.9%): [3648.533, 7077.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.IterablesBenchmark.writePlayJson:·gc.time":
[info]   33.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce
[info] # Run progress: 81.52% complete, ETA 00:11:58
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 407963.200 ops/s
[info] # Warmup Iteration   2: 635926.414 ops/s
[info] # Warmup Iteration   3: 648465.828 ops/s
[info] Iteration   1: 644813.341 ops/s
[info]                  ·gc.alloc.rate:                   2234.552 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.305 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2314.878 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5652.129 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 646063.776 ops/s
[info]                  ·gc.alloc.rate:                   2238.968 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.152 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2004.543 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4884.744 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 639756.645 ops/s
[info]                  ·gc.alloc.rate:                   2217.118 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2355.091 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5795.533 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Iteration   4: 649283.164 ops/s
[info]                  ·gc.alloc.rate:                   2250.383 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.252 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2367.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5739.457 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 639277.553 ops/s
[info]                  ·gc.alloc.rate:                   2216.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              5456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.308 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2035.327 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5010.252 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce":
[info]   643838.896 ±(99.9%) 16451.120 ops/s [Average]
[info]   (min, avg, max) = (639277.553, 643838.896, 649283.164), stdev = 4272.304
[info]   CI (99.9%): [627387.776, 660290.016] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate":
[info]   2231.485 ±(99.9%) 56.342 MB/sec [Average]
[info]   (min, avg, max) = (2216.405, 2231.485, 2250.383), stdev = 14.632
[info]   CI (99.9%): [2175.143, 2287.827] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   5456.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5456.001, 5456.001, 5456.001), stdev = 0.001
[info]   CI (99.9%): [5456.001, 5456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.244 ±(99.9%) 0.257 B/op [Average]
[info]   (min, avg, max) = (0.152, 0.244, 0.308), stdev = 0.067
[info]   CI (99.9%): [≈ 0, 0.501] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2215.427 ±(99.9%) 692.499 MB/sec [Average]
[info]   (min, avg, max) = (2004.543, 2215.427, 2367.297), stdev = 179.840
[info]   CI (99.9%): [1522.928, 2907.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   5416.423 ±(99.9%) 1668.811 B/op [Average]
[info]   (min, avg, max) = (4884.744, 5416.423, 5795.533), stdev = 433.385
[info]   CI (99.9%): [3747.611, 7085.234] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readCirce:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 6.800, 11.000), stdev = 2.387
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala
[info] # Run progress: 81.85% complete, ETA 00:11:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4776380.283 ops/s
[info] # Warmup Iteration   2: 5601804.023 ops/s
[info] # Warmup Iteration   3: 5577408.607 ops/s
[info] Iteration   1: 5665115.785 ops/s
[info]                  ·gc.alloc.rate:                   1410.349 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 364.734 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5684225.069 ops/s
[info]                  ·gc.alloc.rate:                   1414.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1649.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 457.045 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 5664802.041 ops/s
[info]                  ·gc.alloc.rate:                   1410.396 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.007 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 369.379 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 5682550.111 ops/s
[info]                  ·gc.alloc.rate:                   1414.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.012 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1336.510 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 370.258 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 5672354.420 ops/s
[info]                  ·gc.alloc.rate:                   1412.494 MB/sec
[info]                  ·gc.alloc.rate.norm:              392.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.534 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 372.585 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala":
[info]   5673809.485 ±(99.9%) 35694.587 ops/s [Average]
[info]   (min, avg, max) = (5664802.041, 5673809.485, 5684225.069), stdev = 9269.771
[info]   CI (99.9%): [5638114.898, 5709504.072] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1412.633 ±(99.9%) 8.846 MB/sec [Average]
[info]   (min, avg, max) = (1410.349, 1412.633, 1414.991), stdev = 2.297
[info]   CI (99.9%): [1403.787, 1421.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   392.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (392.000, 392.000, 392.000), stdev = 0.001
[info]   CI (99.9%): [392.000, 392.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.166] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.021 ±(99.9%) 0.025 B/op [Average]
[info]   (min, avg, max) = (0.012, 0.021, 0.029), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.046] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1394.004 ±(99.9%) 552.180 MB/sec [Average]
[info]   (min, avg, max) = (1312.250, 1394.004, 1649.720), stdev = 143.399
[info]   CI (99.9%): [841.824, 1946.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   386.800 ±(99.9%) 151.606 B/op [Average]
[info]   (min, avg, max) = (364.734, 386.800, 457.045), stdev = 39.372
[info]   CI (99.9%): [235.194, 538.407] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readJsoniterScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 5.000), stdev = 0.894
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson
[info] # Run progress: 82.18% complete, ETA 00:11:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 125990.685 ops/s
[info] # Warmup Iteration   2: 363348.827 ops/s
[info] # Warmup Iteration   3: 362680.163 ops/s
[info] Iteration   1: 364498.637 ops/s
[info]                  ·gc.alloc.rate:                   1902.078 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.449 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.245 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8583.876 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 367239.049 ops/s
[info]                  ·gc.alloc.rate:                   1916.569 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.446 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2006.546 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8601.718 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 364053.390 ops/s
[info]                  ·gc.alloc.rate:                   1899.954 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.270 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2019.748 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8734.030 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 367030.844 ops/s
[info]                  ·gc.alloc.rate:                   1914.923 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.268 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1689.586 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7249.189 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 366709.300 ops/s
[info]                  ·gc.alloc.rate:                   1913.920 MB/sec
[info]                  ·gc.alloc.rate.norm:              8216.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.715 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8727.961 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson":
[info]   365906.244 ±(99.9%) 5808.100 ops/s [Average]
[info]   (min, avg, max) = (364053.390, 365906.244, 367239.049), stdev = 1508.345
[info]   CI (99.9%): [360098.144, 371714.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1909.489 ±(99.9%) 30.144 MB/sec [Average]
[info]   (min, avg, max) = (1899.954, 1909.489, 1916.569), stdev = 7.828
[info]   CI (99.9%): [1879.345, 1939.632] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8216.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8216.001, 8216.001, 8216.001), stdev = 0.001
[info]   CI (99.9%): [8216.001, 8216.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.166), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.264] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.430 ±(99.9%) 0.704 B/op [Average]
[info]   (min, avg, max) = (0.268, 0.430, 0.715), stdev = 0.183
[info]   CI (99.9%): [≈ 0, 1.133] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1947.261 ±(99.9%) 558.498 MB/sec [Average]
[info]   (min, avg, max) = (1689.586, 1947.261, 2033.181), stdev = 145.040
[info]   CI (99.9%): [1388.763, 2505.759] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8379.355 ±(99.9%) 2447.409 B/op [Average]
[info]   (min, avg, max) = (7249.189, 8379.355, 8734.030), stdev = 635.584
[info]   CI (99.9%): [5931.945, 10826.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.count":
[info]   29.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.800, 6.000), stdev = 0.447
[info]   CI (99.9%): [29.000, 29.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.readPlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce
[info] # Run progress: 82.51% complete, ETA 00:11:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 238494.983 ops/s
[info] # Warmup Iteration   2: 459414.582 ops/s
[info] # Warmup Iteration   3: 470525.511 ops/s
[info] Iteration   1: 455513.628 ops/s
[info]                  ·gc.alloc.rate:                   1205.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.288 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1300.507 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4494.913 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 467913.310 ops/s
[info]                  ·gc.alloc.rate:                   1238.891 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.490 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.720 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4396.197 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 462876.181 ops/s
[info]                  ·gc.alloc.rate:                   1225.816 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.354 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1315.606 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4473.302 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 469513.124 ops/s
[info]                  ·gc.alloc.rate:                   1243.076 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.209 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.262 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3330.383 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 466292.064 ops/s
[info]                  ·gc.alloc.rate:                   1234.539 MB/sec
[info]                  ·gc.alloc.rate.norm:              4168.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.351 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.231 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4494.450 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce":
[info]   464421.662 ±(99.9%) 21383.609 ops/s [Average]
[info]   (min, avg, max) = (455513.628, 464421.662, 469513.124), stdev = 5553.255
[info]   CI (99.9%): [443038.052, 485805.271] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1229.649 ±(99.9%) 56.699 MB/sec [Average]
[info]   (min, avg, max) = (1205.922, 1229.649, 1243.076), stdev = 14.725
[info]   CI (99.9%): [1172.950, 1286.348] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   4168.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4168.001, 4168.001, 4168.001), stdev = 0.001
[info]   CI (99.9%): [4168.001, 4168.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.338 ±(99.9%) 0.398 B/op [Average]
[info]   (min, avg, max) = (0.209, 0.338, 0.490), stdev = 0.103
[info]   CI (99.9%): [≈ 0, 0.736] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1249.465 ±(99.9%) 553.287 MB/sec [Average]
[info]   (min, avg, max) = (993.262, 1249.465, 1331.231), stdev = 143.687
[info]   CI (99.9%): [696.178, 1802.753] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4237.849 ±(99.9%) 1959.608 B/op [Average]
[info]   (min, avg, max) = (3330.383, 4237.849, 4494.913), stdev = 508.904
[info]   CI (99.9%): [2278.241, 6197.457] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala
[info] # Run progress: 82.84% complete, ETA 00:11:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2643842.938 ops/s
[info] # Warmup Iteration   2: 3041162.565 ops/s
[info] # Warmup Iteration   3: 3123512.360 ops/s
[info] Iteration   1: 3137047.632 ops/s
[info]                  ·gc.alloc.rate:                   526.043 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.757 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.885 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.609 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 164.414 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 3181946.131 ops/s
[info]                  ·gc.alloc.rate:                   533.506 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.229 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 3099745.877 ops/s
[info]                  ·gc.alloc.rate:                   519.765 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.032 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 165.382 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 3173043.640 ops/s
[info]                  ·gc.alloc.rate:                   532.128 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.293 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 323.121 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3116455.116 ops/s
[info]                  ·gc.alloc.rate:                   522.627 MB/sec
[info]                  ·gc.alloc.rate.norm:              264.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 328.992 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala":
[info]   3141647.679 ±(99.9%) 136429.926 ops/s [Average]
[info]   (min, avg, max) = (3099745.877, 3141647.679, 3181946.131), stdev = 35430.419
[info]   CI (99.9%): [3005217.753, 3278077.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   526.814 ±(99.9%) 22.849 MB/sec [Average]
[info]   (min, avg, max) = (519.765, 526.814, 533.506), stdev = 5.934
[info]   CI (99.9%): [503.965, 549.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   264.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (264.000, 264.000, 264.000), stdev = 0.001
[info]   CI (99.9%): [264.000, 264.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.789 ±(99.9%) 6.389 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.789, 3.757), stdev = 1.659
[info]   CI (99.9%): [≈ 0, 7.178] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.396 ±(99.9%) 3.206 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.396, 1.885), stdev = 0.833
[info]   CI (99.9%): [≈ 0, 3.602] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   521.799 ±(99.9%) 686.139 MB/sec [Average]
[info]   (min, avg, max) = (325.604, 521.799, 653.199), stdev = 178.188
[info]   CI (99.9%): [≈ 0, 1207.937] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   261.027 ±(99.9%) 338.035 B/op [Average]
[info]   (min, avg, max) = (164.414, 261.027, 328.992), stdev = 87.787
[info]   CI (99.9%): [≈ 0, 599.063] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson
[info] # Run progress: 83.17% complete, ETA 00:10:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 85275.986 ops/s
[info] # Warmup Iteration   2: 327142.784 ops/s
[info] # Warmup Iteration   3: 336850.774 ops/s
[info] Iteration   1: 336448.406 ops/s
[info]                  ·gc.alloc.rate:                   1213.649 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.292 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6129.017 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 336954.603 ops/s
[info]                  ·gc.alloc.rate:                   1215.730 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.389 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.287 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4622.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 336293.460 ops/s
[info]                  ·gc.alloc.rate:                   1213.264 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.451 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6214.580 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 337156.755 ops/s
[info]                  ·gc.alloc.rate:                   1216.422 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.194 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.539 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6236.212 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 337756.251 ops/s
[info]                  ·gc.alloc.rate:                   1218.712 MB/sec
[info]                  ·gc.alloc.rate.norm:              5680.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.388 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1006.016 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4688.695 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson":
[info]   336921.895 ±(99.9%) 2254.767 ops/s [Average]
[info]   (min, avg, max) = (336293.460, 336921.895, 337756.251), stdev = 585.556
[info]   CI (99.9%): [334667.128, 339176.661] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1215.555 ±(99.9%) 8.531 MB/sec [Average]
[info]   (min, avg, max) = (1213.264, 1215.555, 1218.712), stdev = 2.216
[info]   CI (99.9%): [1207.024, 1224.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5680.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5680.001, 5680.001, 5680.001), stdev = 0.001
[info]   CI (99.9%): [5680.001, 5680.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.083), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.331 ±(99.9%) 0.335 B/op [Average]
[info]   (min, avg, max) = (0.194, 0.331, 0.390), stdev = 0.087
[info]   CI (99.9%): [≈ 0, 0.665] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1193.577 ±(99.9%) 690.029 MB/sec [Average]
[info]   (min, avg, max) = (989.287, 1193.577, 1335.539), stdev = 179.198
[info]   CI (99.9%): [503.548, 1883.605] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5578.109 ±(99.9%) 3248.504 B/op [Average]
[info]   (min, avg, max) = (4622.039, 5578.109, 6236.212), stdev = 843.626
[info]   CI (99.9%): [2329.605, 8826.613] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MapsBenchmark.writePlayJson:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 6.000), stdev = 1.140
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce
[info] # Run progress: 83.50% complete, ETA 00:10:41
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1132692.535 ops/s
[info] # Warmup Iteration   2: 2032549.722 ops/s
[info] # Warmup Iteration   3: 2067889.821 ops/s
[info] Iteration   1: 2084393.426 ops/s
[info]                  ·gc.alloc.rate:                   3039.555 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3003.659 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2268.885 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 2095743.064 ops/s
[info]                  ·gc.alloc.rate:                   3055.886 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.141 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3032.836 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2278.682 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 2075518.274 ops/s
[info]                  ·gc.alloc.rate:                   3026.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3048.873 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2312.827 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         10.000 ms
[info] Iteration   4: 2088751.237 ops/s
[info]                  ·gc.alloc.rate:                   3047.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3057.449 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2303.827 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 2096321.626 ops/s
[info]                  ·gc.alloc.rate:                   3057.527 MB/sec
[info]                  ·gc.alloc.rate.norm:              2296.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.860 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2300.004 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce":
[info]   2088145.526 ±(99.9%) 33262.065 ops/s [Average]
[info]   (min, avg, max) = (2075518.274, 2088145.526, 2096321.626), stdev = 8638.053
[info]   CI (99.9%): [2054883.460, 2121407.591] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate":
[info]   3045.344 ±(99.9%) 48.858 MB/sec [Average]
[info]   (min, avg, max) = (3026.691, 3045.344, 3057.527), stdev = 12.688
[info]   CI (99.9%): [2996.486, 3094.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2296.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2296.000, 2296.000, 2296.000), stdev = 0.001
[info]   CI (99.9%): [2296.000, 2296.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.176 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.117, 0.187), stdev = 0.046
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.088 ±(99.9%) 0.131 B/op [Average]
[info]   (min, avg, max) = (0.047, 0.088, 0.141), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.219] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3041.135 ±(99.9%) 91.757 MB/sec [Average]
[info]   (min, avg, max) = (3003.659, 3041.135, 3062.860), stdev = 23.829
[info]   CI (99.9%): [2949.378, 3132.893] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2292.845 ±(99.9%) 70.631 B/op [Average]
[info]   (min, avg, max) = (2268.885, 2292.845, 2312.827), stdev = 18.343
[info]   CI (99.9%): [2222.214, 2363.476] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.count":
[info]   45.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.000, 9.000), stdev = 0.001
[info]   CI (99.9%): [45.000, 45.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readCirce:·gc.time":
[info]   44.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.800, 10.000), stdev = 0.837
[info]   CI (99.9%): [44.000, 44.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala
[info] # Run progress: 83.83% complete, ETA 00:10:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39132.624 ops/s
[info] # Warmup Iteration   2: 291342.585 ops/s
[info] # Warmup Iteration   3: 297015.511 ops/s
[info] Iteration   1: 300306.531 ops/s
[info]                  ·gc.alloc.rate:                   541.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.208 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.091 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      578.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3033.644 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 301185.955 ops/s
[info]                  ·gc.alloc.rate:                   543.378 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.218 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      648.380 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3388.803 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 297885.051 ops/s
[info]                  ·gc.alloc.rate:                   537.391 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.110 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.300 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1719.144 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 299059.952 ops/s
[info]                  ·gc.alloc.rate:                   539.468 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.224 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3438.862 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 300206.007 ops/s
[info]                  ·gc.alloc.rate:                   541.701 MB/sec
[info]                  ·gc.alloc.rate.norm:              2840.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.372 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1721.570 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala":
[info]   299728.699 ±(99.9%) 4920.533 ops/s [Average]
[info]   (min, avg, max) = (297885.051, 299728.699, 301185.955), stdev = 1277.847
[info]   CI (99.9%): [294808.166, 304649.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   540.737 ±(99.9%) 8.975 MB/sec [Average]
[info]   (min, avg, max) = (537.391, 540.737, 543.378), stdev = 2.331
[info]   CI (99.9%): [531.763, 549.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   2840.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2840.001, 2840.001, 2840.001), stdev = 0.001
[info]   CI (99.9%): [2840.001, 2840.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.054 ±(99.9%) 0.338 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.054, 0.208), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.392] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.284 ±(99.9%) 1.772 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.284, 1.091), stdev = 0.460
[info]   CI (99.9%): [≈ 0, 2.056] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   506.793 ±(99.9%) 642.698 MB/sec [Average]
[info]   (min, avg, max) = (325.300, 506.793, 653.224), stdev = 166.907
[info]   CI (99.9%): [≈ 0, 1149.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   2660.405 ±(99.9%) 3358.706 B/op [Average]
[info]   (min, avg, max) = (1719.144, 2660.405, 3438.862), stdev = 872.245
[info]   CI (99.9%): [≈ 0, 6019.111] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJacksonScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 0.837
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala
[info] # Run progress: 84.16% complete, ETA 00:10:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 582541.699 ops/s
[info] # Warmup Iteration   2: 642942.134 ops/s
[info] # Warmup Iteration   3: 656231.983 ops/s
[info] Iteration   1: 650186.329 ops/s
[info]                  ·gc.alloc.rate:                   413.004 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.003 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      511.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1238.359 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 652552.183 ops/s
[info]                  ·gc.alloc.rate:                   414.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.179 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     7.668 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 799.326 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 653467.482 ops/s
[info]                  ·gc.alloc.rate:                   415.090 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.150 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 798.172 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 627274.557 ops/s
[info]                  ·gc.alloc.rate:                   398.440 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.280 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1654.651 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 643358.360 ops/s
[info]                  ·gc.alloc.rate:                   408.645 MB/sec
[info]                  ·gc.alloc.rate.norm:              1000.001 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 804.996 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala":
[info]   645367.782 ±(99.9%) 41821.687 ops/s [Average]
[info]   (min, avg, max) = (627274.557, 645367.782, 653467.482), stdev = 10860.959
[info]   CI (99.9%): [603546.095, 687189.469] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   409.957 ±(99.9%) 26.651 MB/sec [Average]
[info]   (min, avg, max) = (398.440, 409.957, 415.090), stdev = 6.921
[info]   CI (99.9%): [383.306, 436.609] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1000.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1000.001, 1000.001, 1000.001), stdev = 0.001
[info]   CI (99.9%): [1000.001, 1000.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.653 ±(99.9%) 5.439 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.653, 3.179), stdev = 1.412
[info]   CI (99.9%): [≈ 0, 6.092] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.576 ±(99.9%) 13.117 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.576, 7.668), stdev = 3.406
[info]   CI (99.9%): [≈ 0, 14.692] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   432.481 ±(99.9%) 573.866 MB/sec [Average]
[info]   (min, avg, max) = (328.958, 432.481, 659.280), stdev = 149.031
[info]   CI (99.9%): [≈ 0, 1006.347] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1059.101 ±(99.9%) 1475.041 B/op [Average]
[info]   (min, avg, max) = (798.172, 1059.101, 1654.651), stdev = 383.063
[info]   CI (99.9%): [≈ 0, 2534.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 4.000), stdev = 1.414
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless
[info] # Run progress: 84.49% complete, ETA 00:10:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3315322.174 ops/s
[info] # Warmup Iteration   2: 3624313.680 ops/s
[info] # Warmup Iteration   3: 3668496.635 ops/s
[info] Iteration   1: 3773036.546 ops/s
[info]                  ·gc.alloc.rate:                   1227.067 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1317.918 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 549.908 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3766863.733 ops/s
[info]                  ·gc.alloc.rate:                   1225.041 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 552.227 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 3767445.810 ops/s
[info]                  ·gc.alloc.rate:                   1225.185 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1327.511 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 554.762 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3753907.189 ops/s
[info]                  ·gc.alloc.rate:                   1220.973 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1000.006 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 419.340 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 3753256.375 ops/s
[info]                  ·gc.alloc.rate:                   1220.609 MB/sec
[info]                  ·gc.alloc.rate.norm:              512.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.044 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1339.163 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.729 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless":
[info]   3762901.931 ±(99.9%) 34062.164 ops/s [Average]
[info]   (min, avg, max) = (3753256.375, 3762901.931, 3773036.546), stdev = 8845.836
[info]   CI (99.9%): [3728839.766, 3796964.095] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate":
[info]   1223.775 ±(99.9%) 10.943 MB/sec [Average]
[info]   (min, avg, max) = (1220.609, 1223.775, 1227.067), stdev = 2.842
[info]   CI (99.9%): [1212.832, 1234.718] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm":
[info]   512.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (512.000, 512.000, 512.000), stdev = 0.001
[info]   CI (99.9%): [512.000, 512.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.125), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.211] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm":
[info]   0.033 ±(99.9%) 0.055 B/op [Average]
[info]   (min, avg, max) = (0.017, 0.033, 0.052), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.088] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space":
[info]   1261.178 ±(99.9%) 563.056 MB/sec [Average]
[info]   (min, avg, max) = (1000.006, 1261.178, 1339.163), stdev = 146.224
[info]   CI (99.9%): [698.122, 1824.233] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm":
[info]   527.593 ±(99.9%) 233.647 B/op [Average]
[info]   (min, avg, max) = (419.340, 527.593, 561.729), stdev = 60.677
[info]   CI (99.9%): [293.947, 761.240] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStackless:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump
[info] # Run progress: 84.82% complete, ETA 00:09:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5773944.421 ops/s
[info] # Warmup Iteration   2: 6294984.835 ops/s
[info] # Warmup Iteration   3: 6571321.837 ops/s
[info] Iteration   1: 6434809.366 ops/s
[info]                  ·gc.alloc.rate:                   555.918 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.174 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.777 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      663.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 162.269 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 6482035.836 ops/s
[info]                  ·gc.alloc.rate:                   559.902 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 80.063 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   3: 6436158.560 ops/s
[info]                  ·gc.alloc.rate:                   555.961 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.516 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 161.087 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6622104.740 ops/s
[info]                  ·gc.alloc.rate:                   572.109 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.301 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.489 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6652235.930 ops/s
[info]                  ·gc.alloc.rate:                   574.705 MB/sec
[info]                  ·gc.alloc.rate.norm:              136.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.312 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 77.929 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump":
[info]   6525468.887 ±(99.9%) 401512.887 ops/s [Average]
[info]   (min, avg, max) = (6434809.366, 6525468.887, 6652235.930), stdev = 104271.622
[info]   CI (99.9%): [6123955.999, 6926981.774] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate":
[info]   563.719 ±(99.9%) 34.800 MB/sec [Average]
[info]   (min, avg, max) = (555.918, 563.719, 574.705), stdev = 9.037
[info]   CI (99.9%): [528.919, 598.519] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm":
[info]   136.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (136.000, 136.000, 136.000), stdev = 0.001
[info]   CI (99.9%): [136.000, 136.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space":
[info]   0.664 ±(99.9%) 5.406 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.664, 3.174), stdev = 1.404
[info]   CI (99.9%): [≈ 0, 6.070] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm":
[info]   0.162 ±(99.9%) 1.323 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.162, 0.777), stdev = 0.343
[info]   CI (99.9%): [≈ 0, 1.485] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space":
[info]   527.808 ±(99.9%) 697.252 MB/sec [Average]
[info]   (min, avg, max) = (329.312, 527.808, 663.297), stdev = 181.074
[info]   CI (99.9%): [≈ 0, 1225.060] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm":
[info]   127.568 ±(99.9%) 170.962 B/op [Average]
[info]   (min, avg, max) = (77.929, 127.568, 162.269), stdev = 44.398
[info]   CI (99.9%): [≈ 0, 298.530] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson
[info] # Run progress: 85.15% complete, ETA 00:09:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18630.156 ops/s
[info] # Warmup Iteration   2: 190992.511 ops/s
[info] # Warmup Iteration   3: 200184.346 ops/s
[info] Iteration   1: 201840.478 ops/s
[info]                  ·gc.alloc.rate:                   1285.982 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.649 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1308.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10211.312 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 201885.442 ops/s
[info]                  ·gc.alloc.rate:                   1286.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.811 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.955 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10292.681 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 203575.980 ops/s
[info]                  ·gc.alloc.rate:                   1297.319 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.322 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1329.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10283.943 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 202565.560 ops/s
[info]                  ·gc.alloc.rate:                   1290.823 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.485 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 7791.362 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 203408.633 ops/s
[info]                  ·gc.alloc.rate:                   1296.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              10032.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.805 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.524 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10387.630 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson":
[info]   202655.218 ±(99.9%) 3151.789 ops/s [Average]
[info]   (min, avg, max) = (201840.478, 202655.218, 203575.980), stdev = 818.510
[info]   CI (99.9%): [199503.429, 205807.008] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1291.442 ±(99.9%) 20.658 MB/sec [Average]
[info]   (min, avg, max) = (1285.982, 1291.442, 1297.319), stdev = 5.365
[info]   CI (99.9%): [1270.784, 1312.100] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10032.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10032.002, 10032.002, 10032.002), stdev = 0.001
[info]   CI (99.9%): [10032.002, 10032.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.615 ±(99.9%) 0.814 B/op [Average]
[info]   (min, avg, max) = (0.322, 0.615, 0.811), stdev = 0.211
[info]   CI (99.9%): [≈ 0, 1.429] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1260.773 ±(99.9%) 557.952 MB/sec [Average]
[info]   (min, avg, max) = (1002.519, 1260.773, 1342.524), stdev = 144.898
[info]   CI (99.9%): [702.821, 1818.725] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9793.386 ±(99.9%) 4316.257 B/op [Average]
[info]   (min, avg, max) = (7791.362, 9793.386, 10387.630), stdev = 1120.918
[info]   CI (99.9%): [5477.128, 14109.643] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.count":
[info]   19.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MissingReqFieldBenchmark.readPlayJson:·gc.time":
[info]   24.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.800, 5.000), stdev = 0.447
[info]   CI (99.9%): [24.000, 24.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce
[info] # Run progress: 85.48% complete, ETA 00:09:24
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 495581.250 ops/s
[info] # Warmup Iteration   2: 712541.546 ops/s
[info] # Warmup Iteration   3: 710728.739 ops/s
[info] Iteration   1: 708408.801 ops/s
[info]                  ·gc.alloc.rate:                   2707.991 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.277 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3000.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6666.202 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 716099.469 ops/s
[info]                  ·gc.alloc.rate:                   2735.992 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.274 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.463 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5920.287 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 705696.324 ops/s
[info]                  ·gc.alloc.rate:                   2696.589 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.046 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2707.401 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6040.121 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 713692.362 ops/s
[info]                  ·gc.alloc.rate:                   2727.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2715.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5990.184 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 715610.838 ops/s
[info]                  ·gc.alloc.rate:                   2734.826 MB/sec
[info]                  ·gc.alloc.rate.norm:              6016.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.275 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.785 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5982.914 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce":
[info]   711901.559 ±(99.9%) 17781.104 ops/s [Average]
[info]   (min, avg, max) = (705696.324, 711901.559, 716099.469), stdev = 4617.696
[info]   CI (99.9%): [694120.454, 729682.663] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate":
[info]   2720.586 ±(99.9%) 67.327 MB/sec [Average]
[info]   (min, avg, max) = (2696.589, 2720.586, 2735.992), stdev = 17.485
[info]   CI (99.9%): [2653.259, 2787.913] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   6016.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (6016.001, 6016.001, 6016.001), stdev = 0.001
[info]   CI (99.9%): [6016.000, 6016.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.179 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.104, 0.125), stdev = 0.047
[info]   CI (99.9%): [≈ 0, 0.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.230 ±(99.9%) 0.395 B/op [Average]
[info]   (min, avg, max) = (0.046, 0.230, 0.277), stdev = 0.102
[info]   CI (99.9%): [≈ 0, 0.624] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2767.228 ±(99.9%) 504.109 MB/sec [Average]
[info]   (min, avg, max) = (2692.463, 2767.228, 3000.666), stdev = 130.916
[info]   CI (99.9%): [2263.119, 3271.338] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   6119.942 ±(99.9%) 1187.234 B/op [Average]
[info]   (min, avg, max) = (5920.287, 6119.942, 6666.202), stdev = 308.321
[info]   CI (99.9%): [4932.708, 7307.175] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.count":
[info]   41.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.200, 9.000), stdev = 0.447
[info]   CI (99.9%): [41.000, 41.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 8.000), stdev = 0.548
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala
[info] # Run progress: 85.81% complete, ETA 00:09:11
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3262316.354 ops/s
[info] # Warmup Iteration   2: 3806447.737 ops/s
[info] # Warmup Iteration   3: 3864266.335 ops/s
[info] Iteration   1: 3849851.122 ops/s
[info]                  ·gc.alloc.rate:                   2484.359 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2665.670 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1090.149 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 3839134.342 ops/s
[info]                  ·gc.alloc.rate:                   2477.389 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.051 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2352.915 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 964.952 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 3799728.380 ops/s
[info]                  ·gc.alloc.rate:                   2452.399 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2704.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1120.549 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 3773004.131 ops/s
[info]                  ·gc.alloc.rate:                   2435.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.043 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2374.557 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 990.590 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   5: 3764853.580 ops/s
[info]                  ·gc.alloc.rate:                   2429.811 MB/sec
[info]                  ·gc.alloc.rate.norm:              1016.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.061 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2377.960 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 994.319 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala":
[info]   3805314.311 ±(99.9%) 147127.142 ops/s [Average]
[info]   (min, avg, max) = (3764853.580, 3805314.311, 3849851.122), stdev = 38208.452
[info]   CI (99.9%): [3658187.169, 3952441.454] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   2455.885 ±(99.9%) 93.968 MB/sec [Average]
[info]   (min, avg, max) = (2429.811, 2455.885, 2484.359), stdev = 24.403
[info]   CI (99.9%): [2361.917, 2549.853] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   1016.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1016.000, 1016.000, 1016.000), stdev = 0.001
[info]   CI (99.9%): [1016.000, 1016.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.112 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.112, 0.146), stdev = 0.024
[info]   CI (99.9%): [0.021, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.034, 0.047, 0.061), stdev = 0.010
[info]   CI (99.9%): [0.008, 0.085] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   2495.172 ±(99.9%) 671.161 MB/sec [Average]
[info]   (min, avg, max) = (2352.915, 2495.172, 2704.758), stdev = 174.298
[info]   CI (99.9%): [1824.011, 3166.333] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1032.112 ±(99.9%) 264.353 B/op [Average]
[info]   (min, avg, max) = (964.952, 1032.112, 1120.549), stdev = 68.652
[info]   CI (99.9%): [767.759, 1296.465] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.count":
[info]   37.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (7.000, 7.400, 8.000), stdev = 0.548
[info]   CI (99.9%): [37.000, 37.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readJsoniterScala:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson
[info] # Run progress: 86.14% complete, ETA 00:08:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64791.565 ops/s
[info] # Warmup Iteration   2: 252312.364 ops/s
[info] # Warmup Iteration   3: 260942.833 ops/s
[info] Iteration   1: 259384.371 ops/s
[info]                  ·gc.alloc.rate:                   1852.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.505 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12040.240 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 260572.130 ops/s
[info]                  ·gc.alloc.rate:                   1860.334 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.629 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2003.652 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12105.917 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   3: 262141.425 ops/s
[info]                  ·gc.alloc.rate:                   1871.548 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.500 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1680.691 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10093.767 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 260804.855 ops/s
[info]                  ·gc.alloc.rate:                   1862.614 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.628 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2026.297 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12227.752 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 262109.932 ops/s
[info]                  ·gc.alloc.rate:                   1871.333 MB/sec
[info]                  ·gc.alloc.rate.norm:              11240.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.625 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1693.491 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10171.806 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson":
[info]   261002.543 ±(99.9%) 4460.012 ops/s [Average]
[info]   (min, avg, max) = (259384.371, 261002.543, 262141.425), stdev = 1158.251
[info]   CI (99.9%): [256542.531, 265462.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1863.640 ±(99.9%) 31.086 MB/sec [Average]
[info]   (min, avg, max) = (1852.371, 1863.640, 1871.548), stdev = 8.073
[info]   CI (99.9%): [1832.554, 1894.726] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   11240.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (11240.002, 11240.002, 11240.002), stdev = 0.001
[info]   CI (99.9%): [11240.001, 11240.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.096 ±(99.9%) 0.044 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.096, 0.104), stdev = 0.011
[info]   CI (99.9%): [0.052, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.577 ±(99.9%) 0.263 B/op [Average]
[info]   (min, avg, max) = (0.500, 0.577, 0.629), stdev = 0.068
[info]   CI (99.9%): [0.314, 0.840] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1877.677 ±(99.9%) 672.607 MB/sec [Average]
[info]   (min, avg, max) = (1680.691, 1877.677, 2026.297), stdev = 174.674
[info]   CI (99.9%): [1205.069, 2550.284] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   11327.897 ±(99.9%) 4210.302 B/op [Average]
[info]   (min, avg, max) = (10093.767, 11327.897, 12227.752), stdev = 1093.402
[info]   CI (99.9%): [7117.595, 15538.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.count":
[info]   28.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.readPlayJson:·gc.time":
[info]   34.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.800, 8.000), stdev = 0.837
[info]   CI (99.9%): [34.000, 34.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce
[info] # Run progress: 86.47% complete, ETA 00:08:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 552978.695 ops/s
[info] # Warmup Iteration   2: 826755.836 ops/s
[info] # Warmup Iteration   3: 823511.007 ops/s
[info] Iteration   1: 831743.705 ops/s
[info]                  ·gc.alloc.rate:                   1825.899 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.118 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1639.749 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3103.661 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 828281.468 ops/s
[info]                  ·gc.alloc.rate:                   1818.532 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.237 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1987.475 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3777.065 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 836809.719 ops/s
[info]                  ·gc.alloc.rate:                   1836.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.635 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3141.351 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 825451.731 ops/s
[info]                  ·gc.alloc.rate:                   1812.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.198 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.057 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3846.757 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 834013.921 ops/s
[info]                  ·gc.alloc.rate:                   1830.922 MB/sec
[info]                  ·gc.alloc.rate.norm:              3456.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.236 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1688.105 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3186.424 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce":
[info]   831260.109 ±(99.9%) 17351.956 ops/s [Average]
[info]   (min, avg, max) = (825451.731, 831260.109, 836809.719), stdev = 4506.248
[info]   CI (99.9%): [813908.153, 848612.065] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1824.878 ±(99.9%) 37.698 MB/sec [Average]
[info]   (min, avg, max) = (1812.163, 1824.878, 1836.872), stdev = 9.790
[info]   CI (99.9%): [1787.179, 1862.576] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3456.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3456.000, 3456.000, 3456.001), stdev = 0.001
[info]   CI (99.9%): [3456.000, 3456.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.092 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.092, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.237] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.174 ±(99.9%) 0.277 B/op [Average]
[info]   (min, avg, max) = (0.078, 0.174, 0.237), stdev = 0.072
[info]   CI (99.9%): [≈ 0, 0.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1800.404 ±(99.9%) 713.813 MB/sec [Average]
[info]   (min, avg, max) = (1639.749, 1800.404, 2017.057), stdev = 185.375
[info]   CI (99.9%): [1086.591, 2514.217] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3411.051 ±(99.9%) 1416.768 B/op [Average]
[info]   (min, avg, max) = (3103.661, 3411.051, 3846.757), stdev = 367.930
[info]   CI (99.9%): [1994.283, 4827.820] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeCirce:·gc.time":
[info]   26.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala
[info] # Run progress: 86.80% complete, ETA 00:08:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 625019.974 ops/s
[info] # Warmup Iteration   2: 1546626.001 ops/s
[info] # Warmup Iteration   3: 1560996.174 ops/s
[info] Iteration   1: 1569305.304 ops/s
[info]                  ·gc.alloc.rate:                   853.148 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.044 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 978.304 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1561858.798 ops/s
[info]                  ·gc.alloc.rate:                   849.301 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.168 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.365 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 658.518 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1575241.452 ops/s
[info]                  ·gc.alloc.rate:                   856.800 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      984.872 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 983.953 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 1580309.216 ops/s
[info]                  ·gc.alloc.rate:                   859.169 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.893 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 657.459 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 1541708.088 ops/s
[info]                  ·gc.alloc.rate:                   838.292 MB/sec
[info]                  ·gc.alloc.rate.norm:              856.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.064 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.215 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1014.196 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala":
[info]   1565684.572 ±(99.9%) 58010.439 ops/s [Average]
[info]   (min, avg, max) = (1541708.088, 1565684.572, 1580309.216), stdev = 15065.127
[info]   CI (99.9%): [1507674.133, 1623695.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   851.342 ±(99.9%) 31.565 MB/sec [Average]
[info]   (min, avg, max) = (838.292, 851.342, 859.169), stdev = 8.197
[info]   CI (99.9%): [819.777, 882.906] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   856.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (856.000, 856.000, 856.000), stdev = 0.001
[info]   CI (99.9%): [856.000, 856.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.104 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.104, 0.167), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.254] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.105 ±(99.9%) 0.151 B/op [Average]
[info]   (min, avg, max) = (0.064, 0.105, 0.168), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.255] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   853.278 ±(99.9%) 691.750 MB/sec [Average]
[info]   (min, avg, max) = (653.365, 853.278, 993.215), stdev = 179.645
[info]   CI (99.9%): [161.528, 1545.028] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   858.486 ±(99.9%) 706.734 B/op [Average]
[info]   (min, avg, max) = (657.459, 858.486, 1014.196), stdev = 183.537
[info]   CI (99.9%): [151.752, 1565.220] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJacksonScala:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 0.837
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala
[info] # Run progress: 87.13% complete, ETA 00:08:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3959985.782 ops/s
[info] # Warmup Iteration   2: 4778782.118 ops/s
[info] # Warmup Iteration   3: 4803817.202 ops/s
[info] Iteration   1: 4845505.162 ops/s
[info]                  ·gc.alloc.rate:                   369.338 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.007 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.677 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.071 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 4834195.526 ops/s
[info]                  ·gc.alloc.rate:                   368.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.738 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.280 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 4825273.530 ops/s
[info]                  ·gc.alloc.rate:                   367.793 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.222 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 213.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 4831772.983 ops/s
[info]                  ·gc.alloc.rate:                   368.372 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.014 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.698 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 106.099 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 4786014.491 ops/s
[info]                  ·gc.alloc.rate:                   364.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              120.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.615 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 107.111 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala":
[info]   4824552.338 ±(99.9%) 87593.377 ops/s [Average]
[info]   (min, avg, max) = (4786014.491, 4824552.338, 4845505.162), stdev = 22747.722
[info]   CI (99.9%): [4736958.962, 4912145.715] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   367.759 ±(99.9%) 6.723 MB/sec [Average]
[info]   (min, avg, max) = (364.796, 367.759, 369.338), stdev = 1.746
[info]   CI (99.9%): [361.036, 374.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   120.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (120.000, 120.000, 120.000), stdev = 0.001
[info]   CI (99.9%): [120.000, 120.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.762 ±(99.9%) 6.422 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.762, 3.745), stdev = 1.668
[info]   CI (99.9%): [≈ 0, 7.183] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.249 ±(99.9%) 2.095 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.249, 1.222), stdev = 0.544
[info]   CI (99.9%): [≈ 0, 2.344] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   363.592 ±(99.9%) 642.060 MB/sec [Average]
[info]   (min, avg, max) = (255.677, 363.592, 655.232), stdev = 166.741
[info]   CI (99.9%): [≈ 0, 1005.652] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   118.669 ±(99.9%) 209.656 B/op [Average]
[info]   (min, avg, max) = (83.071, 118.669, 213.783), stdev = 54.447
[info]   CI (99.9%): [≈ 0, 328.325] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writeJsoniterScala:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 4.000), stdev = 1.304
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson
[info] # Run progress: 87.46% complete, ETA 00:08:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 169480.212 ops/s
[info] # Warmup Iteration   2: 496914.962 ops/s
[info] # Warmup Iteration   3: 510410.430 ops/s
[info] Iteration   1: 508894.356 ops/s
[info]                  ·gc.alloc.rate:                   1729.605 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.193 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1651.425 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5110.086 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 513280.955 ops/s
[info]                  ·gc.alloc.rate:                   1744.995 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.383 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2000.638 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6136.073 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 511628.784 ops/s
[info]                  ·gc.alloc.rate:                   1739.215 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.378 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5164.788 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 509806.534 ops/s
[info]                  ·gc.alloc.rate:                   1733.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.129 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.414 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5206.709 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 507644.217 ops/s
[info]                  ·gc.alloc.rate:                   1725.691 MB/sec
[info]                  ·gc.alloc.rate.norm:              5352.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.258 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1691.285 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5245.296 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson":
[info]   510250.969 ±(99.9%) 8591.395 ops/s [Average]
[info]   (min, avg, max) = (507644.217, 510250.969, 513280.955), stdev = 2231.158
[info]   CI (99.9%): [501659.574, 518842.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1734.596 ±(99.9%) 29.512 MB/sec [Average]
[info]   (min, avg, max) = (1725.691, 1734.596, 1744.995), stdev = 7.664
[info]   CI (99.9%): [1705.084, 1764.108] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5352.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5352.001, 5352.001, 5352.001), stdev = 0.001
[info]   CI (99.9%): [5352.001, 5352.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.122 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.032
[info]   CI (99.9%): [≈ 0, 0.196] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.231 ±(99.9%) 0.372 B/op [Average]
[info]   (min, avg, max) = (0.129, 0.231, 0.383), stdev = 0.097
[info]   CI (99.9%): [≈ 0, 0.603] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1741.628 ±(99.9%) 560.684 MB/sec [Average]
[info]   (min, avg, max) = (1651.425, 1741.628, 2000.638), stdev = 145.608
[info]   CI (99.9%): [1180.944, 2302.312] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   5372.590 ±(99.9%) 1654.788 B/op [Average]
[info]   (min, avg, max) = (5110.086, 5372.590, 6136.073), stdev = 429.743
[info]   CI (99.9%): [3717.803, 7027.378] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.count":
[info]   26.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.200, 6.000), stdev = 0.447
[info]   CI (99.9%): [26.000, 26.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableIterablesBenchmark.writePlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala
[info] # Run progress: 87.79% complete, ETA 00:07:54
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2916738.409 ops/s
[info] # Warmup Iteration   2: 3391834.955 ops/s
[info] # Warmup Iteration   3: 3455072.084 ops/s
[info] Iteration   1: 3504429.939 ops/s
[info]                  ·gc.alloc.rate:                   1655.928 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.541 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 739.334 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3486496.200 ops/s
[info]                  ·gc.alloc.rate:                   1647.720 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1658.587 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 748.907 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   3: 3452183.443 ops/s
[info]                  ·gc.alloc.rate:                   1631.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1669.686 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 761.459 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3504247.374 ops/s
[info]                  ·gc.alloc.rate:                   1656.166 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1679.178 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 754.338 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 3433654.219 ops/s
[info]                  ·gc.alloc.rate:                   1622.775 MB/sec
[info]                  ·gc.alloc.rate.norm:              744.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1686.462 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 773.199 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala":
[info]   3476202.235 ±(99.9%) 122927.472 ops/s [Average]
[info]   (min, avg, max) = (3433654.219, 3476202.235, 3504429.939), stdev = 31923.874
[info]   CI (99.9%): [3353274.764, 3599129.707] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   1642.798 ±(99.9%) 57.956 MB/sec [Average]
[info]   (min, avg, max) = (1622.775, 1642.798, 1656.166), stdev = 15.051
[info]   CI (99.9%): [1584.842, 1700.754] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   744.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (744.000, 744.000, 744.000), stdev = 0.001
[info]   CI (99.9%): [744.000, 744.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.036 ±(99.9%) 0.047 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.036, 0.047), stdev = 0.012
[info]   CI (99.9%): [≈ 0, 0.082] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   1667.891 ±(99.9%) 62.730 MB/sec [Average]
[info]   (min, avg, max) = (1645.541, 1667.891, 1686.462), stdev = 16.291
[info]   CI (99.9%): [1605.161, 1730.621] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   755.447 ±(99.9%) 49.272 B/op [Average]
[info]   (min, avg, max) = (739.334, 755.447, 773.199), stdev = 12.796
[info]   CI (99.9%): [706.176, 804.719] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readJsoniterScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson
[info] # Run progress: 88.12% complete, ETA 00:07:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 113726.125 ops/s
[info] # Warmup Iteration   2: 322632.270 ops/s
[info] # Warmup Iteration   3: 319444.348 ops/s
[info] Iteration   1: 316988.436 ops/s
[info]                  ·gc.alloc.rate:                   1730.382 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.167 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.827 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1984.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9852.166 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 324140.860 ops/s
[info]                  ·gc.alloc.rate:                   1769.027 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.707 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.758 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8105.004 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 323919.090 ops/s
[info]                  ·gc.alloc.rate:                   1767.939 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.405 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1678.853 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8159.054 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 319601.357 ops/s
[info]                  ·gc.alloc.rate:                   1744.916 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.205 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1687.784 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8310.681 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 323897.400 ops/s
[info]                  ·gc.alloc.rate:                   1767.881 MB/sec
[info]                  ·gc.alloc.rate.norm:              8592.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2030.909 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9870.333 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson":
[info]   321709.429 ±(99.9%) 12523.981 ops/s [Average]
[info]   (min, avg, max) = (316988.436, 321709.429, 324140.860), stdev = 3252.438
[info]   CI (99.9%): [309185.448, 334233.410] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1756.029 ±(99.9%) 67.593 MB/sec [Average]
[info]   (min, avg, max) = (1730.382, 1756.029, 1769.027), stdev = 17.554
[info]   CI (99.9%): [1688.436, 1823.622] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   8592.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8592.001, 8592.001, 8592.001), stdev = 0.001
[info]   CI (99.9%): [8592.001, 8592.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.117, 0.167), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.318] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.570 ±(99.9%) 0.990 B/op [Average]
[info]   (min, avg, max) = (0.205, 0.570, 0.827), stdev = 0.257
[info]   CI (99.9%): [≈ 0, 1.561] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1810.095 ±(99.9%) 697.442 MB/sec [Average]
[info]   (min, avg, max) = (1668.758, 1810.095, 2030.909), stdev = 181.123
[info]   CI (99.9%): [1112.654, 2507.537] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   8859.447 ±(99.9%) 3533.508 B/op [Average]
[info]   (min, avg, max) = (8105.004, 8859.447, 9870.333), stdev = 917.641
[info]   CI (99.9%): [5325.939, 12392.956] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.readPlayJson:·gc.time":
[info]   32.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.400, 7.000), stdev = 0.548
[info]   CI (99.9%): [32.000, 32.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce
[info] # Run progress: 88.45% complete, ETA 00:07:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 255380.801 ops/s
[info] # Warmup Iteration   2: 465087.045 ops/s
[info] # Warmup Iteration   3: 473872.925 ops/s
[info] Iteration   1: 465654.877 ops/s
[info]                  ·gc.alloc.rate:                   1178.371 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.079 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4398.867 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 473293.976 ops/s
[info]                  ·gc.alloc.rate:                   1197.423 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.346 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1306.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4348.337 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 473046.206 ops/s
[info]                  ·gc.alloc.rate:                   1197.062 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.841 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3284.356 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 473135.725 ops/s
[info]                  ·gc.alloc.rate:                   1197.640 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1323.167 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4401.573 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 474318.975 ops/s
[info]                  ·gc.alloc.rate:                   1200.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              3984.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.207 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.978 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 3312.039 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce":
[info]   471889.952 ±(99.9%) 13564.500 ops/s [Average]
[info]   (min, avg, max) = (465654.877, 471889.952, 474318.975), stdev = 3522.658
[info]   CI (99.9%): [458325.452, 485454.452] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1194.190 ±(99.9%) 34.443 MB/sec [Average]
[info]   (min, avg, max) = (1178.371, 1194.190, 1200.452), stdev = 8.945
[info]   CI (99.9%): [1159.746, 1228.633] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   3984.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (3984.001, 3984.001, 3984.001), stdev = 0.001
[info]   CI (99.9%): [3984.001, 3984.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.072 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.071, 0.104), stdev = 0.019
[info]   CI (99.9%): [≈ 0, 0.142] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.236 ±(99.9%) 0.237 B/op [Average]
[info]   (min, avg, max) = (0.207, 0.236, 0.346), stdev = 0.062
[info]   CI (99.9%): [≈ 0, 0.473] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1183.198 ±(99.9%) 671.544 MB/sec [Average]
[info]   (min, avg, max) = (986.841, 1183.198, 1323.167), stdev = 174.398
[info]   CI (99.9%): [511.654, 1854.743] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   3949.034 ±(99.9%) 2289.550 B/op [Average]
[info]   (min, avg, max) = (3284.356, 3949.034, 4401.573), stdev = 594.589
[info]   CI (99.9%): [1659.485, 6238.584] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeCirce:·gc.time":
[info]   16.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.200, 4.000), stdev = 1.095
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala
[info] # Run progress: 88.78% complete, ETA 00:07:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2321638.001 ops/s
[info] # Warmup Iteration   2: 2877845.196 ops/s
[info] # Warmup Iteration   3: 2905662.952 ops/s
[info] Iteration   1: 2879703.122 ops/s
[info]                  ·gc.alloc.rate:                   585.277 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.772 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.062 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.191 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 358.226 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2909082.485 ops/s
[info]                  ·gc.alloc.rate:                   591.262 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.250 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.467 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2860140.624 ops/s
[info]                  ·gc.alloc.rate:                   581.376 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      325.626 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.231 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 2896676.944 ops/s
[info]                  ·gc.alloc.rate:                   588.833 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.310 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 2907829.371 ops/s
[info]                  ·gc.alloc.rate:                   591.068 MB/sec
[info]                  ·gc.alloc.rate.norm:              320.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.034 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.953 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala":
[info]   2890686.509 ±(99.9%) 79891.834 ops/s [Average]
[info]   (min, avg, max) = (2860140.624, 2890686.509, 2909082.485), stdev = 20747.655
[info]   CI (99.9%): [2810794.676, 2970578.343] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   587.563 ±(99.9%) 16.232 MB/sec [Average]
[info]   (min, avg, max) = (581.376, 587.563, 591.262), stdev = 4.215
[info]   CI (99.9%): [571.331, 603.795] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   320.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (320.000, 320.000, 320.000), stdev = 0.001
[info]   CI (99.9%): [320.000, 320.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.792 ±(99.9%) 6.415 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.792, 3.772), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.207] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.433 ±(99.9%) 3.508 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.433, 2.062), stdev = 0.911
[info]   CI (99.9%): [≈ 0, 3.941] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   587.062 ±(99.9%) 562.795 MB/sec [Average]
[info]   (min, avg, max) = (325.626, 587.062, 655.191), stdev = 146.156
[info]   CI (99.9%): [24.267, 1149.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   319.366 ±(99.9%) 301.778 B/op [Average]
[info]   (min, avg, max) = (179.231, 319.366, 358.226), stdev = 78.371
[info]   CI (99.9%): [17.587, 621.144] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson
[info] # Run progress: 89.11% complete, ETA 00:07:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 86468.727 ops/s
[info] # Warmup Iteration   2: 347085.354 ops/s
[info] # Warmup Iteration   3: 348053.009 ops/s
[info] Iteration   1: 348344.461 ops/s
[info]                  ·gc.alloc.rate:                   1320.225 MB/sec
[info]                  ·gc.alloc.rate.norm:              5968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.376 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1311.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5928.800 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 347302.324 ops/s
[info]                  ·gc.alloc.rate:                   1316.404 MB/sec
[info]                  ·gc.alloc.rate.norm:              5968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.566 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.406 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5995.209 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 347293.012 ops/s
[info]                  ·gc.alloc.rate:                   1316.565 MB/sec
[info]                  ·gc.alloc.rate.norm:              5968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.094 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1331.152 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6034.123 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 348095.735 ops/s
[info]                  ·gc.alloc.rate:                   1319.764 MB/sec
[info]                  ·gc.alloc.rate.norm:              5968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.188 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1338.995 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6054.962 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 346988.159 ops/s
[info]                  ·gc.alloc.rate:                   1315.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              5968.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.472 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1345.712 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6103.399 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson":
[info]   347604.738 ±(99.9%) 2242.868 ops/s [Average]
[info]   (min, avg, max) = (346988.159, 347604.738, 348344.461), stdev = 582.466
[info]   CI (99.9%): [345361.870, 349847.606] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1317.763 ±(99.9%) 7.932 MB/sec [Average]
[info]   (min, avg, max) = (1315.859, 1317.763, 1320.225), stdev = 2.060
[info]   CI (99.9%): [1309.832, 1325.695] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   5968.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (5968.001, 5968.001, 5968.001), stdev = 0.001
[info]   CI (99.9%): [5968.001, 5968.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.166 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.125), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.241] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.339 ±(99.9%) 0.754 B/op [Average]
[info]   (min, avg, max) = (0.094, 0.339, 0.566), stdev = 0.196
[info]   CI (99.9%): [≈ 0, 1.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1329.963 ±(99.9%) 51.915 MB/sec [Average]
[info]   (min, avg, max) = (1311.553, 1329.963, 1345.712), stdev = 13.482
[info]   CI (99.9%): [1278.048, 1381.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   6023.299 ±(99.9%) 252.905 B/op [Average]
[info]   (min, avg, max) = (5928.800, 6023.299, 6103.399), stdev = 65.679
[info]   CI (99.9%): [5770.393, 6276.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.count":
[info]   20.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.000, 4.000), stdev = 0.001
[info]   CI (99.9%): [20.000, 20.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.MutableMapsBenchmark.writePlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce
[info] # Run progress: 89.44% complete, ETA 00:06:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 313586.918 ops/s
[info] # Warmup Iteration   2: 682528.557 ops/s
[info] # Warmup Iteration   3: 678084.418 ops/s
[info] Iteration   1: 689268.644 ops/s
[info]                  ·gc.alloc.rate:                   2108.467 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.190 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1977.154 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4516.066 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 688240.154 ops/s
[info]                  ·gc.alloc.rate:                   2105.970 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.428 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1997.111 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4567.060 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 692780.216 ops/s
[info]                  ·gc.alloc.rate:                   2119.136 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.331 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2347.567 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 5335.138 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 694581.016 ops/s
[info]                  ·gc.alloc.rate:                   2124.797 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.189 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2025.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4590.100 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 683355.995 ops/s
[info]                  ·gc.alloc.rate:                   2091.247 MB/sec
[info]                  ·gc.alloc.rate.norm:              4816.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.192 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.545 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 4680.814 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce":
[info]   689645.205 ±(99.9%) 16769.174 ops/s [Average]
[info]   (min, avg, max) = (683355.995, 689645.205, 694581.016), stdev = 4354.901
[info]   CI (99.9%): [672876.031, 706414.380] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate":
[info]   2109.923 ±(99.9%) 49.935 MB/sec [Average]
[info]   (min, avg, max) = (2091.247, 2109.923, 2124.797), stdev = 12.968
[info]   CI (99.9%): [2059.989, 2159.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   4816.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (4816.001, 4816.001, 4816.001), stdev = 0.001
[info]   CI (99.9%): [4816.000, 4816.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.117 ±(99.9%) 0.185 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.117, 0.187), stdev = 0.048
[info]   CI (99.9%): [≈ 0, 0.301] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.266 ±(99.9%) 0.421 B/op [Average]
[info]   (min, avg, max) = (0.189, 0.266, 0.428), stdev = 0.109
[info]   CI (99.9%): [≈ 0, 0.687] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2075.902 ±(99.9%) 590.978 MB/sec [Average]
[info]   (min, avg, max) = (1977.154, 2075.902, 2347.567), stdev = 153.475
[info]   CI (99.9%): [1484.923, 2666.880] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   4737.836 ±(99.9%) 1306.092 B/op [Average]
[info]   (min, avg, max) = (4516.066, 4737.836, 5335.138), stdev = 339.188
[info]   CI (99.9%): [3431.744, 6043.928] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.count":
[info]   31.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.200, 7.000), stdev = 0.447
[info]   CI (99.9%): [31.000, 31.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readCirce:·gc.time":
[info]   28.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 5.600, 6.000), stdev = 0.548
[info]   CI (99.9%): [28.000, 28.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala
[info] # Run progress: 89.77% complete, ETA 00:06:37
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 452921.667 ops/s
[info] # Warmup Iteration   2: 1550678.027 ops/s
[info] # Warmup Iteration   3: 1558869.849 ops/s
[info] Iteration   1: 1563323.118 ops/s
[info]                  ·gc.alloc.rate:                   1183.872 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.042 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1309.404 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1318.394 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 1569616.454 ops/s
[info]                  ·gc.alloc.rate:                   1188.402 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      989.265 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 992.260 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1576869.250 ops/s
[info]                  ·gc.alloc.rate:                   1194.324 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.083 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.232 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1325.648 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 1574811.378 ops/s
[info]                  ·gc.alloc.rate:                   1192.252 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.021 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1001.085 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1000.874 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1568022.236 ops/s
[info]                  ·gc.alloc.rate:                   1187.276 MB/sec
[info]                  ·gc.alloc.rate.norm:              1192.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.104 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1341.173 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1346.510 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala":
[info]   1570528.487 ±(99.9%) 20876.996 ops/s [Average]
[info]   (min, avg, max) = (1563323.118, 1570528.487, 1576869.250), stdev = 5421.690
[info]   CI (99.9%): [1549651.491, 1591405.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   1189.225 ±(99.9%) 15.910 MB/sec [Average]
[info]   (min, avg, max) = (1183.872, 1189.225, 1194.324), stdev = 4.132
[info]   CI (99.9%): [1173.315, 1205.136] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1192.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1192.000, 1192.000, 1192.000), stdev = 0.001
[info]   CI (99.9%): [1192.000, 1192.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.198] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.067 ±(99.9%) 0.132 B/op [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.199] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1193.832 ±(99.9%) 699.845 MB/sec [Average]
[info]   (min, avg, max) = (989.265, 1193.832, 1341.173), stdev = 181.748
[info]   CI (99.9%): [493.986, 1893.677] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1196.737 ±(99.9%) 704.846 B/op [Average]
[info]   (min, avg, max) = (992.260, 1196.737, 1346.510), stdev = 183.046
[info]   CI (99.9%): [491.891, 1901.583] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJacksonScala:·gc.time":
[info]   22.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 4.400, 5.000), stdev = 0.548
[info]   CI (99.9%): [22.000, 22.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala
[info] # Run progress: 90.10% complete, ETA 00:06:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6197916.034 ops/s
[info] # Warmup Iteration   2: 6543238.300 ops/s
[info] # Warmup Iteration   3: 6832913.526 ops/s
[info] Iteration   1: 6819750.651 ops/s
[info]                  ·gc.alloc.rate:                   207.921 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.016 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.004 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.034 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6848093.316 ops/s
[info]                  ·gc.alloc.rate:                   208.807 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.745 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 58.790 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6864381.657 ops/s
[info]                  ·gc.alloc.rate:      209.278 MB/sec
[info]                  ·gc.alloc.rate.norm: 48.000 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 6814027.881 ops/s
[info]                  ·gc.alloc.rate:                   207.757 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.046 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.703 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.077 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6802253.286 ops/s
[info]                  ·gc.alloc.rate:                   207.416 MB/sec
[info]                  ·gc.alloc.rate.norm:              48.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.724 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 59.179 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala":
[info]   6829701.358 ±(99.9%) 98907.189 ops/s [Average]
[info]   (min, avg, max) = (6802253.286, 6829701.358, 6864381.657), stdev = 25685.883
[info]   CI (99.9%): [6730794.169, 6928608.547] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   208.236 ±(99.9%) 2.990 MB/sec [Average]
[info]   (min, avg, max) = (207.416, 208.236, 209.278), stdev = 0.776
[info]   CI (99.9%): [205.246, 211.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   48.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (48.000, 48.000, 48.000), stdev = 0.001
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.012 ±(99.9%) 0.078 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.012, 0.046), stdev = 0.020
[info]   CI (99.9%): [≈ 0, 0.090] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.003 ±(99.9%) 0.018 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.003, 0.011), stdev = 0.005
[info]   CI (99.9%): [≈ 0, 0.021] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   204.578 ±(99.9%) 440.369 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 204.578, 255.745), stdev = 114.363
[info]   CI (99.9%): [≈ 0, 644.947] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   47.216 ±(99.9%) 101.638 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 47.216, 59.179), stdev = 26.395
[info]   CI (99.9%): [≈ 0, 148.854] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.800, 3.000), stdev = 1.095
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson
[info] # Run progress: 90.43% complete, ETA 00:06:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 39740.534 ops/s
[info] # Warmup Iteration   2: 239356.839 ops/s
[info] # Warmup Iteration   3: 238768.512 ops/s
[info] Iteration   1: 239825.268 ops/s
[info]                  ·gc.alloc.rate:                   1669.497 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.820 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1647.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10817.115 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   2: 238365.911 ops/s
[info]                  ·gc.alloc.rate:                   1659.945 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.687 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1664.407 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10989.468 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 238721.332 ops/s
[info]                  ·gc.alloc.rate:                   1662.633 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.412 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1675.930 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11047.651 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   4: 240614.483 ops/s
[info]                  ·gc.alloc.rate:                   1675.288 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.408 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1684.359 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11019.342 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 239512.986 ops/s
[info]                  ·gc.alloc.rate:                   1667.489 MB/sec
[info]                  ·gc.alloc.rate.norm:              10960.002 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1690.131 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 11108.826 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson":
[info]   239407.996 ±(99.9%) 3443.151 ops/s [Average]
[info]   (min, avg, max) = (238365.911, 239407.996, 240614.483), stdev = 894.175
[info]   CI (99.9%): [235964.845, 242851.147] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1666.970 ±(99.9%) 23.105 MB/sec [Average]
[info]   (min, avg, max) = (1659.945, 1666.970, 1675.288), stdev = 6.000
[info]   CI (99.9%): [1643.866, 1690.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   10960.002 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10960.002, 10960.002, 10960.002), stdev = 0.001
[info]   CI (99.9%): [10960.002, 10960.002] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.104 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.087, 0.125), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.192] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.575 ±(99.9%) 0.688 B/op [Average]
[info]   (min, avg, max) = (0.408, 0.575, 0.820), stdev = 0.179
[info]   CI (99.9%): [≈ 0, 1.263] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1672.512 ±(99.9%) 65.070 MB/sec [Average]
[info]   (min, avg, max) = (1647.732, 1672.512, 1690.131), stdev = 16.898
[info]   CI (99.9%): [1607.442, 1737.581] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   10996.480 ±(99.9%) 421.746 B/op [Average]
[info]   (min, avg, max) = (10817.115, 10996.480, 11108.826), stdev = 109.526
[info]   CI (99.9%): [10574.735, 11418.226] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.count":
[info]   25.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.000, 5.000), stdev = 0.001
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.readPlayJson:·gc.time":
[info]   30.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce
[info] # Run progress: 90.76% complete, ETA 00:05:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 442280.137 ops/s
[info] # Warmup Iteration   2: 917567.903 ops/s
[info] # Warmup Iteration   3: 925864.392 ops/s
[info] Iteration   1: 934864.746 ops/s
[info]                  ·gc.alloc.rate:                   1505.698 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.105 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1631.604 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2748.060 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 927894.648 ops/s
[info]                  ·gc.alloc.rate:                   1496.405 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1640.950 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2780.964 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 932075.338 ops/s
[info]                  ·gc.alloc.rate:                   1501.388 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.211 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1325.181 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2238.369 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 931061.199 ops/s
[info]                  ·gc.alloc.rate:                   1500.075 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.106 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1668.821 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2821.280 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 924959.395 ops/s
[info]                  ·gc.alloc.rate:                   1490.581 MB/sec
[info]                  ·gc.alloc.rate.norm:              2536.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1342.782 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2284.542 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce":
[info]   930171.065 ±(99.9%) 14762.690 ops/s [Average]
[info]   (min, avg, max) = (924959.395, 930171.065, 934864.746), stdev = 3833.824
[info]   CI (99.9%): [915408.375, 944933.755] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate":
[info]   1498.829 ±(99.9%) 21.883 MB/sec [Average]
[info]   (min, avg, max) = (1490.581, 1498.829, 1505.698), stdev = 5.683
[info]   CI (99.9%): [1476.946, 1520.712] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   2536.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2536.000, 2536.000, 2536.000), stdev = 0.001
[info]   CI (99.9%): [2536.000, 2536.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.091 ±(99.9%) 0.201 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.091, 0.166), stdev = 0.052
[info]   CI (99.9%): [≈ 0, 0.292] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.155 ±(99.9%) 0.340 B/op [Average]
[info]   (min, avg, max) = (0.071, 0.155, 0.282), stdev = 0.088
[info]   CI (99.9%): [≈ 0, 0.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1521.868 ±(99.9%) 662.980 MB/sec [Average]
[info]   (min, avg, max) = (1325.181, 1521.868, 1668.821), stdev = 172.174
[info]   CI (99.9%): [858.888, 2184.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2574.643 ±(99.9%) 1107.203 B/op [Average]
[info]   (min, avg, max) = (2238.369, 2574.643, 2821.280), stdev = 287.537
[info]   CI (99.9%): [1467.441, 3681.846] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.count":
[info]   23.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.600, 5.000), stdev = 0.548
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeCirce:·gc.time":
[info]   23.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 4.600, 7.000), stdev = 1.673
[info]   CI (99.9%): [23.000, 23.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala
[info] # Run progress: 91.09% complete, ETA 00:05:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 824484.383 ops/s
[info] # Warmup Iteration   2: 2538250.228 ops/s
[info] # Warmup Iteration   3: 2512473.066 ops/s
[info] Iteration   1: 2502931.856 ops/s
[info]                  ·gc.alloc.rate:                   1030.101 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.495 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 615.537 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2488639.353 ops/s
[info]                  ·gc.alloc.rate:                   1024.790 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.079 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      985.727 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 623.300 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 2560901.573 ops/s
[info]                  ·gc.alloc.rate:                   1054.072 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1322.548 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 813.048 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 2555232.519 ops/s
[info]                  ·gc.alloc.rate:                   1051.736 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      997.204 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 614.402 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2532152.522 ops/s
[info]                  ·gc.alloc.rate:                   1042.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              648.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1002.866 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 623.301 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala":
[info]   2527971.565 ±(99.9%) 122057.446 ops/s [Average]
[info]   (min, avg, max) = (2488639.353, 2527971.565, 2560901.573), stdev = 31697.931
[info]   CI (99.9%): [2405914.119, 2650029.011] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   1040.661 ±(99.9%) 49.825 MB/sec [Average]
[info]   (min, avg, max) = (1024.790, 1040.661, 1054.072), stdev = 12.939
[info]   CI (99.9%): [990.837, 1090.486] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   648.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (648.000, 648.000, 648.000), stdev = 0.001
[info]   CI (99.9%): [648.000, 648.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.146 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.075, 0.125), stdev = 0.038
[info]   CI (99.9%): [≈ 0, 0.221] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.047 ±(99.9%) 0.093 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.047, 0.079), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   1057.368 ±(99.9%) 571.998 MB/sec [Average]
[info]   (min, avg, max) = (978.495, 1057.368, 1322.548), stdev = 148.546
[info]   CI (99.9%): [485.370, 1629.366] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   657.917 ±(99.9%) 334.319 B/op [Average]
[info]   (min, avg, max) = (614.402, 657.917, 813.048), stdev = 86.822
[info]   CI (99.9%): [323.598, 992.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.count":
[info]   16.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.200, 4.000), stdev = 0.447
[info]   CI (99.9%): [16.000, 16.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJacksonScala:·gc.time":
[info]   18.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.600, 5.000), stdev = 1.140
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala
[info] # Run progress: 91.42% complete, ETA 00:05:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4169251.805 ops/s
[info] # Warmup Iteration   2: 5933462.517 ops/s
[info] # Warmup Iteration   3: 6027853.570 ops/s
[info] Iteration   1: 5758603.121 ops/s
[info]                  ·gc.alloc.rate:                   643.812 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.766 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.938 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 179.315 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 5805479.625 ops/s
[info]                  ·gc.alloc.rate:                   649.188 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.017 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.800 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.979 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6044883.343 ops/s
[info]                  ·gc.alloc.rate:                   675.756 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      977.172 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 254.504 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6123172.040 ops/s
[info]                  ·gc.alloc.rate:                   684.561 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.601 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 167.783 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6115821.251 ops/s
[info]                  ·gc.alloc.rate:                   683.772 MB/sec
[info]                  ·gc.alloc.rate.norm:              176.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.977 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 168.331 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala":
[info]   5969591.876 ±(99.9%) 672727.958 ops/s [Average]
[info]   (min, avg, max) = (5758603.121, 5969591.876, 6123172.040), stdev = 174705.314
[info]   CI (99.9%): [5296863.918, 6642319.834] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   667.418 ±(99.9%) 75.073 MB/sec [Average]
[info]   (min, avg, max) = (643.812, 667.418, 684.561), stdev = 19.496
[info]   CI (99.9%): [592.345, 742.491] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   176.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (176.000, 176.000, 176.000), stdev = 0.001
[info]   CI (99.9%): [176.000, 176.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.787 ±(99.9%) 6.414 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.787, 3.766), stdev = 1.666
[info]   CI (99.9%): [≈ 0, 7.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.215 ±(99.9%) 1.754 B/op [Average]
[info]   (min, avg, max) = (0.005, 0.215, 1.030), stdev = 0.456
[info]   CI (99.9%): [≈ 0, 1.969] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   718.498 ±(99.9%) 556.839 MB/sec [Average]
[info]   (min, avg, max) = (652.601, 718.498, 977.172), stdev = 144.609
[info]   CI (99.9%): [161.659, 1275.337] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   189.382 ±(99.9%) 141.556 B/op [Average]
[info]   (min, avg, max) = (167.783, 189.382, 254.504), stdev = 36.762
[info]   CI (99.9%): [47.827, 330.938] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 91.75% complete, ETA 00:05:20
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4265075.393 ops/s
[info] # Warmup Iteration   2: 5939677.592 ops/s
[info] # Warmup Iteration   3: 6055002.878 ops/s
[info] Iteration   1: 6128749.241 ops/s
[info]                  ·gc.alloc.rate:                   373.726 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.730 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.690 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6101235.127 ops/s
[info]                  ·gc.alloc.rate:                   372.152 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.795 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 65.985 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6092052.149 ops/s
[info]                  ·gc.alloc.rate:                   371.567 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.745 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.967 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      328.027 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 84.751 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 6067607.895 ops/s
[info]                  ·gc.alloc.rate:                   370.014 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.278 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 169.752 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 6134859.399 ops/s
[info]                  ·gc.alloc.rate:                   374.093 MB/sec
[info]                  ·gc.alloc.rate.norm:              96.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.307 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 83.737 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc":
[info]   6104900.762 ±(99.9%) 106077.230 ops/s [Average]
[info]   (min, avg, max) = (6067607.895, 6104900.762, 6134859.399), stdev = 27547.920
[info]   CI (99.9%): [5998823.532, 6210977.992] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   372.310 ±(99.9%) 6.394 MB/sec [Average]
[info]   (min, avg, max) = (370.014, 372.310, 374.093), stdev = 1.661
[info]   CI (99.9%): [365.916, 378.705] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   96.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (96.000, 96.000, 96.000), stdev = 0.001
[info]   CI (99.9%): [96.000, 96.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space":
[info]   0.761 ±(99.9%) 6.423 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.761, 3.745), stdev = 1.668
[info]   CI (99.9%): [≈ 0, 7.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm":
[info]   0.197 ±(99.9%) 1.659 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.197, 0.967), stdev = 0.431
[info]   CI (99.9%): [≈ 0, 1.856] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space":
[info]   364.027 ±(99.9%) 639.736 MB/sec [Average]
[info]   (min, avg, max) = (255.730, 364.027, 654.278), stdev = 166.138
[info]   CI (99.9%): [≈ 0, 1003.764] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm":
[info]   93.983 ±(99.9%) 166.911 B/op [Average]
[info]   (min, avg, max) = (65.690, 93.983, 169.752), stdev = 43.346
[info]   CI (99.9%): [≈ 0, 260.894] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time":
[info]   11.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.200, 3.000), stdev = 0.837
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson
[info] # Run progress: 92.08% complete, ETA 00:05:07
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 49539.005 ops/s
[info] # Warmup Iteration   2: 346840.977 ops/s
[info] # Warmup Iteration   3: 348536.481 ops/s
[info] Iteration   1: 351086.290 ops/s
[info]                  ·gc.alloc.rate:                   1953.355 MB/sec
[info]                  ·gc.alloc.rate.norm:              8760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.280 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1983.620 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8895.727 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   2: 353101.472 ops/s
[info]                  ·gc.alloc.rate:                   1964.802 MB/sec
[info]                  ·gc.alloc.rate.norm:              8760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.557 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2003.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 8934.171 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 351877.689 ops/s
[info]                  ·gc.alloc.rate:                   1958.071 MB/sec
[info]                  ·gc.alloc.rate.norm:              8760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.372 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2017.911 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9027.710 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 347980.126 ops/s
[info]                  ·gc.alloc.rate:                   1936.808 MB/sec
[info]                  ·gc.alloc.rate.norm:              8760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.377 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2027.580 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9170.551 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   5: 348347.380 ops/s
[info]                  ·gc.alloc.rate:                   1938.549 MB/sec
[info]                  ·gc.alloc.rate.norm:              8760.001 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.282 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2033.252 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 9187.951 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson":
[info]   350478.591 ±(99.9%) 8608.292 ops/s [Average]
[info]   (min, avg, max) = (347980.126, 350478.591, 353101.472), stdev = 2235.546
[info]   CI (99.9%): [341870.299, 359086.884] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1950.317 ±(99.9%) 47.166 MB/sec [Average]
[info]   (min, avg, max) = (1936.808, 1950.317, 1964.802), stdev = 12.249
[info]   CI (99.9%): [1903.151, 1997.483] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   8760.001 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (8760.001, 8760.001, 8760.001), stdev = 0.001
[info]   CI (99.9%): [8760.001, 8760.001] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.098 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.083, 0.125), stdev = 0.025
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.374 ±(99.9%) 0.433 B/op [Average]
[info]   (min, avg, max) = (0.280, 0.374, 0.557), stdev = 0.113
[info]   CI (99.9%): [≈ 0, 0.807] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   2013.246 ±(99.9%) 76.847 MB/sec [Average]
[info]   (min, avg, max) = (1983.620, 2013.246, 2033.252), stdev = 19.957
[info]   CI (99.9%): [1936.398, 2090.093] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   9043.222 ±(99.9%) 513.186 B/op [Average]
[info]   (min, avg, max) = (8895.727, 9043.222, 9187.951), stdev = 133.273
[info]   CI (99.9%): [8530.036, 9556.408] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.count":
[info]   30.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.000, 6.000), stdev = 0.001
[info]   CI (99.9%): [30.000, 30.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.PrimitivesBenchmark.writePlayJson:·gc.time":
[info]   35.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 7.000, 8.000), stdev = 0.707
[info]   CI (99.9%): [35.000, 35.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce
[info] # Run progress: 92.41% complete, ETA 00:04:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 3024405.711 ops/s
[info] # Warmup Iteration   2: 4390630.458 ops/s
[info] # Warmup Iteration   3: 4368546.944 ops/s
[info] Iteration   1: 4389678.962 ops/s
[info]                  ·gc.alloc.rate:                   3234.030 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3355.008 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1203.393 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   2: 4415001.375 ops/s
[info]                  ·gc.alloc.rate:                   3252.947 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.030 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3381.447 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1205.823 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   3: 4394003.186 ops/s
[info]                  ·gc.alloc.rate:                   3237.318 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3054.833 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1094.612 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4386483.877 ops/s
[info]                  ·gc.alloc.rate:                   3232.015 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.045 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3400.731 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1220.554 B/op
[info]                  ·gc.count:                        10.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 4416238.815 ops/s
[info]                  ·gc.alloc.rate:                   3254.330 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.187 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      3062.705 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1091.696 B/op
[info]                  ·gc.count:                        9.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce":
[info]   4400281.243 ±(99.9%) 54914.424 ops/s [Average]
[info]   (min, avg, max) = (4386483.877, 4400281.243, 4416238.815), stdev = 14261.102
[info]   CI (99.9%): [4345366.818, 4455195.667] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   3242.128 ±(99.9%) 41.155 MB/sec [Average]
[info]   (min, avg, max) = (3232.015, 3242.128, 3254.330), stdev = 10.688
[info]   CI (99.9%): [3200.973, 3283.283] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.125 ±(99.9%) 0.150 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.125, 0.187), stdev = 0.039
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.053 B/op [Average]
[info]   (min, avg, max) = (0.030, 0.045, 0.067), stdev = 0.014
[info]   CI (99.9%): [≈ 0, 0.098] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   3250.945 ±(99.9%) 678.495 MB/sec [Average]
[info]   (min, avg, max) = (3054.833, 3250.945, 3400.731), stdev = 176.203
[info]   CI (99.9%): [2572.450, 3929.440] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1163.216 ±(99.9%) 247.603 B/op [Average]
[info]   (min, avg, max) = (1091.696, 1163.216, 1220.554), stdev = 64.302
[info]   CI (99.9%): [915.612, 1410.819] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.count":
[info]   48.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (9.000, 9.600, 10.000), stdev = 0.548
[info]   CI (99.9%): [48.000, 48.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readCirce:·gc.time":
[info]   43.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (8.000, 8.600, 9.000), stdev = 0.548
[info]   CI (99.9%): [43.000, 43.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 92.74% complete, ETA 00:04:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1889081.543 ops/s
[info] # Warmup Iteration   2: 4101453.751 ops/s
[info] # Warmup Iteration   3: 4206948.206 ops/s
[info] Iteration   1: 4250623.436 ops/s
[info]                  ·gc.alloc.rate:                   2203.638 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.054 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2326.271 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 861.411 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 4297126.173 ops/s
[info]                  ·gc.alloc.rate:                   2227.455 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.038 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2011.349 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736.833 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 4275835.627 ops/s
[info]                  ·gc.alloc.rate:                   2216.000 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2361.138 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 869.444 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   4: 4286901.964 ops/s
[info]                  ·gc.alloc.rate:                   2221.562 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2032.033 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 746.384 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   5: 4223124.685 ops/s
[info]                  ·gc.alloc.rate:                   2189.060 MB/sec
[info]                  ·gc.alloc.rate.norm:              816.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.031 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2376.295 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 885.794 B/op
[info]                  ·gc.count:                        7.000 counts
[info]                  ·gc.time:                         11.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala":
[info]   4266722.377 ±(99.9%) 115110.950 ops/s [Average]
[info]   (min, avg, max) = (4223124.685, 4266722.377, 4297126.173), stdev = 29893.948
[info]   CI (99.9%): [4151611.427, 4381833.327] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   2211.543 ±(99.9%) 59.073 MB/sec [Average]
[info]   (min, avg, max) = (2189.060, 2211.543, 2227.455), stdev = 15.341
[info]   CI (99.9%): [2152.470, 2270.616] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   816.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (816.000, 816.000, 816.000), stdev = 0.001
[info]   CI (99.9%): [816.000, 816.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.083, 0.100, 0.146), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.204] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.037 ±(99.9%) 0.039 B/op [Average]
[info]   (min, avg, max) = (0.031, 0.037, 0.054), stdev = 0.010
[info]   CI (99.9%): [≈ 0, 0.076] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   2221.417 ±(99.9%) 706.092 MB/sec [Average]
[info]   (min, avg, max) = (2011.349, 2221.417, 2376.295), stdev = 183.370
[info]   CI (99.9%): [1515.325, 2927.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   819.973 ±(99.9%) 277.838 B/op [Average]
[info]   (min, avg, max) = (736.833, 819.973, 885.794), stdev = 72.154
[info]   CI (99.9%): [542.136, 1097.811] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   33.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (6.000, 6.600, 7.000), stdev = 0.548
[info]   CI (99.9%): [33.000, 33.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   40.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (6.000, 8.000, 11.000), stdev = 1.871
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 93.07% complete, ETA 00:04:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 5963561.533 ops/s
[info] # Warmup Iteration   2: 6524681.909 ops/s
[info] # Warmup Iteration   3: 6639054.187 ops/s
[info] Iteration   1: 6637697.707 ops/s
[info]                  ·gc.alloc.rate:                   708.249 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.159 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.830 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 6680097.261 ops/s
[info]                  ·gc.alloc.rate:                   712.830 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      988.908 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 233.066 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 6633460.099 ops/s
[info]                  ·gc.alloc.rate:                   707.863 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.551 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 156.297 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 6656701.818 ops/s
[info]                  ·gc.alloc.rate:                   710.403 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.010 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.320 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 155.920 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 6596494.422 ops/s
[info]                  ·gc.alloc.rate:                   703.933 MB/sec
[info]                  ·gc.alloc.rate.norm:              168.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.025 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      660.561 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 157.649 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala":
[info]   6640890.261 ±(99.9%) 119052.551 ops/s [Average]
[info]   (min, avg, max) = (6596494.422, 6640890.261, 6680097.261), stdev = 30917.569
[info]   CI (99.9%): [6521837.710, 6759942.813] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   708.656 ±(99.9%) 12.709 MB/sec [Average]
[info]   (min, avg, max) = (703.933, 708.656, 712.830), stdev = 3.301
[info]   CI (99.9%): [695.946, 721.365] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   168.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (168.000, 168.000, 168.000), stdev = 0.001
[info]   CI (99.9%): [168.000, 168.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.083 ±(99.9%) 0.113 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.083, 0.104), stdev = 0.029
[info]   CI (99.9%): [≈ 0, 0.197] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.020 ±(99.9%) 0.027 B/op [Average]
[info]   (min, avg, max) = (0.010, 0.020, 0.025), stdev = 0.007
[info]   CI (99.9%): [≈ 0, 0.047] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   725.700 ±(99.9%) 566.589 MB/sec [Average]
[info]   (min, avg, max) = (658.551, 725.700, 988.908), stdev = 147.141
[info]   CI (99.9%): [159.111, 1292.289] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   171.952 ±(99.9%) 131.576 B/op [Average]
[info]   (min, avg, max) = (155.920, 171.952, 233.066), stdev = 34.170
[info]   CI (99.9%): [40.376, 303.528] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce
[info] # Run progress: 93.40% complete, ETA 00:04:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1780031.860 ops/s
[info] # Warmup Iteration   2: 2751209.286 ops/s
[info] # Warmup Iteration   3: 2760036.725 ops/s
[info] Iteration   1: 2786056.645 ops/s
[info]                  ·gc.alloc.rate:                   1160.888 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1303.137 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 736.383 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 2780939.042 ops/s
[info]                  ·gc.alloc.rate:                   1159.237 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      981.325 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 555.322 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2770672.010 ops/s
[info]                  ·gc.alloc.rate:                   1154.473 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.024 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1314.792 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 747.098 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 2779518.168 ops/s
[info]                  ·gc.alloc.rate:                   1158.257 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      992.576 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 562.164 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2773992.988 ops/s
[info]                  ·gc.alloc.rate:                   1155.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              656.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.523 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 755.085 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce":
[info]   2778235.771 ±(99.9%) 23210.311 ops/s [Average]
[info]   (min, avg, max) = (2770672.010, 2778235.771, 2786056.645), stdev = 6027.644
[info]   CI (99.9%): [2755025.460, 2801446.081] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1157.756 ±(99.9%) 9.889 MB/sec [Average]
[info]   (min, avg, max) = (1154.473, 1157.756, 1160.888), stdev = 2.568
[info]   CI (99.9%): [1147.867, 1167.645] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   656.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (656.000, 656.000, 656.000), stdev = 0.001
[info]   CI (99.9%): [656.000, 656.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.079 ±(99.9%) 0.105 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.079, 0.104), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.184] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.059 B/op [Average]
[info]   (min, avg, max) = (0.024, 0.045, 0.059), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1184.471 ±(99.9%) 695.488 MB/sec [Average]
[info]   (min, avg, max) = (981.325, 1184.471, 1330.523), stdev = 180.616
[info]   CI (99.9%): [488.983, 1879.958] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   671.210 ±(99.9%) 396.274 B/op [Average]
[info]   (min, avg, max) = (555.322, 671.210, 755.085), stdev = 102.911
[info]   CI (99.9%): [274.937, 1067.484] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 93.73% complete, ETA 00:04:03
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 979962.044 ops/s
[info] # Warmup Iteration   2: 1989334.670 ops/s
[info] # Warmup Iteration   3: 2004077.173 ops/s
[info] Iteration   1: 2016742.108 ops/s
[info]                  ·gc.alloc.rate:                   625.053 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      320.942 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 250.571 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   2: 2008667.770 ops/s
[info]                  ·gc.alloc.rate:                   622.661 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.011 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 506.300 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2013688.495 ops/s
[info]                  ·gc.alloc.rate:                   624.154 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.065 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      649.239 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 507.613 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2016239.607 ops/s
[info]                  ·gc.alloc.rate:                   624.996 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.016 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.292 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 510.094 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2012216.991 ops/s
[info]                  ·gc.alloc.rate:                   623.753 MB/sec
[info]                  ·gc.alloc.rate.norm:              488.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 513.169 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala":
[info]   2013510.994 ±(99.9%) 12632.254 ops/s [Average]
[info]   (min, avg, max) = (2008667.770, 2013510.994, 2016742.108), stdev = 3280.556
[info]   CI (99.9%): [2000878.740, 2026143.249] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   624.123 ±(99.9%) 3.803 MB/sec [Average]
[info]   (min, avg, max) = (622.661, 624.123, 625.053), stdev = 0.988
[info]   CI (99.9%): [620.321, 627.926] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   488.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (488.000, 488.000, 488.000), stdev = 0.001
[info]   CI (99.9%): [488.000, 488.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.164 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.043
[info]   CI (99.9%): [≈ 0, 0.202] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.029 ±(99.9%) 0.129 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.029, 0.065), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.158] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   585.081 ±(99.9%) 568.767 MB/sec [Average]
[info]   (min, avg, max) = (320.942, 585.081, 655.923), stdev = 147.707
[info]   CI (99.9%): [16.315, 1153.848] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   457.549 ±(99.9%) 445.651 B/op [Average]
[info]   (min, avg, max) = (250.571, 457.549, 513.169), stdev = 115.734
[info]   CI (99.9%): [11.898, 903.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   9.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 94.06% complete, ETA 00:03:50
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6332651.195 ops/s
[info] # Warmup Iteration   2: 8798297.960 ops/s
[info] # Warmup Iteration   3: 8807246.855 ops/s
[info] Iteration   1: 8907404.287 ops/s
[info]                  ·gc.alloc.rate:                   859.975 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.146 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.827 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 173.007 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 8824488.222 ops/s
[info]                  ·gc.alloc.rate:                   851.956 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.434 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 8946995.115 ops/s
[info]                  ·gc.alloc.rate:                   863.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      979.603 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 172.377 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 8798095.389 ops/s
[info]                  ·gc.alloc.rate:                   849.525 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.934 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 176.049 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 8916520.548 ops/s
[info]                  ·gc.alloc.rate:                   860.903 MB/sec
[info]                  ·gc.alloc.rate.norm:              152.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.015 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 116.275 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala":
[info]   8878700.712 ±(99.9%) 246219.797 ops/s [Average]
[info]   (min, avg, max) = (8798095.389, 8878700.712, 8946995.115), stdev = 63942.499
[info]   CI (99.9%): [8632480.915, 9124920.510] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   857.232 ±(99.9%) 23.689 MB/sec [Average]
[info]   (min, avg, max) = (849.525, 857.232, 863.801), stdev = 6.152
[info]   CI (99.9%): [833.543, 880.922] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   152.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (152.000, 152.000, 152.000), stdev = 0.001
[info]   CI (99.9%): [152.000, 152.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.100 ±(99.9%) 0.132 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.100, 0.146), stdev = 0.034
[info]   CI (99.9%): [≈ 0, 0.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.018 ±(99.9%) 0.023 B/op [Average]
[info]   (min, avg, max) = (0.011, 0.018, 0.026), stdev = 0.006
[info]   CI (99.9%): [≈ 0, 0.041] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   850.708 ±(99.9%) 685.964 MB/sec [Average]
[info]   (min, avg, max) = (652.611, 850.708, 983.934), stdev = 178.143
[info]   CI (99.9%): [164.743, 1536.672] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   150.829 ±(99.9%) 121.298 B/op [Average]
[info]   (min, avg, max) = (116.275, 150.829, 176.049), stdev = 31.501
[info]   CI (99.9%): [29.530, 272.127] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   13.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.600, 3.000), stdev = 0.548
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   12.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.400, 3.000), stdev = 0.894
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 94.39% complete, ETA 00:03:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6260052.202 ops/s
[info] # Warmup Iteration   2: 8334342.942 ops/s
[info] # Warmup Iteration   3: 8018434.502 ops/s
[info] Iteration   1: 8010592.824 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 8044305.063 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 7871432.750 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 8024614.982 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 8017572.892 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   7993703.702 ±(99.9%) 267620.940 ops/s [Average]
[info]   (min, avg, max) = (7871432.750, 7993703.702, 8044305.063), stdev = 69500.308
[info]   CI (99.9%): [7726082.762, 8261324.642] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 94.72% complete, ETA 00:03:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2572608.453 ops/s
[info] # Warmup Iteration   2: 3460310.060 ops/s
[info] # Warmup Iteration   3: 3543728.951 ops/s
[info] Iteration   1: 3506789.544 ops/s
[info]                  ·gc.alloc.rate:                   1122.648 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.009 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1301.143 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 584.133 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   2: 3547969.016 ops/s
[info]                  ·gc.alloc.rate:                   1135.821 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.037 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.923 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 434.380 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 3514100.351 ops/s
[info]                  ·gc.alloc.rate:                   1124.867 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.028 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.028 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 587.858 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 3532003.489 ops/s
[info]                  ·gc.alloc.rate:                   1130.748 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.559 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 441.515 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 3514353.179 ops/s
[info]                  ·gc.alloc.rate:                   1125.508 MB/sec
[info]                  ·gc.alloc.rate.norm:              504.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.047 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.315 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 594.817 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson":
[info]   3523043.116 ±(99.9%) 64469.699 ops/s [Average]
[info]   (min, avg, max) = (3506789.544, 3523043.116, 3547969.016), stdev = 16742.576
[info]   CI (99.9%): [3458573.417, 3587512.815] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1127.918 ±(99.9%) 20.498 MB/sec [Average]
[info]   (min, avg, max) = (1122.648, 1127.918, 1135.821), stdev = 5.323
[info]   CI (99.9%): [1107.421, 1148.416] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   504.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (504.000, 504.000, 504.000), stdev = 0.001
[info]   CI (99.9%): [504.000, 504.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.127 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.062, 0.104), stdev = 0.033
[info]   CI (99.9%): [≈ 0, 0.189] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.028 ±(99.9%) 0.057 B/op [Average]
[info]   (min, avg, max) = (0.009, 0.028, 0.047), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.084] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1182.193 ±(99.9%) 695.252 MB/sec [Average]
[info]   (min, avg, max) = (978.923, 1182.193, 1328.315), stdev = 180.555
[info]   CI (99.9%): [486.941, 1877.446] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   528.540 ±(99.9%) 318.938 B/op [Average]
[info]   (min, avg, max) = (434.380, 528.540, 594.817), stdev = 82.827
[info]   CI (99.9%): [209.602, 847.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 3.400, 4.000), stdev = 0.894
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce
[info] # Run progress: 95.05% complete, ETA 00:03:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1100969.573 ops/s
[info] # Warmup Iteration   2: 1625474.509 ops/s
[info] # Warmup Iteration   3: 1619229.364 ops/s
[info] Iteration   1: 1626387.060 ops/s
[info]                  ·gc.alloc.rate:                   2718.844 MB/sec
[info]                  ·gc.alloc.rate.norm:              2632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2666.958 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2581.772 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         8.000 ms
[info] Iteration   2: 1615530.764 ops/s
[info]                  ·gc.alloc.rate:                   2701.289 MB/sec
[info]                  ·gc.alloc.rate.norm:              2632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.122 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2692.469 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2623.406 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   3: 1603256.820 ops/s
[info]                  ·gc.alloc.rate:                   2680.323 MB/sec
[info]                  ·gc.alloc.rate.norm:              2632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.041 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2706.808 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2658.008 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Iteration   4: 1611204.699 ops/s
[info]                  ·gc.alloc.rate:                   2693.309 MB/sec
[info]                  ·gc.alloc.rate.norm:              2632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.102 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2714.481 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2652.691 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         9.000 ms
[info] Iteration   5: 1609292.516 ops/s
[info]                  ·gc.alloc.rate:                   2690.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              2632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.081 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2719.671 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 2660.425 B/op
[info]                  ·gc.count:                        8.000 counts
[info]                  ·gc.time:                         7.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce":
[info]   1613134.372 ±(99.9%) 33204.183 ops/s [Average]
[info]   (min, avg, max) = (1603256.820, 1613134.372, 1626387.060), stdev = 8623.021
[info]   CI (99.9%): [1579930.188, 1646338.555] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate":
[info]   2696.875 ±(99.9%) 55.401 MB/sec [Average]
[info]   (min, avg, max) = (2680.323, 2696.875, 2718.844), stdev = 14.387
[info]   CI (99.9%): [2641.474, 2752.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   2632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (2632.000, 2632.000, 2632.000), stdev = 0.001
[info]   CI (99.9%): [2632.000, 2632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.087 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.087, 0.125), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.206] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.085 ±(99.9%) 0.116 B/op [Average]
[info]   (min, avg, max) = (0.041, 0.085, 0.122), stdev = 0.030
[info]   CI (99.9%): [≈ 0, 0.201] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   2700.077 ±(99.9%) 81.490 MB/sec [Average]
[info]   (min, avg, max) = (2666.958, 2700.077, 2719.671), stdev = 21.163
[info]   CI (99.9%): [2618.588, 2781.567] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   2635.260 ±(99.9%) 128.521 B/op [Average]
[info]   (min, avg, max) = (2581.772, 2635.260, 2660.425), stdev = 33.377
[info]   CI (99.9%): [2506.739, 2763.782] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.count":
[info]   40.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (8.000, 8.000, 8.000), stdev = 0.001
[info]   CI (99.9%): [40.000, 40.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readCirce:·gc.time":
[info]   38.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (7.000, 7.600, 9.000), stdev = 0.894
[info]   CI (99.9%): [38.000, 38.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala
[info] # Run progress: 95.38% complete, ETA 00:02:59
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 504875.292 ops/s
[info] # Warmup Iteration   2: 1079269.230 ops/s
[info] # Warmup Iteration   3: 1084780.146 ops/s
[info] Iteration   1: 1089743.396 ops/s
[info]                  ·gc.alloc.rate:                   802.927 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.120 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      645.898 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 933.139 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1071525.031 ops/s
[info]                  ·gc.alloc.rate:                   789.669 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.092 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.813 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1433.441 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 1099578.775 ops/s
[info]                  ·gc.alloc.rate:                   810.199 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.308 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 936.804 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 1099300.794 ops/s
[info]                  ·gc.alloc.rate:                   810.178 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.089 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.777 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1412.853 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1097873.345 ops/s
[info]                  ·gc.alloc.rate:                   808.958 MB/sec
[info]                  ·gc.alloc.rate.norm:              1160.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.090 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.291 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 948.254 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala":
[info]   1091604.268 ±(99.9%) 45916.777 ops/s [Average]
[info]   (min, avg, max) = (1071525.031, 1091604.268, 1099578.775), stdev = 11924.441
[info]   CI (99.9%): [1045687.491, 1137521.045] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   804.386 ±(99.9%) 33.733 MB/sec [Average]
[info]   (min, avg, max) = (789.669, 804.386, 810.199), stdev = 8.760
[info]   CI (99.9%): [770.654, 838.119] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   1160.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1160.000, 1160.000, 1160.000), stdev = 0.001
[info]   CI (99.9%): [1160.000, 1160.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.036 MB/sec [Average]
[info]   (min, avg, max) = (0.062, 0.067, 0.083), stdev = 0.009
[info]   CI (99.9%): [0.031, 0.102] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.096 ±(99.9%) 0.052 B/op [Average]
[info]   (min, avg, max) = (0.089, 0.096, 0.120), stdev = 0.014
[info]   CI (99.9%): [0.044, 0.148] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   784.818 ±(99.9%) 691.126 MB/sec [Average]
[info]   (min, avg, max) = (645.898, 784.818, 986.777), stdev = 179.483
[info]   CI (99.9%): [93.691, 1475.944] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   1132.898 ±(99.9%) 1020.875 B/op [Average]
[info]   (min, avg, max) = (933.139, 1132.898, 1433.441), stdev = 265.118
[info]   CI (99.9%): [112.023, 2153.773] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count":
[info]   12.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.400, 3.000), stdev = 0.548
[info]   CI (99.9%): [12.000, 12.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala
[info] # Run progress: 95.71% complete, ETA 00:02:46
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1685687.359 ops/s
[info] # Warmup Iteration   2: 1829892.902 ops/s
[info] # Warmup Iteration   3: 1850859.821 ops/s
[info] Iteration   1: 1860670.268 ops/s
[info]                  ·gc.alloc.rate:                   519.997 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.150 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.665 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      331.553 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 280.547 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1845303.950 ops/s
[info]                  ·gc.alloc.rate:                   515.722 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.071 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      661.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 564.178 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 1840798.910 ops/s
[info]                  ·gc.alloc.rate:                   514.606 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.707 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281.907 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   4: 1847380.021 ops/s
[info]                  ·gc.alloc.rate:                   516.369 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      659.309 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 561.800 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 1844804.841 ops/s
[info]                  ·gc.alloc.rate:                   515.613 MB/sec
[info]                  ·gc.alloc.rate.norm:              440.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      329.632 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 281.293 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala":
[info]   1847791.598 ±(99.9%) 29201.260 ops/s [Average]
[info]   (min, avg, max) = (1840798.910, 1847791.598, 1860670.268), stdev = 7583.475
[info]   CI (99.9%): [1818590.337, 1876992.858] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   516.461 ±(99.9%) 7.989 MB/sec [Average]
[info]   (min, avg, max) = (514.606, 516.461, 519.997), stdev = 2.075
[info]   CI (99.9%): [508.472, 524.451] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   440.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (440.000, 440.000, 440.000), stdev = 0.001
[info]   CI (99.9%): [440.000, 440.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.659 ±(99.9%) 5.363 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.659, 3.150), stdev = 1.393
[info]   CI (99.9%): [≈ 0, 6.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.558 ±(99.9%) 4.538 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.558, 2.665), stdev = 1.178
[info]   CI (99.9%): [≈ 0, 5.096] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   462.294 ±(99.9%) 695.991 MB/sec [Average]
[info]   (min, avg, max) = (329.632, 462.294, 661.269), stdev = 180.747
[info]   CI (99.9%): [≈ 0, 1158.285] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   393.945 ±(99.9%) 594.225 B/op [Average]
[info]   (min, avg, max) = (280.547, 393.945, 564.178), stdev = 154.318
[info]   CI (99.9%): [≈ 0, 988.169] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count":
[info]   7.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.400, 2.000), stdev = 0.548
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time":
[info]   8.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 3.000), stdev = 0.894
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce
[info] # Run progress: 96.04% complete, ETA 00:02:33
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1045757.501 ops/s
[info] # Warmup Iteration   2: 1667732.058 ops/s
[info] # Warmup Iteration   3: 1673849.076 ops/s
[info] Iteration   1: 1678002.587 ops/s
[info]                  ·gc.alloc.rate:                   1364.747 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1305.666 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1224.588 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 1671006.906 ops/s
[info]                  ·gc.alloc.rate:                   1358.608 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.157 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.519 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1236.577 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 1683985.831 ops/s
[info]                  ·gc.alloc.rate:                   1368.977 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.019 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1321.678 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1235.775 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 1662073.127 ops/s
[info]                  ·gc.alloc.rate:                   1351.452 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.059 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1330.590 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1260.242 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 1676957.532 ops/s
[info]                  ·gc.alloc.rate:                   1363.470 MB/sec
[info]                  ·gc.alloc.rate.norm:              1280.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.078 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.458 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 1571.011 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce":
[info]   1674405.196 ±(99.9%) 31920.450 ops/s [Average]
[info]   (min, avg, max) = (1662073.127, 1674405.196, 1683985.831), stdev = 8289.640
[info]   CI (99.9%): [1642484.746, 1706325.647] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate":
[info]   1361.451 ±(99.9%) 25.806 MB/sec [Average]
[info]   (min, avg, max) = (1351.452, 1361.451, 1368.977), stdev = 6.702
[info]   CI (99.9%): [1335.645, 1387.257] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm":
[info]   1280.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (1280.000, 1280.000, 1280.000), stdev = 0.001
[info]   CI (99.9%): [1280.000, 1280.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space":
[info]   0.075 ±(99.9%) 0.216 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.075, 0.166), stdev = 0.056
[info]   CI (99.9%): [≈ 0, 0.291] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm":
[info]   0.071 ±(99.9%) 0.204 B/op [Average]
[info]   (min, avg, max) = (0.019, 0.071, 0.157), stdev = 0.053
[info]   CI (99.9%): [≈ 0, 0.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space":
[info]   1388.782 ±(99.9%) 613.855 MB/sec [Average]
[info]   (min, avg, max) = (1305.666, 1388.782, 1673.458), stdev = 159.416
[info]   CI (99.9%): [774.927, 2002.637] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   1305.639 ±(99.9%) 573.420 B/op [Average]
[info]   (min, avg, max) = (1224.588, 1305.639, 1571.011), stdev = 148.915
[info]   CI (99.9%): [732.219, 1879.059] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count":
[info]   21.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (4.000, 4.200, 5.000), stdev = 0.447
[info]   CI (99.9%): [21.000, 21.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time":
[info]   19.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.800, 4.000), stdev = 0.447
[info]   CI (99.9%): [19.000, 19.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala
[info] # Run progress: 96.37% complete, ETA 00:02:21
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 583511.970 ops/s
[info] # Warmup Iteration   2: 2446268.952 ops/s
[info] # Warmup Iteration   3: 2502843.641 ops/s
[info] Iteration   1: 2462376.401 ops/s
[info]                  ·gc.alloc.rate:                   988.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      972.199 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 621.644 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2501775.698 ops/s
[info]                  ·gc.alloc.rate:                   1004.395 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.052 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      980.702 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 617.092 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2473219.834 ops/s
[info]                  ·gc.alloc.rate:                   992.874 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      986.554 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 627.977 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2503950.338 ops/s
[info]                  ·gc.alloc.rate:                   1005.163 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.026 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      993.238 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.502 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2496022.118 ops/s
[info]                  ·gc.alloc.rate:                   1002.065 MB/sec
[info]                  ·gc.alloc.rate.norm:              632.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.039 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      998.651 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 629.847 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala":
[info]   2487468.878 ±(99.9%) 71578.209 ops/s [Average]
[info]   (min, avg, max) = (2462376.401, 2487468.878, 2503950.338), stdev = 18588.633
[info]   CI (99.9%): [2415890.669, 2559047.086] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   998.578 ±(99.9%) 28.917 MB/sec [Average]
[info]   (min, avg, max) = (988.395, 998.578, 1005.163), stdev = 7.510
[info]   CI (99.9%): [969.662, 1027.495] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   632.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (632.000, 632.000, 632.000), stdev = 0.001
[info]   CI (99.9%): [632.000, 632.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.080 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.062, 0.083), stdev = 0.021
[info]   CI (99.9%): [≈ 0, 0.143] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.040 ±(99.9%) 0.051 B/op [Average]
[info]   (min, avg, max) = (0.026, 0.040, 0.053), stdev = 0.013
[info]   CI (99.9%): [≈ 0, 0.091] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   986.269 ±(99.9%) 39.967 MB/sec [Average]
[info]   (min, avg, max) = (972.199, 986.269, 998.651), stdev = 10.379
[info]   CI (99.9%): [946.302, 1026.236] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   624.213 ±(99.9%) 19.569 B/op [Average]
[info]   (min, avg, max) = (617.092, 624.213, 629.847), stdev = 5.082
[info]   CI (99.9%): [604.644, 643.781] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count":
[info]   15.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.000, 3.000), stdev = 0.001
[info]   CI (99.9%): [15.000, 15.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala
[info] # Run progress: 96.70% complete, ETA 00:02:08
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2100437.572 ops/s
[info] # Warmup Iteration   2: 2810136.750 ops/s
[info] # Warmup Iteration   3: 2905759.027 ops/s
[info] Iteration   1: 2910599.024 ops/s
[info]                  ·gc.alloc.rate:                   680.347 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.056 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      654.563 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 354.053 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   2: 2921515.605 ops/s
[info]                  ·gc.alloc.rate:                   682.911 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.067 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.967 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 351.325 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 2914899.128 ops/s
[info]                  ·gc.alloc.rate:                   681.345 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.022 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      651.899 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 352.096 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 2892598.302 ops/s
[info]                  ·gc.alloc.rate:                   676.224 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.023 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 355.351 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 2913636.390 ops/s
[info]                  ·gc.alloc.rate:                   681.070 MB/sec
[info]                  ·gc.alloc.rate.norm:              368.000 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      653.927 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 353.334 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala":
[info]   2910649.690 ±(99.9%) 41779.992 ops/s [Average]
[info]   (min, avg, max) = (2892598.302, 2910649.690, 2921515.605), stdev = 10850.131
[info]   CI (99.9%): [2868869.698, 2952429.681] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   680.379 ±(99.9%) 9.643 MB/sec [Average]
[info]   (min, avg, max) = (676.224, 680.379, 682.911), stdev = 2.504
[info]   CI (99.9%): [670.736, 690.023] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   368.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (368.000, 368.000, 368.000), stdev = 0.001
[info]   CI (99.9%): [368.000, 368.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.062 ±(99.9%) 0.196 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.062, 0.125), stdev = 0.051
[info]   CI (99.9%): [≈ 0, 0.259] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   0.034 ±(99.9%) 0.106 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 0.034, 0.067), stdev = 0.027
[info]   CI (99.9%): [≈ 0, 0.140] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   653.067 ±(99.9%) 4.540 MB/sec [Average]
[info]   (min, avg, max) = (651.899, 653.067, 654.563), stdev = 1.179
[info]   CI (99.9%): [648.527, 657.607] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   353.232 ±(99.9%) 6.119 B/op [Average]
[info]   (min, avg, max) = (351.325, 353.232, 355.351), stdev = 1.589
[info]   CI (99.9%): [347.113, 359.351] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count":
[info]   10.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.000, 2.000), stdev = 0.001
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time":
[info]   9.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 1.800, 2.000), stdev = 0.447
[info]   CI (99.9%): [9.000, 9.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 97.03% complete, ETA 00:01:55
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 2063365.752 ops/s
[info] # Warmup Iteration   2: 2841882.596 ops/s
[info] # Warmup Iteration   3: 2845128.667 ops/s
[info] Iteration   1: 2843685.974 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 2847636.319 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 2851348.477 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 2851014.909 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 2852419.391 ops/s
[info]                  ·gc.alloc.rate:      ≈ 10⁻⁴ MB/sec
[info]                  ·gc.alloc.rate.norm: ≈ 10⁻⁴ B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc":
[info]   2849221.014 ±(99.9%) 13765.945 ops/s [Average]
[info]   (min, avg, max) = (2843685.974, 2849221.014, 2852419.391), stdev = 3574.972
[info]   CI (99.9%): [2835455.069, 2862986.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   ≈ 10⁻⁴ MB/sec
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   ≈ 10⁻⁴ B/op
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson
[info] # Run progress: 97.36% complete, ETA 00:01:42
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 1799817.961 ops/s
[info] # Warmup Iteration   2: 2434494.853 ops/s
[info] # Warmup Iteration   3: 2462789.270 ops/s
[info] Iteration   1: 2463378.741 ops/s
[info]                  ·gc.alloc.rate:                   1126.584 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.027 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1300.486 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 831.141 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 2469243.555 ops/s
[info]                  ·gc.alloc.rate:                   1129.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.066 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      978.850 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 624.169 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   3: 2469874.280 ops/s
[info]                  ·gc.alloc.rate:                   1129.587 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.053 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1312.246 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 836.427 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   4: 2471722.133 ops/s
[info]                  ·gc.alloc.rate:                   1130.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      990.732 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 630.912 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   5: 2469747.420 ops/s
[info]                  ·gc.alloc.rate:                   1129.834 MB/sec
[info]                  ·gc.alloc.rate.norm:              720.000 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.040 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1328.269 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 846.456 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson":
[info]   2468793.226 ±(99.9%) 12203.734 ops/s [Average]
[info]   (min, avg, max) = (2463378.741, 2468793.226, 2471722.133), stdev = 3169.271
[info]   CI (99.9%): [2456589.492, 2480996.959] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate":
[info]   1129.154 ±(99.9%) 5.912 MB/sec [Average]
[info]   (min, avg, max) = (1126.584, 1129.154, 1130.630), stdev = 1.535
[info]   CI (99.9%): [1123.242, 1135.067] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm":
[info]   720.000 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (720.000, 720.000, 720.000), stdev = 0.001
[info]   CI (99.9%): [720.000, 720.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space":
[info]   0.071 ±(99.9%) 0.091 MB/sec [Average]
[info]   (min, avg, max) = (0.042, 0.071, 0.104), stdev = 0.024
[info]   CI (99.9%): [≈ 0, 0.162] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   0.045 ±(99.9%) 0.058 B/op [Average]
[info]   (min, avg, max) = (0.027, 0.045, 0.066), stdev = 0.015
[info]   CI (99.9%): [≈ 0, 0.103] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space":
[info]   1182.117 ±(99.9%) 694.853 MB/sec [Average]
[info]   (min, avg, max) = (978.850, 1182.117, 1328.269), stdev = 180.451
[info]   CI (99.9%): [487.263, 1876.970] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   753.821 ±(99.9%) 444.494 B/op [Average]
[info]   (min, avg, max) = (624.169, 753.821, 846.456), stdev = 115.434
[info]   CI (99.9%): [309.327, 1198.315] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count":
[info]   18.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.600, 4.000), stdev = 0.548
[info]   CI (99.9%): [18.000, 18.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time":
[info]   17.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce
[info] # Run progress: 97.69% complete, ETA 00:01:29
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 6153.370 ops/s
[info] # Warmup Iteration   2: 9288.856 ops/s
[info] # Warmup Iteration   3: 11020.560 ops/s
[info] Iteration   1: 11079.076 ops/s
[info]                  ·gc.alloc.rate:                   1625.620 MB/sec
[info]                  ·gc.alloc.rate.norm:              230872.037 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.040 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     5.708 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1629.433 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 231413.465 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         14.000 ms
[info] Iteration   2: 11428.188 ops/s
[info]                  ·gc.alloc.rate:                   1674.677 MB/sec
[info]                  ·gc.alloc.rate.norm:              230660.638 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.126 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     17.398 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1645.160 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 226595.164 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         13.000 ms
[info] Iteration   3: 12583.252 ops/s
[info]                  ·gc.alloc.rate:                   1839.745 MB/sec
[info]                  ·gc.alloc.rate.norm:              230168.432 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.125 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     15.621 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1991.443 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 249147.190 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 12540.752 ops/s
[info]                  ·gc.alloc.rate:                   1833.873 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.166 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     20.898 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1673.088 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 210024.490 B/op
[info]                  ·gc.count:                        5.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   5: 12454.117 ops/s
[info]                  ·gc.alloc.rate:                   1821.064 MB/sec
[info]                  ·gc.alloc.rate.norm:              230208.033 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.190 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     24.035 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      2018.926 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 255220.553 B/op
[info]                  ·gc.count:                        6.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce":
[info]   12017.077 ±(99.9%) 2731.265 ops/s [Average]
[info]   (min, avg, max) = (11079.076, 12017.077, 12583.252), stdev = 709.301
[info]   CI (99.9%): [9285.812, 14748.342] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate":
[info]   1758.996 ±(99.9%) 389.269 MB/sec [Average]
[info]   (min, avg, max) = (1625.620, 1758.996, 1839.745), stdev = 101.092
[info]   CI (99.9%): [1369.727, 2148.265] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm":
[info]   230423.435 ±(99.9%) 1240.798 B/op [Average]
[info]   (min, avg, max) = (230168.432, 230423.435, 230872.037), stdev = 322.231
[info]   CI (99.9%): [229182.637, 231664.232] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space":
[info]   0.130 ±(99.9%) 0.220 MB/sec [Average]
[info]   (min, avg, max) = (0.040, 0.130, 0.190), stdev = 0.057
[info]   CI (99.9%): [≈ 0, 0.350] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm":
[info]   16.732 ±(99.9%) 26.810 B/op [Average]
[info]   (min, avg, max) = (5.708, 16.732, 24.035), stdev = 6.962
[info]   CI (99.9%): [≈ 0, 43.542] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space":
[info]   1791.610 ±(99.9%) 754.083 MB/sec [Average]
[info]   (min, avg, max) = (1629.433, 1791.610, 2018.926), stdev = 195.833
[info]   CI (99.9%): [1037.527, 2545.693] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm":
[info]   234480.172 ±(99.9%) 69816.307 B/op [Average]
[info]   (min, avg, max) = (210024.490, 234480.172, 255220.553), stdev = 18131.073
[info]   CI (99.9%): [164663.865, 304296.479] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.count":
[info]   27.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (5.000, 5.400, 6.000), stdev = 0.548
[info]   CI (99.9%): [27.000, 27.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readCirce:·gc.time":
[info]   42.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (5.000, 8.400, 14.000), stdev = 4.669
[info]   CI (99.9%): [42.000, 42.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala
[info] # Run progress: 98.02% complete, ETA 00:01:16
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 4635.973 ops/s
[info] # Warmup Iteration   2: 14863.625 ops/s
[info] # Warmup Iteration   3: 15461.441 ops/s
[info] Iteration   1: 15349.070 ops/s
[info]                  ·gc.alloc.rate:      216.695 MB/sec
[info]                  ·gc.alloc.rate.norm: 22224.027 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 15449.420 ops/s
[info]                  ·gc.alloc.rate:                   218.131 MB/sec
[info]                  ·gc.alloc.rate.norm:              22228.620 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.696 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26056.635 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 15508.130 ops/s
[info]                  ·gc.alloc.rate:                   219.138 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.026 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     4.225 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.767 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 25957.529 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 15405.052 ops/s
[info]                  ·gc.alloc.rate:                   217.630 MB/sec
[info]                  ·gc.alloc.rate.norm:              22240.029 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.706 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26131.039 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 15337.696 ops/s
[info]                  ·gc.alloc.rate:                   216.667 MB/sec
[info]                  ·gc.alloc.rate.norm:              22237.095 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.791 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     81.167 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      321.668 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 33013.637 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala":
[info]   15409.873 ±(99.9%) 273.289 ops/s [Average]
[info]   (min, avg, max) = (15337.696, 15409.873, 15508.130), stdev = 70.972
[info]   CI (99.9%): [15136.584, 15683.163] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate":
[info]   217.652 ±(99.9%) 4.003 MB/sec [Average]
[info]   (min, avg, max) = (216.667, 217.652, 219.138), stdev = 1.040
[info]   CI (99.9%): [213.650, 221.655] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm":
[info]   22233.959 ±(99.9%) 27.943 B/op [Average]
[info]   (min, avg, max) = (22224.027, 22233.959, 22240.029), stdev = 7.257
[info]   CI (99.9%): [22206.016, 22261.903] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.166 ±(99.9%) 1.346 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.166, 0.791), stdev = 0.349
[info]   CI (99.9%): [≈ 0, 1.512] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   17.078 ±(99.9%) 138.135 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 17.078, 81.167), stdev = 35.873
[info]   CI (99.9%): [≈ 0, 155.214] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   217.767 ±(99.9%) 481.484 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 217.767, 321.668), stdev = 125.040
[info]   CI (99.9%): [≈ 0, 699.252] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   22231.768 ±(99.9%) 49245.183 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 22231.768, 33013.637), stdev = 12788.818
[info]   CI (99.9%): [≈ 0, 71476.951] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.count":
[info]   4.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (≈ 0, 0.800, 1.000), stdev = 0.447
[info]   CI (99.9%): [4.000, 4.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJacksonScala:·gc.time":
[info]   7.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (≈ 0, 1.400, 2.000), stdev = 0.894
[info]   CI (99.9%): [7.000, 7.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala
[info] # Run progress: 98.35% complete, ETA 00:01:04
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 18969.075 ops/s
[info] # Warmup Iteration   2: 23407.221 ops/s
[info] # Warmup Iteration   3: 37185.960 ops/s
[info] Iteration   1: 37561.473 ops/s
[info]                  ·gc.alloc.rate:                   344.010 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.032 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.022 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.931 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.756 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10717.698 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 38113.157 ops/s
[info]                  ·gc.alloc.rate:                   349.035 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.755 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10563.334 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 38128.036 ops/s
[info]                  ·gc.alloc.rate:                   349.139 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.012 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.047 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.959 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      255.717 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 10558.626 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 38422.636 ops/s
[info]                  ·gc.alloc.rate:                   352.119 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.359 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     137.508 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      657.589 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26922.198 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 37648.955 ops/s
[info]                  ·gc.alloc.rate:                   344.766 MB/sec
[info]                  ·gc.alloc.rate.norm:              14416.011 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.870 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      326.976 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 13672.115 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala":
[info]   37974.851 ±(99.9%) 1388.630 ops/s [Average]
[info]   (min, avg, max) = (37561.473, 37974.851, 38422.636), stdev = 360.623
[info]   CI (99.9%): [36586.221, 39363.482] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate":
[info]   347.814 ±(99.9%) 12.992 MB/sec [Average]
[info]   (min, avg, max) = (344.010, 347.814, 352.119), stdev = 3.374
[info]   CI (99.9%): [334.822, 360.806] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm":
[info]   14416.015 ±(99.9%) 0.036 B/op [Average]
[info]   (min, avg, max) = (14416.011, 14416.015, 14416.032), stdev = 0.009
[info]   CI (99.9%): [14415.979, 14416.051] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.690 ±(99.9%) 5.745 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.690, 3.359), stdev = 1.492
[info]   CI (99.9%): [≈ 0, 6.435] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   28.254 ±(99.9%) 235.194 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 28.254, 137.508), stdev = 61.079
[info]   CI (99.9%): [≈ 0, 263.448] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   350.359 ±(99.9%) 671.916 MB/sec [Average]
[info]   (min, avg, max) = (255.717, 350.359, 657.589), stdev = 174.495
[info]   CI (99.9%): [≈ 0, 1022.275] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   14486.794 ±(99.9%) 27250.829 B/op [Average]
[info]   (min, avg, max) = (10558.626, 14486.794, 26922.198), stdev = 7076.954
[info]   CI (99.9%): [≈ 0, 41737.623] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.count":
[info]   6.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.200, 2.000), stdev = 0.447
[info]   CI (99.9%): [6.000, 6.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readJsoniterScala:·gc.time":
[info]   13.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.600, 4.000), stdev = 1.140
[info]   CI (99.9%): [13.000, 13.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson
[info] # Run progress: 98.68% complete, ETA 00:00:51
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 793.487 ops/s
[info] # Warmup Iteration   2: 3125.641 ops/s
[info] # Warmup Iteration   3: 2869.334 ops/s
[info] Iteration   1: 3209.412 ops/s
[info]                  ·gc.alloc.rate:                   1029.859 MB/sec
[info]                  ·gc.alloc.rate.norm:              505138.388 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.021 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     10.208 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      975.996 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 478719.043 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   2: 3587.684 ops/s
[info]                  ·gc.alloc.rate:                   1151.050 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.114 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.390 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      983.184 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 431379.901 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         6.000 ms
[info] Iteration   3: 3579.512 ops/s
[info]                  ·gc.alloc.rate:                   1148.238 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.104 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     45.753 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1319.508 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 580362.366 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Iteration   4: 3593.806 ops/s
[info]                  ·gc.alloc.rate:                   1152.801 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.113 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     36.460 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      995.687 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 436201.782 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   5: 3582.858 ops/s
[info]                  ·gc.alloc.rate:                   1149.461 MB/sec
[info]                  ·gc.alloc.rate.norm:              505032.123 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     27.429 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      1335.124 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 586605.714 B/op
[info]                  ·gc.count:                        4.000 counts
[info]                  ·gc.time:                         5.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson":
[info]   3510.654 ±(99.9%) 648.778 ops/s [Average]
[info]   (min, avg, max) = (3209.412, 3510.654, 3593.806), stdev = 168.486
[info]   CI (99.9%): [2861.876, 4159.432] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate":
[info]   1126.282 ±(99.9%) 207.663 MB/sec [Average]
[info]   (min, avg, max) = (1029.859, 1126.282, 1152.801), stdev = 53.929
[info]   CI (99.9%): [918.619, 1333.945] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm":
[info]   505053.372 ±(99.9%) 183.002 B/op [Average]
[info]   (min, avg, max) = (505032.113, 505053.372, 505138.388), stdev = 47.525
[info]   CI (99.9%): [504870.370, 505236.374] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space":
[info]   0.067 ±(99.9%) 0.119 MB/sec [Average]
[info]   (min, avg, max) = (0.021, 0.067, 0.104), stdev = 0.031
[info]   CI (99.9%): [≈ 0, 0.185] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm":
[info]   29.448 ±(99.9%) 50.702 B/op [Average]
[info]   (min, avg, max) = (10.208, 29.448, 45.753), stdev = 13.167
[info]   CI (99.9%): [≈ 0, 80.150] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space":
[info]   1121.900 ±(99.9%) 722.889 MB/sec [Average]
[info]   (min, avg, max) = (975.996, 1121.900, 1335.124), stdev = 187.732
[info]   CI (99.9%): [399.011, 1844.789] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm":
[info]   502653.761 ±(99.9%) 292973.385 B/op [Average]
[info]   (min, avg, max) = (431379.901, 502653.761, 586605.714), stdev = 76084.258
[info]   CI (99.9%): [209680.377, 795627.146] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.count":
[info]   17.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (3.000, 3.400, 4.000), stdev = 0.548
[info]   CI (99.9%): [17.000, 17.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.readPlayJson:·gc.time":
[info]   25.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (4.000, 5.000, 6.000), stdev = 0.707
[info]   CI (99.9%): [25.000, 25.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala
[info] # Run progress: 99.01% complete, ETA 00:00:38
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: WARNING: An illegal reflective access operation has occurred
[info] WARNING: Illegal reflective access by com.fasterxml.jackson.module.afterburner.util.MyClassLoader (file:/tmp/sbt_81752680/target/5e31e36e/jackson-module-afterburner-2.9.4.jar) to method java.lang.ClassLoader.defineClass(java.lang.String,byte[],int,int)
[info] WARNING: Please consider reporting this to the maintainers of com.fasterxml.jackson.module.afterburner.util.MyClassLoader
[info] WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
[info] WARNING: All illegal access operations will be denied in a future release
[info] 20681.331 ops/s
[info] # Warmup Iteration   2: 57193.244 ops/s
[info] # Warmup Iteration   3: 56765.691 ops/s
[info] Iteration   1: 57389.707 ops/s
[info]                  ·gc.alloc.rate:                   732.623 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.982 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.142 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      646.213 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17729.281 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 57192.554 ops/s
[info]                  ·gc.alloc.rate:                   730.313 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.042 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     2.291 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      974.768 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 26828.045 B/op
[info]                  ·gc.count:                        3.000 counts
[info]                  ·gc.time:                         4.000 ms
[info] Iteration   3: 57237.937 ops/s
[info]                  ·gc.alloc.rate:                   730.937 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.978 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.078 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 17931.421 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   4: 56734.257 ops/s
[info]                  ·gc.alloc.rate:                   724.407 MB/sec
[info]                  ·gc.alloc.rate.norm:              20100.048 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      655.985 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18201.557 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   5: 56768.219 ops/s
[info]                  ·gc.alloc.rate:                   724.796 MB/sec
[info]                  ·gc.alloc.rate.norm:              20099.977 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.062 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.731 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      658.611 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 18264.529 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala":
[info]   57064.535 ±(99.9%) 1137.540 ops/s [Average]
[info]   (min, avg, max) = (56734.257, 57064.535, 57389.707), stdev = 295.416
[info]   CI (99.9%): [55926.995, 58202.075] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate":
[info]   728.615 ±(99.9%) 14.489 MB/sec [Average]
[info]   (min, avg, max) = (724.407, 728.615, 732.623), stdev = 3.763
[info]   CI (99.9%): [714.126, 743.104] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm":
[info]   20100.005 ±(99.9%) 0.139 B/op [Average]
[info]   (min, avg, max) = (20099.977, 20100.005, 20100.048), stdev = 0.036
[info]   CI (99.9%): [20099.866, 20100.145] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space":
[info]   0.037 ±(99.9%) 0.143 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.037, 0.083), stdev = 0.037
[info]   CI (99.9%): [≈ 0, 0.181] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm":
[info]   1.033 ±(99.9%) 3.954 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 1.033, 2.291), stdev = 1.027
[info]   CI (99.9%): [≈ 0, 4.987] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space":
[info]   717.531 ±(99.9%) 554.014 MB/sec [Average]
[info]   (min, avg, max) = (646.213, 717.531, 974.768), stdev = 143.876
[info]   CI (99.9%): [163.517, 1271.545] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm":
[info]   19790.966 ±(99.9%) 15170.408 B/op [Average]
[info]   (min, avg, max) = (17729.281, 19790.966, 26828.045), stdev = 3939.707
[info]   CI (99.9%): [4620.558, 34961.375] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.count":
[info]   11.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (2.000, 2.200, 3.000), stdev = 0.447
[info]   CI (99.9%): [11.000, 11.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJacksonScala:·gc.time":
[info]   14.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (2.000, 2.800, 4.000), stdev = 0.837
[info]   CI (99.9%): [14.000, 14.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala
[info] # Run progress: 99.34% complete, ETA 00:00:25
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 64453.176 ops/s
[info] # Warmup Iteration   2: 84395.203 ops/s
[info] # Warmup Iteration   3: 83466.109 ops/s
[info] Iteration   1: 84962.294 ops/s
[info]                  ·gc.alloc.rate:                   555.321 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          3.808 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     70.547 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      327.286 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6063.379 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         3.000 ms
[info] Iteration   2: 85215.451 ops/s
[info]                  ·gc.alloc.rate:                   556.795 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.042 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     0.769 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      652.867 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12063.133 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   3: 84878.084 ops/s
[info]                  ·gc.alloc.rate:                   554.708 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.639 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12067.221 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Iteration   4: 83345.048 ops/s
[info]                  ·gc.alloc.rate:                   544.687 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      324.980 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 6138.202 B/op
[info]                  ·gc.count:                        1.000 counts
[info]                  ·gc.time:                         1.000 ms
[info] Iteration   5: 84851.068 ops/s
[info]                  ·gc.alloc.rate:                   554.517 MB/sec
[info]                  ·gc.alloc.rate.norm:              10288.005 B/op
[info]                  ·gc.churn.PS_Eden_Space:          0.083 MB/sec
[info]                  ·gc.churn.PS_Eden_Space.norm:     1.544 B/op
[info]                  ·gc.churn.PS_Survivor_Space:      650.599 MB/sec
[info]                  ·gc.churn.PS_Survivor_Space.norm: 12070.633 B/op
[info]                  ·gc.count:                        2.000 counts
[info]                  ·gc.time:                         2.000 ms
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala":
[info]   84650.389 ±(99.9%) 2863.887 ops/s [Average]
[info]   (min, avg, max) = (83345.048, 84650.389, 85215.451), stdev = 743.742
[info]   CI (99.9%): [81786.502, 87514.276] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate":
[info]   553.206 ±(99.9%) 18.657 MB/sec [Average]
[info]   (min, avg, max) = (544.687, 553.206, 556.795), stdev = 4.845
[info]   CI (99.9%): [534.548, 571.863] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm":
[info]   10288.005 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (10288.005, 10288.005, 10288.005), stdev = 0.001
[info]   CI (99.9%): [10288.004, 10288.006] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space":
[info]   0.803 ±(99.9%) 6.469 MB/sec [Average]
[info]   (min, avg, max) = (≈ 0, 0.803, 3.808), stdev = 1.680
[info]   CI (99.9%): [≈ 0, 7.273] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm":
[info]   14.881 ±(99.9%) 119.852 B/op [Average]
[info]   (min, avg, max) = (≈ 0, 14.881, 70.547), stdev = 31.125
[info]   CI (99.9%): [≈ 0, 134.733] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space":
[info]   521.274 ±(99.9%) 685.965 MB/sec [Average]
[info]   (min, avg, max) = (324.980, 521.274, 652.867), stdev = 178.143
[info]   CI (99.9%): [≈ 0, 1207.239] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm":
[info]   9680.514 ±(99.9%) 12583.647 B/op [Average]
[info]   (min, avg, max) = (6063.379, 9680.514, 12070.633), stdev = 3267.933
[info]   CI (99.9%): [≈ 0, 22264.160] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.count":
[info]   8.000 ±(99.9%) 0.001 counts [Sum]
[info]   (min, avg, max) = (1.000, 1.600, 2.000), stdev = 0.548
[info]   CI (99.9%): [8.000, 8.000] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScala:·gc.time":
[info]   10.000 ±(99.9%) 0.001 ms [Sum]
[info]   (min, avg, max) = (1.000, 2.000, 3.000), stdev = 0.707
[info]   CI (99.9%): [10.000, 10.000] (assumes normal distribution)
[info] # JMH version: 1.20
[info] # VM version: JDK 9.0.4, VM 9.0.4+11
[info] # VM invoker: /usr/lib/jvm/java-9-oracle/bin/java
[info] # VM options: -server -Xms1g -Xmx1g -XX:NewSize=512m -XX:MaxNewSize=512m -XX:InitialCodeCacheSize=256m -XX:ReservedCodeCacheSize=256m -XX:-UseBiasedLocking -XX:+AlwaysPreTouch -XX:+UseParallelGC
[info] # Warmup: 3 iterations, 1 s each
[info] # Measurement: 5 iterations, 1 s each
[info] # Timeout: 10 min per iteration
[info] # Threads: 1 thread, will synchronize iterations
[info] # Benchmark mode: Throughput, ops/time
[info] # Benchmark: com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc
[info] # Run progress: 99.67% complete, ETA 00:00:12
[info] # Fork: 1 of 1
[info] # Warmup Iteration   1: 75437.089 ops/s
[info] # Warmup Iteration   2: 95081.781 ops/s
[info] # Warmup Iteration   3: 96399.972 ops/s
[info] Iteration   1: 96093.461 ops/s
[info]                  ·gc.alloc.rate:      13.671 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   2: 96341.211 ops/s
[info]                  ·gc.alloc.rate:      13.707 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   3: 96472.178 ops/s
[info]                  ·gc.alloc.rate:      13.729 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   4: 93806.727 ops/s
[info]                  ·gc.alloc.rate:      13.346 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.004 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Iteration   5: 93809.686 ops/s
[info]                  ·gc.alloc.rate:      13.351 MB/sec
[info]                  ·gc.alloc.rate.norm: 224.005 B/op
[info]                  ·gc.count:           ≈ 0 counts
[info] Result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc":
[info]   95304.653 ±(99.9%) 5286.225 ops/s [Average]
[info]   (min, avg, max) = (93806.727, 95304.653, 96472.178), stdev = 1372.816
[info]   CI (99.9%): [90018.427, 100590.878] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate":
[info]   13.561 ±(99.9%) 0.749 MB/sec [Average]
[info]   (min, avg, max) = (13.346, 13.561, 13.729), stdev = 0.195
[info]   CI (99.9%): [12.811, 14.310] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm":
[info]   224.004 ±(99.9%) 0.001 B/op [Average]
[info]   (min, avg, max) = (224.004, 224.004, 224.005), stdev = 0.001
[info]   CI (99.9%): [224.004, 224.005] (assumes normal distribution)
[info] Secondary result "com.github.plokhotnyuk.jsoniter_scala.macros.TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count":
[info]   ≈ 0 counts
[info] # Run complete. Total time: 01:04:45
[info] Benchmark                                                                                 Mode  Cnt         Score         Error   Units
[info] AdtBenchmark.readCirce                                                                   thrpt    5    756622.108 ±    7174.166   ops/s
[info] AdtBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      1999.614 ±      19.047  MB/sec
[info] AdtBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5      4160.001 ±       0.001    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.087 ±       0.067  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.182 ±       0.140    B/op
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5      2003.956 ±      91.378  MB/sec
[info] AdtBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5      4169.105 ±     213.588    B/op
[info] AdtBenchmark.readCirce:·gc.count                                                         thrpt    5        30.000                counts
[info] AdtBenchmark.readCirce:·gc.time                                                          thrpt    5        29.000                    ms
[info] AdtBenchmark.readJacksonScala                                                            thrpt    5   1652126.832 ±   91983.899   ops/s
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      1175.343 ±      65.669  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5      1120.000 ±       0.001    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.079 ±       0.088  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.075 ±       0.084    B/op
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5      1193.599 ±     699.334  MB/sec
[info] AdtBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      1136.912 ±     647.977    B/op
[info] AdtBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        18.000                counts
[info] AdtBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        22.000                    ms
[info] AdtBenchmark.readJsoniterScala                                                           thrpt    5   3580913.663 ±   26713.176   ops/s
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       236.569 ±       1.735  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5       104.000 ±       0.001    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.640 ±       5.455  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.282 ±       2.401    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       270.922 ±     130.884  MB/sec
[info] AdtBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       119.110 ±      57.865    B/op
[info] AdtBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         5.000                counts
[info] AdtBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5        12.000                    ms
[info] AdtBenchmark.readPlayJson                                                                thrpt    5    175692.668 ±    8518.508   ops/s
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      1471.237 ±      71.255  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5     13184.002 ±       0.001    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.075 ±       0.122  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.673 ±       1.108    B/op
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5      1464.907 ±     668.749  MB/sec
[info] AdtBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5     13127.849 ±    5984.552    B/op
[info] AdtBenchmark.readPlayJson:·gc.count                                                      thrpt    5        22.000                counts
[info] AdtBenchmark.readPlayJson:·gc.time                                                       thrpt    5        25.000                    ms
[info] AdtBenchmark.writeJacksonScala                                                           thrpt    5   2099916.124 ±   23846.559   ops/s
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5       875.078 ±      10.081  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       656.000 ±       0.001    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.083 ±       0.150  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.062 ±       0.112    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5       855.174 ±     687.480  MB/sec
[info] AdtBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       641.166 ±     517.213    B/op
[info] AdtBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        13.000                counts
[info] AdtBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        16.000                    ms
[info] AdtBenchmark.writeJsoniterScala                                                          thrpt    5   6595416.664 ±  399352.235   ops/s
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5       335.154 ±      20.186  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        80.000 ±       0.001    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.764 ±       6.462  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.181 ±       1.532    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5       349.893 ±     367.919  MB/sec
[info] AdtBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        83.815 ±      94.315    B/op
[info] AdtBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5         6.000                counts
[info] AdtBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        12.000                    ms
[info] AdtBenchmark.writePlayJson                                                               thrpt    5    315771.814 ±    7718.496   ops/s
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      1030.306 ±      25.315  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      5136.001 ±       0.001    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.096 ±       0.146  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.478 ±       0.726    B/op
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5       990.972 ±      31.781  MB/sec
[info] AdtBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      4940.071 ±     192.172    B/op
[info] AdtBenchmark.writePlayJson:·gc.count                                                     thrpt    5        15.000                counts
[info] AdtBenchmark.writePlayJson:·gc.time                                                      thrpt    5        16.000                    ms
[info] AnyRefsBenchmark.readCirce                                                               thrpt    5   1638115.587 ±   49877.764   ops/s
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate                                                thrpt    5      2538.813 ±      77.213  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.alloc.rate.norm                                           thrpt    5      2440.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.092 ±       0.108  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.088 ±       0.106    B/op
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2559.405 ±     705.533  MB/sec
[info] AnyRefsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      2460.258 ±     705.695    B/op
[info] AnyRefsBenchmark.readCirce:·gc.count                                                     thrpt    5        38.000                counts
[info] AnyRefsBenchmark.readCirce:·gc.time                                                      thrpt    5        35.000                    ms
[info] AnyRefsBenchmark.readJacksonScala                                                        thrpt    5   2621050.197 ±   38894.540   ops/s
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1838.045 ±      27.488  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1104.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.104 ±       0.170  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.062 ±       0.102    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1812.388 ±     716.973  MB/sec
[info] AnyRefsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      1088.539 ±     427.712    B/op
[info] AnyRefsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        27.000                counts
[info] AnyRefsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.readJsoniterScala                                                       thrpt    5  10432282.414 ±  316224.347   ops/s
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5      1325.346 ±      39.839  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       200.000 ±       0.001    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.067 ±       0.174  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.010 ±       0.026    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1330.690 ±      37.709  MB/sec
[info] AnyRefsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       200.813 ±       6.664    B/op
[info] AnyRefsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        20.000                counts
[info] AnyRefsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        17.000                    ms
[info] AnyRefsBenchmark.readPlayJson                                                            thrpt    5    651326.952 ±   11986.592   ops/s
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1721.147 ±      31.743  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      4160.001 ±       0.001    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.096 ±       0.044  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.231 ±       0.107    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1740.003 ±     516.628  MB/sec
[info] AnyRefsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4205.888 ±    1266.476    B/op
[info] AnyRefsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        26.000                counts
[info] AnyRefsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        33.000                    ms
[info] AnyRefsBenchmark.writeCirce                                                              thrpt    5   2011059.584 ±   80815.455   ops/s
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate                                               thrpt    5      1839.495 ±      73.449  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.alloc.rate.norm                                          thrpt    5      1440.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                      thrpt    5         0.083 ±       0.170  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.065 ±       0.135    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                  thrpt    5      1801.215 ±     713.373  MB/sec
[info] AnyRefsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      1410.479 ±     575.706    B/op
[info] AnyRefsBenchmark.writeCirce:·gc.count                                                    thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writeCirce:·gc.time                                                     thrpt    5        26.000                    ms
[info] AnyRefsBenchmark.writeJacksonScala                                                       thrpt    5   6517409.514 ±  304912.473   ops/s
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1788.603 ±      83.046  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       432.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.100 ±       0.143  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.024 ±       0.034    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1808.012 ±     665.510  MB/sec
[info] AnyRefsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       436.618 ±     155.385    B/op
[info] AnyRefsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        27.000                counts
[info] AnyRefsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        31.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScala                                                      thrpt    5  20784125.566 ± 1092699.522   ops/s
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5       633.794 ±      33.288  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5        48.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.797 ±       6.416  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.059 ±       0.477    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5       653.094 ±       7.201  MB/sec
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5        49.468 ±       2.239    B/op
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        10.000                counts
[info] AnyRefsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        12.000                    ms
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc                                              thrpt    5  22387644.653 ±  346147.168   ops/s
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                               thrpt    5        ≈ 10⁻⁴                MB/sec
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                          thrpt    5        ≈ 10⁻⁵                  B/op
[info] AnyRefsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                    thrpt    5           ≈ 0                counts
[info] AnyRefsBenchmark.writePlayJson                                                           thrpt    5   1170227.783 ±   35884.792   ops/s
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      1742.452 ±      54.057  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      2344.000 ±       0.001    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.112 ±       0.072  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.151 ±       0.096    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      1742.161 ±     587.782  MB/sec
[info] AnyRefsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2343.407 ±     773.465    B/op
[info] AnyRefsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        26.000                counts
[info] AnyRefsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        31.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readCirce                                                    thrpt    5     21322.924 ±     537.104   ops/s
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1333.889 ±      33.780  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5     98480.030 ±       0.054    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±       0.222  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         5.837 ±      16.397    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1389.935 ±     594.378  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    102585.490 ±   42154.879    B/op
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfBigDecimalsBenchmark.readCirce:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala                                             thrpt    5     31776.916 ±    1350.992   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       795.800 ±      33.610  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5     39428.977 ±      42.739    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.029 ±       0.072  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         1.438 ±       3.540    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       790.131 ±     679.919  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5     39169.812 ±   34126.488    B/op
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        12.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        19.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala                                            thrpt    5     29330.494 ±    1291.871   ops/s
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       393.915 ±      17.318  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5     21144.015 ±       0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.681 ±       5.638  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5        36.249 ±     299.990    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       364.906 ±     315.305  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     19574.908 ±   16549.929    B/op
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5         6.000                counts
[info] ArrayOfBigDecimalsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        11.000                    ms
[info] ArrayOfBigDecimalsBenchmark.readPlayJson                                                 thrpt    5     26181.482 ±     611.586   ops/s
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate                                  thrpt    5      1352.655 ±      31.604  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.alloc.rate.norm                             thrpt    5     81336.017 ±       0.006    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.037 ±       0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.257 ±       6.304    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1335.957 ±      43.914  MB/sec
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     80335.892 ±    3901.222    B/op
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.count                                       thrpt    5        20.000                counts
[info] ArrayOfBigDecimalsBenchmark.readPlayJson:·gc.time                                        thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeCirce                                                   thrpt    5     30012.190 ±     972.739   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1764.063 ±      56.398  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     92527.752 ±       2.261    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.805 ±       8.684    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1798.789 ±     725.495  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     94321.876 ±   36613.564    B/op
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.count                                         thrpt    5        27.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeCirce:·gc.time                                          thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala                                            thrpt    5     28648.057 ±     923.144   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5      1551.824 ±      34.102  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5     85280.882 ±    3471.950    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         4.352 ±       9.575    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5      1536.734 ±     675.835  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5     84508.672 ±   39465.115    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5        23.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        28.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala                                           thrpt    5     33330.260 ±     879.566   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5      1699.144 ±      45.994  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5     80259.377 ±     108.795    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.087 ±       0.191  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         4.123 ±       8.990    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5      1730.849 ±     550.166  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5     81734.342 ±   24386.029    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        26.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        23.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5     35152.828 ±    1869.084   ops/s
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5      1678.919 ±      89.373  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5     75192.021 ±       0.079    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space           thrpt    5         0.079 ±       0.274  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm      thrpt    5         3.536 ±      12.247    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space       thrpt    5      1663.342 ±      70.476  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm  thrpt    5     74496.926 ±    1067.380    B/op
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5        25.000                counts
[info] ArrayOfBigDecimalsBenchmark.writeJsoniterScalaPrealloc:·gc.time                          thrpt    5        21.000                    ms
[info] ArrayOfBigDecimalsBenchmark.writePlayJson                                                thrpt    5      8657.332 ±     271.048   ops/s
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1115.716 ±      34.935  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5    202880.049 ±       0.007    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.046 ±       0.104  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         8.352 ±      19.307    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1110.515 ±     701.779  MB/sec
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5    202096.299 ±  132505.398    B/op
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.count                                      thrpt    5        17.000                counts
[info] ArrayOfBigDecimalsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfBigIntsBenchmark.readCirce                                                        thrpt    5     20933.798 ±     663.049   ops/s
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1598.866 ±      50.965  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5    120240.024 ±       0.025    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.100 ±       0.174  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         7.527 ±      13.204    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1598.337 ±     541.428  MB/sec
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    120249.927 ±   42920.887    B/op
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfBigIntsBenchmark.readCirce:·gc.time                                               thrpt    5        23.000                    ms
[info] ArrayOfBigIntsBenchmark.readJacksonScala                                                 thrpt    5     43024.142 ±    1056.676   ops/s
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1060.162 ±      26.417  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     38792.010 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±       0.204  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.284 ±       7.450    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1061.377 ±     557.592  MB/sec
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     38838.526 ±   20453.617    B/op
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfBigIntsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfBigIntsBenchmark.readJsoniterScala                                                thrpt    5     61010.765 ±     339.919   ops/s
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       788.098 ±       4.208  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     20336.007 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±       0.176  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         1.933 ±       4.531    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       792.435 ±     699.447  MB/sec
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     20451.690 ±   18134.255    B/op
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        12.000                counts
[info] ArrayOfBigIntsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJacksonScala                                                thrpt    5     34278.702 ±     593.124   ops/s
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1941.076 ±      33.665  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     89144.013 ±       0.008    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±       0.091  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.205 ±       4.193    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1884.334 ±     723.369  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     86552.627 ±   33866.903    B/op
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        28.000                counts
[info] ArrayOfBigIntsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        33.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala                                               thrpt    5     49274.530 ±     883.911   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5      1893.005 ±      33.043  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     60480.009 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.092 ±       0.072  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.927 ±       2.318    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5      1938.784 ±     551.739  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     61951.202 ±   18118.003    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        29.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        26.000                    ms
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     48322.010 ±    1821.446   ops/s
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5      1929.483 ±      73.337  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     62856.008 ±       0.001    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.083 ±       0.057  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5         2.714 ±       1.925    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5      1941.194 ±     600.144  MB/sec
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5     63252.989 ±   20275.513    B/op
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5        29.000                counts
[info] ArrayOfBigIntsBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        27.000                    ms
[info] ArrayOfBooleansBenchmark.readCirce                                                       thrpt    5    367802.006 ±    8336.931   ops/s
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1859.908 ±      42.019  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      7960.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.104 ±       0.127  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.445 ±       0.542    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1873.326 ±     705.521  MB/sec
[info] ArrayOfBooleansBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      8018.695 ±    3075.173    B/op
[info] ArrayOfBooleansBenchmark.readCirce:·gc.count                                             thrpt    5        28.000                counts
[info] ArrayOfBooleansBenchmark.readCirce:·gc.time                                              thrpt    5        25.000                    ms
[info] ArrayOfBooleansBenchmark.readJacksonScala                                                thrpt    5    716767.400 ±   13380.634   ops/s
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       593.684 ±      11.270  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.029 ±       0.108  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.064 ±       0.236    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       589.353 ±     572.209  MB/sec
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1293.477 ±    1243.936    B/op
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.count                                      thrpt    5         9.000                counts
[info] ArrayOfBooleansBenchmark.readJacksonScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfBooleansBenchmark.readJsoniterScala                                               thrpt    5   1799576.822 ±   70077.725   ops/s
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       347.486 ±      13.557  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.672 ±       5.570  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.587 ±       4.865    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       299.510 ±     154.154  MB/sec
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       261.885 ±     129.419    B/op
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfBooleansBenchmark.readJsoniterScala:·gc.time                                      thrpt    5         8.000                    ms
[info] ArrayOfBooleansBenchmark.readPlayJson                                                    thrpt    5    104023.970 ±    4719.030   ops/s
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      3778.150 ±     171.321  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     57176.004 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.112 ±       0.122  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.699 ±       1.804    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      3803.776 ±     584.721  MB/sec
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     57566.880 ±    8812.762    B/op
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.count                                          thrpt    5        56.000                counts
[info] ArrayOfBooleansBenchmark.readPlayJson:·gc.time                                           thrpt    5        55.000                    ms
[info] ArrayOfBooleansBenchmark.writeCirce                                                      thrpt    5    355898.113 ±    9502.892   ops/s
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5       878.905 ±      23.468  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5      3888.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.369 ±       0.441    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       915.207 ±     565.713  MB/sec
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      4050.059 ±    2536.089    B/op
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.count                                            thrpt    5        14.000                counts
[info] ArrayOfBooleansBenchmark.writeCirce:·gc.time                                             thrpt    5        14.000                    ms
[info] ArrayOfBooleansBenchmark.writeJacksonScala                                               thrpt    5   1107006.799 ±   60563.080   ops/s
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate                                thrpt    5       781.931 ±      42.883  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.alloc.rate.norm                           thrpt    5      1112.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.106 ±       0.100    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       784.328 ±     672.555  MB/sec
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1115.819 ±     963.725    B/op
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.count                                     thrpt    5        12.000                counts
[info] ArrayOfBooleansBenchmark.writeJacksonScala:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScala                                              thrpt    5   2419356.455 ±   26603.532   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5      1118.843 ±      11.889  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5       728.000 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.049 ±       0.059    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1118.672 ±     715.362  MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       727.748 ±     461.109    B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        17.000                counts
[info] ArrayOfBooleansBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        15.000                    ms
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5   2550975.289 ±   34921.956   ops/s
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBooleansBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfBooleansBenchmark.writePlayJson                                                   thrpt    5    558070.021 ±   18358.165   ops/s
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5       657.880 ±      21.825  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5      1856.001 ±       0.001    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.827 ±       6.676  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.330 ±      18.792    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5       712.728 ±     557.395  MB/sec
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      2010.460 ±    1562.092    B/op
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.count                                         thrpt    5        11.000                counts
[info] ArrayOfBooleansBenchmark.writePlayJson:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfBytesBenchmark.readCirce                                                          thrpt    5    176809.570 ±     978.733   ops/s
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2124.789 ±      11.426  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     18920.002 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.096 ±       0.107  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.852 ±       0.953    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2148.501 ±     684.329  MB/sec
[info] ArrayOfBytesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     19132.761 ±    6189.507    B/op
[info] ArrayOfBytesBenchmark.readCirce:·gc.count                                                thrpt    5        32.000                counts
[info] ArrayOfBytesBenchmark.readCirce:·gc.time                                                 thrpt    5        30.000                    ms
[info] ArrayOfBytesBenchmark.readJacksonScala                                                   thrpt    5    425553.644 ±   11304.231   ops/s
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       352.474 ±       9.259  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1304.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.123 ±       0.337    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       361.978 ±     321.555  MB/sec
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1338.221 ±    1162.812    B/op
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.count                                         thrpt    5         6.000                counts
[info] ArrayOfBytesBenchmark.readJacksonScala:·gc.time                                          thrpt    5         7.000                    ms
[info] ArrayOfBytesBenchmark.readJsoniterScala                                                  thrpt    5   1083846.866 ±   37794.036   ops/s
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       209.285 ±       7.284  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       304.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.016 ±       0.087  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.024 ±       0.126    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       204.561 ±     440.333  MB/sec
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       296.662 ±     638.695    B/op
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         4.000                counts
[info] ArrayOfBytesBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfBytesBenchmark.readPlayJson                                                       thrpt    5     81994.709 ±    1347.199   ops/s
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      3383.024 ±      53.926  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     64952.117 ±       0.968    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.150 ±       0.250  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         2.875 ±       4.768    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      3392.627 ±      53.706  MB/sec
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     65137.408 ±    1484.914    B/op
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.count                                             thrpt    5        50.000                counts
[info] ArrayOfBytesBenchmark.readPlayJson:·gc.time                                              thrpt    5        51.000                    ms
[info] ArrayOfBytesBenchmark.writeCirce                                                         thrpt    5    323701.417 ±   10535.723   ops/s
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1604.037 ±      52.074  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7800.001 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.425 ±       0.506    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1661.755 ±      73.109  MB/sec
[info] ArrayOfBytesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      8080.980 ±     389.886    B/op
[info] ArrayOfBytesBenchmark.writeCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfBytesBenchmark.writeCirce:·gc.time                                                thrpt    5        23.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScala                                                 thrpt    5   1930570.968 ±   60859.260   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       519.952 ±      16.353  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       424.000 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.770 ±       6.315  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.626 ±       5.136    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       508.296 ±     649.574  MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       415.022 ±     536.954    B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         8.000                counts
[info] ArrayOfBytesBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5   1834522.099 ±   14251.688   ops/s
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfBytesBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfBytesBenchmark.writePlayJson                                                      thrpt    5     47456.170 ±    1161.202   ops/s
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      2008.341 ±      48.881  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     66624.009 ±       0.001    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±       0.156  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         2.350 ±       5.190    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2001.034 ±      99.871  MB/sec
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     66380.139 ±    2195.740    B/op
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.count                                            thrpt    5        30.000                counts
[info] ArrayOfBytesBenchmark.writePlayJson:·gc.time                                             thrpt    5        30.000                    ms
[info] ArrayOfDoublesBenchmark.readCirce                                                        thrpt    5     27111.515 ±     568.415   ops/s
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1587.756 ±      33.012  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     92191.897 ±       1.016    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±       0.132  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.872 ±       7.674    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1595.901 ±     554.473  MB/sec
[info] ArrayOfDoublesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     92660.036 ±   31899.315    B/op
[info] ArrayOfDoublesBenchmark.readCirce:·gc.count                                              thrpt    5        24.000                counts
[info] ArrayOfDoublesBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfDoublesBenchmark.readJacksonScala                                                 thrpt    5     62651.254 ±    4209.208   ops/s
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5      1033.720 ±      69.781  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     25976.007 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.075 ±       0.156  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.889 ±       3.967    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5      1061.324 ±     599.939  MB/sec
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     26667.758 ±   14858.290    B/op
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfDoublesBenchmark.readJacksonScala:·gc.time                                        thrpt    5        20.000                    ms
[info] ArrayOfDoublesBenchmark.readJsoniterScala                                                thrpt    5     78895.277 ±     348.565   ops/s
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       508.381 ±       2.354  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     10144.005 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.702 ±       5.598  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        14.020 ±     111.811    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       510.497 ±     652.575  MB/sec
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     10186.843 ±   13027.309    B/op
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfDoublesBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] ArrayOfDoublesBenchmark.readPlayJson                                                     thrpt    5     34015.712 ±     568.324   ops/s
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1733.167 ±      33.243  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     80214.159 ±     535.096    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.100 ±       0.143  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.625 ±       6.654    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1740.186 ±     560.051  MB/sec
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     80543.376 ±   26172.401    B/op
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.count                                           thrpt    5        26.000                counts
[info] ArrayOfDoublesBenchmark.readPlayJson:·gc.time                                            thrpt    5        29.000                    ms
[info] ArrayOfDoublesBenchmark.writeCirce                                                       thrpt    5     39671.992 ±    1893.238   ops/s
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       534.500 ±      25.765  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     21208.011 ±       0.002    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.712 ±       5.770  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        28.197 ±     228.530    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       572.498 ±     543.826  MB/sec
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     22662.227 ±   20812.543    B/op
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.count                                             thrpt    5         9.000                counts
[info] ArrayOfDoublesBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJacksonScala                                                thrpt    5     42390.434 ±     474.338   ops/s
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       382.810 ±       4.135  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     14216.010 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.928 ±       3.878    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       373.417 ±     595.929  MB/sec
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     13878.923 ±   22329.890    B/op
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         6.000                counts
[info] ArrayOfDoublesBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         8.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScala                                               thrpt    5     46926.904 ±     741.278   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       412.316 ±       6.492  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5     13832.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.767 ±       6.332  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5        25.619 ±     211.503    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       429.127 ±     570.822  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     14400.798 ±   19229.279    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        12.000                    ms
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5     45963.502 ±     959.992   ops/s
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5       351.320 ±       7.347  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5     12032.009 ±       0.001    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space               thrpt    5         0.767 ±       6.433  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm          thrpt    5        26.318 ±     220.619    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space           thrpt    5       298.766 ±     151.415  MB/sec
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm      thrpt    5     10230.309 ±    5116.977    B/op
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5         5.000                counts
[info] ArrayOfDoublesBenchmark.writeJsoniterScalaPrealloc:·gc.time                              thrpt    5        11.000                    ms
[info] ArrayOfDurationsBenchmark.readCirce                                                      thrpt    5     19924.420 ±     771.888   ops/s
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5       747.173 ±      29.388  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5     59038.649 ±      10.186    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.054 ±       0.156  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.266 ±      12.269    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5       786.750 ±     693.659  MB/sec
[info] ArrayOfDurationsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     62143.867 ±   54231.314    B/op
[info] ArrayOfDurationsBenchmark.readCirce:·gc.count                                            thrpt    5        12.000                counts
[info] ArrayOfDurationsBenchmark.readCirce:·gc.time                                             thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.readJacksonScala                                               thrpt    5     20699.767 ±     442.535   ops/s
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5       587.306 ±      11.937  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5     44663.212 ±      55.699    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.033 ±       0.091  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.536 ±       6.956    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       588.529 ±     555.399  MB/sec
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5     44783.697 ±   42594.440    B/op
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.count                                     thrpt    5         9.000                counts
[info] ArrayOfDurationsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        11.000                    ms
[info] ArrayOfDurationsBenchmark.readJsoniterScala                                              thrpt    5     81368.115 ±    3175.144   ops/s
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       211.698 ±       8.256  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.005 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.003 ±       0.019  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.066 ±       0.362    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       204.559 ±     440.328  MB/sec
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3967.078 ±    8541.090    B/op
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5         4.000                counts
[info] ArrayOfDurationsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5         9.000                    ms
[info] ArrayOfDurationsBenchmark.readPlayJson                                                   thrpt    5     16737.579 ±     219.774   ops/s
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1063.044 ±      14.062  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     99984.056 ±       0.255    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.037 ±       0.088  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         3.525 ±       8.270    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1055.644 ±     552.695  MB/sec
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     99302.949 ±   52581.032    B/op
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.count                                         thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.readPlayJson:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfDurationsBenchmark.writeCirce                                                     thrpt    5     58247.766 ±    1360.456   ops/s
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1066.450 ±      24.900  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5     28824.007 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±       0.207  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         2.357 ±       5.571    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1052.387 ±     564.912  MB/sec
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     28442.810 ±   15206.077    B/op
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.count                                           thrpt    5        16.000                counts
[info] ArrayOfDurationsBenchmark.writeCirce:·gc.time                                            thrpt    5        16.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScala                                             thrpt    5    248118.237 ±   18433.458   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       393.388 ±      29.036  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      2496.002 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.772 ±       6.259  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.892 ±      39.628    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.138 ±     569.575  MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      2735.841 ±    3845.715    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfDurationsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    338391.475 ±    1810.842   ops/s
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfDurationsBenchmark.writePlayJson                                                  thrpt    5     74443.129 ±    1442.394   ops/s
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1160.618 ±      22.580  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5     24544.006 ±       0.001    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.079 ±       0.191  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.670 ±       4.045    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1177.259 ±     666.770  MB/sec
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     24892.437 ±   13985.975    B/op
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfDurationsBenchmark.writePlayJson:·gc.time                                         thrpt    5        18.000                    ms
[info] ArrayOfEnumsBenchmark.readCirce                                                          thrpt    5     27721.020 ±    1565.779   ops/s
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       576.457 ±      32.677  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     32736.018 ±       0.018    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.735 ±       5.889  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5        41.566 ±     332.317    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       585.548 ±     560.914  MB/sec
[info] ArrayOfEnumsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     33290.219 ±   32332.180    B/op
[info] ArrayOfEnumsBenchmark.readCirce:·gc.count                                                thrpt    5         9.000                counts
[info] ArrayOfEnumsBenchmark.readCirce:·gc.time                                                 thrpt    5        10.000                    ms
[info] ArrayOfEnumsBenchmark.readJsoniterScala                                                  thrpt    5    126435.945 ±    2434.440   ops/s
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       493.449 ±       9.745  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      6144.003 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.682 ±       5.650  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         8.507 ±      70.459    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       510.037 ±     649.267  MB/sec
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      6355.378 ±    8146.879    B/op
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfEnumsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.readPlayJson                                                       thrpt    5     22205.105 ±     927.218   ops/s
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1225.988 ±      51.805  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     86920.043 ±       0.200    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.058 ±       0.164  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         4.148 ±      11.784    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1195.343 ±     691.026  MB/sec
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     84809.832 ±   50717.389    B/op
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.count                                             thrpt    5        18.000                counts
[info] ArrayOfEnumsBenchmark.readPlayJson:·gc.time                                              thrpt    5        22.000                    ms
[info] ArrayOfEnumsBenchmark.writeCirce                                                         thrpt    5    167775.993 ±    2453.000   ops/s
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5       840.642 ±      11.589  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5      7888.002 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.742 ±       0.629    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5       849.548 ±     691.069  MB/sec
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      7969.621 ±    6442.451    B/op
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.count                                               thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.writeCirce:·gc.time                                                thrpt    5        14.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScala                                                 thrpt    5    543681.870 ±    4844.540   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       417.162 ±       3.739  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.761 ±       6.273  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.201 ±      18.148    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       429.114 ±     570.864  MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1243.110 ±    1661.461    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfEnumsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    566458.041 ±   11887.746   ops/s
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfEnumsBenchmark.writePlayJson                                                      thrpt    5    297045.640 ±    3556.566   ops/s
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5       821.172 ±      10.169  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5      4352.001 ±       0.001    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.375 ±       0.877    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5       856.107 ±     694.277  MB/sec
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      4538.572 ±    3709.260    B/op
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.count                                            thrpt    5        13.000                counts
[info] ArrayOfEnumsBenchmark.writePlayJson:·gc.time                                             thrpt    5        16.000                    ms
[info] ArrayOfFloatsBenchmark.readCirce                                                         thrpt    5     38406.762 ±     796.392   ops/s
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1712.649 ±      35.243  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     70199.928 ±       0.719    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.112 ±       0.091  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         4.605 ±       3.716    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1667.674 ±      65.824  MB/sec
[info] ArrayOfFloatsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     68358.897 ±    3405.435    B/op
[info] ArrayOfFloatsBenchmark.readCirce:·gc.count                                               thrpt    5        25.000                counts
[info] ArrayOfFloatsBenchmark.readCirce:·gc.time                                                thrpt    5        24.000                    ms
[info] ArrayOfFloatsBenchmark.readJacksonScala                                                  thrpt    5    105334.132 ±    5223.846   ops/s
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1161.497 ±      57.637  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     17360.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.087 ±       0.105  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.307 ±       1.558    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1197.558 ±     700.968  MB/sec
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     17902.090 ±   10544.398    B/op
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfFloatsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        21.000                    ms
[info] ArrayOfFloatsBenchmark.readJsoniterScala                                                 thrpt    5    153620.030 ±    3869.511   ops/s
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5        99.915 ±       2.558  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1024.003 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.491 ±       4.178  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         5.091 ±      43.317    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       102.272 ±     539.252  MB/sec
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1054.238 ±    5558.840    B/op
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         2.000                counts
[info] ArrayOfFloatsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5         4.000                    ms
[info] ArrayOfFloatsBenchmark.readPlayJson                                                      thrpt    5     39777.727 ±     455.483   ops/s
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      2070.618 ±      24.209  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     81952.011 ±       0.006    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.104 ±       0.227  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.118 ±       8.958    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      2085.400 ±     612.105  MB/sec
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     82547.732 ±   24946.055    B/op
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.count                                            thrpt    5        31.000                counts
[info] ArrayOfFloatsBenchmark.readPlayJson:·gc.time                                             thrpt    5        34.000                    ms
[info] ArrayOfFloatsBenchmark.writeCirce                                                        thrpt    5     80650.138 ±     894.639   ops/s
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5       619.252 ±       6.757  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     12088.005 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.725 ±       5.881  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        14.138 ±     114.737    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5       651.647 ±       4.976  MB/sec
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     12720.471 ±     201.635    B/op
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.count                                              thrpt    5        10.000                counts
[info] ArrayOfFloatsBenchmark.writeCirce:·gc.time                                               thrpt    5        12.000                    ms
[info] ArrayOfFloatsBenchmark.writeJacksonScala                                                 thrpt    5    101608.495 ±     780.056   ops/s
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       335.619 ±       2.557  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      5200.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.029 ±       0.156  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.452 ±       2.425    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       359.590 ±     326.727  MB/sec
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5570.790 ±    5045.114    B/op
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5         7.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScala                                                thrpt    5    117531.052 ±     682.157   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       359.537 ±       1.991  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4816.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.769 ±       6.375  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        10.296 ±      85.302    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       363.990 ±     639.825  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4877.840 ±    8605.659    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         6.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5    116314.434 ±    2126.490   ops/s
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5       264.202 ±       4.832  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5      3576.004 ±       0.001    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                thrpt    5         0.757 ±       6.404  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm           thrpt    5        10.246 ±      86.740    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space            thrpt    5       219.015 ±     486.603  MB/sec
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2968.533 ±    6593.789    B/op
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5         4.000                counts
[info] ArrayOfFloatsBenchmark.writeJsoniterScalaPrealloc:·gc.time                               thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readCirce                                                       thrpt    5      9795.633 ±      97.938   ops/s
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      1608.638 ±      15.628  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5    258492.333 ±      26.794    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±       0.080  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5        10.033 ±      12.886    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1598.099 ±     574.859  MB/sec
[info] ArrayOfInstantsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5    256834.901 ±   93970.549    B/op
[info] ArrayOfInstantsBenchmark.readCirce:·gc.count                                             thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readCirce:·gc.time                                              thrpt    5        23.000                    ms
[info] ArrayOfInstantsBenchmark.readJacksonScala                                                thrpt    5     10599.905 ±     133.849   ops/s
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5      1637.081 ±      21.101  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5    243146.666 ±      57.950    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.067 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         9.901 ±      17.741    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1608.869 ±     552.180  MB/sec
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5    239009.855 ±   84457.405    B/op
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.count                                      thrpt    5        24.000                counts
[info] ArrayOfInstantsBenchmark.readJacksonScala:·gc.time                                       thrpt    5        28.000                    ms
[info] ArrayOfInstantsBenchmark.readJsoniterScala                                               thrpt    5    108708.503 ±     198.235   ops/s
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       282.826 ±       0.470  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      4096.004 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.561 ±       4.565  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         8.124 ±      66.079    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       285.663 ±     157.942  MB/sec
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      4136.898 ±    2280.813    B/op
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         5.000                counts
[info] ArrayOfInstantsBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfInstantsBenchmark.readPlayJson                                                    thrpt    5      5724.162 ±     204.471   ops/s
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1511.245 ±      53.768  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5    415600.072 ±       0.012    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.067 ±       0.250  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5        18.252 ±      68.452    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1472.778 ±     711.861  MB/sec
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    404934.890 ±  191721.834    B/op
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.count                                          thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.readPlayJson:·gc.time                                           thrpt    5        26.000                    ms
[info] ArrayOfInstantsBenchmark.writeCirce                                                      thrpt    5     24806.970 ±     802.040   ops/s
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate                                       thrpt    5      1394.091 ±      44.727  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.alloc.rate.norm                                  thrpt    5     88464.185 ±      44.162    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.119  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         5.550 ±       7.564    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      1390.404 ±     527.619  MB/sec
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     88291.043 ±   36575.226    B/op
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.count                                            thrpt    5        21.000                counts
[info] ArrayOfInstantsBenchmark.writeCirce:·gc.time                                             thrpt    5        21.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScala                                              thrpt    5    346786.338 ±    5163.116   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate                               thrpt    5       764.839 ±      11.557  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      3472.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.067 ±       0.154  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.302 ±       0.699    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       718.479 ±     559.781  MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      3263.602 ±    2602.000    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfInstantsBenchmark.writeJsoniterScala:·gc.time                                     thrpt    5        11.000                    ms
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc                                      thrpt    5    379965.669 ±    2914.559   ops/s
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                       thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                  thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfInstantsBenchmark.writeJsoniterScalaPrealloc:·gc.count                            thrpt    5           ≈ 0                counts
[info] ArrayOfInstantsBenchmark.writePlayJson                                                   thrpt    5     28121.136 ±     884.147   ops/s
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate                                    thrpt    5      1478.944 ±      45.835  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.alloc.rate.norm                               thrpt    5     82792.016 ±       0.008    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.146  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         5.355 ±       8.098    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1450.858 ±     657.820  MB/sec
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     81233.510 ±   37274.298    B/op
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.count                                         thrpt    5        22.000                counts
[info] ArrayOfInstantsBenchmark.writePlayJson:·gc.time                                          thrpt    5        24.000                    ms
[info] ArrayOfIntsBenchmark.readCirce                                                           thrpt    5    138920.862 ±    4910.478   ops/s
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate                                            thrpt    5      2262.501 ±      79.836  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.alloc.rate.norm                                       thrpt    5     25640.003 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.137 ±       0.134  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         1.557 ±       1.527    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      2220.141 ±     728.432  MB/sec
[info] ArrayOfIntsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5     25171.737 ±    8833.713    B/op
[info] ArrayOfIntsBenchmark.readCirce:·gc.count                                                 thrpt    5        33.000                counts
[info] ArrayOfIntsBenchmark.readCirce:·gc.time                                                  thrpt    5        33.000                    ms
[info] ArrayOfIntsBenchmark.readJacksonScala                                                    thrpt    5    298641.693 ±    7028.839   ops/s
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate                                     thrpt    5       421.897 ±       9.916  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                thrpt    5      2224.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.033 ±       0.184  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.176 ±       0.979    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       441.802 ±     743.795  MB/sec
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      2332.278 ±    3958.892    B/op
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.count                                          thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJacksonScala:·gc.time                                           thrpt    5         8.000                    ms
[info] ArrayOfIntsBenchmark.readJsoniterScala                                                   thrpt    5    712659.748 ±   10183.135   ops/s
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5       463.550 ±       6.449  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5      1024.001 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.684 ±       5.632  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.516 ±      12.490    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       445.001 ±     753.878  MB/sec
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       984.228 ±    1680.100    B/op
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5         7.000                counts
[info] ArrayOfIntsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfIntsBenchmark.readPlayJson                                                        thrpt    5     70869.941 ±    1880.031   ops/s
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      3010.737 ±      72.086  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5     66886.429 ±     261.955    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.171 ±       0.105  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.791 ±       2.315    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      3048.538 ±      61.355  MB/sec
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     67729.919 ±    2935.346    B/op
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.count                                              thrpt    5        45.000                counts
[info] ArrayOfIntsBenchmark.readPlayJson:·gc.time                                               thrpt    5        46.000                    ms
[info] ArrayOfIntsBenchmark.writeCirce                                                          thrpt    5    228860.195 ±    3036.066   ops/s
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1605.994 ±      21.478  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5     11048.002 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.100 ±       0.088  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.687 ±       0.601    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1596.153 ±     596.278  MB/sec
[info] ArrayOfIntsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10979.206 ±    4052.866    B/op
[info] ArrayOfIntsBenchmark.writeCirce:·gc.count                                                thrpt    5        24.000                counts
[info] ArrayOfIntsBenchmark.writeCirce:·gc.time                                                 thrpt    5        25.000                    ms
[info] ArrayOfIntsBenchmark.writeJacksonScala                                                   thrpt    5    848857.232 ±    8301.584   ops/s
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate                                    thrpt    5       668.552 ±       6.633  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                               thrpt    5      1240.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.058 ±       0.104  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.108 ±       0.193    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       650.279 ±      20.617  MB/sec
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      1206.110 ±      36.845    B/op
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.count                                         thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJacksonScala:·gc.time                                          thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScala                                                  thrpt    5   1193234.226 ±   40441.978   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       648.894 ±      22.275  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       856.000 ±       0.001    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±       0.227  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.082 ±       0.300    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       652.969 ±       4.591  MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       861.437 ±      33.518    B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5        10.000                counts
[info] ArrayOfIntsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc                                          thrpt    5   1083785.051 ±   11201.516   ops/s
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                           thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                      thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfIntsBenchmark.writeJsoniterScalaPrealloc:·gc.count                                thrpt    5           ≈ 0                counts
[info] ArrayOfIntsBenchmark.writePlayJson                                                       thrpt    5     34474.314 ±     658.867   ops/s
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1864.498 ±      35.673  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5     85144.023 ±       0.092    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.083 ±       0.098  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.802 ±       4.493    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1862.848 ±     656.033  MB/sec
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     85063.332 ±   29613.039    B/op
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.count                                             thrpt    5        28.000                counts
[info] ArrayOfIntsBenchmark.writePlayJson:·gc.time                                              thrpt    5        28.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala                                               thrpt    5    191646.918 ±    8626.779   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate                                thrpt    5      1018.665 ±      45.674  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.alloc.rate.norm                           thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.513 ±       0.811    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                   thrpt    5       994.006 ±      31.570  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      8165.878 ±     261.454    B/op
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJacksonScala:·gc.time                                      thrpt    5        18.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala                                              thrpt    5    278687.720 ±    2431.134   ops/s
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5       725.081 ±       6.343  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.079 ±       0.174  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.446 ±       0.980    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5       721.640 ±     565.765  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      4076.520 ±    3194.437    B/op
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        11.000                counts
[info] ArrayOfJavaEnumsBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        10.000                    ms
[info] ArrayOfJavaEnumsBenchmark.readPlayJson                                                   thrpt    5     67016.148 ±    1313.400   ops/s
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      2740.699 ±      53.641  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     64384.006 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.121 ±       0.250  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         2.840 ±       5.917    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      2706.524 ±      60.628  MB/sec
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     63582.522 ±    1928.734    B/op
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.count                                         thrpt    5        40.000                counts
[info] ArrayOfJavaEnumsBenchmark.readPlayJson:·gc.time                                          thrpt    5        49.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala                                              thrpt    5    562891.727 ±   22365.600   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       569.195 ±      22.477  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5      1592.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.062 ±       0.188  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.174 ±       0.522    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       587.648 ±     557.909  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1645.150 ±    1580.023    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.count                                    thrpt    5         9.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala                                             thrpt    5    525254.846 ±    7395.010   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       403.054 ±       5.656  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      1208.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.777 ±       6.291  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         2.326 ±      18.822    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       429.157 ±     569.491  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      1287.136 ±    1719.880    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         7.000                counts
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        12.000                    ms
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc                                     thrpt    5    555323.790 ±    4071.319   ops/s
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                      thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                 thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writeJsoniterScalaPrealloc:·gc.count                           thrpt    5           ≈ 0                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson                                                  thrpt    5    290042.460 ±   10134.360   ops/s
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5       798.885 ±      27.834  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      4336.001 ±       0.001    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.050 ±       0.072  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.272 ±       0.395    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5       789.438 ±     694.425  MB/sec
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      4287.898 ±    3837.985    B/op
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfJavaEnumsBenchmark.writePlayJson:·gc.time                                         thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readCirce                                                 thrpt    5     10920.225 ±     440.506   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1396.109 ±      56.040  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    201270.698 ±      32.945    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        11.395 ±       9.491    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1393.837 ±     610.240  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    200849.967 ±   82748.796    B/op
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        21.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala                                          thrpt    5     11785.588 ±     379.310   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5      1320.025 ±      42.548  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5    176319.190 ±      62.037    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.046 ±       0.067  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         6.101 ±       8.804    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5      1334.631 ±      44.847  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5    178286.706 ±   10604.278    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.count                                thrpt    5        20.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJacksonScala:·gc.time                                 thrpt    5        24.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala                                         thrpt    5    145495.258 ±    5392.204   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       946.427 ±      35.078  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     10240.003 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.855 ±       1.122    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       992.931 ±      17.261  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     10743.955 ±     438.562    B/op
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5        15.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        14.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson                                              thrpt    5      8587.892 ±     159.173   ops/s
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1587.589 ±      29.781  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    291032.048 ±       0.007    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.050 ±       0.224  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5         9.124 ±      40.833    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1542.598 ±     716.847  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    282820.575 ±  132737.663    B/op
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        23.000                counts
[info] ArrayOfLocalDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        25.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeCirce                                                thrpt    5     22996.268 ±     787.369   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1048.083 ±      36.180  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     71745.647 ±      50.523    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         6.280 ±       8.492    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1052.588 ±     593.373  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5     71999.627 ±   38332.539    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        16.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    705848.175 ±   25609.284   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1273.333 ±      46.184  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      2840.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.185 ±       0.174    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5      1254.144 ±     542.541  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      2795.171 ±    1129.645    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        19.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        18.000                    ms
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    558588.774 ±   28774.415   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson                                             thrpt    5     24942.606 ±    1058.459   ops/s
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1052.332 ±      44.719  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     66421.696 ±      30.344    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±       0.166  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         4.462 ±      10.419    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1044.364 ±     576.624  MB/sec
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     66006.306 ±   39659.307    B/op
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        16.000                counts
[info] ArrayOfLocalDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfLocalDatesBenchmark.readCirce                                                     thrpt    5     28170.005 ±     699.743   ops/s
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1528.808 ±      37.931  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5     85439.785 ±       1.991    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.887 ±       8.604    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1530.687 ±     719.950  MB/sec
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     85561.371 ±   40817.294    B/op
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.count                                           thrpt    5        23.000                counts
[info] ArrayOfLocalDatesBenchmark.readCirce:·gc.time                                            thrpt    5        23.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJacksonScala                                              thrpt    5     31538.318 ±     483.395   ops/s
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1439.744 ±      22.478  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5     71862.259 ±      53.771    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         3.738 ±       6.688    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1403.881 ±     562.281  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5     70055.594 ±   27154.577    B/op
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        26.000                    ms
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala                                             thrpt    5    270008.409 ±    3021.892   ops/s
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       702.495 ±       7.879  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.437 ±       0.422    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       725.910 ±     566.006  MB/sec
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4232.834 ±    3309.096    B/op
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        11.000                counts
[info] ArrayOfLocalDatesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        10.000                    ms
[info] ArrayOfLocalDatesBenchmark.readPlayJson                                                  thrpt    5     18190.402 ±     496.964   ops/s
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1789.305 ±      49.091  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    154856.124 ±       0.765    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±       0.132  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         5.034 ±      11.326    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1815.427 ±     691.745  MB/sec
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    157151.089 ±   61362.786    B/op
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.count                                        thrpt    5        27.000                counts
[info] ArrayOfLocalDatesBenchmark.readPlayJson:·gc.time                                         thrpt    5        30.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeCirce                                                    thrpt    5     52870.732 ±    2196.512   ops/s
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1394.689 ±      58.391  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     41528.008 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.857 ±       2.903    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.285 ±     595.032  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     41437.077 ±   16603.682    B/op
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writeCirce:·gc.time                                           thrpt    5        20.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala                                            thrpt    5   1094941.278 ±   30703.639   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1174.060 ±      32.563  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1688.000 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.087 ±       0.104  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.126 ±       0.149    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1185.699 ±     687.187  MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1705.207 ±    1001.121    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        18.000                counts
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        16.000                    ms
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5    728161.538 ±    5126.226   ops/s
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson                                                 thrpt    5     58711.823 ±     802.743   ops/s
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1365.295 ±      18.556  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     36608.007 ±       0.001    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.567 ±       3.272    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1381.606 ±     517.494  MB/sec
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     37055.046 ±   14393.901    B/op
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.count                                       thrpt    5        21.000                counts
[info] ArrayOfLocalDatesBenchmark.writePlayJson:·gc.time                                        thrpt    5        23.000                    ms
[info] ArrayOfLocalTimesBenchmark.readCirce                                                     thrpt    5     16845.769 ±     623.478   ops/s
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate                                      thrpt    5      1503.241 ±      55.827  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.alloc.rate.norm                                 thrpt    5    140476.826 ±      25.524    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         6.994 ±       8.488    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1528.699 ±     671.947  MB/sec
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    142943.299 ±   66091.651    B/op
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.count                                           thrpt    5        23.000                counts
[info] ArrayOfLocalTimesBenchmark.readCirce:·gc.time                                            thrpt    5        22.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJacksonScala                                              thrpt    5     17277.304 ±     350.937   ops/s
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate                               thrpt    5      1395.642 ±      28.699  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                          thrpt    5    127170.440 ±      65.179    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.075 ±       0.134  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         6.824 ±      12.159    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5      1404.352 ±     608.273  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5    127992.728 ±   56729.881    B/op
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.count                                    thrpt    5        21.000                counts
[info] ArrayOfLocalTimesBenchmark.readJacksonScala:·gc.time                                     thrpt    5        24.000                    ms
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala                                             thrpt    5    304690.103 ±    2021.166   ops/s
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate                              thrpt    5       792.771 ±       5.271  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                         thrpt    5      4096.001 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.067 ±       0.104  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.344 ±       0.540    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       792.468 ±     694.675  MB/sec
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      4095.521 ±    3613.837    B/op
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.count                                   thrpt    5        12.000                counts
[info] ArrayOfLocalTimesBenchmark.readJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] ArrayOfLocalTimesBenchmark.readPlayJson                                                  thrpt    5     12734.222 ±     174.370   ops/s
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate                                   thrpt    5      1741.174 ±      23.834  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                              thrpt    5    215256.046 ±       0.115    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.083 ±       0.150  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5        10.284 ±      18.444    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1679.296 ±      49.800  MB/sec
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5    207606.603 ±    5726.183    B/op
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.count                                        thrpt    5        25.000                counts
[info] ArrayOfLocalTimesBenchmark.readPlayJson:·gc.time                                         thrpt    5        27.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeCirce                                                    thrpt    5     39178.808 ±    1109.309   ops/s
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate                                     thrpt    5      1288.403 ±      37.044  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.alloc.rate.norm                                thrpt    5     51768.274 ±       2.272    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.083 ±       0.080  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         3.341 ±       3.148    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1256.312 ±     585.328  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     50480.009 ±   23510.215    B/op
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.count                                          thrpt    5        19.000                counts
[info] ArrayOfLocalTimesBenchmark.writeCirce:·gc.time                                           thrpt    5        19.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala                                            thrpt    5   1217502.008 ±   58170.560   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                             thrpt    5      1107.461 ±      53.042  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      1432.000 ±       0.001    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.092 ±       0.269  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.119 ±       0.356    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5      1119.016 ±     704.636  MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1447.433 ±     923.566    B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.count                                  thrpt    5        17.000                counts
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScala:·gc.time                                   thrpt    5        19.000                    ms
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc                                    thrpt    5   1309466.926 ±   14620.445   ops/s
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                     thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfLocalTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                          thrpt    5           ≈ 0                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson                                                 thrpt    5     38974.653 ±     440.322   ops/s
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate                                  thrpt    5      1179.214 ±      13.231  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                             thrpt    5     47631.927 ±       0.719    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                         thrpt    5         0.058 ±       0.119  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.356 ±       4.829    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                     thrpt    5      1179.073 ±     702.350  MB/sec
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                thrpt    5     47628.916 ±   28442.468    B/op
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.count                                       thrpt    5        18.000                counts
[info] ArrayOfLocalTimesBenchmark.writePlayJson:·gc.time                                        thrpt    5        19.000                    ms
[info] ArrayOfLongsBenchmark.readCirce                                                          thrpt    5    130977.288 ±    1683.793   ops/s
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5      2246.478 ±      28.108  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     27000.003 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.104 ±       0.098  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         1.251 ±       1.187    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      2286.439 ±     555.881  MB/sec
[info] ArrayOfLongsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     27479.376 ±    6615.502    B/op
[info] ArrayOfLongsBenchmark.readCirce:·gc.count                                                thrpt    5        34.000                counts
[info] ArrayOfLongsBenchmark.readCirce:·gc.time                                                 thrpt    5        32.000                    ms
[info] ArrayOfLongsBenchmark.readJacksonScala                                                   thrpt    5    252480.494 ±    8786.385   ops/s
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       554.325 ±      19.242  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5      3456.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.046 ±       0.143  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.284 ±       0.883    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       588.151 ±     561.765  MB/sec
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      3664.859 ±    3476.385    B/op
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.count                                         thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.readJsoniterScala                                                  thrpt    5    498313.288 ±   19230.896   ops/s
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       628.005 ±      24.178  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      1984.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.184 ±       0.214    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       590.216 ±     561.661  MB/sec
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1862.088 ±    1740.525    B/op
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] ArrayOfLongsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfLongsBenchmark.readPlayJson                                                       thrpt    5     68154.531 ±     771.178   ops/s
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      2952.449 ±      29.999  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     68199.443 ±     270.683    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.162 ±       0.207  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         3.751 ±       4.804    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      2912.386 ±     699.141  MB/sec
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     67273.092 ±   16075.423    B/op
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.count                                             thrpt    5        43.000                counts
[info] ArrayOfLongsBenchmark.readPlayJson:·gc.time                                              thrpt    5        47.000                    ms
[info] ArrayOfLongsBenchmark.writeCirce                                                         thrpt    5    195089.528 ±    4797.150   ops/s
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1681.452 ±      41.809  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     13568.002 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.096 ±       0.091  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.773 ±       0.741    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1731.387 ±     550.669  MB/sec
[info] ArrayOfLongsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     13969.034 ±    4303.453    B/op
[info] ArrayOfLongsBenchmark.writeCirce:·gc.count                                               thrpt    5        26.000                counts
[info] ArrayOfLongsBenchmark.writeCirce:·gc.time                                                thrpt    5        25.000                    ms
[info] ArrayOfLongsBenchmark.writeJacksonScala                                                  thrpt    5    486567.230 ±    4268.168   ops/s
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5       499.429 ±       4.339  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1616.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.042 ±       0.150  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.135 ±       0.485    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       517.395 ±     685.468  MB/sec
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1674.357 ±    2220.689    B/op
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5         8.000                counts
[info] ArrayOfLongsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5         9.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScala                                                 thrpt    5    589590.949 ±   17382.904   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       461.430 ±      13.349  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      1232.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.762 ±       6.385  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.015 ±      16.872    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       443.143 ±     622.642  MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1183.723 ±    1673.937    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] ArrayOfLongsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    672744.086 ±    5976.851   ops/s
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfLongsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfLongsBenchmark.writePlayJson                                                      thrpt    5     30578.966 ±    1255.095   ops/s
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1567.421 ±      64.093  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     80691.112 ±      26.681    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.087 ±       0.132  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         4.490 ±       6.707    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1587.808 ±     599.091  MB/sec
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     81781.194 ±   32339.899    B/op
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.count                                            thrpt    5        24.000                counts
[info] ArrayOfLongsBenchmark.writePlayJson:·gc.time                                             thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readCirce                                                thrpt    5      8417.063 ±     159.679   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate                                 thrpt    5      1284.500 ±      24.159  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                            thrpt    5    240233.045 ±       8.564    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5        11.672 ±      10.523    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1323.314 ±      44.686  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    247504.061 ±   12503.254    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.count                                      thrpt    5        20.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readCirce:·gc.time                                       thrpt    5        20.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala                                        thrpt    5    102354.157 ±    3775.514   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                         thrpt    5       991.295 ±      36.924  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                    thrpt    5     15248.004 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.079 ±       0.104  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         1.218 ±       1.625    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       993.720 ±      19.450  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5     15286.085 ±     456.969    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readJsoniterScala:·gc.time                               thrpt    5        14.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson                                             thrpt    5      7818.275 ±      88.220   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate                              thrpt    5      1411.471 ±      15.494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                         thrpt    5    284216.054 ±       0.009    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.037 ±       0.132  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         7.531 ±      26.468    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1403.706 ±     563.025  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5    282636.653 ±  112451.610    B/op
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.count                                   thrpt    5        21.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.readPlayJson:·gc.time                                    thrpt    5        24.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce                                               thrpt    5     18308.689 ±     341.674   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate                                thrpt    5       913.443 ±      17.015  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                           thrpt    5     78534.900 ±      68.546    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                       thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                  thrpt    5         5.002 ±      14.924    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                   thrpt    5       852.162 ±     688.362  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm              thrpt    5     73262.345 ±   59076.830    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.count                                     thrpt    5        13.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeCirce:·gc.time                                      thrpt    5        13.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala                                       thrpt    5    482530.986 ±    9262.454   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                        thrpt    5      1093.718 ±      20.560  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                   thrpt    5      3568.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space               thrpt    5         0.087 ±       0.067  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm          thrpt    5         0.285 ±       0.219    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space           thrpt    5      1117.302 ±     686.154  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm      thrpt    5      3646.150 ±    2276.431    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.count                             thrpt    5        17.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScala:·gc.time                              thrpt    5        16.000                    ms
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc                               thrpt    5    540646.629 ±    3982.783   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm           thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                     thrpt    5           ≈ 0                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson                                            thrpt    5     19242.125 ±     699.438   ops/s
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate                             thrpt    5       887.080 ±      31.930  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                        thrpt    5     72569.854 ±      32.568    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                    thrpt    5         0.046 ±       0.174  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm               thrpt    5         3.731 ±      14.145    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                thrpt    5       909.866 ±     555.494  MB/sec
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm           thrpt    5     74488.740 ±   46687.691    B/op
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.count                                  thrpt    5        14.000                counts
[info] ArrayOfOffsetDateTimesBenchmark.writePlayJson:·gc.time                                   thrpt    5        13.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readCirce                                                    thrpt    5     13613.508 ±     396.051   ops/s
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      1367.201 ±      39.742  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5    158106.150 ±      31.223    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         8.658 ±       8.163    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      1392.187 ±     573.226  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5    161046.815 ±   68589.971    B/op
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfOffsetTimesBenchmark.readCirce:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala                                             thrpt    5     14155.477 ±     132.085   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      1295.538 ±      12.542  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5    144076.415 ±      61.782    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.054 ±       0.091  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         6.022 ±      10.209    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      1267.192 ±     572.970  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5    140947.454 ±   64510.687    B/op
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.count                                   thrpt    5        19.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJacksonScala:·gc.time                                    thrpt    5        23.000                    ms
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala                                            thrpt    5    170531.838 ±    4733.669   ops/s
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       986.215 ±      27.486  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      9104.002 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.058 ±       0.154  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.536 ±       1.415    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       993.567 ±      19.107  MB/sec
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      9172.448 ±     402.936    B/op
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        15.000                counts
[info] ArrayOfOffsetTimesBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        14.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeCirce                                                   thrpt    5     29236.539 ±     599.962   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1088.748 ±      22.475  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5     58620.609 ±      41.814    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         4.260 ±       3.658    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1119.261 ±     703.986  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     60262.155 ±   37835.620    B/op
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.count                                         thrpt    5        17.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala                                           thrpt    5    702688.957 ±   16693.383   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       964.179 ±      22.829  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      2160.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.087 ±       0.104  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.196 ±       0.235    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       917.956 ±     573.872  MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      2057.067 ±    1300.005    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        14.000                counts
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        15.000                    ms
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5    803916.490 ±    4015.691   ops/s
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfOffsetTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.readCirce                                                        thrpt    5     28381.024 ±     323.520   ops/s
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1023.137 ±      11.636  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     56751.903 ±       0.965    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±       0.174  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         3.691 ±       9.624    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1052.169 ±     575.566  MB/sec
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     58372.965 ±   32349.836    B/op
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.count                                              thrpt    5        16.000                counts
[info] ArrayOfPeriodsBenchmark.readCirce:·gc.time                                               thrpt    5        16.000                    ms
[info] ArrayOfPeriodsBenchmark.readJacksonScala                                                 thrpt    5     27788.602 ±    1477.604   ops/s
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       761.614 ±      40.166  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     43144.115 ±       0.865    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.042 ±       0.234  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         2.350 ±      13.162    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       722.717 ±     556.941  MB/sec
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     40931.501 ±   31123.483    B/op
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfPeriodsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        14.000                    ms
[info] ArrayOfPeriodsBenchmark.readJsoniterScala                                                thrpt    5    203842.169 ±   12223.342   ops/s
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5       530.327 ±      31.830  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5      4096.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.552 ±       4.443  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         4.252 ±      34.179    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       527.799 ±     694.905  MB/sec
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      4085.242 ±    5472.789    B/op
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfPeriodsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.readPlayJson                                                     thrpt    5     22622.265 ±     689.065   ops/s
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1414.687 ±      43.431  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     98448.020 ±       0.008    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.071 ±       0.184  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         4.914 ±      12.761    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1461.211 ±     696.008  MB/sec
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    101678.637 ±   48005.405    B/op
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.count                                           thrpt    5        22.000                counts
[info] ArrayOfPeriodsBenchmark.readPlayJson:·gc.time                                            thrpt    5        24.000                    ms
[info] ArrayOfPeriodsBenchmark.writeCirce                                                       thrpt    5     82592.864 ±    2008.378   ops/s
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5      1273.888 ±      30.925  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     24280.005 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.071 ±       0.134  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         1.350 ±       2.561    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      1256.167 ±     570.886  MB/sec
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     23950.351 ±   11153.380    B/op
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.count                                             thrpt    5        19.000                counts
[info] ArrayOfPeriodsBenchmark.writeCirce:·gc.time                                              thrpt    5        19.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJacksonScala                                                thrpt    5    182999.665 ±    3572.184   ops/s
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5      1191.336 ±      24.190  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5     10248.002 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.058 ±       0.105  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.500 ±       0.891    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1191.262 ±     673.670  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     10243.706 ±    5674.857    B/op
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfPeriodsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5        21.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala                                               thrpt    5    409466.038 ±   73282.005   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       453.628 ±      81.493  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1744.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.768 ±       6.347  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         2.883 ±      23.788    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       443.152 ±     621.430  MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1691.139 ±    2161.225    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] ArrayOfPeriodsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    540611.283 ±    8660.939   ops/s
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson                                                    thrpt    5    110764.095 ±    2785.060   ops/s
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1350.895 ±      34.121  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5     19200.004 ±       0.001    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.092 ±       0.122  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.300 ±       1.714    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1381.782 ±     518.256  MB/sec
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     19630.945 ±    6882.908    B/op
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.count                                          thrpt    5        21.000                counts
[info] ArrayOfPeriodsBenchmark.writePlayJson:·gc.time                                           thrpt    5        22.000                    ms
[info] ArrayOfShortsBenchmark.readCirce                                                         thrpt    5    156188.565 ±    3259.617   ops/s
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2628.896 ±      54.922  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5     26496.003 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.121 ±       0.132  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         1.216 ±       1.319    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2632.969 ±     600.311  MB/sec
[info] ArrayOfShortsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     26541.904 ±    6386.016    B/op
[info] ArrayOfShortsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ArrayOfShortsBenchmark.readCirce:·gc.time                                                thrpt    5        37.000                    ms
[info] ArrayOfShortsBenchmark.readJacksonScala                                                  thrpt    5    375077.873 ±    6715.530   ops/s
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       383.106 ±       6.863  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1608.001 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.033 ±       0.146  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.139 ±       0.609    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       376.294 ±     602.890  MB/sec
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      1579.880 ±    2537.037    B/op
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJacksonScala:·gc.time                                         thrpt    5         8.000                    ms
[info] ArrayOfShortsBenchmark.readJsoniterScala                                                 thrpt    5    911621.310 ±   11337.028   ops/s
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       315.028 ±       4.000  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5       544.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.667 ±       5.613  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.149 ±       9.674    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       350.685 ±     366.635  MB/sec
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5       605.970 ±     641.393    B/op
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ArrayOfShortsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        11.000                    ms
[info] ArrayOfShortsBenchmark.readPlayJson                                                      thrpt    5     76222.122 ±    2734.042   ops/s
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      3268.780 ±     116.196  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5     67512.005 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.187 ±       0.266  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         3.876 ±       5.592    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      3323.192 ±     566.117  MB/sec
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     68645.049 ±   12419.004    B/op
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.count                                            thrpt    5        49.000                counts
[info] ArrayOfShortsBenchmark.readPlayJson:·gc.time                                             thrpt    5        51.000                    ms
[info] ArrayOfShortsBenchmark.writeCirce                                                        thrpt    5    250698.655 ±    2892.600   ops/s
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1710.868 ±      19.988  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5     10744.002 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±       0.166  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.575 ±       1.049    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1665.967 ±      68.856  MB/sec
[info] ArrayOfShortsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     10461.950 ±     377.847    B/op
[info] ArrayOfShortsBenchmark.writeCirce:·gc.count                                              thrpt    5        25.000                counts
[info] ArrayOfShortsBenchmark.writeCirce:·gc.time                                               thrpt    5        23.000                    ms
[info] ArrayOfShortsBenchmark.writeJacksonScala                                                 thrpt    5   1032154.472 ±   13498.630   ops/s
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       676.638 ±       9.016  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5      1032.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.095 ±       0.228    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       716.231 ±     560.500  MB/sec
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      1092.518 ±     858.530    B/op
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.count                                       thrpt    5        11.000                counts
[info] ArrayOfShortsBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScala                                                thrpt    5   1228288.199 ±   29766.854   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       505.570 ±      12.231  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       648.000 ±       0.001    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.762 ±       6.297  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.984 ±       8.131    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       508.284 ±     646.340  MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       652.259 ±     837.848    B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] ArrayOfShortsBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        12.000                    ms
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5   1374770.030 ±   10366.775   ops/s
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        ≈ 10⁻⁴                  B/op
[info] ArrayOfShortsBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] ArrayOfShortsBenchmark.writePlayJson                                                     thrpt    5     41557.915 ±    1633.099   ops/s
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      2032.634 ±      79.854  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5     77000.011 ±       0.013    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.096 ±       0.122  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.628 ±       4.617    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      2003.400 ±      94.016  MB/sec
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     75893.192 ±    2332.568    B/op
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.count                                           thrpt    5        30.000                counts
[info] ArrayOfShortsBenchmark.writePlayJson:·gc.time                                            thrpt    5        31.000                    ms
[info] ArrayOfUUIDsBenchmark.readCirce                                                          thrpt    5     40722.721 ±    1937.762   ops/s
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate                                           thrpt    5       812.822 ±      38.632  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.alloc.rate.norm                                      thrpt    5     31424.010 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         2.892 ±       4.631    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                              thrpt    5       785.742 ±     687.119  MB/sec
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     30410.258 ±   27297.022    B/op
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.count                                                thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.readCirce:·gc.time                                                 thrpt    5        11.000                    ms
[info] ArrayOfUUIDsBenchmark.readJacksonScala                                                   thrpt    5     85148.994 ±    4755.126   ops/s
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate                                    thrpt    5       895.659 ±      49.980  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.alloc.rate.norm                               thrpt    5     16560.005 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         1.462 ±       1.226    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                       thrpt    5       858.507 ±     690.320  MB/sec
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     15877.896 ±   12848.781    B/op
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.count                                         thrpt    5        13.000                counts
[info] ArrayOfUUIDsBenchmark.readJacksonScala:·gc.time                                          thrpt    5        15.000                    ms
[info] ArrayOfUUIDsBenchmark.readJsoniterScala                                                  thrpt    5    243775.995 ±    4483.293   ops/s
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate                                   thrpt    5       792.846 ±      14.131  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                              thrpt    5      5120.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.062 ±       0.057  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.403 ±       0.370    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       788.071 ±     690.764  MB/sec
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5090.106 ±    4481.423    B/op
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.count                                        thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.readJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] ArrayOfUUIDsBenchmark.readPlayJson                                                       thrpt    5     23728.289 ±     776.799   ops/s
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate                                        thrpt    5      1083.692 ±      35.776  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.alloc.rate.norm                                   thrpt    5     71896.071 ±       0.449    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.079 ±       0.154  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         5.244 ±      10.178    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1122.642 ±     684.969  MB/sec
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     74503.913 ±   46184.889    B/op
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.count                                             thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.readPlayJson:·gc.time                                              thrpt    5        18.000                    ms
[info] ArrayOfUUIDsBenchmark.writeCirce                                                         thrpt    5     52116.508 ±    1360.136   ops/s
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate                                          thrpt    5      1104.403 ±      29.128  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.alloc.rate.norm                                     thrpt    5     33360.008 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         2.011 ±       2.015    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1116.797 ±     672.588  MB/sec
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     33757.198 ±   21031.254    B/op
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.count                                               thrpt    5        17.000                counts
[info] ArrayOfUUIDsBenchmark.writeCirce:·gc.time                                                thrpt    5        17.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJacksonScala                                                  thrpt    5     86454.048 ±    1089.321   ops/s
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate                                   thrpt    5      1183.901 ±      14.815  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                              thrpt    5     21560.009 ±       0.074    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.079 ±       0.088  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         1.440 ±       1.607    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1197.242 ±     701.055  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     21800.987 ±   12703.866    B/op
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.count                                        thrpt    5        18.000                counts
[info] ArrayOfUUIDsBenchmark.writeJacksonScala:·gc.time                                         thrpt    5        23.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala                                                 thrpt    5    245630.116 ±    4744.075   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate                                  thrpt    5       782.580 ±      15.201  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                             thrpt    5      5016.002 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.480 ±       0.457    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       784.161 ±     685.773  MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5      5028.877 ±    4457.068    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.count                                       thrpt    5        12.000                counts
[info] ArrayOfUUIDsBenchmark.writeJsoniterScala:·gc.time                                        thrpt    5        12.000                    ms
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc                                         thrpt    5    274383.426 ±    1844.596   ops/s
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                          thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                     thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfUUIDsBenchmark.writeJsoniterScalaPrealloc:·gc.count                               thrpt    5           ≈ 0                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson                                                      thrpt    5     72518.025 ±     733.692   ops/s
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate                                       thrpt    5      1075.269 ±      10.863  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.alloc.rate.norm                                  thrpt    5     23344.006 ±       0.074    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.058 ±       0.067  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         1.265 ±       1.450    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1044.424 ±     547.186  MB/sec
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5     22673.728 ±   11848.519    B/op
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.count                                            thrpt    5        16.000                counts
[info] ArrayOfUUIDsBenchmark.writePlayJson:·gc.time                                             thrpt    5        18.000                    ms
[info] ArrayOfZoneIdsBenchmark.readCirce                                                        thrpt    5     73010.812 ±    2412.425   ops/s
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate                                         thrpt    5      1466.583 ±      48.098  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.alloc.rate.norm                                    thrpt    5     31624.006 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.087 ±       0.154  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5         1.882 ±       3.288    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1451.920 ±     657.896  MB/sec
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5     31305.871 ±   14048.775    B/op
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.count                                              thrpt    5        22.000                counts
[info] ArrayOfZoneIdsBenchmark.readCirce:·gc.time                                               thrpt    5        22.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJacksonScala                                                 thrpt    5     85935.479 ±    1947.749   ops/s
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate                                  thrpt    5       970.369 ±      21.465  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.alloc.rate.norm                             thrpt    5     17776.005 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.686 ±       3.011    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       925.550 ±     587.097  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     16958.645 ±   10831.757    B/op
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.count                                       thrpt    5        14.000                counts
[info] ArrayOfZoneIdsBenchmark.readJacksonScala:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala                                                thrpt    5    109891.549 ±    3393.865   ops/s
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1157.216 ±      35.309  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     16576.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.050 ±       0.044  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.716 ±       0.650    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1183.353 ±     696.823  MB/sec
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     16953.800 ±   10069.012    B/op
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        18.000                counts
[info] ArrayOfZoneIdsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        17.000                    ms
[info] ArrayOfZoneIdsBenchmark.readPlayJson                                                     thrpt    5     38502.308 ±    1771.429   ops/s
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1864.117 ±      84.883  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5     76216.011 ±       0.006    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.079 ±       0.183  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         3.239 ±       7.524    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1882.685 ±     731.485  MB/sec
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     76998.858 ±   30832.108    B/op
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] ArrayOfZoneIdsBenchmark.readPlayJson:·gc.time                                            thrpt    5        35.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeCirce                                                       thrpt    5    116787.861 ±    4658.179   ops/s
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate                                        thrpt    5       804.144 ±      32.170  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.alloc.rate.norm                                   thrpt    5     10840.004 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.062 ±       0.150  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.837 ±       2.006    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                           thrpt    5       777.931 ±     681.621  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5     10481.321 ±    9053.105    B/op
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.count                                             thrpt    5        12.000                counts
[info] ArrayOfZoneIdsBenchmark.writeCirce:·gc.time                                              thrpt    5        12.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala                                                thrpt    5    162918.650 ±    2435.668   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate                                 thrpt    5       241.736 ±       3.662  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2336.003 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.037 ±       0.164  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.362 ±       1.587    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       217.874 ±     481.941  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2105.181 ±    4657.006    B/op
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.count                                      thrpt    5         4.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJacksonScala:·gc.time                                       thrpt    5         4.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala                                               thrpt    5    788454.873 ±   19135.469   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       977.623 ±      23.909  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1952.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.075 ±       0.122  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.150 ±       0.242    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       981.775 ±      26.039  MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1960.403 ±      92.447    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5        15.000                counts
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5        14.000                    ms
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc                                       thrpt    5    784389.870 ±   15425.616   ops/s
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                        thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                   thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writeJsoniterScalaPrealloc:·gc.count                             thrpt    5           ≈ 0                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson                                                    thrpt    5    215299.781 ±    5886.347   ops/s
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5       703.486 ±      19.109  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      5144.002 ±       0.001    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.058 ±       0.174  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.426 ±       1.272    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5       707.928 ±     553.282  MB/sec
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      5174.442 ±    3979.263    B/op
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.count                                          thrpt    5        11.000                counts
[info] ArrayOfZoneIdsBenchmark.writePlayJson:·gc.time                                           thrpt    5        12.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala                                             thrpt    5    185511.863 ±    8404.479   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5       986.214 ±      44.774  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5      8368.002 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.075 ±       0.072  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.637 ±       0.622    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5       927.384 ±     556.162  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5      7870.116 ±    4739.914    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        14.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        17.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala                                            thrpt    5    351887.999 ±   14716.861   ops/s
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       683.138 ±      28.481  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5      3056.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.057 ±       0.275  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.253 ±       1.224    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       661.201 ±       2.331  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      2958.132 ±     119.764    B/op
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        10.000                counts
[info] ArrayOfZoneOffsetsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala                                            thrpt    5    313581.858 ±    5533.464   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       309.160 ±       5.526  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5      1552.001 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.025 ±       0.104  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.126 ±       0.527    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       295.086 ±     138.348  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5      1481.736 ±     708.636    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         5.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5         9.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala                                           thrpt    5   1193532.661 ±   21866.311   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       885.465 ±      16.271  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5      1168.000 ±       0.001    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.075 ±       0.091  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.099 ±       0.119    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       851.014 ±     685.991  MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5      1122.678 ±     907.189    B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        13.000                    ms
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   1138247.822 ±   16336.898   ops/s
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻³                  B/op
[info] ArrayOfZoneOffsetsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce                                                 thrpt    5      5169.185 ±      46.405   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      1020.058 ±       9.041  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5    310624.080 ±       0.011    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.054 ±       0.108  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5        16.485 ±      32.834    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      1042.919 ±     590.621  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5    317572.420 ±  179324.036    B/op
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.count                                       thrpt    5        16.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readCirce:·gc.time                                        thrpt    5        17.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala                                         thrpt    5     30985.536 ±    2435.495   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       526.386 ±      41.574  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5     26744.014 ±       0.005    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.852 ±       6.937  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5        42.266 ±     343.448    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       507.027 ±     648.891  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5     25792.030 ±   33505.731    B/op
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.count                               thrpt    5         8.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readJsoniterScala:·gc.time                                thrpt    5        13.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson                                              thrpt    5      4552.642 ±     181.958   ops/s
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate                               thrpt    5      1156.053 ±      45.541  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.alloc.rate.norm                          thrpt    5    399728.091 ±       0.012    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                      thrpt    5         0.050 ±       0.091  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                 thrpt    5        17.330 ±      32.402    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                  thrpt    5      1194.260 ±     698.480  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm             thrpt    5    413233.805 ±  249607.179    B/op
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.count                                    thrpt    5        18.000                counts
[info] ArrayOfZonedDateTimesBenchmark.readPlayJson:·gc.time                                     thrpt    5        21.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeCirce                                                thrpt    5     14278.936 ±     595.943   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5       895.427 ±      36.571  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5     98715.340 ±     112.876    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.071 ±       0.176  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         7.773 ±      19.365    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5       907.934 ±     554.136  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5    100137.068 ±   62072.018    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.count                                      thrpt    5        14.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeCirce:·gc.time                                       thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala                                        thrpt    5    287564.271 ±    7053.816   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5      1014.131 ±      24.738  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5      5552.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.087 ±       0.088  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.479 ±       0.480    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       981.646 ±      25.913  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5      5374.461 ±     253.812    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        15.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScala:·gc.time                               thrpt    5        15.000                    ms
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc                                thrpt    5    295242.865 ±     801.541   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5         0.001 ±       0.001    B/op
[info] ArrayOfZonedDateTimesBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson                                             thrpt    5     15197.801 ±     831.441   ops/s
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5       849.525 ±      43.109  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5     87998.980 ±    3423.033    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.062 ±       0.098  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         6.469 ±      10.283    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5       838.312 ±     675.067  MB/sec
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5     86951.588 ±   72263.339    B/op
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.count                                   thrpt    5        13.000                counts
[info] ArrayOfZonedDateTimesBenchmark.writePlayJson:·gc.time                                    thrpt    5        13.000                    ms
[info] ArraysBenchmark.readCirce                                                                thrpt    5    911851.452 ±   18031.144   ops/s
[info] ArraysBenchmark.readCirce:·gc.alloc.rate                                                 thrpt    5      2942.511 ±      56.864  MB/sec
[info] ArraysBenchmark.readCirce:·gc.alloc.rate.norm                                            thrpt    5      5080.000 ±       0.001    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space                                        thrpt    5         0.108 ±       0.154  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.187 ±       0.265    B/op
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                    thrpt    5      2906.899 ±     696.670  MB/sec
[info] ArraysBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                               thrpt    5      5019.434 ±    1267.346    B/op
[info] ArraysBenchmark.readCirce:·gc.count                                                      thrpt    5        43.000                counts
[info] ArraysBenchmark.readCirce:·gc.time                                                       thrpt    5        40.000                    ms
[info] ArraysBenchmark.readJacksonScala                                                         thrpt    5   1792282.892 ±   31005.851   ops/s
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate                                          thrpt    5      1684.861 ±      28.819  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.alloc.rate.norm                                     thrpt    5      1480.000 ±       0.001    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.117 ±       0.122  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.102 ±       0.109    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                             thrpt    5      1674.470 ±      60.469  MB/sec
[info] ArraysBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      1470.885 ±      53.370    B/op
[info] ArraysBenchmark.readJacksonScala:·gc.count                                               thrpt    5        25.000                counts
[info] ArraysBenchmark.readJacksonScala:·gc.time                                                thrpt    5        30.000                    ms
[info] ArraysBenchmark.readJsoniterScala                                                        thrpt    5   9466616.144 ±  175652.917   ops/s
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate                                         thrpt    5      2357.420 ±      42.387  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                    thrpt    5       392.000 ±       0.001    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.092 ±       0.134  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.015 ±       0.022    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2358.767 ±      73.857  MB/sec
[info] ArraysBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       392.235 ±      16.376    B/op
[info] ArraysBenchmark.readJsoniterScala:·gc.count                                              thrpt    5        35.000                counts
[info] ArraysBenchmark.readJsoniterScala:·gc.time                                               thrpt    5        31.000                    ms
[info] ArraysBenchmark.readPlayJson                                                             thrpt    5    316526.451 ±    5071.870   ops/s
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate                                              thrpt    5      1928.729 ±      30.568  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.alloc.rate.norm                                         thrpt    5      9592.001 ±       0.001    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                     thrpt    5         0.087 ±       0.105  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.435 ±       0.516    B/op
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                 thrpt    5      1947.599 ±     575.339  MB/sec
[info] ArraysBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      9685.896 ±    2861.825    B/op
[info] ArraysBenchmark.readPlayJson:·gc.count                                                   thrpt    5        29.000                counts
[info] ArraysBenchmark.readPlayJson:·gc.time                                                    thrpt    5        34.000                    ms
[info] ArraysBenchmark.writeCirce                                                               thrpt    5   1064413.604 ±   20859.642   ops/s
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate                                                thrpt    5      2331.444 ±      44.290  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.alloc.rate.norm                                           thrpt    5      3448.000 ±       0.001    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                       thrpt    5         0.117 ±       0.185  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.172 ±       0.272    B/op
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                   thrpt    5      2350.422 ±     875.738  MB/sec
[info] ArraysBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      3476.003 ±    1288.207    B/op
[info] ArraysBenchmark.writeCirce:·gc.count                                                     thrpt    5        35.000                counts
[info] ArraysBenchmark.writeCirce:·gc.time                                                      thrpt    5        34.000                    ms
[info] ArraysBenchmark.writeJacksonScala                                                        thrpt    5   3808425.443 ±  112181.421   ops/s
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate                                         thrpt    5      2167.544 ±      64.019  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                    thrpt    5       896.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.125 ±       0.113  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.052 ±       0.046    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      2154.430 ±     671.780  MB/sec
[info] ArraysBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       890.436 ±     267.327    B/op
[info] ArraysBenchmark.writeJacksonScala:·gc.count                                              thrpt    5        32.000                counts
[info] ArraysBenchmark.writeJacksonScala:·gc.time                                               thrpt    5        37.000                    ms
[info] ArraysBenchmark.writeJsoniterScala                                                       thrpt    5   9560589.795 ±  299729.897   ops/s
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate                                        thrpt    5       583.070 ±      17.962  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5        96.000 ±       0.001    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.792 ±       6.415  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.130 ±       1.054    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       588.274 ±     564.010  MB/sec
[info] ArraysBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5        96.919 ±      93.648    B/op
[info] ArraysBenchmark.writeJsoniterScala:·gc.count                                             thrpt    5         9.000                counts
[info] ArraysBenchmark.writeJsoniterScala:·gc.time                                              thrpt    5         9.000                    ms
[info] ArraysBenchmark.writePlayJson                                                            thrpt    5    521774.769 ±    9181.653   ops/s
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate                                             thrpt    5      1803.053 ±      32.977  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.alloc.rate.norm                                        thrpt    5      5440.001 ±       0.001    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.083 ±       0.196  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.251 ±       0.595    B/op
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1809.381 ±     714.885  MB/sec
[info] ArraysBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      5457.543 ±    2078.693    B/op
[info] ArraysBenchmark.writePlayJson:·gc.count                                                  thrpt    5        27.000                counts
[info] ArraysBenchmark.writePlayJson:·gc.time                                                   thrpt    5        33.000                    ms
[info] BitSetsBenchmark.readJacksonScala                                                        thrpt    5   2434448.414 ±   59700.138   ops/s
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate                                         thrpt    5      1571.102 ±      38.644  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.alloc.rate.norm                                    thrpt    5      1016.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                thrpt    5         0.108 ±       0.143  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.070 ±       0.092    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                            thrpt    5      1538.950 ±     694.420  MB/sec
[info] BitSetsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                       thrpt    5       995.750 ±     469.478    B/op
[info] BitSetsBenchmark.readJacksonScala:·gc.count                                              thrpt    5        23.000                counts
[info] BitSetsBenchmark.readJacksonScala:·gc.time                                               thrpt    5        27.000                    ms
[info] BitSetsBenchmark.readJsoniterScala                                                       thrpt    5   5220933.663 ±  269161.616   ops/s
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate                                        thrpt    5       689.893 ±      35.895  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                   thrpt    5       208.000 ±       0.001    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.050 ±       0.244  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.015 ±       0.073    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                           thrpt    5       656.477 ±       5.936  MB/sec
[info] BitSetsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       197.955 ±      10.610    B/op
[info] BitSetsBenchmark.readJsoniterScala:·gc.count                                             thrpt    5        10.000                counts
[info] BitSetsBenchmark.readJsoniterScala:·gc.time                                              thrpt    5        10.000                    ms
[info] BitSetsBenchmark.readPlayJson                                                            thrpt    5    408936.843 ±    2001.443   ops/s
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate                                             thrpt    5      1855.575 ±       8.958  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.alloc.rate.norm                                        thrpt    5      7144.001 ±       0.001    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                    thrpt    5         0.096 ±       0.108  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.368 ±       0.413    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                thrpt    5      1811.638 ±     717.010  MB/sec
[info] BitSetsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      6974.236 ±    2730.927    B/op
[info] BitSetsBenchmark.readPlayJson:·gc.count                                                  thrpt    5        27.000                counts
[info] BitSetsBenchmark.readPlayJson:·gc.time                                                   thrpt    5        32.000                    ms
[info] BitSetsBenchmark.writeJacksonScala                                                       thrpt    5   2748735.756 ±   43527.553   ops/s
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate                                        thrpt    5      1452.677 ±      22.807  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                   thrpt    5       832.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                               thrpt    5         0.087 ±       0.105  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.050 ±       0.060    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                           thrpt    5      1468.079 ±     719.473  MB/sec
[info] BitSetsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                      thrpt    5       840.865 ±     413.611    B/op
[info] BitSetsBenchmark.writeJacksonScala:·gc.count                                             thrpt    5        22.000                counts
[info] BitSetsBenchmark.writeJacksonScala:·gc.time                                              thrpt    5        25.000                    ms
[info] BitSetsBenchmark.writeJsoniterScala                                                      thrpt    5   6876522.163 ±  174489.637   ops/s
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate                                       thrpt    5      1048.387 ±      25.998  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                  thrpt    5       240.000 ±       0.001    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.075 ±       0.122  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.017 ±       0.028    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                          thrpt    5      1050.638 ±     551.595  MB/sec
[info] BitSetsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5       240.537 ±     126.907    B/op
[info] BitSetsBenchmark.writeJsoniterScala:·gc.count                                            thrpt    5        16.000                counts
[info] BitSetsBenchmark.writeJsoniterScala:·gc.time                                             thrpt    5        15.000                    ms
[info] BitSetsBenchmark.writePlayJson                                                           thrpt    5    716835.604 ±   15800.733   ops/s
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate                                            thrpt    5      2076.361 ±      46.365  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.alloc.rate.norm                                       thrpt    5      4560.001 ±       0.001    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                   thrpt    5         0.087 ±       0.088  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.192 ±       0.188    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                               thrpt    5      2086.413 ±     592.492  MB/sec
[info] BitSetsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      4582.883 ±    1352.560    B/op
[info] BitSetsBenchmark.writePlayJson:·gc.count                                                 thrpt    5        31.000                counts
[info] BitSetsBenchmark.writePlayJson:·gc.time                                                  thrpt    5        37.000                    ms
[info] ExtractFieldsBenchmark.readCirce                                                         thrpt    5    804220.954 ±   17978.182   ops/s
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      2615.718 ±      58.199  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5      5120.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.079 ±       0.104  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.155 ±       0.203    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      2627.587 ±     543.954  MB/sec
[info] ExtractFieldsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5143.182 ±    1056.425    B/op
[info] ExtractFieldsBenchmark.readCirce:·gc.count                                               thrpt    5        39.000                counts
[info] ExtractFieldsBenchmark.readCirce:·gc.time                                                thrpt    5        35.000                    ms
[info] ExtractFieldsBenchmark.readJacksonScala                                                  thrpt    5    983676.811 ±   18217.651   ops/s
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5      1219.647 ±      22.020  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5      1952.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.092 ±       0.091  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.147 ±       0.147    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5      1261.097 ±     570.385  MB/sec
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      2018.402 ±     914.649    B/op
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.count                                        thrpt    5        19.000                counts
[info] ExtractFieldsBenchmark.readJacksonScala:·gc.time                                         thrpt    5        22.000                    ms
[info] ExtractFieldsBenchmark.readJsoniterScala                                                 thrpt    5   8274309.060 ±   75297.313   ops/s
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       378.427 ±       3.671  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5        72.000 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.650 ±       5.419  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.124 ±       1.035    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       366.788 ±     490.619  MB/sec
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5        69.824 ±      94.095    B/op
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         6.000                counts
[info] ExtractFieldsBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        10.000                    ms
[info] ExtractFieldsBenchmark.readPlayJson                                                      thrpt    5    337659.385 ±    8081.833   ops/s
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1884.064 ±      44.490  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5      8784.001 ±       0.001    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.100 ±       0.132  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.465 ±       0.609    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1877.675 ±     703.705  MB/sec
[info] ExtractFieldsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      8757.460 ±    3427.208    B/op
[info] ExtractFieldsBenchmark.readPlayJson:·gc.count                                            thrpt    5        28.000                counts
[info] ExtractFieldsBenchmark.readPlayJson:·gc.time                                             thrpt    5        36.000                    ms
[info] GoogleMapsAPIBenchmark.readCirce                                                         thrpt    5      7910.459 ±     290.972   ops/s
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate                                          thrpt    5      1903.470 ±      70.143  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.alloc.rate.norm                                     thrpt    5    378792.052 ±       0.007    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                 thrpt    5         0.109 ±       0.212  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                            thrpt    5        21.675 ±      41.767    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                             thrpt    5      1868.567 ±     690.494  MB/sec
[info] GoogleMapsAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    371738.071 ±  131222.030    B/op
[info] GoogleMapsAPIBenchmark.readCirce:·gc.count                                               thrpt    5        28.000                counts
[info] GoogleMapsAPIBenchmark.readCirce:·gc.time                                                thrpt    5        29.000                    ms
[info] GoogleMapsAPIBenchmark.readJacksonScala                                                  thrpt    5     14394.691 ±     631.171   ops/s
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate                                   thrpt    5       364.601 ±      16.053  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                              thrpt    5     39872.030 ±       0.012    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.100 ±       0.772  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5        11.059 ±      85.511    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                      thrpt    5       360.815 ±     324.113  MB/sec
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5     39435.116 ±   34756.001    B/op
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.count                                        thrpt    5         6.000                counts
[info] GoogleMapsAPIBenchmark.readJacksonScala:·gc.time                                         thrpt    5         8.000                    ms
[info] GoogleMapsAPIBenchmark.readJsoniterScala                                                 thrpt    5     24164.638 ±     344.222   ops/s
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                  thrpt    5       412.872 ±       6.009  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                             thrpt    5     26896.019 ±       0.009    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.690 ±       5.722  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5        44.834 ±     371.561    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                     thrpt    5       430.072 ±     570.412  MB/sec
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     28014.643 ±   37108.370    B/op
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.count                                       thrpt    5         7.000                counts
[info] GoogleMapsAPIBenchmark.readJsoniterScala:·gc.time                                        thrpt    5        12.000                    ms
[info] GoogleMapsAPIBenchmark.readPlayJson                                                      thrpt    5      2452.891 ±      55.602   ops/s
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate                                       thrpt    5      1484.422 ±      33.673  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                  thrpt    5    952664.184 ±       0.126    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                              thrpt    5         0.025 ±       0.067  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                         thrpt    5        16.017 ±      42.828    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                          thrpt    5      1532.262 ±     701.380  MB/sec
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                     thrpt    5    983814.331 ±  466927.737    B/op
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.count                                            thrpt    5        23.000                counts
[info] GoogleMapsAPIBenchmark.readPlayJson:·gc.time                                             thrpt    5        30.000                    ms
[info] GoogleMapsAPIBenchmark.writeCirce                                                        thrpt    5      7604.538 ±      79.765   ops/s
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate                                         thrpt    5      1635.574 ±      17.098  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.alloc.rate.norm                                    thrpt    5    338568.056 ±       0.009    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                thrpt    5         0.067 ±       0.154  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                           thrpt    5        13.775 ±      31.786    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                            thrpt    5      1592.801 ±     550.021  MB/sec
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                       thrpt    5    329732.818 ±  114778.841    B/op
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.count                                              thrpt    5        24.000                counts
[info] GoogleMapsAPIBenchmark.writeCirce:·gc.time                                               thrpt    5        27.000                    ms
[info] GoogleMapsAPIBenchmark.writeJacksonScala                                                 thrpt    5     42356.202 ±    2498.970   ops/s
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                  thrpt    5       613.701 ±      36.053  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                             thrpt    5     22807.860 ±       0.347    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                         thrpt    5         0.029 ±       0.176  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                    thrpt    5         1.078 ±       6.516    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                     thrpt    5       586.085 ±     567.936  MB/sec
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                thrpt    5     21823.101 ±   21609.482    B/op
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.count                                       thrpt    5         9.000                counts
[info] GoogleMapsAPIBenchmark.writeJacksonScala:·gc.time                                        thrpt    5        10.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScala                                                thrpt    5     63224.218 ±    2593.642   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                 thrpt    5       477.432 ±      19.617  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                            thrpt    5     11888.007 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.795 ±       6.489  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5        19.859 ±     162.162    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5       507.428 ±     646.072  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5     12617.990 ±   15841.541    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.count                                      thrpt    5         8.000                counts
[info] GoogleMapsAPIBenchmark.writeJsoniterScala:·gc.time                                       thrpt    5        11.000                    ms
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc                                        thrpt    5     74263.704 ±     723.824   ops/s
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                         thrpt    5         1.132 ±       0.012  MB/sec
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                    thrpt    5        24.005 ±       0.001    B/op
[info] GoogleMapsAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                              thrpt    5           ≈ 0                counts
[info] GoogleMapsAPIBenchmark.writePlayJson                                                     thrpt    5      5436.993 ±     131.864   ops/s
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate                                      thrpt    5      1682.849 ±      40.512  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.alloc.rate.norm                                 thrpt    5    487215.916 ±       3.716    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.050 ±       0.156  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5        14.445 ±      45.178    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1671.782 ±      63.553  MB/sec
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5    484035.772 ±   25175.573    B/op
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.count                                           thrpt    5        25.000                counts
[info] GoogleMapsAPIBenchmark.writePlayJson:·gc.time                                            thrpt    5        34.000                    ms
[info] IntAndLongMapsBenchmark.readJsoniterScala                                                thrpt    5   5541825.014 ±  271248.351   ops/s
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                 thrpt    5      1661.488 ±      81.670  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                            thrpt    5       472.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±       0.201  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.021 ±       0.058    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                    thrpt    5      1667.632 ±      63.091  MB/sec
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5       473.762 ±       8.208    B/op
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.count                                      thrpt    5        25.000                counts
[info] IntAndLongMapsBenchmark.readJsoniterScala:·gc.time                                       thrpt    5        22.000                    ms
[info] IntAndLongMapsBenchmark.readPlayJson                                                     thrpt    5    358945.093 ±   10262.544   ops/s
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate                                      thrpt    5      1935.486 ±      54.402  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                 thrpt    5      8488.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                             thrpt    5         0.083 ±       0.150  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.364 ±       0.652    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                         thrpt    5      1881.692 ±     696.639  MB/sec
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      8254.633 ±    3171.318    B/op
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.count                                           thrpt    5        28.000                counts
[info] IntAndLongMapsBenchmark.readPlayJson:·gc.time                                            thrpt    5        33.000                    ms
[info] IntAndLongMapsBenchmark.writeJsoniterScala                                               thrpt    5   3330601.016 ±  146840.674   ops/s
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                thrpt    5       541.636 ±      23.486  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                           thrpt    5       256.000 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.787 ±       6.374  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         0.369 ±       2.986    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       522.118 ±     686.844  MB/sec
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5       246.483 ±     320.836    B/op
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.count                                     thrpt    5         8.000                counts
[info] IntAndLongMapsBenchmark.writeJsoniterScala:·gc.time                                      thrpt    5         9.000                    ms
[info] IntAndLongMapsBenchmark.writePlayJson                                                    thrpt    5    325628.890 ±    5935.197   ops/s
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate                                     thrpt    5      1265.931 ±      23.123  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                thrpt    5      6120.001 ±       0.001    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±       0.091  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.362 ±       0.442    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1328.045 ±      52.535  MB/sec
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      6420.435 ±     294.942    B/op
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.count                                          thrpt    5        20.000                counts
[info] IntAndLongMapsBenchmark.writePlayJson:·gc.time                                           thrpt    5        23.000                    ms
[info] IntBenchmark.readCirce                                                                   thrpt    5   6900522.385 ±  199174.262   ops/s
[info] IntBenchmark.readCirce:·gc.alloc.rate                                                    thrpt    5      4278.147 ±     122.651  MB/sec
[info] IntBenchmark.readCirce:·gc.alloc.rate.norm                                               thrpt    5       976.000 ±       0.001    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space                                           thrpt    5         0.146 ±       0.150  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                      thrpt    5         0.033 ±       0.035    B/op
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                       thrpt    5      4281.017 ±     705.075  MB/sec
[info] IntBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                  thrpt    5       976.761 ±     170.198    B/op
[info] IntBenchmark.readCirce:·gc.count                                                         thrpt    5        63.000                counts
[info] IntBenchmark.readCirce:·gc.time                                                          thrpt    5        55.000                    ms
[info] IntBenchmark.readJacksonScala                                                            thrpt    5   8546603.202 ±  196824.378   ops/s
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate                                             thrpt    5      3214.198 ±      73.245  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.alloc.rate.norm                                        thrpt    5       592.000 ±       0.001    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                                    thrpt    5         0.121 ±       0.222  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.022 ±       0.041    B/op
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                                thrpt    5      3186.621 ±     732.184  MB/sec
[info] IntBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                           thrpt    5       586.902 ±     132.661    B/op
[info] IntBenchmark.readJacksonScala:·gc.count                                                  thrpt    5        47.000                counts
[info] IntBenchmark.readJacksonScala:·gc.time                                                   thrpt    5        51.000                    ms
[info] IntBenchmark.readJsoniterScala                                                           thrpt    5  48490726.069 ± 1476879.145   ops/s
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate                                            thrpt    5       492.793 ±      15.014  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                       thrpt    5        16.000 ±       0.001    B/op
[info] IntBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.660 ±       5.500  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.022 ±       0.181    B/op
[info] IntBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                               thrpt    5       447.232 ±     760.127  MB/sec
[info] IntBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5        14.547 ±      25.015    B/op
[info] IntBenchmark.readJsoniterScala:·gc.count                                                 thrpt    5         7.000                counts
[info] IntBenchmark.readJsoniterScala:·gc.time                                                  thrpt    5         9.000                    ms
[info] IntBenchmark.readNaiveScala                                                              thrpt    5  28321245.128 ±  778476.318   ops/s
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate                                               thrpt    5      1439.087 ±      39.547  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.alloc.rate.norm                                          thrpt    5        80.000 ±       0.001    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space                                      thrpt    5         0.104 ±       0.160  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.006 ±       0.009    B/op
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space                                  thrpt    5      1463.822 ±     689.793  MB/sec
[info] IntBenchmark.readNaiveScala:·gc.churn.PS_Survivor_Space.norm                             thrpt    5        81.379 ±      38.403    B/op
[info] IntBenchmark.readNaiveScala:·gc.count                                                    thrpt    5        22.000                counts
[info] IntBenchmark.readNaiveScala:·gc.time                                                     thrpt    5        20.000                    ms
[info] IntBenchmark.readPlayJson                                                                thrpt    5   7444994.050 ±   86304.502   ops/s
[info] IntBenchmark.readPlayJson:·gc.alloc.rate                                                 thrpt    5      3594.070 ±      41.804  MB/sec
[info] IntBenchmark.readPlayJson:·gc.alloc.rate.norm                                            thrpt    5       760.000 ±       0.001    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                        thrpt    5         0.129 ±       0.207  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                   thrpt    5         0.027 ±       0.044    B/op
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                    thrpt    5      3590.040 ±     700.279  MB/sec
[info] IntBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                               thrpt    5       759.124 ±     145.570    B/op
[info] IntBenchmark.readPlayJson:·gc.count                                                      thrpt    5        53.000                counts
[info] IntBenchmark.readPlayJson:·gc.time                                                       thrpt    5        54.000                    ms
[info] IntBenchmark.writeCirce                                                                  thrpt    5  20029024.098 ±  520889.664   ops/s
[info] IntBenchmark.writeCirce:·gc.alloc.rate                                                   thrpt    5      2341.095 ±      60.996  MB/sec
[info] IntBenchmark.writeCirce:·gc.alloc.rate.norm                                              thrpt    5       184.000 ±       0.001    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.108 ±       0.088  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.009 ±       0.007    B/op
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      2351.428 ±      95.060  MB/sec
[info] IntBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5       184.819 ±       8.924    B/op
[info] IntBenchmark.writeCirce:·gc.count                                                        thrpt    5        35.000                counts
[info] IntBenchmark.writeCirce:·gc.time                                                         thrpt    5        33.000                    ms
[info] IntBenchmark.writeJacksonScala                                                           thrpt    5  12936062.156 ±   54482.892   ops/s
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate                                            thrpt    5      2563.696 ±      11.095  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                       thrpt    5       312.000 ±       0.001    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                                   thrpt    5         0.104 ±       0.127  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.013 ±       0.015    B/op
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                               thrpt    5      2569.550 ±     681.171  MB/sec
[info] IntBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                          thrpt    5       312.702 ±      82.195    B/op
[info] IntBenchmark.writeJacksonScala:·gc.count                                                 thrpt    5        38.000                counts
[info] IntBenchmark.writeJacksonScala:·gc.time                                                  thrpt    5        44.000                    ms
[info] IntBenchmark.writeJsoniterScala                                                          thrpt    5  50997165.333 ± 2922195.315   ops/s
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate                                           thrpt    5      1036.635 ±      59.270  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5        32.000 ±       0.001    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.092 ±       0.091  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.003 ±       0.003    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1049.858 ±     551.422  MB/sec
[info] IntBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5        32.389 ±      16.062    B/op
[info] IntBenchmark.writeJsoniterScala:·gc.count                                                thrpt    5        16.000                counts
[info] IntBenchmark.writeJsoniterScala:·gc.time                                                 thrpt    5        15.000                    ms
[info] IntBenchmark.writeJsoniterScalaPrealloc                                                  thrpt    5  56915612.000 ±  463324.153   ops/s
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                                   thrpt    5        ≈ 10⁻⁴                MB/sec
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                              thrpt    5        ≈ 10⁻⁵                  B/op
[info] IntBenchmark.writeJsoniterScalaPrealloc:·gc.count                                        thrpt    5           ≈ 0                counts
[info] IntBenchmark.writeNaiveScala                                                             thrpt    5  33101763.886 ±  599913.590   ops/s
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate                                              thrpt    5      2523.477 ±      45.070  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.alloc.rate.norm                                         thrpt    5       120.000 ±       0.001    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space                                     thrpt    5         0.100 ±       0.154  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.005 ±       0.007    B/op
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space                                 thrpt    5      2569.123 ±     706.699  MB/sec
[info] IntBenchmark.writeNaiveScala:·gc.churn.PS_Survivor_Space.norm                            thrpt    5       122.181 ±      34.219    B/op
[info] IntBenchmark.writeNaiveScala:·gc.count                                                   thrpt    5        38.000                counts
[info] IntBenchmark.writeNaiveScala:·gc.time                                                    thrpt    5        33.000                    ms
[info] IntBenchmark.writePlayJson                                                               thrpt    5   2591167.321 ±   90117.846   ops/s
[info] IntBenchmark.writePlayJson:·gc.alloc.rate                                                thrpt    5      2119.824 ±      73.693  MB/sec
[info] IntBenchmark.writePlayJson:·gc.alloc.rate.norm                                           thrpt    5      1288.000 ±       0.001    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.108 ±       0.183  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.066 ±       0.110    B/op
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      2142.803 ±     680.875  MB/sec
[info] IntBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      1302.508 ±     442.501    B/op
[info] IntBenchmark.writePlayJson:·gc.count                                                     thrpt    5        32.000                counts
[info] IntBenchmark.writePlayJson:·gc.time                                                      thrpt    5        30.000                    ms
[info] IterablesBenchmark.readCirce                                                             thrpt    5    621569.287 ±    6763.203   ops/s
[info] IterablesBenchmark.readCirce:·gc.alloc.rate                                              thrpt    5      2255.152 ±      24.336  MB/sec
[info] IterablesBenchmark.readCirce:·gc.alloc.rate.norm                                         thrpt    5      5712.001 ±       0.001    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                     thrpt    5         0.100 ±       0.164  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                thrpt    5         0.253 ±       0.415    B/op
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                 thrpt    5      2149.854 ±     702.623  MB/sec
[info] IterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                            thrpt    5      5444.572 ±    1736.475    B/op
[info] IterablesBenchmark.readCirce:·gc.count                                                   thrpt    5        32.000                counts
[info] IterablesBenchmark.readCirce:·gc.time                                                    thrpt    5        29.000                    ms
[info] IterablesBenchmark.readJacksonScala                                                      thrpt    5    633507.929 ±   15732.270   ops/s
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate                                       thrpt    5       737.203 ±      18.316  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                  thrpt    5      1832.001 ±       0.001    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                              thrpt    5         0.050 ±       0.091  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.124 ±       0.227    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                          thrpt    5       719.126 ±     554.513  MB/sec
[info] IterablesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      1786.453 ±    1357.149    B/op
[info] IterablesBenchmark.readJacksonScala:·gc.count                                            thrpt    5        11.000                counts
[info] IterablesBenchmark.readJacksonScala:·gc.time                                             thrpt    5        13.000                    ms
[info] IterablesBenchmark.readJsoniterScala                                                     thrpt    5   3777462.555 ±   64098.793   ops/s
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate                                      thrpt    5      1497.287 ±      24.709  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                 thrpt    5       624.000 ±       0.001    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±       0.122  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.038 ±       0.050    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1463.454 ±     672.427  MB/sec
[info] IterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5       609.736 ±     273.104    B/op
[info] IterablesBenchmark.readJsoniterScala:·gc.count                                           thrpt    5        22.000                counts
[info] IterablesBenchmark.readJsoniterScala:·gc.time                                            thrpt    5        20.000                    ms
[info] IterablesBenchmark.readPlayJson                                                          thrpt    5    241366.949 ±    3913.814   ops/s
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate                                           thrpt    5      1669.158 ±      27.797  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                                      thrpt    5     10888.002 ±       0.001    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                  thrpt    5         0.050 ±       0.122  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.326 ±       0.794    B/op
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                              thrpt    5      1671.828 ±      64.910  MB/sec
[info] IterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                         thrpt    5     10905.454 ±     403.302    B/op
[info] IterablesBenchmark.readPlayJson:·gc.count                                                thrpt    5        25.000                counts
[info] IterablesBenchmark.readPlayJson:·gc.time                                                 thrpt    5        31.000                    ms
[info] IterablesBenchmark.writeCirce                                                            thrpt    5    870635.600 ±   13263.988   ops/s
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate                                             thrpt    5      1999.735 ±      30.141  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                        thrpt    5      3616.000 ±       0.001    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.087 ±       0.104  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.158 ±       0.187    B/op
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2006.335 ±      87.374  MB/sec
[info] IterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      3628.101 ±     210.422    B/op
[info] IterablesBenchmark.writeCirce:·gc.count                                                  thrpt    5        30.000                counts
[info] IterablesBenchmark.writeCirce:·gc.time                                                   thrpt    5        29.000                    ms
[info] IterablesBenchmark.writeJacksonScala                                                     thrpt    5   1448495.609 ±   41685.845   ops/s
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate                                      thrpt    5       979.037 ±      27.907  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1064.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±       0.134  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.100 ±       0.146    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       988.480 ±      34.276  MB/sec
[info] IterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1074.267 ±      25.296    B/op
[info] IterablesBenchmark.writeJacksonScala:·gc.count                                           thrpt    5        15.000                counts
[info] IterablesBenchmark.writeJacksonScala:·gc.time                                            thrpt    5        18.000                    ms
[info] IterablesBenchmark.writeJsoniterScala                                                    thrpt    5   7165520.801 ±  219780.620   ops/s
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                                     thrpt    5       801.186 ±      24.437  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                thrpt    5       176.000 ±       0.001    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.062 ±       0.098  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.014 ±       0.021    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       784.079 ±     685.784  MB/sec
[info] IterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       172.191 ±     149.387    B/op
[info] IterablesBenchmark.writeJsoniterScala:·gc.count                                          thrpt    5        12.000                counts
[info] IterablesBenchmark.writeJsoniterScala:·gc.time                                           thrpt    5        12.000                    ms
[info] IterablesBenchmark.writePlayJson                                                         thrpt    5    572242.048 ±   14624.199   ops/s
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate                                          thrpt    5      1962.732 ±      49.877  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                                     thrpt    5      5400.001 ±       0.001    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.100 ±       0.132  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.275 ±       0.360    B/op
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1948.738 ±     596.868  MB/sec
[info] IterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5      5362.933 ±    1714.400    B/op
[info] IterablesBenchmark.writePlayJson:·gc.count                                               thrpt    5        29.000                counts
[info] IterablesBenchmark.writePlayJson:·gc.time                                                thrpt    5        33.000                    ms
[info] MapsBenchmark.readCirce                                                                  thrpt    5    643838.896 ±   16451.120   ops/s
[info] MapsBenchmark.readCirce:·gc.alloc.rate                                                   thrpt    5      2231.485 ±      56.342  MB/sec
[info] MapsBenchmark.readCirce:·gc.alloc.rate.norm                                              thrpt    5      5456.001 ±       0.001    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space                                          thrpt    5         0.100 ±       0.105  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                                     thrpt    5         0.244 ±       0.257    B/op
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                      thrpt    5      2215.427 ±     692.499  MB/sec
[info] MapsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                                 thrpt    5      5416.423 ±    1668.811    B/op
[info] MapsBenchmark.readCirce:·gc.count                                                        thrpt    5        33.000                counts
[info] MapsBenchmark.readCirce:·gc.time                                                         thrpt    5        34.000                    ms
[info] MapsBenchmark.readJsoniterScala                                                          thrpt    5   5673809.485 ±   35694.587   ops/s
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate                                           thrpt    5      1412.633 ±       8.846  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                      thrpt    5       392.000 ±       0.001    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                                  thrpt    5         0.075 ±       0.091  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.021 ±       0.025    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                              thrpt    5      1394.004 ±     552.180  MB/sec
[info] MapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                         thrpt    5       386.800 ±     151.606    B/op
[info] MapsBenchmark.readJsoniterScala:·gc.count                                                thrpt    5        21.000                counts
[info] MapsBenchmark.readJsoniterScala:·gc.time                                                 thrpt    5        18.000                    ms
[info] MapsBenchmark.readPlayJson                                                               thrpt    5    365906.244 ±    5808.100   ops/s
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate                                                thrpt    5      1909.489 ±      30.144  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                           thrpt    5      8216.001 ±       0.001    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                       thrpt    5         0.100 ±       0.164  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                                  thrpt    5         0.430 ±       0.704    B/op
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                                   thrpt    5      1947.261 ±     558.498  MB/sec
[info] MapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                              thrpt    5      8379.355 ±    2447.409    B/op
[info] MapsBenchmark.readPlayJson:·gc.count                                                     thrpt    5        29.000                counts
[info] MapsBenchmark.readPlayJson:·gc.time                                                      thrpt    5        35.000                    ms
[info] MapsBenchmark.writeCirce                                                                 thrpt    5    464421.662 ±   21383.609   ops/s
[info] MapsBenchmark.writeCirce:·gc.alloc.rate                                                  thrpt    5      1229.649 ±      56.699  MB/sec
[info] MapsBenchmark.writeCirce:·gc.alloc.rate.norm                                             thrpt    5      4168.001 ±       0.001    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                         thrpt    5         0.100 ±       0.119  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                                    thrpt    5         0.338 ±       0.398    B/op
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                                     thrpt    5      1249.465 ±     553.287  MB/sec
[info] MapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                                thrpt    5      4237.849 ±    1959.608    B/op
[info] MapsBenchmark.writeCirce:·gc.count                                                       thrpt    5        19.000                counts
[info] MapsBenchmark.writeCirce:·gc.time                                                        thrpt    5        19.000                    ms
[info] MapsBenchmark.writeJsoniterScala                                                         thrpt    5   3141647.679 ±  136429.926   ops/s
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                          thrpt    5       526.814 ±      22.849  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                                     thrpt    5       264.000 ±       0.001    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                                 thrpt    5         0.789 ±       6.389  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.396 ±       3.206    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                             thrpt    5       521.799 ±     686.139  MB/sec
[info] MapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                        thrpt    5       261.027 ±     338.035    B/op
[info] MapsBenchmark.writeJsoniterScala:·gc.count                                               thrpt    5         8.000                counts
[info] MapsBenchmark.writeJsoniterScala:·gc.time                                                thrpt    5        10.000                    ms
[info] MapsBenchmark.writePlayJson                                                              thrpt    5    336921.895 ±    2254.767   ops/s
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate                                               thrpt    5      1215.555 ±       8.531  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                          thrpt    5      5680.001 ±       0.001    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                      thrpt    5         0.071 ±       0.072  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                                 thrpt    5         0.331 ±       0.335    B/op
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                                  thrpt    5      1193.577 ±     690.029  MB/sec
[info] MapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                             thrpt    5      5578.109 ±    3248.504    B/op
[info] MapsBenchmark.writePlayJson:·gc.count                                                    thrpt    5        18.000                counts
[info] MapsBenchmark.writePlayJson:·gc.time                                                     thrpt    5        23.000                    ms
[info] MissingReqFieldBenchmark.readCirce                                                       thrpt    5   2088145.526 ±   33262.065   ops/s
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate                                        thrpt    5      3045.344 ±      48.858  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.alloc.rate.norm                                   thrpt    5      2296.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space                               thrpt    5         0.117 ±       0.176  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.088 ±       0.131    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space                           thrpt    5      3041.135 ±      91.757  MB/sec
[info] MissingReqFieldBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      2292.845 ±      70.631    B/op
[info] MissingReqFieldBenchmark.readCirce:·gc.count                                             thrpt    5        45.000                counts
[info] MissingReqFieldBenchmark.readCirce:·gc.time                                              thrpt    5        44.000                    ms
[info] MissingReqFieldBenchmark.readJacksonScala                                                thrpt    5    299728.699 ±    4920.533   ops/s
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate                                 thrpt    5       540.737 ±       8.975  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.alloc.rate.norm                            thrpt    5      2840.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                        thrpt    5         0.054 ±       0.338  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.284 ±       1.772    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                    thrpt    5       506.793 ±     642.698  MB/sec
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm               thrpt    5      2660.405 ±    3358.706    B/op
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.count                                      thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readJacksonScala:·gc.time                                       thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterScala                                               thrpt    5    645367.782 ±   41821.687   ops/s
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate                                thrpt    5       409.957 ±      26.651  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.alloc.rate.norm                           thrpt    5      1000.001 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                       thrpt    5         0.653 ±       5.439  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                  thrpt    5         1.576 ±      13.117    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                   thrpt    5       432.481 ±     573.866  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm              thrpt    5      1059.101 ±    1475.041    B/op
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.count                                     thrpt    5         7.000                counts
[info] MissingReqFieldBenchmark.readJsoniterScala:·gc.time                                      thrpt    5        10.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStackless                                           thrpt    5   3762901.931 ±   34062.164   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate                            thrpt    5      1223.775 ±      10.943  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.alloc.rate.norm                       thrpt    5       512.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space                   thrpt    5         0.079 ±       0.132  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.033 ±       0.055    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space               thrpt    5      1261.178 ±     563.056  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.churn.PS_Survivor_Space.norm          thrpt    5       527.593 ±     233.647    B/op
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.count                                 thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStackless:·gc.time                                  thrpt    5        19.000                    ms
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump                                     thrpt    5   6525468.887 ±  401512.887   ops/s
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate                      thrpt    5       563.719 ±      34.800  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.alloc.rate.norm                 thrpt    5       136.000 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space             thrpt    5         0.664 ±       5.406  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Eden_Space.norm        thrpt    5         0.162 ±       1.323    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space         thrpt    5       527.808 ±     697.252  MB/sec
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.churn.PS_Survivor_Space.norm    thrpt    5       127.568 ±     170.962    B/op
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.count                           thrpt    5         8.000                counts
[info] MissingReqFieldBenchmark.readJsoniterStacklessNoDump:·gc.time                            thrpt    5         9.000                    ms
[info] MissingReqFieldBenchmark.readPlayJson                                                    thrpt    5    202655.218 ±    3151.789   ops/s
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate                                     thrpt    5      1291.442 ±      20.658  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.alloc.rate.norm                                thrpt    5     10032.002 ±       0.001    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                            thrpt    5         0.079 ±       0.105  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.615 ±       0.814    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                        thrpt    5      1260.773 ±     557.952  MB/sec
[info] MissingReqFieldBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      9793.386 ±    4316.257    B/op
[info] MissingReqFieldBenchmark.readPlayJson:·gc.count                                          thrpt    5        19.000                counts
[info] MissingReqFieldBenchmark.readPlayJson:·gc.time                                           thrpt    5        24.000                    ms
[info] MutableIterablesBenchmark.readCirce                                                      thrpt    5    711901.559 ±   17781.104   ops/s
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate                                       thrpt    5      2720.586 ±      67.327  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.alloc.rate.norm                                  thrpt    5      6016.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space                              thrpt    5         0.104 ±       0.179  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                         thrpt    5         0.230 ±       0.395    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                          thrpt    5      2767.228 ±     504.109  MB/sec
[info] MutableIterablesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                     thrpt    5      6119.942 ±    1187.234    B/op
[info] MutableIterablesBenchmark.readCirce:·gc.count                                            thrpt    5        41.000                counts
[info] MutableIterablesBenchmark.readCirce:·gc.time                                             thrpt    5        38.000                    ms
[info] MutableIterablesBenchmark.readJsoniterScala                                              thrpt    5   3805314.311 ±  147127.142   ops/s
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate                               thrpt    5      2455.885 ±      93.968  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                          thrpt    5      1016.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.112 ±       0.091  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.047 ±       0.039    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                  thrpt    5      2495.172 ±     671.161  MB/sec
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5      1032.112 ±     264.353    B/op
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.count                                    thrpt    5        37.000                counts
[info] MutableIterablesBenchmark.readJsoniterScala:·gc.time                                     thrpt    5        34.000                    ms
[info] MutableIterablesBenchmark.readPlayJson                                                   thrpt    5    261002.543 ±    4460.012   ops/s
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate                                    thrpt    5      1863.640 ±      31.086  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.alloc.rate.norm                               thrpt    5     11240.002 ±       0.001    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                           thrpt    5         0.096 ±       0.044  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.577 ±       0.263    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                       thrpt    5      1877.677 ±     672.607  MB/sec
[info] MutableIterablesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                  thrpt    5     11327.897 ±    4210.302    B/op
[info] MutableIterablesBenchmark.readPlayJson:·gc.count                                         thrpt    5        28.000                counts
[info] MutableIterablesBenchmark.readPlayJson:·gc.time                                          thrpt    5        34.000                    ms
[info] MutableIterablesBenchmark.writeCirce                                                     thrpt    5    831260.109 ±   17351.956   ops/s
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate                                      thrpt    5      1824.878 ±      37.698  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.alloc.rate.norm                                 thrpt    5      3456.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                             thrpt    5         0.092 ±       0.146  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.174 ±       0.277    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                         thrpt    5      1800.404 ±     713.813  MB/sec
[info] MutableIterablesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      3411.051 ±    1416.768    B/op
[info] MutableIterablesBenchmark.writeCirce:·gc.count                                           thrpt    5        27.000                counts
[info] MutableIterablesBenchmark.writeCirce:·gc.time                                            thrpt    5        26.000                    ms
[info] MutableIterablesBenchmark.writeJacksonScala                                              thrpt    5   1565684.572 ±   58010.439   ops/s
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate                               thrpt    5       851.342 ±      31.565  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                          thrpt    5       856.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                      thrpt    5         0.104 ±       0.150  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                 thrpt    5         0.105 ±       0.151    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                  thrpt    5       853.278 ±     691.750  MB/sec
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm             thrpt    5       858.486 ±     706.734    B/op
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.count                                    thrpt    5        13.000                counts
[info] MutableIterablesBenchmark.writeJacksonScala:·gc.time                                     thrpt    5        16.000                    ms
[info] MutableIterablesBenchmark.writeJsoniterScala                                             thrpt    5   4824552.338 ±   87593.377   ops/s
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate                              thrpt    5       367.759 ±       6.723  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                         thrpt    5       120.000 ±       0.001    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.762 ±       6.422  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.249 ±       2.095    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                 thrpt    5       363.592 ±     642.060  MB/sec
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       118.669 ±     209.656    B/op
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.count                                   thrpt    5         6.000                counts
[info] MutableIterablesBenchmark.writeJsoniterScala:·gc.time                                    thrpt    5        11.000                    ms
[info] MutableIterablesBenchmark.writePlayJson                                                  thrpt    5    510250.969 ±    8591.395   ops/s
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate                                   thrpt    5      1734.596 ±      29.512  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.alloc.rate.norm                              thrpt    5      5352.001 ±       0.001    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                          thrpt    5         0.075 ±       0.122  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.231 ±       0.372    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                      thrpt    5      1741.628 ±     560.684  MB/sec
[info] MutableIterablesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                 thrpt    5      5372.590 ±    1654.788    B/op
[info] MutableIterablesBenchmark.writePlayJson:·gc.count                                        thrpt    5        26.000                counts
[info] MutableIterablesBenchmark.writePlayJson:·gc.time                                         thrpt    5        30.000                    ms
[info] MutableMapsBenchmark.readJsoniterScala                                                   thrpt    5   3476202.235 ±  122927.472   ops/s
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate                                    thrpt    5      1642.798 ±      57.956  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       744.000 ±       0.001    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±       0.104  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.036 ±       0.047    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5      1667.891 ±      62.730  MB/sec
[info] MutableMapsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       755.447 ±      49.272    B/op
[info] MutableMapsBenchmark.readJsoniterScala:·gc.count                                         thrpt    5        25.000                counts
[info] MutableMapsBenchmark.readJsoniterScala:·gc.time                                          thrpt    5        22.000                    ms
[info] MutableMapsBenchmark.readPlayJson                                                        thrpt    5    321709.429 ±   12523.981   ops/s
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate                                         thrpt    5      1756.029 ±      67.593  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.alloc.rate.norm                                    thrpt    5      8592.001 ±       0.001    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.117 ±       0.201  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.570 ±       0.990    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      1810.095 ±     697.442  MB/sec
[info] MutableMapsBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      8859.447 ±    3533.508    B/op
[info] MutableMapsBenchmark.readPlayJson:·gc.count                                              thrpt    5        27.000                counts
[info] MutableMapsBenchmark.readPlayJson:·gc.time                                               thrpt    5        32.000                    ms
[info] MutableMapsBenchmark.writeCirce                                                          thrpt    5    471889.952 ±   13564.500   ops/s
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate                                           thrpt    5      1194.190 ±      34.443  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.alloc.rate.norm                                      thrpt    5      3984.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                  thrpt    5         0.071 ±       0.072  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                             thrpt    5         0.236 ±       0.237    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                              thrpt    5      1183.198 ±     671.544  MB/sec
[info] MutableMapsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                         thrpt    5      3949.034 ±    2289.550    B/op
[info] MutableMapsBenchmark.writeCirce:·gc.count                                                thrpt    5        18.000                counts
[info] MutableMapsBenchmark.writeCirce:·gc.time                                                 thrpt    5        16.000                    ms
[info] MutableMapsBenchmark.writeJsoniterScala                                                  thrpt    5   2890686.509 ±   79891.834   ops/s
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate                                   thrpt    5       587.563 ±      16.232  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                              thrpt    5       320.000 ±       0.001    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                          thrpt    5         0.792 ±       6.415  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                     thrpt    5         0.433 ±       3.508    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                      thrpt    5       587.062 ±     562.795  MB/sec
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                 thrpt    5       319.366 ±     301.778    B/op
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.count                                        thrpt    5         9.000                counts
[info] MutableMapsBenchmark.writeJsoniterScala:·gc.time                                         thrpt    5        10.000                    ms
[info] MutableMapsBenchmark.writePlayJson                                                       thrpt    5    347604.738 ±    2242.868   ops/s
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate                                        thrpt    5      1317.763 ±       7.932  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.alloc.rate.norm                                   thrpt    5      5968.001 ±       0.001    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                               thrpt    5         0.075 ±       0.166  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                          thrpt    5         0.339 ±       0.754    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                           thrpt    5      1329.963 ±      51.915  MB/sec
[info] MutableMapsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                      thrpt    5      6023.299 ±     252.905    B/op
[info] MutableMapsBenchmark.writePlayJson:·gc.count                                             thrpt    5        20.000                counts
[info] MutableMapsBenchmark.writePlayJson:·gc.time                                              thrpt    5        25.000                    ms
[info] PrimitivesBenchmark.readCirce                                                            thrpt    5    689645.205 ±   16769.174   ops/s
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      2109.923 ±      49.935  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5      4816.001 ±       0.001    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.117 ±       0.185  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5         0.266 ±       0.421    B/op
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      2075.902 ±     590.978  MB/sec
[info] PrimitivesBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5      4737.836 ±    1306.092    B/op
[info] PrimitivesBenchmark.readCirce:·gc.count                                                  thrpt    5        31.000                counts
[info] PrimitivesBenchmark.readCirce:·gc.time                                                   thrpt    5        28.000                    ms
[info] PrimitivesBenchmark.readJacksonScala                                                     thrpt    5   1570528.487 ±   20876.996   ops/s
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5      1189.225 ±      15.910  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5      1192.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.067 ±       0.132  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5         0.067 ±       0.132    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5      1193.832 ±     699.845  MB/sec
[info] PrimitivesBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5      1196.737 ±     704.846    B/op
[info] PrimitivesBenchmark.readJacksonScala:·gc.count                                           thrpt    5        18.000                counts
[info] PrimitivesBenchmark.readJacksonScala:·gc.time                                            thrpt    5        22.000                    ms
[info] PrimitivesBenchmark.readJsoniterScala                                                    thrpt    5   6829701.358 ±   98907.189   ops/s
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       208.236 ±       2.990  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5        48.000 ±       0.001    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.012 ±       0.078  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.003 ±       0.018    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       204.578 ±     440.369  MB/sec
[info] PrimitivesBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5        47.216 ±     101.638    B/op
[info] PrimitivesBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         4.000                counts
[info] PrimitivesBenchmark.readJsoniterScala:·gc.time                                           thrpt    5         9.000                    ms
[info] PrimitivesBenchmark.readPlayJson                                                         thrpt    5    239407.996 ±    3443.151   ops/s
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1666.970 ±      23.105  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5     10960.002 ±       0.001    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.087 ±       0.104  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5         0.575 ±       0.688    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1672.512 ±      65.070  MB/sec
[info] PrimitivesBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5     10996.480 ±     421.746    B/op
[info] PrimitivesBenchmark.readPlayJson:·gc.count                                               thrpt    5        25.000                counts
[info] PrimitivesBenchmark.readPlayJson:·gc.time                                                thrpt    5        30.000                    ms
[info] PrimitivesBenchmark.writeCirce                                                           thrpt    5    930171.065 ±   14762.690   ops/s
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate                                            thrpt    5      1498.829 ±      21.883  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.alloc.rate.norm                                       thrpt    5      2536.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space                                   thrpt    5         0.091 ±       0.201  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                              thrpt    5         0.155 ±       0.340    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                               thrpt    5      1521.868 ±     662.980  MB/sec
[info] PrimitivesBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                          thrpt    5      2574.643 ±    1107.203    B/op
[info] PrimitivesBenchmark.writeCirce:·gc.count                                                 thrpt    5        23.000                counts
[info] PrimitivesBenchmark.writeCirce:·gc.time                                                  thrpt    5        23.000                    ms
[info] PrimitivesBenchmark.writeJacksonScala                                                    thrpt    5   2527971.565 ±  122057.446   ops/s
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5      1040.661 ±      49.825  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5       648.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.075 ±       0.146  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.047 ±       0.093    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5      1057.368 ±     571.998  MB/sec
[info] PrimitivesBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5       657.917 ±     334.319    B/op
[info] PrimitivesBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        16.000                counts
[info] PrimitivesBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        18.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScala                                                   thrpt    5   5969591.876 ±  672727.958   ops/s
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       667.418 ±      75.073  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5       176.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.787 ±       6.414  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.215 ±       1.754    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       718.498 ±     556.839  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       189.382 ±     141.556    B/op
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5        11.000                counts
[info] PrimitivesBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        12.000                    ms
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5   6104900.762 ±  106077.230   ops/s
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5       372.310 ±       6.394  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5        96.000 ±       0.001    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space                   thrpt    5         0.761 ±       6.423  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.197 ±       1.659    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space               thrpt    5       364.027 ±     639.736  MB/sec
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.churn.PS_Survivor_Space.norm          thrpt    5        93.983 ±     166.911    B/op
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5         6.000                counts
[info] PrimitivesBenchmark.writeJsoniterScalaPrealloc:·gc.time                                  thrpt    5        11.000                    ms
[info] PrimitivesBenchmark.writePlayJson                                                        thrpt    5    350478.591 ±    8608.292   ops/s
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate                                         thrpt    5      1950.317 ±      47.166  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.alloc.rate.norm                                    thrpt    5      8760.001 ±       0.001    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                                thrpt    5         0.083 ±       0.098  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                           thrpt    5         0.374 ±       0.433    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                            thrpt    5      2013.246 ±      76.847  MB/sec
[info] PrimitivesBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm                       thrpt    5      9043.222 ±     513.186    B/op
[info] PrimitivesBenchmark.writePlayJson:·gc.count                                              thrpt    5        30.000                counts
[info] PrimitivesBenchmark.writePlayJson:·gc.time                                               thrpt    5        35.000                    ms
[info] StringOfAsciiCharsBenchmark.readCirce                                                    thrpt    5   4400281.243 ±   54914.424   ops/s
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                     thrpt    5      3242.128 ±      41.155  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                                thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                            thrpt    5         0.125 ±       0.150  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                       thrpt    5         0.045 ±       0.053    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                        thrpt    5      3250.945 ±     678.495  MB/sec
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                   thrpt    5      1163.216 ±     247.603    B/op
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.count                                          thrpt    5        48.000                counts
[info] StringOfAsciiCharsBenchmark.readCirce:·gc.time                                           thrpt    5        43.000                    ms
[info] StringOfAsciiCharsBenchmark.readJacksonScala                                             thrpt    5   4266722.377 ±  115110.950   ops/s
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                              thrpt    5      2211.543 ±      59.073  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                         thrpt    5       816.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                     thrpt    5         0.100 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.037 ±       0.039    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                 thrpt    5      2221.417 ±     706.092  MB/sec
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm            thrpt    5       819.973 ±     277.838    B/op
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.count                                   thrpt    5        33.000                counts
[info] StringOfAsciiCharsBenchmark.readJacksonScala:·gc.time                                    thrpt    5        40.000                    ms
[info] StringOfAsciiCharsBenchmark.readJsoniterScala                                            thrpt    5   6640890.261 ±  119052.551   ops/s
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                             thrpt    5       708.656 ±      12.709  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                        thrpt    5       168.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.083 ±       0.113  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.020 ±       0.027    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                thrpt    5       725.700 ±     566.589  MB/sec
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       171.952 ±     131.576    B/op
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.count                                  thrpt    5        11.000                counts
[info] StringOfAsciiCharsBenchmark.readJsoniterScala:·gc.time                                   thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeCirce                                                   thrpt    5   2778235.771 ±   23210.311   ops/s
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                    thrpt    5      1157.756 ±       9.889  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                               thrpt    5       656.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                           thrpt    5         0.079 ±       0.105  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                      thrpt    5         0.045 ±       0.059    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                       thrpt    5      1184.471 ±     695.488  MB/sec
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm                  thrpt    5       671.210 ±     396.274    B/op
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.count                                         thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.writeCirce:·gc.time                                          thrpt    5        17.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJacksonScala                                            thrpt    5   2013510.994 ±   12632.254   ops/s
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                             thrpt    5       624.123 ±       3.803  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                        thrpt    5       488.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                    thrpt    5         0.037 ±       0.164  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm               thrpt    5         0.029 ±       0.129    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                thrpt    5       585.081 ±     568.767  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm           thrpt    5       457.549 ±     445.651    B/op
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.count                                  thrpt    5         9.000                counts
[info] StringOfAsciiCharsBenchmark.writeJacksonScala:·gc.time                                   thrpt    5        10.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala                                           thrpt    5   8878700.712 ±  246219.797   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                            thrpt    5       857.232 ±      23.689  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                       thrpt    5       152.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                   thrpt    5         0.100 ±       0.132  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm              thrpt    5         0.018 ±       0.023    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space               thrpt    5       850.708 ±     685.964  MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm          thrpt    5       150.829 ±     121.298    B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.count                                 thrpt    5        13.000                counts
[info] StringOfAsciiCharsBenchmark.writeJsoniterScala:·gc.time                                  thrpt    5        12.000                    ms
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                   thrpt    5   7993703.702 ±  267620.940   ops/s
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                    thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm               thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                         thrpt    5           ≈ 0                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson                                                thrpt    5   3523043.116 ±   64469.699   ops/s
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                                 thrpt    5      1127.918 ±      20.498  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                            thrpt    5       504.000 ±       0.001    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                        thrpt    5         0.062 ±       0.127  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.028 ±       0.057    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                    thrpt    5      1182.193 ±     695.252  MB/sec
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm               thrpt    5       528.540 ±     318.938    B/op
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.count                                      thrpt    5        18.000                counts
[info] StringOfAsciiCharsBenchmark.writePlayJson:·gc.time                                       thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readCirce                                                 thrpt    5   1613134.372 ±   33204.183   ops/s
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate                                  thrpt    5      2696.875 ±      55.401  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.alloc.rate.norm                             thrpt    5      2632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space                         thrpt    5         0.087 ±       0.119  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                    thrpt    5         0.085 ±       0.116    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space                     thrpt    5      2700.077 ±      81.490  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                thrpt    5      2635.260 ±     128.521    B/op
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.count                                       thrpt    5        40.000                counts
[info] StringOfNonAsciiCharsBenchmark.readCirce:·gc.time                                        thrpt    5        38.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala                                          thrpt    5   1091604.268 ±   45916.777   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate                           thrpt    5       804.386 ±      33.733  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.alloc.rate.norm                      thrpt    5      1160.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                  thrpt    5         0.067 ±       0.036  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm             thrpt    5         0.096 ±       0.052    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space              thrpt    5       784.818 ±     691.126  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm         thrpt    5      1132.898 ±    1020.875    B/op
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.count                                thrpt    5        12.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJacksonScala:·gc.time                                 thrpt    5        14.000                    ms
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala                                         thrpt    5   1847791.598 ±   29201.260   ops/s
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate                          thrpt    5       516.461 ±       7.989  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.alloc.rate.norm                     thrpt    5       440.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.659 ±       5.363  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.558 ±       4.538    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space             thrpt    5       462.294 ±     695.991  MB/sec
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       393.945 ±     594.225    B/op
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.count                               thrpt    5         7.000                counts
[info] StringOfNonAsciiCharsBenchmark.readJsoniterScala:·gc.time                                thrpt    5         8.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeCirce                                                thrpt    5   1674405.196 ±   31920.450   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate                                 thrpt    5      1361.451 ±      25.806  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.alloc.rate.norm                            thrpt    5      1280.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space                        thrpt    5         0.075 ±       0.216  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Eden_Space.norm                   thrpt    5         0.071 ±       0.204    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space                    thrpt    5      1388.782 ±     613.855  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.churn.PS_Survivor_Space.norm               thrpt    5      1305.639 ±     573.420    B/op
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.count                                      thrpt    5        21.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeCirce:·gc.time                                       thrpt    5        19.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala                                         thrpt    5   2487468.878 ±   71578.209   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate                          thrpt    5       998.578 ±      28.917  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.alloc.rate.norm                     thrpt    5       632.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                 thrpt    5         0.062 ±       0.080  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm            thrpt    5         0.040 ±       0.051    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space             thrpt    5       986.269 ±      39.967  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm        thrpt    5       624.213 ±      19.569    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.count                               thrpt    5        15.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJacksonScala:·gc.time                                thrpt    5        17.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala                                        thrpt    5   2910649.690 ±   41779.992   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate                         thrpt    5       680.379 ±       9.643  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                    thrpt    5       368.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                thrpt    5         0.062 ±       0.196  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm           thrpt    5         0.034 ±       0.106    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space            thrpt    5       653.067 ±       4.540  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm       thrpt    5       353.232 ±       6.119    B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.count                              thrpt    5        10.000                counts
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScala:·gc.time                               thrpt    5         9.000                    ms
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc                                thrpt    5   2849221.014 ±   13765.945   ops/s
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                 thrpt    5        ≈ 10⁻⁴                MB/sec
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm            thrpt    5        ≈ 10⁻⁴                  B/op
[info] StringOfNonAsciiCharsBenchmark.writeJsoniterScalaPrealloc:·gc.count                      thrpt    5           ≈ 0                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson                                             thrpt    5   2468793.226 ±   12203.734   ops/s
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate                              thrpt    5      1129.154 ±       5.912  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.alloc.rate.norm                         thrpt    5       720.000 ±       0.001    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space                     thrpt    5         0.071 ±       0.091  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Eden_Space.norm                thrpt    5         0.045 ±       0.058    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space                 thrpt    5      1182.117 ±     694.853  MB/sec
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.churn.PS_Survivor_Space.norm            thrpt    5       753.821 ±     444.494    B/op
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.count                                   thrpt    5        18.000                counts
[info] StringOfNonAsciiCharsBenchmark.writePlayJson:·gc.time                                    thrpt    5        17.000                    ms
[info] TwitterAPIBenchmark.readCirce                                                            thrpt    5     12017.077 ±    2731.265   ops/s
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate                                             thrpt    5      1758.996 ±     389.269  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.alloc.rate.norm                                        thrpt    5    230423.435 ±    1240.798    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space                                    thrpt    5         0.130 ±       0.220  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Eden_Space.norm                               thrpt    5        16.732 ±      26.810    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space                                thrpt    5      1791.610 ±     754.083  MB/sec
[info] TwitterAPIBenchmark.readCirce:·gc.churn.PS_Survivor_Space.norm                           thrpt    5    234480.172 ±   69816.307    B/op
[info] TwitterAPIBenchmark.readCirce:·gc.count                                                  thrpt    5        27.000                counts
[info] TwitterAPIBenchmark.readCirce:·gc.time                                                   thrpt    5        42.000                    ms
[info] TwitterAPIBenchmark.readJacksonScala                                                     thrpt    5     15409.873 ±     273.289   ops/s
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate                                      thrpt    5       217.652 ±       4.003  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.alloc.rate.norm                                 thrpt    5     22233.959 ±      27.943    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space                             thrpt    5         0.166 ±       1.346  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Eden_Space.norm                        thrpt    5        17.078 ±     138.135    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space                         thrpt    5       217.767 ±     481.484  MB/sec
[info] TwitterAPIBenchmark.readJacksonScala:·gc.churn.PS_Survivor_Space.norm                    thrpt    5     22231.768 ±   49245.183    B/op
[info] TwitterAPIBenchmark.readJacksonScala:·gc.count                                           thrpt    5         4.000                counts
[info] TwitterAPIBenchmark.readJacksonScala:·gc.time                                            thrpt    5         7.000                    ms
[info] TwitterAPIBenchmark.readJsoniterScala                                                    thrpt    5     37974.851 ±    1388.630   ops/s
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate                                     thrpt    5       347.814 ±      12.992  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.alloc.rate.norm                                thrpt    5     14416.015 ±       0.036    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.690 ±       5.745  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5        28.254 ±     235.194    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space                        thrpt    5       350.359 ±     671.916  MB/sec
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     14486.794 ±   27250.829    B/op
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.count                                          thrpt    5         6.000                counts
[info] TwitterAPIBenchmark.readJsoniterScala:·gc.time                                           thrpt    5        13.000                    ms
[info] TwitterAPIBenchmark.readPlayJson                                                         thrpt    5      3510.654 ±     648.778   ops/s
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate                                          thrpt    5      1126.282 ±     207.663  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.alloc.rate.norm                                     thrpt    5    505053.372 ±     183.002    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space                                 thrpt    5         0.067 ±       0.119  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Eden_Space.norm                            thrpt    5        29.448 ±      50.702    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space                             thrpt    5      1121.900 ±     722.889  MB/sec
[info] TwitterAPIBenchmark.readPlayJson:·gc.churn.PS_Survivor_Space.norm                        thrpt    5    502653.761 ±  292973.385    B/op
[info] TwitterAPIBenchmark.readPlayJson:·gc.count                                               thrpt    5        17.000                counts
[info] TwitterAPIBenchmark.readPlayJson:·gc.time                                                thrpt    5        25.000                    ms
[info] TwitterAPIBenchmark.writeJacksonScala                                                    thrpt    5     57064.535 ±    1137.540   ops/s
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate                                     thrpt    5       728.615 ±      14.489  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.alloc.rate.norm                                thrpt    5     20100.005 ±       0.139    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space                            thrpt    5         0.037 ±       0.143  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Eden_Space.norm                       thrpt    5         1.033 ±       3.954    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space                        thrpt    5       717.531 ±     554.014  MB/sec
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.churn.PS_Survivor_Space.norm                   thrpt    5     19790.966 ±   15170.408    B/op
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.count                                          thrpt    5        11.000                counts
[info] TwitterAPIBenchmark.writeJacksonScala:·gc.time                                           thrpt    5        14.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScala                                                   thrpt    5     84650.389 ±    2863.887   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate                                    thrpt    5       553.206 ±      18.657  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.alloc.rate.norm                               thrpt    5     10288.005 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space                           thrpt    5         0.803 ±       6.469  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Eden_Space.norm                      thrpt    5        14.881 ±     119.852    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space                       thrpt    5       521.274 ±     685.965  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.churn.PS_Survivor_Space.norm                  thrpt    5      9680.514 ±   12583.647    B/op
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.count                                         thrpt    5         8.000                counts
[info] TwitterAPIBenchmark.writeJsoniterScala:·gc.time                                          thrpt    5        10.000                    ms
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc                                           thrpt    5     95304.653 ±    5286.225   ops/s
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate                            thrpt    5        13.561 ±       0.749  MB/sec
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.alloc.rate.norm                       thrpt    5       224.004 ±       0.001    B/op
[info] TwitterAPIBenchmark.writeJsoniterScalaPrealloc:·gc.count                                 thrpt    5           ≈ 0                counts
[info] Benchmark result is saved to jdk9.json
[success] Total time: 3936 s, completed Feb 28, 2018, 10:53:45 PM
